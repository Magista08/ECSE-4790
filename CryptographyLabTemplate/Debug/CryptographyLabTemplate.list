
CryptographyLabTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015260  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009dc0  08015460  08015460  00025460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f220  0801f220  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801f220  0801f220  0002f220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f228  0801f228  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f228  0801f228  0002f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f22c  0801f22c  0002f22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801f230  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000297c  20000090  0801f2c0  00030090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  0801f2c0  00032a0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287ae  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049c4  00000000  00000000  0005886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0005d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  0005e878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032df2  00000000  00000000  0005fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d188  00000000  00000000  00092b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125633  00000000  00000000  000afd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006638  00000000  00000000  001d5398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  001db9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	08015448 	.word	0x08015448

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	08015448 	.word	0x08015448

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
}
 80005f6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <SCB_EnableICache+0x48>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
}
 8000604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000606:	f3bf 8f6f 	isb	sy
}
 800060a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SCB_EnableICache+0x48>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <SCB_EnableICache+0x48>)
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000618:	f3bf 8f4f 	dsb	sy
}
 800061c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061e:	f3bf 8f6f 	isb	sy
}
 8000622:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SCB_EnableDCache+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000642:	f3bf 8f4f 	dsb	sy
}
 8000646:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <SCB_EnableDCache+0x84>)
 800064a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0b5b      	lsrs	r3, r3, #13
 8000654:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000658:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	08db      	lsrs	r3, r3, #3
 800065e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000662:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	015a      	lsls	r2, r3, #5
 8000668:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800066c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000672:	4911      	ldr	r1, [pc, #68]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000674:	4313      	orrs	r3, r2
 8000676:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1ef      	bne.n	8000664 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	60fa      	str	r2, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1e5      	bne.n	800065a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <SCB_EnableDCache+0x84>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SCB_EnableDCache+0x84>)
 800069a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a0:	f3bf 8f4f 	dsb	sy
}
 80006a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a6:	f3bf 8f6f 	isb	sy
}
 80006aa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006dc:	2319      	movs	r3, #25
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006e0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ea:	2309      	movs	r3, #9
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006ee:	2307      	movs	r3, #7
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f94d 	bl	8001994 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000700:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000704:	2b00      	cmp	r3, #0
 8000706:	d000      	beq.n	800070a <SystemClock_Config+0x4e>
    while(1) { ; }
 8000708:	e7fe      	b.n	8000708 <SystemClock_Config+0x4c>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800070a:	f001 f8f3 	bl	80018f4 <HAL_PWREx_EnableOverDrive>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000718:	2b00      	cmp	r3, #0
 800071a:	d000      	beq.n	800071e <SystemClock_Config+0x62>
    while(1) { ; }
 800071c:	e7fe      	b.n	800071c <SystemClock_Config+0x60>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800071e:	230f      	movs	r3, #15
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073a:	2107      	movs	r1, #7
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fbd7 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if(ret != HAL_OK) {
 8000748:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800074c:	2b00      	cmp	r3, #0
 800074e:	d000      	beq.n	8000752 <SystemClock_Config+0x96>
    while(1) { ; }
 8000750:	e7fe      	b.n	8000750 <SystemClock_Config+0x94>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 800075e:	f7ff ff43 	bl	80005e8 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000762:	f7ff ff67 	bl	8000634 <SCB_EnableDCache>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000770:	f7ff fff3 	bl	800075a <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000774:	f000 fdab 	bl	80012ce <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000778:	f7ff ffa0 	bl	80006bc <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <Sys_Init+0x20>)
 800077e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <Sys_Init+0x24>)
 8000784:	f000 fce2 	bl	800114c <initUart>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40011000 	.word	0x40011000
 8000790:	20002974 	.word	0x20002974

08000794 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000798:	f000 fdd6 	bl	8001348 <HAL_IncTick>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <main>:
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	f7ff ffe1 	bl	800076c <Sys_Init>
 80007aa:	f000 f82d 	bl	8000808 <MX_RNG_Init>
 80007ae:	f002 fb68 	bl	8002e82 <MX_MBEDTLS_Init>
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f000 fde7 	bl	8001388 <HAL_Delay>
 80007ba:	f000 f83d 	bl	8000838 <flush_screen>
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <main+0x60>)
 80007c0:	f014 f860 	bl	8014884 <puts>
 80007c4:	f013 fec6 	bl	8014554 <getchar>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b31      	cmp	r3, #49	; 0x31
 80007d0:	d102      	bne.n	80007d8 <main+0x38>
 80007d2:	f000 f847 	bl	8000864 <task1>
 80007d6:	e007      	b.n	80007e8 <main+0x48>
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b32      	cmp	r3, #50	; 0x32
 80007dc:	d102      	bne.n	80007e4 <main+0x44>
 80007de:	f000 f98b 	bl	8000af8 <task2>
 80007e2:	e001      	b.n	80007e8 <main+0x48>
 80007e4:	f000 fad4 	bl	8000d90 <task3>
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <main+0x64>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <main+0x54>
 80007f0:	2301      	movs	r3, #1
 80007f2:	e000      	b.n	80007f6 <main+0x56>
 80007f4:	2300      	movs	r3, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	08015460 	.word	0x08015460
 8000804:	200000ac 	.word	0x200000ac

08000808 <MX_RNG_Init>:
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_RNG_Init+0x24>)
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_RNG_Init+0x28>)
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_RNG_Init+0x24>)
 8000814:	f001 fd42 	bl	800229c <HAL_RNG_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <MX_RNG_Init+0x1e>
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_RNG_Init+0x2c>)
 8000820:	f014 f830 	bl	8014884 <puts>
 8000824:	e7fe      	b.n	8000824 <MX_RNG_Init+0x1c>
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200028d4 	.word	0x200028d4
 8000830:	50060800 	.word	0x50060800
 8000834:	080154c0 	.word	0x080154c0

08000838 <flush_screen>:
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <flush_screen+0x20>)
 800083e:	f013 ff9b 	bl	8014778 <iprintf>
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <flush_screen+0x24>)
 8000844:	f013 ff98 	bl	8014778 <iprintf>
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <flush_screen+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f013 fd5c 	bl	801430c <fflush>
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080154dc 	.word	0x080154dc
 800085c:	080154e8 	.word	0x080154e8
 8000860:	2000002c 	.word	0x2000002c

08000864 <task1>:
 8000864:	b580      	push	{r7, lr}
 8000866:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800086a:	af04      	add	r7, sp, #16
 800086c:	4898      	ldr	r0, [pc, #608]	; (8000ad0 <task1+0x26c>)
 800086e:	f002 fd31 	bl	80032d4 <mbedtls_aes_init>
 8000872:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	3304      	adds	r3, #4
 800087c:	22fc      	movs	r2, #252	; 0xfc
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f013 feb7 	bl	80145f4 <memset>
 8000886:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	3304      	adds	r3, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	3304      	adds	r3, #4
 80008b4:	2260      	movs	r2, #96	; 0x60
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f013 fe9b 	bl	80145f4 <memset>
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	3304      	adds	r3, #4
 80008c8:	2260      	movs	r2, #96	; 0x60
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f013 fe91 	bl	80145f4 <memset>
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80008e8:	f7ff ffa6 	bl	8000838 <flush_screen>
 80008ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f013 fe7c 	bl	80145f4 <memset>
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000908:	e038      	b.n	800097c <task1+0x118>
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4871      	ldr	r0, [pc, #452]	; (8000ad4 <task1+0x270>)
 8000910:	f001 fcee 	bl	80022f0 <HAL_RNG_GenerateRandomNumber>
 8000914:	2308      	movs	r3, #8
 8000916:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800091a:	e026      	b.n	800096a <task1+0x106>
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000928:	40d9      	lsrs	r1, r3
 800092a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	1ad2      	subs	r2, r2, r3
 8000934:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000938:	3b08      	subs	r3, #8
 800093a:	fa22 f303 	lsr.w	r3, r2, r3
 800093e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8000942:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000946:	b2d9      	uxtb	r1, r3
 8000948:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800094c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000950:	4413      	add	r3, r2
 8000952:	460a      	mov	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800095a:	3301      	adds	r3, #1
 800095c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000960:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000964:	3308      	adds	r3, #8
 8000966:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800096a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800096e:	2b20      	cmp	r3, #32
 8000970:	ddd4      	ble.n	800091c <task1+0xb8>
 8000972:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000976:	3301      	adds	r3, #1
 8000978:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800097c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000980:	2b3f      	cmp	r3, #63	; 0x3f
 8000982:	ddc2      	ble.n	800090a <task1+0xa6>
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800098a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800098e:	220a      	movs	r2, #10
 8000990:	4619      	mov	r1, r3
 8000992:	4851      	ldr	r0, [pc, #324]	; (8000ad8 <task1+0x274>)
 8000994:	f000 fc4a 	bl	800122c <uart_getline>
 8000998:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800099c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a0:	4619      	mov	r1, r3
 80009a2:	484b      	ldr	r0, [pc, #300]	; (8000ad0 <task1+0x26c>)
 80009a4:	f002 fcde 	bl	8003364 <mbedtls_aes_setkey_enc>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d006      	beq.n	80009bc <task1+0x158>
 80009ae:	484b      	ldr	r0, [pc, #300]	; (8000adc <task1+0x278>)
 80009b0:	f013 ff68 	bl	8014884 <puts>
 80009b4:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <task1+0x27c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e084      	b.n	8000ac6 <task1+0x262>
 80009bc:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 80009c0:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 80009c4:	f107 0208 	add.w	r2, r7, #8
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4603      	mov	r3, r0
 80009dc:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <task1+0x26c>)
 80009de:	f004 fb8d 	bl	80050fc <mbedtls_aes_crypt_ctr>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <task1+0x192>
 80009e8:	483e      	ldr	r0, [pc, #248]	; (8000ae4 <task1+0x280>)
 80009ea:	f013 ff4b 	bl	8014884 <puts>
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <task1+0x27c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	e067      	b.n	8000ac6 <task1+0x262>
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	483a      	ldr	r0, [pc, #232]	; (8000ae8 <task1+0x284>)
 80009fe:	f013 febb 	bl	8014778 <iprintf>
 8000a02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f013 fdf2 	bl	80145f4 <memset>
 8000a10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a14:	2210      	movs	r2, #16
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f013 fdeb 	bl	80145f4 <memset>
 8000a1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a22:	2210      	movs	r2, #16
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f013 fde4 	bl	80145f4 <memset>
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8000a38:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8000a3c:	f107 0208 	add.w	r2, r7, #8
 8000a40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a44:	9302      	str	r3, [sp, #8]
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4603      	mov	r3, r0
 8000a54:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <task1+0x26c>)
 8000a56:	f004 fb51 	bl	80050fc <mbedtls_aes_crypt_ctr>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <task1+0x20a>
 8000a60:	4822      	ldr	r0, [pc, #136]	; (8000aec <task1+0x288>)
 8000a62:	f013 ff0f 	bl	8014884 <puts>
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <task1+0x27c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e02b      	b.n	8000ac6 <task1+0x262>
 8000a6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a72:	4619      	mov	r1, r3
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <task1+0x28c>)
 8000a76:	f013 fe7f 	bl	8014778 <iprintf>
 8000a7a:	481e      	ldr	r0, [pc, #120]	; (8000af4 <task1+0x290>)
 8000a7c:	f013 ff02 	bl	8014884 <puts>
 8000a80:	f013 fd68 	bl	8014554 <getchar>
 8000a84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f013 fdb1 	bl	80145f4 <memset>
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2264      	movs	r2, #100	; 0x64
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f013 fdaa 	bl	80145f4 <memset>
 8000aa0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f013 fda3 	bl	80145f4 <memset>
 8000aae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f013 fd9c 	bl	80145f4 <memset>
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e710      	b.n	80008e8 <task1+0x84>
 8000ac6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200023fc 	.word	0x200023fc
 8000ad4:	200028d4 	.word	0x200028d4
 8000ad8:	20002974 	.word	0x20002974
 8000adc:	080154ec 	.word	0x080154ec
 8000ae0:	200000ac 	.word	0x200000ac
 8000ae4:	08015504 	.word	0x08015504
 8000ae8:	08015524 	.word	0x08015524
 8000aec:	08015548 	.word	0x08015548
 8000af0:	08015568 	.word	0x08015568
 8000af4:	08015588 	.word	0x08015588

08000af8 <task2>:
 8000af8:	b5b0      	push	{r4, r5, r7, lr}
 8000afa:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8000b06:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8000b0a:	227c      	movs	r2, #124	; 0x7c
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f013 fd70 	bl	80145f4 <memset>
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8000b1a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000b1e:	2260      	movs	r2, #96	; 0x60
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f013 fd66 	bl	80145f4 <memset>
 8000b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2260      	movs	r2, #96	; 0x60
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f013 fd5c 	bl	80145f4 <memset>
 8000b3c:	f107 0508 	add.w	r5, r7, #8
 8000b40:	4b88      	ldr	r3, [pc, #544]	; (8000d64 <task2+0x26c>)
 8000b42:	462c      	mov	r4, r5
 8000b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b46:	c407      	stmia	r4!, {r0, r1, r2}
 8000b48:	8023      	strh	r3, [r4, #0]
 8000b4a:	3402      	adds	r4, #2
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	7023      	strb	r3, [r4, #0]
 8000b50:	f105 030f 	add.w	r3, r5, #15
 8000b54:	f240 12f1 	movw	r2, #497	; 0x1f1
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f013 fd4a 	bl	80145f4 <memset>
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	f7ff fe67 	bl	8000838 <flush_screen>
 8000b6a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f013 fd3e 	bl	80145f4 <memset>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8000b84:	e038      	b.n	8000bf8 <task2+0x100>
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4877      	ldr	r0, [pc, #476]	; (8000d68 <task2+0x270>)
 8000b8c:	f001 fbb0 	bl	80022f0 <HAL_RNG_GenerateRandomNumber>
 8000b90:	2308      	movs	r3, #8
 8000b92:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000b96:	e026      	b.n	8000be6 <task2+0xee>
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ba4:	40d9      	lsrs	r1, r3
 8000ba6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	1ad2      	subs	r2, r2, r3
 8000bb0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000bb4:	3b08      	subs	r3, #8
 8000bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bba:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000bbe:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000bc2:	b2d9      	uxtb	r1, r3
 8000bc4:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8000bc8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000bcc:	4413      	add	r3, r2
 8000bce:	460a      	mov	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8000bdc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000be0:	3308      	adds	r3, #8
 8000be2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000be6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	ddd4      	ble.n	8000b98 <task2+0xa0>
 8000bee:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8000bf8:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	ddc2      	ble.n	8000b86 <task2+0x8e>
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8000c06:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000c0a:	220a      	movs	r2, #10
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4857      	ldr	r0, [pc, #348]	; (8000d6c <task2+0x274>)
 8000c10:	f000 fb0c 	bl	800122c <uart_getline>
 8000c14:	4856      	ldr	r0, [pc, #344]	; (8000d70 <task2+0x278>)
 8000c16:	f011 ffb7 	bl	8012b88 <mbedtls_gcm_init>
 8000c1a:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	2102      	movs	r1, #2
 8000c22:	4853      	ldr	r0, [pc, #332]	; (8000d70 <task2+0x278>)
 8000c24:	f012 f917 	bl	8012e56 <mbedtls_gcm_setkey>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <task2+0x144>
 8000c2e:	4851      	ldr	r0, [pc, #324]	; (8000d74 <task2+0x27c>)
 8000c30:	f013 fe28 	bl	8014884 <puts>
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <task2+0x280>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e08f      	b.n	8000d5c <task2+0x264>
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fafd 	bl	8000240 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f107 0208 	add.w	r2, r7, #8
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4848      	ldr	r0, [pc, #288]	; (8000d70 <task2+0x278>)
 8000c50:	f012 fb22 	bl	8013298 <mbedtls_gcm_starts>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <task2+0x170>
 8000c5a:	4848      	ldr	r0, [pc, #288]	; (8000d7c <task2+0x284>)
 8000c5c:	f013 fe12 	bl	8014884 <puts>
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <task2+0x280>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e079      	b.n	8000d5c <task2+0x264>
 8000c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fae7 	bl	8000240 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c7a:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 8000c7e:	9201      	str	r2, [sp, #4]
 8000c80:	2264      	movs	r2, #100	; 0x64
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	2264      	movs	r2, #100	; 0x64
 8000c86:	483a      	ldr	r0, [pc, #232]	; (8000d70 <task2+0x278>)
 8000c88:	f012 fc83 	bl	8013592 <mbedtls_gcm_update>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <task2+0x1a8>
 8000c92:	483b      	ldr	r0, [pc, #236]	; (8000d80 <task2+0x288>)
 8000c94:	f013 fdf6 	bl	8014884 <puts>
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <task2+0x280>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e05d      	b.n	8000d5c <task2+0x264>
 8000ca0:	4833      	ldr	r0, [pc, #204]	; (8000d70 <task2+0x278>)
 8000ca2:	f012 fd9c 	bl	80137de <mbedtls_gcm_free>
 8000ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000caa:	4619      	mov	r1, r3
 8000cac:	4835      	ldr	r0, [pc, #212]	; (8000d84 <task2+0x28c>)
 8000cae:	f013 fd63 	bl	8014778 <iprintf>
 8000cb2:	482f      	ldr	r0, [pc, #188]	; (8000d70 <task2+0x278>)
 8000cb4:	f011 ff68 	bl	8012b88 <mbedtls_gcm_init>
 8000cb8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <task2+0x278>)
 8000cc2:	f012 f8c8 	bl	8012e56 <mbedtls_gcm_setkey>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <task2+0x1e2>
 8000ccc:	4829      	ldr	r0, [pc, #164]	; (8000d74 <task2+0x27c>)
 8000cce:	f013 fdd9 	bl	8014884 <puts>
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <task2+0x280>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e040      	b.n	8000d5c <task2+0x264>
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff faae 	bl	8000240 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f107 0208 	add.w	r2, r7, #8
 8000cea:	2100      	movs	r1, #0
 8000cec:	4820      	ldr	r0, [pc, #128]	; (8000d70 <task2+0x278>)
 8000cee:	f012 fad3 	bl	8013298 <mbedtls_gcm_starts>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <task2+0x20e>
 8000cf8:	4820      	ldr	r0, [pc, #128]	; (8000d7c <task2+0x284>)
 8000cfa:	f013 fdc3 	bl	8014884 <puts>
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <task2+0x280>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e02a      	b.n	8000d5c <task2+0x264>
 8000d06:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa98 	bl	8000240 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000d18:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8000d1c:	9201      	str	r2, [sp, #4]
 8000d1e:	2264      	movs	r2, #100	; 0x64
 8000d20:	9200      	str	r2, [sp, #0]
 8000d22:	2264      	movs	r2, #100	; 0x64
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <task2+0x278>)
 8000d26:	f012 fc34 	bl	8013592 <mbedtls_gcm_update>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <task2+0x246>
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <task2+0x288>)
 8000d32:	f013 fda7 	bl	8014884 <puts>
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <task2+0x280>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e00e      	b.n	8000d5c <task2+0x264>
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <task2+0x278>)
 8000d40:	f012 fd4d 	bl	80137de <mbedtls_gcm_free>
 8000d44:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <task2+0x290>)
 8000d4c:	f013 fd14 	bl	8014778 <iprintf>
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <task2+0x294>)
 8000d52:	f013 fd97 	bl	8014884 <puts>
 8000d56:	f013 fbfd 	bl	8014554 <getchar>
 8000d5a:	e704      	b.n	8000b66 <task2+0x6e>
 8000d5c:	f507 7758 	add.w	r7, r7, #864	; 0x360
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	080155e4 	.word	0x080155e4
 8000d68:	200028d4 	.word	0x200028d4
 8000d6c:	20002974 	.word	0x20002974
 8000d70:	20002590 	.word	0x20002590
 8000d74:	080154ec 	.word	0x080154ec
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	080155bc 	.word	0x080155bc
 8000d80:	080155d0 	.word	0x080155d0
 8000d84:	08015524 	.word	0x08015524
 8000d88:	08015568 	.word	0x08015568
 8000d8c:	08015588 	.word	0x08015588

08000d90 <task3>:
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <task3+0x98>)
 8000d98:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000d9c:	4823      	ldr	r0, [pc, #140]	; (8000e2c <task3+0x9c>)
 8000d9e:	f000 f9d5 	bl	800114c <initUart>
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	f7ff fd3b 	bl	8000838 <flush_screen>
 8000dc2:	481b      	ldr	r0, [pc, #108]	; (8000e30 <task3+0xa0>)
 8000dc4:	f013 fd5e 	bl	8014884 <puts>
 8000dc8:	481a      	ldr	r0, [pc, #104]	; (8000e34 <task3+0xa4>)
 8000dca:	f00c fd19 	bl	800d800 <mbedtls_ecdh_init>
 8000dce:	2109      	movs	r1, #9
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <task3+0xa4>)
 8000dd2:	f00c fd45 	bl	800d860 <mbedtls_ecdh_setup>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <task3+0x5a>
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <task3+0xa8>)
 8000dde:	f013 fd51 	bl	8014884 <puts>
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <task3+0xac>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	e01a      	b.n	8000e20 <task3+0x90>
 8000dea:	f107 0208 	add.w	r2, r7, #8
 8000dee:	1d39      	adds	r1, r7, #4
 8000df0:	2300      	movs	r3, #0
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <task3+0xb0>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2320      	movs	r3, #32
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <task3+0xa4>)
 8000dfc:	f00c fd86 	bl	800d90c <mbedtls_ecdh_make_public>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <task3+0x84>
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <task3+0xb4>)
 8000e08:	f013 fd3c 	bl	8014884 <puts>
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <task3+0xac>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e005      	b.n	8000e20 <task3+0x90>
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <task3+0xb8>)
 8000e16:	f013 fd35 	bl	8014884 <puts>
 8000e1a:	f013 fb9b 	bl	8014554 <getchar>
 8000e1e:	e7ce      	b.n	8000dbe <task3+0x2e>
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	200028e4 	.word	0x200028e4
 8000e30:	080157e4 	.word	0x080157e4
 8000e34:	2000231c 	.word	0x2000231c
 8000e38:	080157f8 	.word	0x080157f8
 8000e3c:	200000ac 	.word	0x200000ac
 8000e40:	08000e4d 	.word	0x08000e4d
 8000e44:	08015808 	.word	0x08015808
 8000e48:	08015824 	.word	0x08015824

08000e4c <f_rng>:
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	e027      	b.n	8000eb6 <f_rng+0x6a>
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <f_rng+0x7c>)
 8000e6e:	f001 fa3f 	bl	80022f0 <HAL_RNG_GenerateRandomNumber>
 8000e72:	2308      	movs	r3, #8
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e018      	b.n	8000eaa <f_rng+0x5e>
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	6979      	ldr	r1, [r7, #20]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	40d9      	lsrs	r1, r3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	4413      	add	r3, r2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	dde3      	ble.n	8000e78 <f_rng+0x2c>
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	ddd4      	ble.n	8000e66 <f_rng+0x1a>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200028d4 	.word	0x200028d4

08000ecc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_RNG_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_RNG_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_RNG_MspInit+0x3c>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_RNG_MspInit+0x3c>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6353      	str	r3, [r2, #52]	; 0x34
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_RNG_MspInit+0x3c>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	50060800 	.word	0x50060800
 8000f50:	40023800 	.word	0x40023800

08000f54 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_isatty>:

int _isatty(int file)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	return 1;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f013 f8c6 	bl	801417c <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20080000 	.word	0x20080000
 800101c:	00000400 	.word	0x00000400
 8001020:	200000b0 	.word	0x200000b0
 8001024:	20002a10 	.word	0x20002a10

08001028 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a37      	ldr	r2, [pc, #220]	; (8001138 <HAL_UART_MspInit+0xec>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d132      	bne.n	80010c4 <HAL_UART_MspInit+0x78>
		// Enable GPIO Clocks
		__GPIOA_CLK_ENABLE();
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_UART_MspInit+0xf0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <HAL_UART_MspInit+0xf0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <HAL_UART_MspInit+0xf0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

		// Initialize TX Pin
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8001076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001088:	2307      	movs	r3, #7
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	482b      	ldr	r0, [pc, #172]	; (8001140 <HAL_UART_MspInit+0xf4>)
 8001094:	f000 fa82 	bl	800159c <HAL_GPIO_Init>

		// Initialize RX Pin
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4826      	ldr	r0, [pc, #152]	; (8001140 <HAL_UART_MspInit+0xf4>)
 80010a6:	f000 fa79 	bl	800159c <HAL_GPIO_Init>

		// Enable UART Clocking
		__USART1_CLK_ENABLE();
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 80010c2:	e034      	b.n	800112e <HAL_UART_MspInit+0xe2>
	} else if (huart->Instance == USART6) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_UART_MspInit+0xf8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12f      	bne.n	800112e <HAL_UART_MspInit+0xe2>
		__GPIOC_CLK_ENABLE();
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_MspInit+0xf0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010f6:	2308      	movs	r3, #8
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <HAL_UART_MspInit+0xfc>)
 8001102:	f000 fa4b 	bl	800159c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <HAL_UART_MspInit+0xfc>)
 8001112:	f000 fa43 	bl	800159c <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_UART_MspInit+0xf0>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_UART_MspInit+0xf0>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_UART_MspInit+0xf0>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
}
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40011000 	.word	0x40011000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40011400 	.word	0x40011400
 8001148:	40020800 	.word	0x40020800

0800114c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	Uhand->Instance        = Tgt;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]

	Uhand->Init.BaudRate   = Baud;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	605a      	str	r2, [r3, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	220c      	movs	r2, #12
 800117a:	615a      	str	r2, [r3, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]

	HAL_UART_Init(Uhand);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f001 f903 	bl	800238e <HAL_UART_Init>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <_write+0x28>)
 80011a8:	f001 f93f 	bl	800242a <HAL_UART_Transmit>
	return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20002974 	.word	0x20002974

080011bc <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
 80011ce:	2301      	movs	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <_read+0x30>)
 80011de:	f001 f9b7 	bl	8002550 <HAL_UART_Receive>
	return len;
 80011e2:	687b      	ldr	r3, [r7, #4]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20002974 	.word	0x20002974

080011f0 <uart_getchar>:
    HAL_UART_Transmit(huart, (uint8_t*) string, strlen((const char*)string), 1000);
}

// Get one character
// 'echo' means enable (1) or disable (0) echoing of characters
char uart_getchar(UART_HandleTypeDef *huart, uint8_t echo) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
	char input[1];
	HAL_UART_Receive(huart, (uint8_t *)input, 1, HAL_MAX_DELAY);
 80011fc:	f107 010c 	add.w	r1, r7, #12
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	2201      	movs	r2, #1
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 f9a2 	bl	8002550 <HAL_UART_Receive>
	if (echo) HAL_UART_Transmit(huart, (uint8_t*) input, 1, 1000);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <uart_getchar+0x32>
 8001212:	f107 010c 	add.w	r1, r7, #12
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	2201      	movs	r2, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 f904 	bl	800242a <HAL_UART_Transmit>
	return (char)input[0];
 8001222:	7b3b      	ldrb	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <uart_getline>:

// Collects characters until size limit or an endline is recieved
// Returns number of characters collected
// 'max size' should match the size of the array or be smaller
int uart_getline(UART_HandleTypeDef *huart, char * input, int max_size)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  char single;
  int i = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

	while(1)
	{
		if (i > max_size)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dc14      	bgt.n	800126e <uart_getline+0x42>
      {
				break;
			}

		single = uart_getchar(huart, 1); // Get one character
 8001244:	2101      	movs	r1, #1
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ffd2 	bl	80011f0 <uart_getchar>
 800124c:	4603      	mov	r3, r0
 800124e:	74fb      	strb	r3, [r7, #19]

  	if (single == '\n' || single == '\r') // Unix & co. use \n, Windows uses \r\n
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	2b0a      	cmp	r3, #10
 8001254:	d00c      	beq.n	8001270 <uart_getline+0x44>
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b0d      	cmp	r3, #13
 800125a:	d009      	beq.n	8001270 <uart_getline+0x44>
			break;
  	else
			input[i] = single;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	7cfa      	ldrb	r2, [r7, #19]
 8001264:	701a      	strb	r2, [r3, #0]
  	i++;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
		if (i > max_size)
 800126c:	e7e6      	b.n	800123c <uart_getline+0x10>
				break;
 800126e:	bf00      	nop
	}
  return i; // The way this is set up, it will always report the wrong size
 8001270:	697b      	ldr	r3, [r7, #20]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001298:	4c0b      	ldr	r4, [pc, #44]	; (80012c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a6:	f7ff febf 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f013 f965 	bl	8014578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fa77 	bl	80007a0 <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012c0:	0801f230 	.word	0x0801f230
  ldr r2, =_sbss
 80012c4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012c8:	20002a0c 	.word	0x20002a0c

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>

080012ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d2:	2003      	movs	r0, #3
 80012d4:	f000 f92e 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 f805 	bl	80012e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012de:	f7ff fdf5 	bl	8000ecc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f93b 	bl	8001582 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f911 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	200029f8 	.word	0x200029f8

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200029f8 	.word	0x200029f8

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_SetPriorityGrouping>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <__NVIC_SetPriorityGrouping+0x40>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x40>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	05fa0000 	.word	0x05fa0000

08001418 <__NVIC_GetPriorityGrouping>:
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	e175      	b.n	80018a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	f040 8164 	bne.w	80018a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d00b      	beq.n	80015fa <HAL_GPIO_Init+0x5e>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ee:	2b11      	cmp	r3, #17
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x100>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d123      	bne.n	80016e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0203 	and.w	r2, r3, #3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80be 	beq.w	80018a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_GPIO_Init+0x324>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800173e:	4a61      	ldr	r2, [pc, #388]	; (80018c4 <HAL_GPIO_Init+0x328>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_GPIO_Init+0x32c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d037      	beq.n	80017da <HAL_GPIO_Init+0x23e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x330>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d031      	beq.n	80017d6 <HAL_GPIO_Init+0x23a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02b      	beq.n	80017d2 <HAL_GPIO_Init+0x236>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x338>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x232>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_GPIO_Init+0x33c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x340>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x22a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x344>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x226>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x348>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x222>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x34c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x21e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x350>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x21a>
 80017b2:	2309      	movs	r3, #9
 80017b4:	e012      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017b6:	230a      	movs	r3, #10
 80017b8:	e010      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ba:	2308      	movs	r3, #8
 80017bc:	e00e      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x328>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_GPIO_Init+0x354>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001848:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae86 	bls.w	80015bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40022400 	.word	0x40022400
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001922:	f7ff fd25 	bl	8001370 <HAL_GetTick>
 8001926:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001928:	e009      	b.n	800193e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800192a:	f7ff fd21 	bl	8001370 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001938:	d901      	bls.n	800193e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e022      	b.n	8001984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d1ee      	bne.n	800192a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001956:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff fd0a 	bl	8001370 <HAL_GetTick>
 800195c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800195e:	e009      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001960:	f7ff fd06 	bl	8001370 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800196e:	d901      	bls.n	8001974 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e007      	b.n	8001984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001980:	d1ee      	bne.n	8001960 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e29b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c4:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x130>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e275      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a>
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x9c>
 8001a16:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b7c      	ldr	r3, [pc, #496]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7b      	ldr	r2, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b73      	ldr	r3, [pc, #460]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a72      	ldr	r2, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6b      	ldr	r2, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc7c 	bl	8001370 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fc78 	bl	8001370 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e229      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc68 	bl	8001370 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fc64 	bl	8001370 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e215      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x110>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d069      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1e9      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	493d      	ldr	r1, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e040      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc1a 	bl	8001370 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fc16 	bl	8001370 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1c7      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4929      	ldr	r1, [pc, #164]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fbf6 	bl	8001370 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fbf2 	bl	8001370 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1a3      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d038      	beq.n	8001c24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fbd3 	bl	8001370 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fbcf 	bl	8001370 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e180      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x23a>
 8001bec:	e01a      	b.n	8001c24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fbb9 	bl	8001370 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c02:	f7ff fbb5 	bl	8001370 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d903      	bls.n	8001c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e166      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
 8001c14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a4 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a88      	ldr	r2, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x4d4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c66:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <HAL_RCC_OscConfig+0x4d4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4d4>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb7d 	bl	8001370 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fb79 	bl	8001370 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e12a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x4d4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x31a>
 8001ca0:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a6f      	ldr	r2, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x33c>
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a6a      	ldr	r2, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a67      	ldr	r2, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
 8001cd8:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a61      	ldr	r2, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb2d 	bl	8001370 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fb29 	bl	8001370 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0d8      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x386>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb17 	bl	8001370 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb13 	bl	8001370 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0c2      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80ae 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d06d      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d14b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff fae4 	bl	8001370 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fae0 	bl	8001370 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e091      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	071b      	lsls	r3, r3, #28
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fab2 	bl	8001370 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff faae 	bl	8001370 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e05f      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x47c>
 8001e2e:	e057      	b.n	8001ee0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fa98 	bl	8001370 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fa94 	bl	8001370 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e045      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4b0>
 8001e62:	e03d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x54c>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x558>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d030      	beq.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d129      	bne.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d122      	bne.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d119      	bne.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10f      	bne.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d0      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 020f 	bic.w	r2, r3, #15
 8001f1e:	4965      	ldr	r1, [pc, #404]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d040      	beq.n	8002014 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d115      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e073      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06b      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4936      	ldr	r1, [pc, #216]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe4:	f7ff f9c4 	bl	8001370 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7ff f9c0 	bl	8001370 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e053      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d210      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 020f 	bic.w	r2, r3, #15
 800202a:	4922      	ldr	r1, [pc, #136]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x1cc>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1d0>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f920 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08015b30 	.word	0x08015b30
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020ce:	2100      	movs	r1, #0
 80020d0:	6079      	str	r1, [r7, #4]
 80020d2:	2100      	movs	r1, #0
 80020d4:	60f9      	str	r1, [r7, #12]
 80020d6:	2100      	movs	r1, #0
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020da:	2100      	movs	r1, #0
 80020dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020de:	4952      	ldr	r1, [pc, #328]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 80020e0:	6889      	ldr	r1, [r1, #8]
 80020e2:	f001 010c 	and.w	r1, r1, #12
 80020e6:	2908      	cmp	r1, #8
 80020e8:	d00d      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x3e>
 80020ea:	2908      	cmp	r1, #8
 80020ec:	f200 8094 	bhi.w	8002218 <HAL_RCC_GetSysClockFreq+0x150>
 80020f0:	2900      	cmp	r1, #0
 80020f2:	d002      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x32>
 80020f4:	2904      	cmp	r1, #4
 80020f6:	d003      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x38>
 80020f8:	e08e      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_RCC_GetSysClockFreq+0x164>)
 80020fc:	60bb      	str	r3, [r7, #8]
      break;
 80020fe:	e08e      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <HAL_RCC_GetSysClockFreq+0x168>)
 8002102:	60bb      	str	r3, [r7, #8]
      break;
 8002104:	e08b      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002106:	4948      	ldr	r1, [pc, #288]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 8002108:	6849      	ldr	r1, [r1, #4]
 800210a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800210e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002110:	4945      	ldr	r1, [pc, #276]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 8002112:	6849      	ldr	r1, [r1, #4]
 8002114:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002118:	2900      	cmp	r1, #0
 800211a:	d024      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211c:	4942      	ldr	r1, [pc, #264]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 800211e:	6849      	ldr	r1, [r1, #4]
 8002120:	0989      	lsrs	r1, r1, #6
 8002122:	4608      	mov	r0, r1
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	f240 14ff 	movw	r4, #511	; 0x1ff
 800212c:	f04f 0500 	mov.w	r5, #0
 8002130:	ea00 0204 	and.w	r2, r0, r4
 8002134:	ea01 0305 	and.w	r3, r1, r5
 8002138:	493d      	ldr	r1, [pc, #244]	; (8002230 <HAL_RCC_GetSysClockFreq+0x168>)
 800213a:	fb01 f003 	mul.w	r0, r1, r3
 800213e:	2100      	movs	r1, #0
 8002140:	fb01 f102 	mul.w	r1, r1, r2
 8002144:	1844      	adds	r4, r0, r1
 8002146:	493a      	ldr	r1, [pc, #232]	; (8002230 <HAL_RCC_GetSysClockFreq+0x168>)
 8002148:	fba2 0101 	umull	r0, r1, r2, r1
 800214c:	1863      	adds	r3, r4, r1
 800214e:	4619      	mov	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	f7fe f8ca 	bl	80002f0 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e04a      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	099b      	lsrs	r3, r3, #6
 800216c:	461a      	mov	r2, r3
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	ea02 0400 	and.w	r4, r2, r0
 800217e:	ea03 0501 	and.w	r5, r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	014b      	lsls	r3, r1, #5
 8002190:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002194:	0142      	lsls	r2, r0, #5
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	1b00      	subs	r0, r0, r4
 800219c:	eb61 0105 	sbc.w	r1, r1, r5
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	018b      	lsls	r3, r1, #6
 80021aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021ae:	0182      	lsls	r2, r0, #6
 80021b0:	1a12      	subs	r2, r2, r0
 80021b2:	eb63 0301 	sbc.w	r3, r3, r1
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	00d9      	lsls	r1, r3, #3
 80021c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021c4:	00d0      	lsls	r0, r2, #3
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	1912      	adds	r2, r2, r4
 80021cc:	eb45 0303 	adc.w	r3, r5, r3
 80021d0:	f04f 0000 	mov.w	r0, #0
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	0299      	lsls	r1, r3, #10
 80021da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021de:	0290      	lsls	r0, r2, #10
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f7fe f87e 	bl	80002f0 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_GetSysClockFreq+0x160>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	60bb      	str	r3, [r7, #8]
      break;
 8002216:	e002      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_RCC_GetSysClockFreq+0x164>)
 800221a:	60bb      	str	r3, [r7, #8]
      break;
 800221c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221e:	68bb      	ldr	r3, [r7, #8]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bdb0      	pop	{r4, r5, r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	00f42400 	.word	0x00f42400
 8002230:	017d7840 	.word	0x017d7840

08002234 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff0 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0a9b      	lsrs	r3, r3, #10
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	08015b40 	.word	0x08015b40

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffdc 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08015b40 	.word	0x08015b40

0800229c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01c      	b.n	80022e8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	795b      	ldrb	r3, [r3, #5]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe28 	bl	8000f14 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0204 	orr.w	r2, r2, #4
 80022d8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_RNG_GenerateRandomNumber+0x1a>
 8002306:	2302      	movs	r3, #2
 8002308:	e03d      	b.n	8002386 <HAL_RNG_GenerateRandomNumber+0x96>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12c      	bne.n	8002374 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002320:	f7ff f826 	bl	8001370 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002326:	e011      	b.n	800234c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002328:	f7ff f822 	bl	8001370 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d90a      	bls.n	800234c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e01c      	b.n	8002386 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d1e6      	bne.n	8002328 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	715a      	strb	r2, [r3, #5]
 8002372:	e004      	b.n	800237e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2204      	movs	r2, #4
 8002378:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	711a      	strb	r2, [r3, #4]

  return status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e040      	b.n	8002422 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7fe fe4b 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f98f 	bl	80026f0 <UART_SetConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e022      	b.n	8002422 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fbe5 	bl	8002bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002408:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fc6c 	bl	8002cf8 <UART_CheckIdleState>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	; 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243e:	2b20      	cmp	r3, #32
 8002440:	f040 8081 	bne.w	8002546 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_UART_Transmit+0x26>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e079      	b.n	8002548 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_UART_Transmit+0x38>
 800245e:	2302      	movs	r3, #2
 8002460:	e072      	b.n	8002548 <HAL_UART_Transmit+0x11e>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	; 0x21
 8002476:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002478:	f7fe ff7a 	bl	8001370 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	d108      	bne.n	80024aa <HAL_UART_Transmit+0x80>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d104      	bne.n	80024aa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e003      	b.n	80024b2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80024ba:	e02c      	b.n	8002516 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fc5f 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e038      	b.n	8002548 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3302      	adds	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	e007      	b.n	8002504 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1cc      	bne.n	80024bc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2140      	movs	r1, #64	; 0x40
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fc2c 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e005      	b.n	8002548 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002564:	2b20      	cmp	r3, #32
 8002566:	f040 80be 	bne.w	80026e6 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_UART_Receive+0x26>
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0b6      	b.n	80026e8 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_UART_Receive+0x38>
 8002584:	2302      	movs	r3, #2
 8002586:	e0af      	b.n	80026e8 <HAL_UART_Receive+0x198>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2222      	movs	r2, #34	; 0x22
 800259c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fee4 	bl	8001370 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	88fa      	ldrh	r2, [r7, #6]
 80025b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d10e      	bne.n	80025e2 <HAL_UART_Receive+0x92>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_UART_Receive+0x88>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025d6:	e02d      	b.n	8002634 <HAL_UART_Receive+0xe4>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	22ff      	movs	r2, #255	; 0xff
 80025dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025e0:	e028      	b.n	8002634 <HAL_UART_Receive+0xe4>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_UART_Receive+0xb6>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d104      	bne.n	80025fc <HAL_UART_Receive+0xac>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025fa:	e01b      	b.n	8002634 <HAL_UART_Receive+0xe4>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	227f      	movs	r2, #127	; 0x7f
 8002600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002604:	e016      	b.n	8002634 <HAL_UART_Receive+0xe4>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260e:	d10d      	bne.n	800262c <HAL_UART_Receive+0xdc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_UART_Receive+0xd2>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	227f      	movs	r2, #127	; 0x7f
 800261c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002620:	e008      	b.n	8002634 <HAL_UART_Receive+0xe4>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800262a:	e003      	b.n	8002634 <HAL_UART_Receive+0xe4>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800263a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002644:	d108      	bne.n	8002658 <HAL_UART_Receive+0x108>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e003      	b.n	8002660 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002668:	e032      	b.n	80026d0 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2200      	movs	r2, #0
 8002672:	2120      	movs	r1, #32
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb88 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e031      	b.n	80026e8 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	b29a      	uxth	r2, r3
 8002692:	8a7b      	ldrh	r3, [r7, #18]
 8002694:	4013      	ands	r3, r2
 8002696:	b29a      	uxth	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3302      	adds	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	e00c      	b.n	80026be <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8a7b      	ldrh	r3, [r7, #18]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1c6      	bne.n	800266a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4ba7      	ldr	r3, [pc, #668]	; (80029b8 <UART_SetConfig+0x2c8>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	6979      	ldr	r1, [r7, #20]
 8002724:	430b      	orrs	r3, r1
 8002726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a95      	ldr	r2, [pc, #596]	; (80029bc <UART_SetConfig+0x2cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d120      	bne.n	80027ae <UART_SetConfig+0xbe>
 800276c:	4b94      	ldr	r3, [pc, #592]	; (80029c0 <UART_SetConfig+0x2d0>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b03      	cmp	r3, #3
 8002778:	d816      	bhi.n	80027a8 <UART_SetConfig+0xb8>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <UART_SetConfig+0x90>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	0800279d 	.word	0x0800279d
 8002788:	08002797 	.word	0x08002797
 800278c:	080027a3 	.word	0x080027a3
 8002790:	2301      	movs	r3, #1
 8002792:	77fb      	strb	r3, [r7, #31]
 8002794:	e14f      	b.n	8002a36 <UART_SetConfig+0x346>
 8002796:	2302      	movs	r3, #2
 8002798:	77fb      	strb	r3, [r7, #31]
 800279a:	e14c      	b.n	8002a36 <UART_SetConfig+0x346>
 800279c:	2304      	movs	r3, #4
 800279e:	77fb      	strb	r3, [r7, #31]
 80027a0:	e149      	b.n	8002a36 <UART_SetConfig+0x346>
 80027a2:	2308      	movs	r3, #8
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e146      	b.n	8002a36 <UART_SetConfig+0x346>
 80027a8:	2310      	movs	r3, #16
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e143      	b.n	8002a36 <UART_SetConfig+0x346>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a84      	ldr	r2, [pc, #528]	; (80029c4 <UART_SetConfig+0x2d4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d132      	bne.n	800281e <UART_SetConfig+0x12e>
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <UART_SetConfig+0x2d0>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d828      	bhi.n	8002818 <UART_SetConfig+0x128>
 80027c6:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <UART_SetConfig+0xdc>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002819 	.word	0x08002819
 80027d4:	08002819 	.word	0x08002819
 80027d8:	08002819 	.word	0x08002819
 80027dc:	0800280d 	.word	0x0800280d
 80027e0:	08002819 	.word	0x08002819
 80027e4:	08002819 	.word	0x08002819
 80027e8:	08002819 	.word	0x08002819
 80027ec:	08002807 	.word	0x08002807
 80027f0:	08002819 	.word	0x08002819
 80027f4:	08002819 	.word	0x08002819
 80027f8:	08002819 	.word	0x08002819
 80027fc:	08002813 	.word	0x08002813
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	e117      	b.n	8002a36 <UART_SetConfig+0x346>
 8002806:	2302      	movs	r3, #2
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e114      	b.n	8002a36 <UART_SetConfig+0x346>
 800280c:	2304      	movs	r3, #4
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e111      	b.n	8002a36 <UART_SetConfig+0x346>
 8002812:	2308      	movs	r3, #8
 8002814:	77fb      	strb	r3, [r7, #31]
 8002816:	e10e      	b.n	8002a36 <UART_SetConfig+0x346>
 8002818:	2310      	movs	r3, #16
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e10b      	b.n	8002a36 <UART_SetConfig+0x346>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <UART_SetConfig+0x2d8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d120      	bne.n	800286a <UART_SetConfig+0x17a>
 8002828:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <UART_SetConfig+0x2d0>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002832:	2b30      	cmp	r3, #48	; 0x30
 8002834:	d013      	beq.n	800285e <UART_SetConfig+0x16e>
 8002836:	2b30      	cmp	r3, #48	; 0x30
 8002838:	d814      	bhi.n	8002864 <UART_SetConfig+0x174>
 800283a:	2b20      	cmp	r3, #32
 800283c:	d009      	beq.n	8002852 <UART_SetConfig+0x162>
 800283e:	2b20      	cmp	r3, #32
 8002840:	d810      	bhi.n	8002864 <UART_SetConfig+0x174>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <UART_SetConfig+0x15c>
 8002846:	2b10      	cmp	r3, #16
 8002848:	d006      	beq.n	8002858 <UART_SetConfig+0x168>
 800284a:	e00b      	b.n	8002864 <UART_SetConfig+0x174>
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e0f1      	b.n	8002a36 <UART_SetConfig+0x346>
 8002852:	2302      	movs	r3, #2
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e0ee      	b.n	8002a36 <UART_SetConfig+0x346>
 8002858:	2304      	movs	r3, #4
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e0eb      	b.n	8002a36 <UART_SetConfig+0x346>
 800285e:	2308      	movs	r3, #8
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e0e8      	b.n	8002a36 <UART_SetConfig+0x346>
 8002864:	2310      	movs	r3, #16
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e0e5      	b.n	8002a36 <UART_SetConfig+0x346>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a57      	ldr	r2, [pc, #348]	; (80029cc <UART_SetConfig+0x2dc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d120      	bne.n	80028b6 <UART_SetConfig+0x1c6>
 8002874:	4b52      	ldr	r3, [pc, #328]	; (80029c0 <UART_SetConfig+0x2d0>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800287e:	2bc0      	cmp	r3, #192	; 0xc0
 8002880:	d013      	beq.n	80028aa <UART_SetConfig+0x1ba>
 8002882:	2bc0      	cmp	r3, #192	; 0xc0
 8002884:	d814      	bhi.n	80028b0 <UART_SetConfig+0x1c0>
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d009      	beq.n	800289e <UART_SetConfig+0x1ae>
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d810      	bhi.n	80028b0 <UART_SetConfig+0x1c0>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <UART_SetConfig+0x1a8>
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d006      	beq.n	80028a4 <UART_SetConfig+0x1b4>
 8002896:	e00b      	b.n	80028b0 <UART_SetConfig+0x1c0>
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e0cb      	b.n	8002a36 <UART_SetConfig+0x346>
 800289e:	2302      	movs	r3, #2
 80028a0:	77fb      	strb	r3, [r7, #31]
 80028a2:	e0c8      	b.n	8002a36 <UART_SetConfig+0x346>
 80028a4:	2304      	movs	r3, #4
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	e0c5      	b.n	8002a36 <UART_SetConfig+0x346>
 80028aa:	2308      	movs	r3, #8
 80028ac:	77fb      	strb	r3, [r7, #31]
 80028ae:	e0c2      	b.n	8002a36 <UART_SetConfig+0x346>
 80028b0:	2310      	movs	r3, #16
 80028b2:	77fb      	strb	r3, [r7, #31]
 80028b4:	e0bf      	b.n	8002a36 <UART_SetConfig+0x346>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a45      	ldr	r2, [pc, #276]	; (80029d0 <UART_SetConfig+0x2e0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d125      	bne.n	800290c <UART_SetConfig+0x21c>
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <UART_SetConfig+0x2d0>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ce:	d017      	beq.n	8002900 <UART_SetConfig+0x210>
 80028d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d4:	d817      	bhi.n	8002906 <UART_SetConfig+0x216>
 80028d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028da:	d00b      	beq.n	80028f4 <UART_SetConfig+0x204>
 80028dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e0:	d811      	bhi.n	8002906 <UART_SetConfig+0x216>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <UART_SetConfig+0x1fe>
 80028e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ea:	d006      	beq.n	80028fa <UART_SetConfig+0x20a>
 80028ec:	e00b      	b.n	8002906 <UART_SetConfig+0x216>
 80028ee:	2300      	movs	r3, #0
 80028f0:	77fb      	strb	r3, [r7, #31]
 80028f2:	e0a0      	b.n	8002a36 <UART_SetConfig+0x346>
 80028f4:	2302      	movs	r3, #2
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e09d      	b.n	8002a36 <UART_SetConfig+0x346>
 80028fa:	2304      	movs	r3, #4
 80028fc:	77fb      	strb	r3, [r7, #31]
 80028fe:	e09a      	b.n	8002a36 <UART_SetConfig+0x346>
 8002900:	2308      	movs	r3, #8
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	e097      	b.n	8002a36 <UART_SetConfig+0x346>
 8002906:	2310      	movs	r3, #16
 8002908:	77fb      	strb	r3, [r7, #31]
 800290a:	e094      	b.n	8002a36 <UART_SetConfig+0x346>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	; (80029d4 <UART_SetConfig+0x2e4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d125      	bne.n	8002962 <UART_SetConfig+0x272>
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <UART_SetConfig+0x2d0>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002924:	d017      	beq.n	8002956 <UART_SetConfig+0x266>
 8002926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800292a:	d817      	bhi.n	800295c <UART_SetConfig+0x26c>
 800292c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002930:	d00b      	beq.n	800294a <UART_SetConfig+0x25a>
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002936:	d811      	bhi.n	800295c <UART_SetConfig+0x26c>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <UART_SetConfig+0x254>
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002940:	d006      	beq.n	8002950 <UART_SetConfig+0x260>
 8002942:	e00b      	b.n	800295c <UART_SetConfig+0x26c>
 8002944:	2301      	movs	r3, #1
 8002946:	77fb      	strb	r3, [r7, #31]
 8002948:	e075      	b.n	8002a36 <UART_SetConfig+0x346>
 800294a:	2302      	movs	r3, #2
 800294c:	77fb      	strb	r3, [r7, #31]
 800294e:	e072      	b.n	8002a36 <UART_SetConfig+0x346>
 8002950:	2304      	movs	r3, #4
 8002952:	77fb      	strb	r3, [r7, #31]
 8002954:	e06f      	b.n	8002a36 <UART_SetConfig+0x346>
 8002956:	2308      	movs	r3, #8
 8002958:	77fb      	strb	r3, [r7, #31]
 800295a:	e06c      	b.n	8002a36 <UART_SetConfig+0x346>
 800295c:	2310      	movs	r3, #16
 800295e:	77fb      	strb	r3, [r7, #31]
 8002960:	e069      	b.n	8002a36 <UART_SetConfig+0x346>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <UART_SetConfig+0x2e8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d137      	bne.n	80029dc <UART_SetConfig+0x2ec>
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <UART_SetConfig+0x2d0>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800297a:	d017      	beq.n	80029ac <UART_SetConfig+0x2bc>
 800297c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002980:	d817      	bhi.n	80029b2 <UART_SetConfig+0x2c2>
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d00b      	beq.n	80029a0 <UART_SetConfig+0x2b0>
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d811      	bhi.n	80029b2 <UART_SetConfig+0x2c2>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <UART_SetConfig+0x2aa>
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d006      	beq.n	80029a6 <UART_SetConfig+0x2b6>
 8002998:	e00b      	b.n	80029b2 <UART_SetConfig+0x2c2>
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e04a      	b.n	8002a36 <UART_SetConfig+0x346>
 80029a0:	2302      	movs	r3, #2
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e047      	b.n	8002a36 <UART_SetConfig+0x346>
 80029a6:	2304      	movs	r3, #4
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e044      	b.n	8002a36 <UART_SetConfig+0x346>
 80029ac:	2308      	movs	r3, #8
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e041      	b.n	8002a36 <UART_SetConfig+0x346>
 80029b2:	2310      	movs	r3, #16
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e03e      	b.n	8002a36 <UART_SetConfig+0x346>
 80029b8:	efff69f3 	.word	0xefff69f3
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40004400 	.word	0x40004400
 80029c8:	40004800 	.word	0x40004800
 80029cc:	40004c00 	.word	0x40004c00
 80029d0:	40005000 	.word	0x40005000
 80029d4:	40011400 	.word	0x40011400
 80029d8:	40007800 	.word	0x40007800
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a71      	ldr	r2, [pc, #452]	; (8002ba8 <UART_SetConfig+0x4b8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d125      	bne.n	8002a32 <UART_SetConfig+0x342>
 80029e6:	4b71      	ldr	r3, [pc, #452]	; (8002bac <UART_SetConfig+0x4bc>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029f4:	d017      	beq.n	8002a26 <UART_SetConfig+0x336>
 80029f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029fa:	d817      	bhi.n	8002a2c <UART_SetConfig+0x33c>
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a00:	d00b      	beq.n	8002a1a <UART_SetConfig+0x32a>
 8002a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a06:	d811      	bhi.n	8002a2c <UART_SetConfig+0x33c>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <UART_SetConfig+0x324>
 8002a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a10:	d006      	beq.n	8002a20 <UART_SetConfig+0x330>
 8002a12:	e00b      	b.n	8002a2c <UART_SetConfig+0x33c>
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e00d      	b.n	8002a36 <UART_SetConfig+0x346>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	77fb      	strb	r3, [r7, #31]
 8002a1e:	e00a      	b.n	8002a36 <UART_SetConfig+0x346>
 8002a20:	2304      	movs	r3, #4
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e007      	b.n	8002a36 <UART_SetConfig+0x346>
 8002a26:	2308      	movs	r3, #8
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e004      	b.n	8002a36 <UART_SetConfig+0x346>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e001      	b.n	8002a36 <UART_SetConfig+0x346>
 8002a32:	2310      	movs	r3, #16
 8002a34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3e:	d15b      	bne.n	8002af8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d827      	bhi.n	8002a96 <UART_SetConfig+0x3a6>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <UART_SetConfig+0x35c>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a71 	.word	0x08002a71
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a81 	.word	0x08002a81
 8002a58:	08002a97 	.word	0x08002a97
 8002a5c:	08002a87 	.word	0x08002a87
 8002a60:	08002a97 	.word	0x08002a97
 8002a64:	08002a97 	.word	0x08002a97
 8002a68:	08002a97 	.word	0x08002a97
 8002a6c:	08002a8f 	.word	0x08002a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff fbec 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8002a74:	61b8      	str	r0, [r7, #24]
        break;
 8002a76:	e013      	b.n	8002aa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff fbfc 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	61b8      	str	r0, [r7, #24]
        break;
 8002a7e:	e00f      	b.n	8002aa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <UART_SetConfig+0x4c0>)
 8002a82:	61bb      	str	r3, [r7, #24]
        break;
 8002a84:	e00c      	b.n	8002aa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a86:	f7ff fb1f 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002a8a:	61b8      	str	r0, [r7, #24]
        break;
 8002a8c:	e008      	b.n	8002aa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e004      	b.n	8002aa0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d074      	beq.n	8002b90 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	005a      	lsls	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d916      	bls.n	8002af2 <UART_SetConfig+0x402>
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d212      	bcs.n	8002af2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f023 030f 	bic.w	r3, r3, #15
 8002ad4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	89fa      	ldrh	r2, [r7, #14]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e04e      	b.n	8002b90 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77bb      	strb	r3, [r7, #30]
 8002af6:	e04b      	b.n	8002b90 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d827      	bhi.n	8002b4e <UART_SetConfig+0x45e>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <UART_SetConfig+0x414>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b29 	.word	0x08002b29
 8002b08:	08002b31 	.word	0x08002b31
 8002b0c:	08002b39 	.word	0x08002b39
 8002b10:	08002b4f 	.word	0x08002b4f
 8002b14:	08002b3f 	.word	0x08002b3f
 8002b18:	08002b4f 	.word	0x08002b4f
 8002b1c:	08002b4f 	.word	0x08002b4f
 8002b20:	08002b4f 	.word	0x08002b4f
 8002b24:	08002b47 	.word	0x08002b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff fb90 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8002b2c:	61b8      	str	r0, [r7, #24]
        break;
 8002b2e:	e013      	b.n	8002b58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fba0 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8002b34:	61b8      	str	r0, [r7, #24]
        break;
 8002b36:	e00f      	b.n	8002b58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <UART_SetConfig+0x4c0>)
 8002b3a:	61bb      	str	r3, [r7, #24]
        break;
 8002b3c:	e00c      	b.n	8002b58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3e:	f7ff fac3 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002b42:	61b8      	str	r0, [r7, #24]
        break;
 8002b44:	e008      	b.n	8002b58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e004      	b.n	8002b58 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	77bb      	strb	r3, [r7, #30]
        break;
 8002b56:	bf00      	nop
    }

    if (pclk != 0U)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	085a      	lsrs	r2, r3, #1
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	d908      	bls.n	8002b8c <UART_SetConfig+0x49c>
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d204      	bcs.n	8002b8c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	e001      	b.n	8002b90 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40007c00 	.word	0x40007c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400

08002bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01a      	beq.n	8002cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb2:	d10a      	bne.n	8002cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  }
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d08:	f7fe fb32 	bl	8001370 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d10e      	bne.n	8002d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f82d 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e023      	b.n	8002d82 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d10e      	bne.n	8002d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f817 	bl	8002d8a <UART_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e00d      	b.n	8002d82 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9a:	e05e      	b.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d05a      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da4:	f7fe fae4 	bl	8001370 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d302      	bcc.n	8002dba <UART_WaitOnFlagUntilTimeout+0x30>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11b      	bne.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e043      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02c      	beq.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0e:	d124      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e00f      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d091      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8002e96:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002ea4:	e02a      	b.n	8002efc <aes_gen_tables+0x6c>
    {
        pow[i] = x;
 8002ea6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002eaa:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002eae:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002ebc:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8002ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = MBEDTLS_BYTE_0( x ^ XTIME( x ) );
 8002ec4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8002ed6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002eda:	2900      	cmp	r1, #0
 8002edc:	d001      	beq.n	8002ee2 <aes_gen_tables+0x52>
 8002ede:	211b      	movs	r1, #27
 8002ee0:	e000      	b.n	8002ee4 <aes_gen_tables+0x54>
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	404b      	eors	r3, r1
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	4053      	eors	r3, r2
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8002ef2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002efc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	ddd0      	ble.n	8002ea6 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002f10:	e01d      	b.n	8002f4e <aes_gen_tables+0xbe>
    {
        RCON[i] = (uint32_t) x;
 8002f12:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002f16:	49c4      	ldr	r1, [pc, #784]	; (8003228 <aes_gen_tables+0x398>)
 8002f18:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = MBEDTLS_BYTE_0( XTIME( x ) );
 8002f20:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002f2c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d001      	beq.n	8002f38 <aes_gen_tables+0xa8>
 8002f34:	221b      	movs	r2, #27
 8002f36:	e000      	b.n	8002f3a <aes_gen_tables+0xaa>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4053      	eors	r3, r2
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8002f44:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002f4e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	dddd      	ble.n	8002f12 <aes_gen_tables+0x82>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8002f56:	4bb5      	ldr	r3, [pc, #724]	; (800322c <aes_gen_tables+0x39c>)
 8002f58:	2263      	movs	r2, #99	; 0x63
 8002f5a:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8002f5c:	4bb4      	ldr	r3, [pc, #720]	; (8003230 <aes_gen_tables+0x3a0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8002f64:	2301      	movs	r3, #1
 8002f66:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002f6a:	e079      	b.n	8003060 <aes_gen_tables+0x1d0>
    {
        x = pow[255 - log[i]];
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8002f7a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f82:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8002f86:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002f8a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8002f8e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002f9a:	11db      	asrs	r3, r3, #7
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8002fa8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002fac:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fb0:	4053      	eors	r3, r2
 8002fb2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002fb6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	b25a      	sxtb	r2, r3
 8002fbe:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fc2:	11db      	asrs	r3, r3, #7
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8002fd0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002fd4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fd8:	4053      	eors	r3, r2
 8002fda:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002fde:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	b25a      	sxtb	r2, r3
 8002fe6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002fea:	11db      	asrs	r3, r3, #7
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = MBEDTLS_BYTE_0( ( y << 1 ) | ( y >> 7 ) );
 8002ff8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002ffc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003000:	4053      	eors	r3, r2
 8003002:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8003006:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	b25a      	sxtb	r2, r3
 800300e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003012:	11db      	asrs	r3, r3, #7
 8003014:	b25b      	sxtb	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b25b      	sxtb	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 8003020:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003024:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 8003028:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800302c:	4053      	eors	r3, r2
 800302e:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 8003032:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003036:	b2d9      	uxtb	r1, r3
 8003038:	4a7c      	ldr	r2, [pc, #496]	; (800322c <aes_gen_tables+0x39c>)
 800303a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800303e:	4413      	add	r3, r2
 8003040:	460a      	mov	r2, r1
 8003042:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8003044:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003048:	b2d9      	uxtb	r1, r3
 800304a:	4a79      	ldr	r2, [pc, #484]	; (8003230 <aes_gen_tables+0x3a0>)
 800304c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003050:	4413      	add	r3, r2
 8003052:	460a      	mov	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8003056:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800305a:	3301      	adds	r3, #1
 800305c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8003060:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	dd81      	ble.n	8002f6c <aes_gen_tables+0xdc>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800306e:	e11c      	b.n	80032aa <aes_gen_tables+0x41a>
    {
        x = FSb[i];
 8003070:	4a6e      	ldr	r2, [pc, #440]	; (800322c <aes_gen_tables+0x39c>)
 8003072:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = MBEDTLS_BYTE_0( XTIME( x ) );
 800307e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	b25b      	sxtb	r3, r3
 8003086:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800308a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800308e:	2a00      	cmp	r2, #0
 8003090:	d001      	beq.n	8003096 <aes_gen_tables+0x206>
 8003092:	221b      	movs	r2, #27
 8003094:	e000      	b.n	8003098 <aes_gen_tables+0x208>
 8003096:	2200      	movs	r2, #0
 8003098:	4053      	eors	r3, r2
 800309a:	b25b      	sxtb	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z = MBEDTLS_BYTE_0( y ^ x );
 80030a2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030a6:	b25a      	sxtb	r2, r3
 80030a8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	4053      	eors	r3, r2
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 80030b8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80030bc:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 80030be:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030c2:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 80030c4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80030c8:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 80030ca:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 80030cc:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80030d0:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 80030d2:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 80030d4:	4957      	ldr	r1, [pc, #348]	; (8003234 <aes_gen_tables+0x3a4>)
 80030d6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80030de:	4a55      	ldr	r2, [pc, #340]	; (8003234 <aes_gen_tables+0x3a4>)
 80030e0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	ea4f 6233 	mov.w	r2, r3, ror #24
 80030ec:	4952      	ldr	r1, [pc, #328]	; (8003238 <aes_gen_tables+0x3a8>)
 80030ee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80030f6:	4a50      	ldr	r2, [pc, #320]	; (8003238 <aes_gen_tables+0x3a8>)
 80030f8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	ea4f 6233 	mov.w	r2, r3, ror #24
 8003104:	494d      	ldr	r1, [pc, #308]	; (800323c <aes_gen_tables+0x3ac>)
 8003106:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 800310e:	4a4b      	ldr	r2, [pc, #300]	; (800323c <aes_gen_tables+0x3ac>)
 8003110:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	ea4f 6233 	mov.w	r2, r3, ror #24
 800311c:	4948      	ldr	r1, [pc, #288]	; (8003240 <aes_gen_tables+0x3b0>)
 800311e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8003126:	4a42      	ldr	r2, [pc, #264]	; (8003230 <aes_gen_tables+0x3a0>)
 8003128:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800312c:	4413      	add	r3, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8003134:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003138:	2b00      	cmp	r3, #0
 800313a:	d018      	beq.n	800316e <aes_gen_tables+0x2de>
 800313c:	463b      	mov	r3, r7
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	463b      	mov	r3, r7
 8003142:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8003146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800314a:	441a      	add	r2, r3
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <aes_gen_tables+0x3b4>)
 800314e:	fb83 1302 	smull	r1, r3, r3, r2
 8003152:	4413      	add	r3, r2
 8003154:	11d9      	asrs	r1, r3, #7
 8003156:	17d3      	asrs	r3, r2, #31
 8003158:	1ac9      	subs	r1, r1, r3
 800315a:	460b      	mov	r3, r1
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	1a5b      	subs	r3, r3, r1
 8003160:	1ad1      	subs	r1, r2, r3
 8003162:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003166:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800316a:	4618      	mov	r0, r3
 800316c:	e000      	b.n	8003170 <aes_gen_tables+0x2e0>
 800316e:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8003170:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003174:	2b00      	cmp	r3, #0
 8003176:	d018      	beq.n	80031aa <aes_gen_tables+0x31a>
 8003178:	463b      	mov	r3, r7
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	463b      	mov	r3, r7
 800317e:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8003182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003186:	441a      	add	r2, r3
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <aes_gen_tables+0x3b4>)
 800318a:	fb83 1302 	smull	r1, r3, r3, r2
 800318e:	4413      	add	r3, r2
 8003190:	11d9      	asrs	r1, r3, #7
 8003192:	17d3      	asrs	r3, r2, #31
 8003194:	1ac9      	subs	r1, r1, r3
 8003196:	460b      	mov	r3, r1
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	1ad1      	subs	r1, r2, r3
 800319e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80031a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	e000      	b.n	80031ac <aes_gen_tables+0x31c>
 80031aa:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80031ac:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80031ae:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <aes_gen_tables+0x358>
 80031b6:	463b      	mov	r3, r7
 80031b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ba:	463b      	mov	r3, r7
 80031bc:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80031c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031c4:	441a      	add	r2, r3
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <aes_gen_tables+0x3b4>)
 80031c8:	fb83 1302 	smull	r1, r3, r3, r2
 80031cc:	4413      	add	r3, r2
 80031ce:	11d9      	asrs	r1, r3, #7
 80031d0:	17d3      	asrs	r3, r2, #31
 80031d2:	1ac9      	subs	r1, r1, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	1a5b      	subs	r3, r3, r1
 80031da:	1ad1      	subs	r1, r2, r3
 80031dc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80031e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	e000      	b.n	80031ea <aes_gen_tables+0x35a>
 80031e8:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80031ea:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80031ec:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d029      	beq.n	8003248 <aes_gen_tables+0x3b8>
 80031f4:	463b      	mov	r3, r7
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	463b      	mov	r3, r7
 80031fa:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80031fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003202:	441a      	add	r2, r3
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <aes_gen_tables+0x3b4>)
 8003206:	fb83 1302 	smull	r1, r3, r3, r2
 800320a:	4413      	add	r3, r2
 800320c:	11d9      	asrs	r1, r3, #7
 800320e:	17d3      	asrs	r3, r2, #31
 8003210:	1ac9      	subs	r1, r1, r3
 8003212:	460b      	mov	r3, r1
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	1a5b      	subs	r3, r3, r1
 8003218:	1ad1      	subs	r1, r2, r3
 800321a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800321e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	e011      	b.n	800324a <aes_gen_tables+0x3ba>
 8003226:	bf00      	nop
 8003228:	200022b4 	.word	0x200022b4
 800322c:	200000b4 	.word	0x200000b4
 8003230:	200011b4 	.word	0x200011b4
 8003234:	200001b4 	.word	0x200001b4
 8003238:	200005b4 	.word	0x200005b4
 800323c:	200009b4 	.word	0x200009b4
 8003240:	20000db4 	.word	0x20000db4
 8003244:	80808081 	.word	0x80808081
 8003248:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800324a:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800324e:	491d      	ldr	r1, [pc, #116]	; (80032c4 <aes_gen_tables+0x434>)
 8003250:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <aes_gen_tables+0x434>)
 800325a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	ea4f 6233 	mov.w	r2, r3, ror #24
 8003266:	4918      	ldr	r1, [pc, #96]	; (80032c8 <aes_gen_tables+0x438>)
 8003268:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <aes_gen_tables+0x438>)
 8003272:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	ea4f 6233 	mov.w	r2, r3, ror #24
 800327e:	4913      	ldr	r1, [pc, #76]	; (80032cc <aes_gen_tables+0x43c>)
 8003280:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <aes_gen_tables+0x43c>)
 800328a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	ea4f 6233 	mov.w	r2, r3, ror #24
 8003296:	490e      	ldr	r1, [pc, #56]	; (80032d0 <aes_gen_tables+0x440>)
 8003298:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 80032a0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80032a4:	3301      	adds	r3, #1
 80032a6:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80032aa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80032ae:	2bff      	cmp	r3, #255	; 0xff
 80032b0:	f77f aede 	ble.w	8003070 <aes_gen_tables+0x1e0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	f607 0714 	addw	r7, r7, #2068	; 0x814
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	200012b4 	.word	0x200012b4
 80032c8:	200016b4 	.word	0x200016b4
 80032cc:	20001ab4 	.word	0x20001ab4
 80032d0:	20001eb4 	.word	0x20001eb4

080032d4 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80032dc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80032e0:	2100      	movs	r1, #0
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f011 f986 	bl	80145f4 <memset>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80032fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f010 fa80 	bl	8013808 <mbedtls_platform_zeroize>
 8003308:	e000      	b.n	800330c <mbedtls_aes_free+0x1c>
        return;
 800330a:	bf00      	nop
}
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init( mbedtls_aes_xts_context *ctx )
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    mbedtls_aes_init( &ctx->crypt );
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ffd9 	bl	80032d4 <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ffd3 	bl	80032d4 <mbedtls_aes_init>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free( mbedtls_aes_xts_context *ctx )
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <mbedtls_aes_xts_free+0x24>
        return;

    mbedtls_aes_free( &ctx->crypt );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ffd2 	bl	80032f0 <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ffcc 	bl	80032f0 <mbedtls_aes_free>
 8003358:	e000      	b.n	800335c <mbedtls_aes_xts_free+0x26>
        return;
 800335a:	bf00      	nop
}
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d012      	beq.n	800339e <mbedtls_aes_setkey_enc+0x3a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337e:	d812      	bhi.n	80033a6 <mbedtls_aes_setkey_enc+0x42>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d003      	beq.n	800338e <mbedtls_aes_setkey_enc+0x2a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2bc0      	cmp	r3, #192	; 0xc0
 800338a:	d004      	beq.n	8003396 <mbedtls_aes_setkey_enc+0x32>
 800338c:	e00b      	b.n	80033a6 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	220a      	movs	r2, #10
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e00a      	b.n	80033ac <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	220c      	movs	r2, #12
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e006      	b.n	80033ac <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	220e      	movs	r2, #14
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e002      	b.n	80033ac <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80033a6:	f06f 031f 	mvn.w	r3, #31
 80033aa:	e1c7      	b.n	800373c <mbedtls_aes_setkey_enc+0x3d8>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80033ac:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <mbedtls_aes_setkey_enc+0x280>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 80033b4:	f7ff fd6c 	bl	8002e90 <aes_gen_tables>
        aes_init_done = 1;
 80033b8:	4b8a      	ldr	r3, [pc, #552]	; (80035e4 <mbedtls_aes_setkey_enc+0x280>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3308      	adds	r3, #8
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e027      	b.n	8003420 <mbedtls_aes_setkey_enc+0xbc>
    {
        RK[i] = MBEDTLS_GET_UINT32_LE( key, i << 2 );
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	4413      	add	r3, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3301      	adds	r3, #1
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	ea41 0203 	orr.w	r2, r1, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	440b      	add	r3, r1
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	ea42 0103 	orr.w	r1, r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	3303      	adds	r3, #3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	061a      	lsls	r2, r3, #24
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	6938      	ldr	r0, [r7, #16]
 8003414:	4403      	add	r3, r0
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3301      	adds	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	429a      	cmp	r2, r3
 8003428:	d3d2      	bcc.n	80033d0 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b0e      	cmp	r3, #14
 8003430:	f000 80d4 	beq.w	80035dc <mbedtls_aes_setkey_enc+0x278>
 8003434:	2b0e      	cmp	r3, #14
 8003436:	f300 8180 	bgt.w	800373a <mbedtls_aes_setkey_enc+0x3d6>
 800343a:	2b0a      	cmp	r3, #10
 800343c:	d002      	beq.n	8003444 <mbedtls_aes_setkey_enc+0xe0>
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d05c      	beq.n	80034fc <mbedtls_aes_setkey_enc+0x198>
 8003442:	e17a      	b.n	800373a <mbedtls_aes_setkey_enc+0x3d6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e054      	b.n	80034f4 <mbedtls_aes_setkey_enc+0x190>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4966      	ldr	r1, [pc, #408]	; (80035e8 <mbedtls_aes_setkey_enc+0x284>)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003456:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	320c      	adds	r2, #12
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	0a12      	lsrs	r2, r2, #8
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	4611      	mov	r1, r2
 8003464:	4a61      	ldr	r2, [pc, #388]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 8003466:	5c52      	ldrb	r2, [r2, r1]
                RK[4]  = RK[0] ^ RCON[i] ^
 8003468:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	330c      	adds	r3, #12
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 8003478:	5c5b      	ldrb	r3, [r3, r1]
 800347a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[3] ) ]       ) ^
 800347c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	330c      	adds	r3, #12
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e1b      	lsrs	r3, r3, #24
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4619      	mov	r1, r3
 800348a:	4b58      	ldr	r3, [pc, #352]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 800348c:	5c5b      	ldrb	r3, [r3, r1]
 800348e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[3] ) ] <<  8 ) ^
 8003490:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[3] ) ] << 24 );
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	330c      	adds	r3, #12
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[3] ) ] << 16 ) ^
 80034a8:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 80034aa:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3304      	adds	r3, #4
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3310      	adds	r3, #16
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	3314      	adds	r3, #20
 80034bc:	404a      	eors	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	3308      	adds	r3, #8
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	3314      	adds	r3, #20
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3318      	adds	r3, #24
 80034d0:	404a      	eors	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	330c      	adds	r3, #12
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3318      	adds	r3, #24
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	331c      	adds	r3, #28
 80034e4:	404a      	eors	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	3310      	adds	r3, #16
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d9a7      	bls.n	800344a <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 80034fa:	e11e      	b.n	800373a <mbedtls_aes_setkey_enc+0x3d6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e068      	b.n	80035d4 <mbedtls_aes_setkey_enc+0x270>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4938      	ldr	r1, [pc, #224]	; (80035e8 <mbedtls_aes_setkey_enc+0x284>)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800350e:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	3214      	adds	r2, #20
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	0a12      	lsrs	r2, r2, #8
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	4611      	mov	r1, r2
 800351c:	4a33      	ldr	r2, [pc, #204]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 800351e:	5c52      	ldrb	r2, [r2, r1]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003520:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3314      	adds	r3, #20
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 8003530:	5c5b      	ldrb	r3, [r3, r1]
 8003532:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[5] ) ]       ) ^
 8003534:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3314      	adds	r3, #20
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 8003544:	5c5b      	ldrb	r3, [r3, r1]
 8003546:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[5] ) ] <<  8 ) ^
 8003548:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[5] ) ] << 24 );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3314      	adds	r3, #20
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	4b25      	ldr	r3, [pc, #148]	; (80035ec <mbedtls_aes_setkey_enc+0x288>)
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[5] ) ] << 16 ) ^
 8003560:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8003562:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3304      	adds	r3, #4
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	3318      	adds	r3, #24
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	331c      	adds	r3, #28
 8003574:	404a      	eors	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3308      	adds	r3, #8
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	331c      	adds	r3, #28
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	3320      	adds	r3, #32
 8003588:	404a      	eors	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	330c      	adds	r3, #12
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3320      	adds	r3, #32
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	404a      	eors	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3310      	adds	r3, #16
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3324      	adds	r3, #36	; 0x24
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	404a      	eors	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3314      	adds	r3, #20
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3328      	adds	r3, #40	; 0x28
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	332c      	adds	r3, #44	; 0x2c
 80035c4:	404a      	eors	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3301      	adds	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3318      	adds	r3, #24
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d993      	bls.n	8003502 <mbedtls_aes_setkey_enc+0x19e>
            }
            break;
 80035da:	e0ae      	b.n	800373a <mbedtls_aes_setkey_enc+0x3d6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e0a6      	b.n	8003730 <mbedtls_aes_setkey_enc+0x3cc>
 80035e2:	bf00      	nop
 80035e4:	200022dc 	.word	0x200022dc
 80035e8:	200022b4 	.word	0x200022b4
 80035ec:	200000b4 	.word	0x200000b4
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4953      	ldr	r1, [pc, #332]	; (8003744 <mbedtls_aes_setkey_enc+0x3e0>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035fc:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	321c      	adds	r2, #28
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	0a12      	lsrs	r2, r2, #8
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	4611      	mov	r1, r2
 800360a:	4a4f      	ldr	r2, [pc, #316]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 800360c:	5c52      	ldrb	r2, [r2, r1]
                RK[8]  = RK[0] ^ RCON[i] ^
 800360e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	331c      	adds	r3, #28
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4619      	mov	r1, r3
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 800361e:	5c5b      	ldrb	r3, [r3, r1]
 8003620:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[7] ) ]       ) ^
 8003622:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	331c      	adds	r3, #28
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e1b      	lsrs	r3, r3, #24
 800362c:	b2db      	uxtb	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	4b45      	ldr	r3, [pc, #276]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 8003632:	5c5b      	ldrb	r3, [r3, r1]
 8003634:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[7] ) ] <<  8 ) ^
 8003636:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[7] ) ] << 24 );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	331c      	adds	r3, #28
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[7] ) ] << 16 ) ^
 800364e:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8003650:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3304      	adds	r3, #4
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3320      	adds	r3, #32
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3324      	adds	r3, #36	; 0x24
 8003662:	404a      	eors	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3308      	adds	r3, #8
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3328      	adds	r3, #40	; 0x28
 8003676:	404a      	eors	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	330c      	adds	r3, #12
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	3328      	adds	r3, #40	; 0x28
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	332c      	adds	r3, #44	; 0x2c
 800368a:	404a      	eors	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3310      	adds	r3, #16
 8003692:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	322c      	adds	r2, #44	; 0x2c
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 80036a0:	5c52      	ldrb	r2, [r2, r1]
                RK[12] = RK[4] ^
 80036a2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	332c      	adds	r3, #44	; 0x2c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	4619      	mov	r1, r3
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 80036b2:	5c5b      	ldrb	r3, [r3, r1]
 80036b4:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ MBEDTLS_BYTE_0( RK[11] ) ]       ) ^
 80036b6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	332c      	adds	r3, #44	; 0x2c
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0c1b      	lsrs	r3, r3, #16
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 80036c6:	5c5b      	ldrb	r3, [r3, r1]
 80036c8:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ MBEDTLS_BYTE_1( RK[11] ) ] <<  8 ) ^
 80036ca:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ MBEDTLS_BYTE_3( RK[11] ) ] << 24 );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	332c      	adds	r3, #44	; 0x2c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <mbedtls_aes_setkey_enc+0x3e4>)
 80036dc:	5c9b      	ldrb	r3, [r3, r2]
 80036de:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ MBEDTLS_BYTE_2( RK[11] ) ] << 16 ) ^
 80036e4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80036e6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3314      	adds	r3, #20
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3330      	adds	r3, #48	; 0x30
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	3334      	adds	r3, #52	; 0x34
 80036f8:	404a      	eors	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	3318      	adds	r3, #24
 8003700:	6819      	ldr	r1, [r3, #0]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3334      	adds	r3, #52	; 0x34
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3338      	adds	r3, #56	; 0x38
 800370c:	404a      	eors	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	331c      	adds	r3, #28
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	333c      	adds	r3, #60	; 0x3c
 8003720:	404a      	eors	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3320      	adds	r3, #32
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b06      	cmp	r3, #6
 8003734:	f67f af5c 	bls.w	80035f0 <mbedtls_aes_setkey_enc+0x28c>
            }
            break;
 8003738:	bf00      	nop
    }

    return( 0 );
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200022b4 	.word	0x200022b4
 8003748:	200000b4 	.word	0x200000b4

0800374c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b0d0      	sub	sp, #320	; 0x140
 8003750:	af00      	add	r7, sp, #0
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	6018      	str	r0, [r3, #0]
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	6019      	str	r1, [r3, #0]
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fdb4 	bl	80032d4 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003782:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8003784:	1d3a      	adds	r2, r7, #4
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	f107 0014 	add.w	r0, r7, #20
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	f7ff fde7 	bl	8003364 <mbedtls_aes_setkey_enc>
 8003796:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800379a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80d8 	bne.w	8003954 <mbedtls_aes_setkey_dec+0x208>
        goto exit;

    ctx->nr = cty.nr;
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 80037c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80037ca:	1d13      	adds	r3, r2, #4
 80037cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80037d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80037de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80037e2:	1d13      	adds	r3, r2, #4
 80037e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80037e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037ec:	1d19      	adds	r1, r3, #4
 80037ee:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80037f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80037fa:	1d13      	adds	r3, r2, #4
 80037fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003800:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003804:	1d19      	adds	r1, r3, #4
 8003806:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800380e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003812:	1d13      	adds	r3, r2, #4
 8003814:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003818:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800381c:	1d19      	adds	r1, r3, #4
 800381e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003826:	f107 030c 	add.w	r3, r7, #12
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3b01      	subs	r3, #1
 8003830:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003838:	3b20      	subs	r3, #32
 800383a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800383e:	e054      	b.n	80038ea <mbedtls_aes_setkey_dec+0x19e>
    {
        for( j = 0; j < 4; j++, SK++ )
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003846:	e042      	b.n	80038ce <mbedtls_aes_setkey_dec+0x182>
        {
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8003848:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <mbedtls_aes_setkey_dec+0x224>)
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	461a      	mov	r2, r3
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <mbedtls_aes_setkey_dec+0x228>)
 800385a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 800385e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <mbedtls_aes_setkey_dec+0x224>)
 800386c:	5c5b      	ldrb	r3, [r3, r1]
 800386e:	4619      	mov	r1, r3
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <mbedtls_aes_setkey_dec+0x22c>)
 8003872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 8003876:	405a      	eors	r2, r3
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 8003878:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <mbedtls_aes_setkey_dec+0x224>)
 8003886:	5c5b      	ldrb	r3, [r3, r1]
 8003888:	4619      	mov	r1, r3
 800388a:	4b3c      	ldr	r3, [pc, #240]	; (800397c <mbedtls_aes_setkey_dec+0x230>)
 800388c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ MBEDTLS_BYTE_1( *SK ) ] ) ^
 8003890:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ MBEDTLS_BYTE_3( *SK ) ] );
 8003894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	0e1b      	lsrs	r3, r3, #24
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <mbedtls_aes_setkey_dec+0x224>)
 80038a2:	5c9b      	ldrb	r3, [r3, r2]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <mbedtls_aes_setkey_dec+0x234>)
 80038a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80038ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038b0:	1d18      	adds	r0, r3, #4
 80038b2:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    AES_RT2( FSb[ MBEDTLS_BYTE_2( *SK ) ] ) ^
 80038b6:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ MBEDTLS_BYTE_0( *SK ) ] ) ^
 80038b8:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80038ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038be:	3301      	adds	r3, #1
 80038c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80038c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038c8:	3304      	adds	r3, #4
 80038ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80038ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	ddb8      	ble.n	8003848 <mbedtls_aes_setkey_dec+0xfc>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80038d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80038da:	3b01      	subs	r3, #1
 80038dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80038e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038e4:	3b20      	subs	r3, #32
 80038e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80038ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dca6      	bgt.n	8003840 <mbedtls_aes_setkey_dec+0xf4>
        }
    }

    *RK++ = *SK++;
 80038f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80038f6:	1d13      	adds	r3, r2, #4
 80038f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80038fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003900:	1d19      	adds	r1, r3, #4
 8003902:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800390a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800390e:	1d13      	adds	r3, r2, #4
 8003910:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003918:	1d19      	adds	r1, r3, #4
 800391a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003922:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003926:	1d13      	adds	r3, r2, #4
 8003928:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800392c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003930:	1d19      	adds	r1, r3, #4
 8003932:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800393a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800393e:	1d13      	adds	r3, r2, #4
 8003940:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003944:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003948:	1d19      	adds	r1, r3, #4
 800394a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e000      	b.n	8003956 <mbedtls_aes_setkey_dec+0x20a>
        goto exit;
 8003954:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fcc8 	bl	80032f0 <mbedtls_aes_free>

    return( ret );
 8003960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8003964:	4618      	mov	r0, r3
 8003966:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200000b4 	.word	0x200000b4
 8003974:	200012b4 	.word	0x200012b4
 8003978:	200016b4 	.word	0x200016b4
 800397c:	20001ab4 	.word	0x20001ab4
 8003980:	20001eb4 	.word	0x20001eb4

08003984 <mbedtls_aes_xts_decode_keys>:
                                        unsigned int keybits,
                                        const unsigned char **key1,
                                        unsigned int *key1bits,
                                        const unsigned char **key2,
                                        unsigned int *key2bits )
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	08db      	lsrs	r3, r3, #3
 800399c:	613b      	str	r3, [r7, #16]

    switch( keybits )
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a4:	d006      	beq.n	80039b4 <mbedtls_aes_xts_decode_keys+0x30>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ac:	d004      	beq.n	80039b8 <mbedtls_aes_xts_decode_keys+0x34>
    {
        case 256: break;
        case 512: break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80039ae:	f06f 031f 	mvn.w	r3, #31
 80039b2:	e011      	b.n	80039d8 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 80039b8:	bf00      	nop
    }

    *key1bits = half_keybits;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	441a      	add	r2, r3
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	601a      	str	r2, [r3, #0]

    return 0;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80039f0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 80039f6:	f107 0118 	add.w	r1, r7, #24
 80039fa:	f107 0220 	add.w	r2, r7, #32
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f7ff ffb8 	bl	8003984 <mbedtls_aes_xts_decode_keys>
 8003a14:	6278      	str	r0, [r7, #36]	; 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <mbedtls_aes_xts_setkey_enc+0x3c>
        return( ret );
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	e014      	b.n	8003a4a <mbedtls_aes_xts_setkey_enc+0x66>

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a26:	69f9      	ldr	r1, [r7, #28]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fc9a 	bl	8003364 <mbedtls_aes_setkey_enc>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret != 0 )
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <mbedtls_aes_xts_setkey_enc+0x58>
        return( ret );
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	e006      	b.n	8003a4a <mbedtls_aes_xts_setkey_enc+0x66>

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a39      	ldr	r1, [r7, #32]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fc8e 	bl	8003364 <mbedtls_aes_setkey_enc>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3728      	adds	r7, #40	; 0x28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b08c      	sub	sp, #48	; 0x30
 8003a56:	af02      	add	r7, sp, #8
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003a5e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8003a64:	f107 0118 	add.w	r1, r7, #24
 8003a68:	f107 0220 	add.w	r2, r7, #32
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	f107 031c 	add.w	r3, r7, #28
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f7ff ff81 	bl	8003984 <mbedtls_aes_xts_decode_keys>
 8003a82:	6278      	str	r0, [r7, #36]	; 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <mbedtls_aes_xts_setkey_dec+0x3c>
        return( ret );
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	e014      	b.n	8003ab8 <mbedtls_aes_xts_setkey_dec+0x66>

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a94:	69f9      	ldr	r1, [r7, #28]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fc63 	bl	8003364 <mbedtls_aes_setkey_enc>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret != 0 )
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <mbedtls_aes_xts_setkey_dec+0x58>
        return( ret );
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	e006      	b.n	8003ab8 <mbedtls_aes_xts_setkey_dec+0x66>

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fe4b 	bl	800374c <mbedtls_aes_setkey_dec>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3301      	adds	r3, #1
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3303      	adds	r3, #3
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	1d1a      	adds	r2, r3, #4
 8003afc:	633a      	str	r2, [r7, #48]	; 0x30
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4053      	eors	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3305      	adds	r3, #5
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3306      	adds	r3, #6
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3307      	adds	r3, #7
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	1d1a      	adds	r2, r3, #4
 8003b32:	633a      	str	r2, [r7, #48]	; 0x30
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4053      	eors	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3309      	adds	r3, #9
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	330a      	adds	r3, #10
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	330b      	adds	r3, #11
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	1d1a      	adds	r2, r3, #4
 8003b68:	633a      	str	r2, [r7, #48]	; 0x30
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4053      	eors	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	330c      	adds	r3, #12
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	330d      	adds	r3, #13
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	330e      	adds	r3, #14
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	330f      	adds	r3, #15
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	1d1a      	adds	r2, r3, #4
 8003b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4053      	eors	r3, r2
 8003ba6:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	105b      	asrs	r3, r3, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb2:	e122      	b.n	8003dfa <mbedtls_internal_aes_encrypt+0x33a>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	633a      	str	r2, [r7, #48]	; 0x30
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4bb1      	ldr	r3, [pc, #708]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bc8:	405a      	eors	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4bae      	ldr	r3, [pc, #696]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bd8:	405a      	eors	r2, r3
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	4bab      	ldr	r3, [pc, #684]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003be4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003be8:	405a      	eors	r2, r3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	0e1b      	lsrs	r3, r3, #24
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4ba8      	ldr	r3, [pc, #672]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003bf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bf8:	4053      	eors	r3, r2
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	633a      	str	r2, [r7, #48]	; 0x30
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4b9f      	ldr	r3, [pc, #636]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c10:	405a      	eors	r2, r3
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4b9c      	ldr	r3, [pc, #624]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003c1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c20:	405a      	eors	r2, r3
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4b99      	ldr	r3, [pc, #612]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c30:	405a      	eors	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c40:	4053      	eors	r3, r2
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	633a      	str	r2, [r7, #48]	; 0x30
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c58:	405a      	eors	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	4b8a      	ldr	r3, [pc, #552]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c68:	405a      	eors	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	4b87      	ldr	r3, [pc, #540]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003c74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c78:	405a      	eors	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	4b84      	ldr	r3, [pc, #528]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c88:	4053      	eors	r3, r2
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	633a      	str	r2, [r7, #48]	; 0x30
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ca0:	405a      	eors	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003cac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cb0:	405a      	eors	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4b75      	ldr	r3, [pc, #468]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003cbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cc0:	405a      	eors	r2, r3
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cd0:	4053      	eors	r3, r2
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	1d1a      	adds	r2, r3, #4
 8003cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ce8:	405a      	eors	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003cf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cf8:	405a      	eors	r2, r3
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4619      	mov	r1, r3
 8003d02:	4b63      	ldr	r3, [pc, #396]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003d04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d08:	405a      	eors	r2, r3
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	0e1b      	lsrs	r3, r3, #24
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	4b60      	ldr	r3, [pc, #384]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d18:	4053      	eors	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	1d1a      	adds	r2, r3, #4
 8003d20:	633a      	str	r2, [r7, #48]	; 0x30
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003d2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d30:	405a      	eors	r2, r3
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d40:	405a      	eors	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003d4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d50:	405a      	eors	r2, r3
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	0e1b      	lsrs	r3, r3, #24
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d60:	4053      	eors	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	633a      	str	r2, [r7, #48]	; 0x30
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003d74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d78:	405a      	eors	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4619      	mov	r1, r3
 8003d82:	4b42      	ldr	r3, [pc, #264]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003d84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d88:	405a      	eors	r2, r3
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003d94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d98:	405a      	eors	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	4619      	mov	r1, r3
 8003da2:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003da4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003da8:	4053      	eors	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	1d1a      	adds	r2, r3, #4
 8003db0:	633a      	str	r2, [r7, #48]	; 0x30
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dc0:	405a      	eors	r2, r3
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dd0:	405a      	eors	r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003de0:	405a      	eors	r2, r3
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003dec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003df0:	4053      	eors	r3, r2
 8003df2:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	3b01      	subs	r3, #1
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f73f aed9 	bgt.w	8003bb4 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	633a      	str	r2, [r7, #48]	; 0x30
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e16:	405a      	eors	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e26:	405a      	eors	r2, r3
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003e32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e36:	405a      	eors	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	0e1b      	lsrs	r3, r3, #24
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <mbedtls_internal_aes_encrypt+0x3d4>)
 8003e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e46:	4053      	eors	r3, r2
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <mbedtls_internal_aes_encrypt+0x3c8>)
 8003e5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e5e:	405a      	eors	r2, r3
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <mbedtls_internal_aes_encrypt+0x3cc>)
 8003e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e6e:	405a      	eors	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <mbedtls_internal_aes_encrypt+0x3d0>)
 8003e7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e7e:	405a      	eors	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	0e1b      	lsrs	r3, r3, #24
 8003e84:	e008      	b.n	8003e98 <mbedtls_internal_aes_encrypt+0x3d8>
 8003e86:	bf00      	nop
 8003e88:	200001b4 	.word	0x200001b4
 8003e8c:	200005b4 	.word	0x200005b4
 8003e90:	200009b4 	.word	0x200009b4
 8003e94:	20000db4 	.word	0x20000db4
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4b9f      	ldr	r3, [pc, #636]	; (800411c <mbedtls_internal_aes_encrypt+0x65c>)
 8003e9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ea2:	4053      	eors	r3, r2
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4b9a      	ldr	r3, [pc, #616]	; (8004120 <mbedtls_internal_aes_encrypt+0x660>)
 8003eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003eba:	405a      	eors	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4b97      	ldr	r3, [pc, #604]	; (8004124 <mbedtls_internal_aes_encrypt+0x664>)
 8003ec6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003eca:	405a      	eors	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	0c1b      	lsrs	r3, r3, #16
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4b94      	ldr	r3, [pc, #592]	; (8004128 <mbedtls_internal_aes_encrypt+0x668>)
 8003ed6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003eda:	405a      	eors	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	0e1b      	lsrs	r3, r3, #24
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b8d      	ldr	r3, [pc, #564]	; (800411c <mbedtls_internal_aes_encrypt+0x65c>)
 8003ee6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003eea:	4053      	eors	r3, r2
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4619      	mov	r1, r3
 8003efc:	4b88      	ldr	r3, [pc, #544]	; (8004120 <mbedtls_internal_aes_encrypt+0x660>)
 8003efe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f02:	405a      	eors	r2, r3
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4b85      	ldr	r3, [pc, #532]	; (8004124 <mbedtls_internal_aes_encrypt+0x664>)
 8003f0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f12:	405a      	eors	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4b82      	ldr	r3, [pc, #520]	; (8004128 <mbedtls_internal_aes_encrypt+0x668>)
 8003f1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f22:	405a      	eors	r2, r3
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	0e1b      	lsrs	r3, r3, #24
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4b7b      	ldr	r3, [pc, #492]	; (800411c <mbedtls_internal_aes_encrypt+0x65c>)
 8003f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f32:	4053      	eors	r3, r2
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f3c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8003f3e:	6a3a      	ldr	r2, [r7, #32]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	4611      	mov	r1, r2
 8003f44:	4a79      	ldr	r2, [pc, #484]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f46:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 8003f48:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	4619      	mov	r1, r3
 8003f52:	4b76      	ldr	r3, [pc, #472]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f54:	5c5b      	ldrb	r3, [r3, r1]
 8003f56:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 8003f58:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	4b72      	ldr	r3, [pc, #456]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f64:	5c5b      	ldrb	r3, [r3, r1]
 8003f66:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8003f68:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	0e1b      	lsrs	r3, r3, #24
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f74:	5c5b      	ldrb	r3, [r3, r1]
 8003f76:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 8003f78:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8003f7a:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	633a      	str	r2, [r7, #48]	; 0x30
 8003f82:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4a68      	ldr	r2, [pc, #416]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f8c:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 8003f8e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003f9a:	5c5b      	ldrb	r3, [r3, r1]
 8003f9c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 8003f9e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4b60      	ldr	r3, [pc, #384]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003faa:	5c5b      	ldrb	r3, [r3, r1]
 8003fac:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 8003fae:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	0e1b      	lsrs	r3, r3, #24
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4b5c      	ldr	r3, [pc, #368]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003fba:	5c5b      	ldrb	r3, [r3, r1]
 8003fbc:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8003fbe:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8003fc0:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	1d1a      	adds	r2, r3, #4
 8003fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc8:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8003fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003fd2:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8003fd4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4b53      	ldr	r3, [pc, #332]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003fe0:	5c5b      	ldrb	r3, [r3, r1]
 8003fe2:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8003fe4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	4b4f      	ldr	r3, [pc, #316]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8003ff0:	5c5b      	ldrb	r3, [r3, r1]
 8003ff2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 8003ff4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8004000:	5c5b      	ldrb	r3, [r3, r1]
 8004002:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8004004:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8004006:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	633a      	str	r2, [r7, #48]	; 0x30
 800400e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8004010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	4611      	mov	r1, r2
 8004016:	4a45      	ldr	r2, [pc, #276]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8004018:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 800401a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8004026:	5c5b      	ldrb	r3, [r3, r1]
 8004028:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800402a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	b2db      	uxtb	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	4b3d      	ldr	r3, [pc, #244]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8004036:	5c5b      	ldrb	r3, [r3, r1]
 8004038:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800403a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <mbedtls_internal_aes_encrypt+0x66c>)
 8004046:	5c5b      	ldrb	r3, [r3, r1]
 8004048:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800404a:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 800404c:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	0a1a      	lsrs	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3301      	adds	r3, #1
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	0c1a      	lsrs	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3302      	adds	r3, #2
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	0e1a      	lsrs	r2, r3, #24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3303      	adds	r3, #3
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	0a1a      	lsrs	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3305      	adds	r3, #5
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	0c1a      	lsrs	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3306      	adds	r3, #6
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	0e1a      	lsrs	r2, r3, #24
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3307      	adds	r3, #7
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3308      	adds	r3, #8
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	0a1a      	lsrs	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3309      	adds	r3, #9
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	0c1a      	lsrs	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	330a      	adds	r3, #10
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	0e1a      	lsrs	r2, r3, #24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	330b      	adds	r3, #11
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	330c      	adds	r3, #12
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	0a1a      	lsrs	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	330d      	adds	r3, #13
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	0c1a      	lsrs	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	330e      	adds	r3, #14
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	0e1a      	lsrs	r2, r3, #24
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	330f      	adds	r3, #15
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	2120      	movs	r1, #32
 800410a:	4618      	mov	r0, r3
 800410c:	f00f fb7c 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3738      	adds	r7, #56	; 0x38
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000db4 	.word	0x20000db4
 8004120:	200001b4 	.word	0x200001b4
 8004124:	200005b4 	.word	0x200005b4
 8004128:	200009b4 	.word	0x200009b4
 800412c:	200000b4 	.word	0x200000b4

08004130 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE( input,  0 ); t.X[0] ^= *RK++;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3301      	adds	r3, #1
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	431a      	orrs	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3302      	adds	r3, #2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3303      	adds	r3, #3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	633a      	str	r2, [r7, #48]	; 0x30
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4053      	eors	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE( input,  4 ); t.X[1] ^= *RK++;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3305      	adds	r3, #5
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	431a      	orrs	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3306      	adds	r3, #6
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3307      	adds	r3, #7
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	1d1a      	adds	r2, r3, #4
 80041a2:	633a      	str	r2, [r7, #48]	; 0x30
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4053      	eors	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE( input,  8 ); t.X[2] ^= *RK++;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3308      	adds	r3, #8
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3309      	adds	r3, #9
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	431a      	orrs	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	330a      	adds	r3, #10
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	330b      	adds	r3, #11
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	633a      	str	r2, [r7, #48]	; 0x30
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4053      	eors	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE( input, 12 ); t.X[3] ^= *RK++;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	330c      	adds	r3, #12
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	330d      	adds	r3, #13
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	330e      	adds	r3, #14
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	330f      	adds	r3, #15
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	4313      	orrs	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	1d1a      	adds	r2, r3, #4
 800420e:	633a      	str	r2, [r7, #48]	; 0x30
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4053      	eors	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	105b      	asrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e122      	b.n	800446a <mbedtls_internal_aes_decrypt+0x33a>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	633a      	str	r2, [r7, #48]	; 0x30
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	4bb1      	ldr	r3, [pc, #708]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8004234:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004238:	405a      	eors	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	4bae      	ldr	r3, [pc, #696]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 8004244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004248:	405a      	eors	r2, r3
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	4bab      	ldr	r3, [pc, #684]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 8004254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004258:	405a      	eors	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	4ba8      	ldr	r3, [pc, #672]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 8004264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004268:	4053      	eors	r3, r2
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	633a      	str	r2, [r7, #48]	; 0x30
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	4b9f      	ldr	r3, [pc, #636]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800427c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004280:	405a      	eors	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4619      	mov	r1, r3
 800428a:	4b9c      	ldr	r3, [pc, #624]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 800428c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004290:	405a      	eors	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	4b99      	ldr	r3, [pc, #612]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 800429c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042a0:	405a      	eors	r2, r3
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	4b96      	ldr	r3, [pc, #600]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 80042ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042b0:	4053      	eors	r3, r2
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	1d1a      	adds	r2, r3, #4
 80042b8:	633a      	str	r2, [r7, #48]	; 0x30
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80042c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042c8:	405a      	eors	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	4b8a      	ldr	r3, [pc, #552]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 80042d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042d8:	405a      	eors	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	4b87      	ldr	r3, [pc, #540]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 80042e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042e8:	405a      	eors	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	0e1b      	lsrs	r3, r3, #24
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4619      	mov	r1, r3
 80042f2:	4b84      	ldr	r3, [pc, #528]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 80042f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042f8:	4053      	eors	r3, r2
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	633a      	str	r2, [r7, #48]	; 0x30
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	4619      	mov	r1, r3
 800430a:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800430c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004310:	405a      	eors	r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	4b78      	ldr	r3, [pc, #480]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 800431c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004320:	405a      	eors	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4619      	mov	r1, r3
 800432a:	4b75      	ldr	r3, [pc, #468]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 800432c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004330:	405a      	eors	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	4b72      	ldr	r3, [pc, #456]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 800433c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004340:	4053      	eors	r3, r2
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	633a      	str	r2, [r7, #48]	; 0x30
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8004354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004358:	405a      	eors	r2, r3
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	b2db      	uxtb	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	4b66      	ldr	r3, [pc, #408]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 8004364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004368:	405a      	eors	r2, r3
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 8004374:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004378:	405a      	eors	r2, r3
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	0e1b      	lsrs	r3, r3, #24
 800437e:	b2db      	uxtb	r3, r3
 8004380:	4619      	mov	r1, r3
 8004382:	4b60      	ldr	r3, [pc, #384]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 8004384:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004388:	4053      	eors	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	633a      	str	r2, [r7, #48]	; 0x30
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800439c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043a0:	405a      	eors	r2, r3
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	4b54      	ldr	r3, [pc, #336]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 80043ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043b0:	405a      	eors	r2, r3
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	4619      	mov	r1, r3
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 80043bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043c0:	405a      	eors	r2, r3
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	4b4e      	ldr	r3, [pc, #312]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 80043cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043d0:	4053      	eors	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	1d1a      	adds	r2, r3, #4
 80043d8:	633a      	str	r2, [r7, #48]	; 0x30
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4619      	mov	r1, r3
 80043e2:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80043e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043e8:	405a      	eors	r2, r3
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	4b42      	ldr	r3, [pc, #264]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 80043f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043f8:	405a      	eors	r2, r3
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 8004404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004408:	405a      	eors	r2, r3
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	4b3c      	ldr	r3, [pc, #240]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 8004414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004418:	4053      	eors	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	633a      	str	r2, [r7, #48]	; 0x30
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 800442c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004430:	405a      	eors	r2, r3
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 800443c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004440:	405a      	eors	r2, r3
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 800444c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004450:	405a      	eors	r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	b2db      	uxtb	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 800445c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004460:	4053      	eors	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	3b01      	subs	r3, #1
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	2b00      	cmp	r3, #0
 800446e:	f73f aed9 	bgt.w	8004224 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	633a      	str	r2, [r7, #48]	; 0x30
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4619      	mov	r1, r3
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 8004482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004486:	405a      	eors	r2, r3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4619      	mov	r1, r3
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 8004492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004496:	405a      	eors	r2, r3
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4619      	mov	r1, r3
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 80044a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044a6:	405a      	eors	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	0e1b      	lsrs	r3, r3, #24
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	4619      	mov	r1, r3
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <mbedtls_internal_aes_decrypt+0x3d4>)
 80044b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044b6:	4053      	eors	r3, r2
 80044b8:	623b      	str	r3, [r7, #32]
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	633a      	str	r2, [r7, #48]	; 0x30
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <mbedtls_internal_aes_decrypt+0x3c8>)
 80044ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ce:	405a      	eors	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4619      	mov	r1, r3
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <mbedtls_internal_aes_decrypt+0x3cc>)
 80044da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044de:	405a      	eors	r2, r3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4619      	mov	r1, r3
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <mbedtls_internal_aes_decrypt+0x3d0>)
 80044ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044ee:	405a      	eors	r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	0e1b      	lsrs	r3, r3, #24
 80044f4:	e008      	b.n	8004508 <mbedtls_internal_aes_decrypt+0x3d8>
 80044f6:	bf00      	nop
 80044f8:	200012b4 	.word	0x200012b4
 80044fc:	200016b4 	.word	0x200016b4
 8004500:	20001ab4 	.word	0x20001ab4
 8004504:	20001eb4 	.word	0x20001eb4
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4619      	mov	r1, r3
 800450c:	4b9f      	ldr	r3, [pc, #636]	; (800478c <mbedtls_internal_aes_decrypt+0x65c>)
 800450e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004512:	4053      	eors	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	633a      	str	r2, [r7, #48]	; 0x30
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	4b9a      	ldr	r3, [pc, #616]	; (8004790 <mbedtls_internal_aes_decrypt+0x660>)
 8004526:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800452a:	405a      	eors	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4619      	mov	r1, r3
 8004534:	4b97      	ldr	r3, [pc, #604]	; (8004794 <mbedtls_internal_aes_decrypt+0x664>)
 8004536:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800453a:	405a      	eors	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b2db      	uxtb	r3, r3
 8004542:	4619      	mov	r1, r3
 8004544:	4b94      	ldr	r3, [pc, #592]	; (8004798 <mbedtls_internal_aes_decrypt+0x668>)
 8004546:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800454a:	405a      	eors	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	0e1b      	lsrs	r3, r3, #24
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	4b8d      	ldr	r3, [pc, #564]	; (800478c <mbedtls_internal_aes_decrypt+0x65c>)
 8004556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800455a:	4053      	eors	r3, r2
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	633a      	str	r2, [r7, #48]	; 0x30
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	4b88      	ldr	r3, [pc, #544]	; (8004790 <mbedtls_internal_aes_decrypt+0x660>)
 800456e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004572:	405a      	eors	r2, r3
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	4b85      	ldr	r3, [pc, #532]	; (8004794 <mbedtls_internal_aes_decrypt+0x664>)
 800457e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004582:	405a      	eors	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	4b82      	ldr	r3, [pc, #520]	; (8004798 <mbedtls_internal_aes_decrypt+0x668>)
 800458e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004592:	405a      	eors	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	0e1b      	lsrs	r3, r3, #24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4b7b      	ldr	r3, [pc, #492]	; (800478c <mbedtls_internal_aes_decrypt+0x65c>)
 800459e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045a2:	4053      	eors	r3, r2
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	633a      	str	r2, [r7, #48]	; 0x30
 80045ac:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	4611      	mov	r1, r2
 80045b4:	4a79      	ldr	r2, [pc, #484]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80045b6:	5c52      	ldrb	r2, [r2, r1]
    t.X[0] = *RK++ ^ \
 80045b8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4619      	mov	r1, r3
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80045c4:	5c5b      	ldrb	r3, [r3, r1]
 80045c6:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[0] ) ]       ) ^
 80045c8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	4619      	mov	r1, r3
 80045d2:	4b72      	ldr	r3, [pc, #456]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80045d4:	5c5b      	ldrb	r3, [r3, r1]
 80045d6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[3] ) ] <<  8 ) ^
 80045d8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[1] ) ] << 24 );
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	4619      	mov	r1, r3
 80045e2:	4b6e      	ldr	r3, [pc, #440]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80045e4:	5c5b      	ldrb	r3, [r3, r1]
 80045e6:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[2] ) ] << 16 ) ^
 80045e8:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 80045ea:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	633a      	str	r2, [r7, #48]	; 0x30
 80045f2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	4611      	mov	r1, r2
 80045fa:	4a68      	ldr	r2, [pc, #416]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80045fc:	5c52      	ldrb	r2, [r2, r1]
    t.X[1] = *RK++ ^ \
 80045fe:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	4b64      	ldr	r3, [pc, #400]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 800460a:	5c5b      	ldrb	r3, [r3, r1]
 800460c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[1] ) ]       ) ^
 800460e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	b2db      	uxtb	r3, r3
 8004616:	4619      	mov	r1, r3
 8004618:	4b60      	ldr	r3, [pc, #384]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 800461a:	5c5b      	ldrb	r3, [r3, r1]
 800461c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[0] ) ] <<  8 ) ^
 800461e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[2] ) ] << 24 );
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	4b5c      	ldr	r3, [pc, #368]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 800462a:	5c5b      	ldrb	r3, [r3, r1]
 800462c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[3] ) ] << 16 ) ^
 800462e:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8004630:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	1d1a      	adds	r2, r3, #4
 8004636:	633a      	str	r2, [r7, #48]	; 0x30
 8004638:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	4611      	mov	r1, r2
 8004640:	4a56      	ldr	r2, [pc, #344]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004642:	5c52      	ldrb	r2, [r2, r1]
    t.X[2] = *RK++ ^ \
 8004644:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4619      	mov	r1, r3
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004650:	5c5b      	ldrb	r3, [r3, r1]
 8004652:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[2] ) ]       ) ^
 8004654:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	4b4f      	ldr	r3, [pc, #316]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004660:	5c5b      	ldrb	r3, [r3, r1]
 8004662:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[1] ) ] <<  8 ) ^
 8004664:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[3] ) ] << 24 );
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	0e1b      	lsrs	r3, r3, #24
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004670:	5c5b      	ldrb	r3, [r3, r1]
 8004672:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[0] ) ] << 16 ) ^
 8004674:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8004676:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	633a      	str	r2, [r7, #48]	; 0x30
 800467e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 8004680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	4611      	mov	r1, r2
 8004686:	4a45      	ldr	r2, [pc, #276]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004688:	5c52      	ldrb	r2, [r2, r1]
    t.X[3] = *RK++ ^ \
 800468a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b2db      	uxtb	r3, r3
 8004692:	4619      	mov	r1, r3
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 8004696:	5c5b      	ldrb	r3, [r3, r1]
 8004698:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ MBEDTLS_BYTE_0( t.Y[3] ) ]       ) ^
 800469a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	4b3d      	ldr	r3, [pc, #244]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80046a6:	5c5b      	ldrb	r3, [r3, r1]
 80046a8:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ MBEDTLS_BYTE_1( t.Y[2] ) ] <<  8 ) ^
 80046aa:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ MBEDTLS_BYTE_3( t.Y[0] ) ] << 24 );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	0e1b      	lsrs	r3, r3, #24
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <mbedtls_internal_aes_decrypt+0x66c>)
 80046b6:	5c5b      	ldrb	r3, [r3, r1]
 80046b8:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ MBEDTLS_BYTE_2( t.Y[1] ) ] << 16 ) ^
 80046ba:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80046bc:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_LE( t.X[0], output,  0 );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	0a1a      	lsrs	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3301      	adds	r3, #1
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	0c1a      	lsrs	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3302      	adds	r3, #2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	0e1a      	lsrs	r2, r3, #24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3303      	adds	r3, #3
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[1], output,  4 );
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	0a1a      	lsrs	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3305      	adds	r3, #5
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0c1a      	lsrs	r2, r3, #16
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3306      	adds	r3, #6
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0e1a      	lsrs	r2, r3, #24
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3307      	adds	r3, #7
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[2], output,  8 );
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3308      	adds	r3, #8
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	0a1a      	lsrs	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3309      	adds	r3, #9
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	0c1a      	lsrs	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	330a      	adds	r3, #10
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	0e1a      	lsrs	r2, r3, #24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	330b      	adds	r3, #11
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_LE( t.X[3], output, 12 );
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	330c      	adds	r3, #12
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	0a1a      	lsrs	r2, r3, #8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	330d      	adds	r3, #13
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	0c1a      	lsrs	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	330e      	adds	r3, #14
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	0e1a      	lsrs	r2, r3, #24
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	330f      	adds	r3, #15
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8004774:	f107 0310 	add.w	r3, r7, #16
 8004778:	2120      	movs	r1, #32
 800477a:	4618      	mov	r0, r3
 800477c:	f00f f844 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3738      	adds	r7, #56	; 0x38
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20001eb4 	.word	0x20001eb4
 8004790:	200012b4 	.word	0x200012b4
 8004794:	200016b4 	.word	0x200016b4
 8004798:	20001ab4 	.word	0x20001ab4
 800479c:	200011b4 	.word	0x200011b4

080047a0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff f981 	bl	8003ac0 <mbedtls_internal_aes_encrypt>
 80047be:	4603      	mov	r3, r0
 80047c0:	e005      	b.n	80047ce <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fcb2 	bl	8004130 <mbedtls_internal_aes_decrypt>
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80047d6:	b5b0      	push	{r4, r5, r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80047ee:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80047f2:	e06d      	b.n	80048d0 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d166      	bne.n	80048c8 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80047fa:	e036      	b.n	800486a <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f107 0414 	add.w	r4, r7, #20
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff ffc4 	bl	80047a0 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	e010      	b.n	8004840 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004822:	4413      	add	r3, r2
 8004824:	7819      	ldrb	r1, [r3, #0]
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4413      	add	r3, r2
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004832:	4403      	add	r3, r0
 8004834:	404a      	eors	r2, r1
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	3301      	adds	r3, #1
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	2b0f      	cmp	r3, #15
 8004844:	ddeb      	ble.n	800481e <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	461d      	mov	r5, r3
 800484a:	f107 0414 	add.w	r4, r7, #20
 800484e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004850:	6028      	str	r0, [r5, #0]
 8004852:	6069      	str	r1, [r5, #4]
 8004854:	60aa      	str	r2, [r5, #8]
 8004856:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	3310      	adds	r3, #16
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	3310      	adds	r3, #16
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b10      	subs	r3, #16
 8004868:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1c5      	bne.n	80047fc <mbedtls_aes_crypt_cbc+0x26>
 8004870:	e02d      	b.n	80048ce <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8004872:	2300      	movs	r3, #0
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
 8004876:	e010      	b.n	800489a <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800487c:	4413      	add	r3, r2
 800487e:	7819      	ldrb	r1, [r3, #0]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4413      	add	r3, r2
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800488c:	4403      	add	r3, r0
 800488e:	404a      	eors	r2, r1
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b0f      	cmp	r3, #15
 800489e:	ddeb      	ble.n	8004878 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff7a 	bl	80047a0 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80048ac:	2210      	movs	r2, #16
 80048ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	f00f fe91 	bl	80145d8 <memcpy>

            input  += 16;
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	3310      	adds	r3, #16
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	3310      	adds	r3, #16
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3b10      	subs	r3, #16
 80048c6:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d1      	bne.n	8004872 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	; 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}

080048d8 <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 80048d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80048dc:	b0af      	sub	sp, #188	; 0xbc
 80048de:	af00      	add	r7, sp, #0
 80048e0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80048e4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    uint64_t a, b, ra, rb;

    a = MBEDTLS_GET_UINT64_LE( x, 0 );
 80048e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ec:	3307      	adds	r3, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	f04f 0400 	mov.w	r4, #0
 80048fa:	f04f 0500 	mov.w	r5, #0
 80048fe:	0615      	lsls	r5, r2, #24
 8004900:	2400      	movs	r4, #0
 8004902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004906:	3306      	adds	r3, #6
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0411      	lsls	r1, r2, #16
 800491a:	2000      	movs	r0, #0
 800491c:	ea44 0800 	orr.w	r8, r4, r0
 8004920:	ea45 0901 	orr.w	r9, r5, r1
 8004924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004928:	3305      	adds	r3, #5
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	0211      	lsls	r1, r2, #8
 800493c:	2000      	movs	r0, #0
 800493e:	ea48 0a00 	orr.w	sl, r8, r0
 8004942:	ea49 0b01 	orr.w	fp, r9, r1
 8004946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800494a:	3304      	adds	r3, #4
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	f04f 0000 	mov.w	r0, #0
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	0011      	movs	r1, r2
 800495e:	2000      	movs	r0, #0
 8004960:	ea4a 0300 	orr.w	r3, sl, r0
 8004964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004968:	ea4b 0301 	orr.w	r3, fp, r1
 800496c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004974:	3303      	adds	r3, #3
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	0a11      	lsrs	r1, r2, #8
 8004980:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004984:	0613      	lsls	r3, r2, #24
 8004986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800498a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800498e:	4623      	mov	r3, r4
 8004990:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004994:	4602      	mov	r2, r0
 8004996:	4313      	orrs	r3, r2
 8004998:	67bb      	str	r3, [r7, #120]	; 0x78
 800499a:	462b      	mov	r3, r5
 800499c:	460a      	mov	r2, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049a6:	3302      	adds	r3, #2
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0419      	lsls	r1, r3, #16
 80049ba:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80049be:	0410      	lsls	r0, r2, #16
 80049c0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80049c4:	4623      	mov	r3, r4
 80049c6:	4303      	orrs	r3, r0
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
 80049ca:	462b      	mov	r3, r5
 80049cc:	430b      	orrs	r3, r1
 80049ce:	677b      	str	r3, [r7, #116]	; 0x74
 80049d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049d4:	3301      	adds	r3, #1
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0219      	lsls	r1, r3, #8
 80049e8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80049ec:	0210      	lsls	r0, r2, #8
 80049ee:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80049f2:	4623      	mov	r3, r4
 80049f4:	4303      	orrs	r3, r0
 80049f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80049f8:	462b      	mov	r3, r5
 80049fa:	430b      	orrs	r3, r1
 80049fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4311      	orrs	r1, r2
 8004a12:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a14:	4629      	mov	r1, r5
 8004a16:	4319      	orrs	r1, r3
 8004a18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a1e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    b = MBEDTLS_GET_UINT64_LE( x, 8 );
 8004a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a26:	330f      	adds	r3, #15
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	f04f 0500 	mov.w	r5, #0
 8004a38:	0615      	lsls	r5, r2, #24
 8004a3a:	2400      	movs	r4, #0
 8004a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a40:	330e      	adds	r3, #14
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	0411      	lsls	r1, r2, #16
 8004a54:	2000      	movs	r0, #0
 8004a56:	ea44 0300 	orr.w	r3, r4, r0
 8004a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a5c:	ea45 0301 	orr.w	r3, r5, r1
 8004a60:	667b      	str	r3, [r7, #100]	; 0x64
 8004a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a66:	330d      	adds	r3, #13
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	f04f 0000 	mov.w	r0, #0
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	0211      	lsls	r1, r2, #8
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a80:	4623      	mov	r3, r4
 8004a82:	4303      	orrs	r3, r0
 8004a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a86:	462b      	mov	r3, r5
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a90:	330c      	adds	r3, #12
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004aaa:	4623      	mov	r3, r4
 8004aac:	4303      	orrs	r3, r0
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aba:	330b      	adds	r3, #11
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	0a11      	lsrs	r1, r2, #8
 8004ac6:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004ac8:	0613      	lsls	r3, r2, #24
 8004aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004acc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	643b      	str	r3, [r7, #64]	; 0x40
 8004adc:	462b      	mov	r3, r5
 8004ade:	460a      	mov	r2, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ae8:	330a      	adds	r3, #10
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	0419      	lsls	r1, r3, #16
 8004afc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004b00:	0410      	lsls	r0, r2, #16
 8004b02:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004b06:	4623      	mov	r3, r4
 8004b08:	4303      	orrs	r3, r0
 8004b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b16:	3309      	adds	r3, #9
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	f04f 0000 	mov.w	r0, #0
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	0219      	lsls	r1, r3, #8
 8004b2a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004b2e:	0210      	lsls	r0, r2, #8
 8004b30:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8004b34:	4623      	mov	r3, r4
 8004b36:	4303      	orrs	r3, r0
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
 8004b3a:	462b      	mov	r3, r5
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b44:	3308      	adds	r3, #8
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b52:	4621      	mov	r1, r4
 8004b54:	4311      	orrs	r1, r2
 8004b56:	6239      	str	r1, [r7, #32]
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4319      	orrs	r1, r3
 8004b5c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b62:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 8004b66:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004b6a:	1891      	adds	r1, r2, r2
 8004b6c:	61b9      	str	r1, [r7, #24]
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b76:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	0fea      	lsrs	r2, r5, #31
 8004b84:	2300      	movs	r3, #0
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f1c3 0308 	rsb	r3, r3, #8
 8004b8e:	2287      	movs	r2, #135	; 0x87
 8004b90:	fa42 f303 	asr.w	r3, r2, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004b9a:	ea80 0402 	eor.w	r4, r0, r2
 8004b9e:	613c      	str	r4, [r7, #16]
 8004ba0:	404b      	eors	r3, r1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004ba8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    rb = ( a >> 63 ) | ( b << 1 );
 8004bac:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004bb0:	f04f 0000 	mov.w	r0, #0
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	0fd8      	lsrs	r0, r3, #31
 8004bba:	2100      	movs	r1, #0
 8004bbc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004bc0:	1894      	adds	r4, r2, r2
 8004bc2:	60bc      	str	r4, [r7, #8]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bcc:	ea40 0402 	orr.w	r4, r0, r2
 8004bd0:	603c      	str	r4, [r7, #0]
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004bda:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98

    MBEDTLS_PUT_UINT64_LE( ra, r, 0 );
 8004bde:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8004be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	0a02      	lsrs	r2, r0, #8
 8004bf6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004bfa:	0a0b      	lsrs	r3, r1, #8
 8004bfc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c00:	3101      	adds	r1, #1
 8004c02:	b2d3      	uxtb	r3, r2
 8004c04:	700b      	strb	r3, [r1, #0]
 8004c06:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	0c02      	lsrs	r2, r0, #16
 8004c14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c18:	0c0b      	lsrs	r3, r1, #16
 8004c1a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c1e:	3102      	adds	r1, #2
 8004c20:	b2d3      	uxtb	r3, r2
 8004c22:	700b      	strb	r3, [r1, #0]
 8004c24:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	0e02      	lsrs	r2, r0, #24
 8004c32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c36:	0e0b      	lsrs	r3, r1, #24
 8004c38:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c3c:	3103      	adds	r1, #3
 8004c3e:	b2d3      	uxtb	r3, r2
 8004c40:	700b      	strb	r3, [r1, #0]
 8004c42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	000a      	movs	r2, r1
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c56:	3104      	adds	r1, #4
 8004c58:	b2d3      	uxtb	r3, r2
 8004c5a:	700b      	strb	r3, [r1, #0]
 8004c5c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	0a0a      	lsrs	r2, r1, #8
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c70:	3105      	adds	r1, #5
 8004c72:	b2d3      	uxtb	r3, r2
 8004c74:	700b      	strb	r3, [r1, #0]
 8004c76:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	0c0a      	lsrs	r2, r1, #16
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004c8a:	3106      	adds	r1, #6
 8004c8c:	b2d3      	uxtb	r3, r2
 8004c8e:	700b      	strb	r3, [r1, #0]
 8004c90:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	0e0a      	lsrs	r2, r1, #24
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004ca4:	3107      	adds	r1, #7
 8004ca6:	b2d3      	uxtb	r3, r2
 8004ca8:	700b      	strb	r3, [r1, #0]
    MBEDTLS_PUT_UINT64_LE( rb, r, 8 );
 8004caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cae:	3308      	adds	r3, #8
 8004cb0:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	0a02      	lsrs	r2, r0, #8
 8004cc4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004cc8:	0a0b      	lsrs	r3, r1, #8
 8004cca:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004cce:	3109      	adds	r1, #9
 8004cd0:	b2d3      	uxtb	r3, r2
 8004cd2:	700b      	strb	r3, [r1, #0]
 8004cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	0c02      	lsrs	r2, r0, #16
 8004ce2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ce6:	0c0b      	lsrs	r3, r1, #16
 8004ce8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004cec:	310a      	adds	r1, #10
 8004cee:	b2d3      	uxtb	r3, r2
 8004cf0:	700b      	strb	r3, [r1, #0]
 8004cf2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	0e02      	lsrs	r2, r0, #24
 8004d00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d04:	0e0b      	lsrs	r3, r1, #24
 8004d06:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d0a:	310b      	adds	r1, #11
 8004d0c:	b2d3      	uxtb	r3, r2
 8004d0e:	700b      	strb	r3, [r1, #0]
 8004d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	000a      	movs	r2, r1
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d24:	310c      	adds	r1, #12
 8004d26:	b2d3      	uxtb	r3, r2
 8004d28:	700b      	strb	r3, [r1, #0]
 8004d2a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	0a0a      	lsrs	r2, r1, #8
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d3e:	310d      	adds	r1, #13
 8004d40:	b2d3      	uxtb	r3, r2
 8004d42:	700b      	strb	r3, [r1, #0]
 8004d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	0c0a      	lsrs	r2, r1, #16
 8004d52:	2300      	movs	r3, #0
 8004d54:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d58:	310e      	adds	r1, #14
 8004d5a:	b2d3      	uxtb	r3, r2
 8004d5c:	700b      	strb	r3, [r1, #0]
 8004d5e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	0e0a      	lsrs	r2, r1, #24
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004d72:	310f      	adds	r1, #15
 8004d74:	b2d3      	uxtb	r3, r2
 8004d76:	700b      	strb	r3, [r1, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	37bc      	adds	r7, #188	; 0xbc
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004d82:	4770      	bx	lr

08004d84 <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b099      	sub	sp, #100	; 0x64
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8004d92:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
    size_t blocks = length / 16;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t leftover = length % 16;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d802      	bhi.n	8004db2 <mbedtls_aes_crypt_xts+0x2e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004dac:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004db0:	e0f0      	b.n	8004f94 <mbedtls_aes_crypt_xts+0x210>

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db8:	d902      	bls.n	8004dc0 <mbedtls_aes_crypt_xts+0x3c>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004dba:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004dbe:	e0e9      	b.n	8004f94 <mbedtls_aes_crypt_xts+0x210>

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8004dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	f7ff fce7 	bl	80047a0 <mbedtls_aes_crypt_ecb>
 8004dd2:	6538      	str	r0, [r7, #80]	; 0x50
                                 data_unit, tweak );
    if( ret != 0 )
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d068      	beq.n	8004eac <mbedtls_aes_crypt_xts+0x128>
        return( ret );
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	e0da      	b.n	8004f94 <mbedtls_aes_crypt_xts+0x210>

    while( blocks-- )
    {
        size_t i;

        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 8004dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d014      	beq.n	8004e0e <mbedtls_aes_crypt_xts+0x8a>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d111      	bne.n	8004e0e <mbedtls_aes_crypt_xts+0x8a>
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10e      	bne.n	8004e0e <mbedtls_aes_crypt_xts+0x8a>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 8004df0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 8004dfe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004e02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fd65 	bl	80048d8 <mbedtls_gf128mul_x_ble>
        }

        for( i = 0; i < 16; i++ )
 8004e0e:	2300      	movs	r3, #0
 8004e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e12:	e013      	b.n	8004e3c <mbedtls_aes_crypt_xts+0xb8>
            tmp[i] = input[i] ^ tweak[i];
 8004e14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e18:	4413      	add	r3, r2
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e22:	440b      	add	r3, r1
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4053      	eors	r3, r2
 8004e28:	b2d9      	uxtb	r1, r3
 8004e2a:	f107 0214 	add.w	r2, r7, #20
 8004e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e30:	4413      	add	r3, r2
 8004e32:	460a      	mov	r2, r1
 8004e34:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e38:	3301      	adds	r3, #1
 8004e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d9e8      	bls.n	8004e14 <mbedtls_aes_crypt_xts+0x90>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	f107 0214 	add.w	r2, r7, #20
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	f7ff fca7 	bl	80047a0 <mbedtls_aes_crypt_ecb>
 8004e52:	6538      	str	r0, [r7, #80]	; 0x50
        if( ret != 0 )
 8004e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <mbedtls_aes_crypt_xts+0xda>
            return( ret );
 8004e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5c:	e09a      	b.n	8004f94 <mbedtls_aes_crypt_xts+0x210>

        for( i = 0; i < 16; i++ )
 8004e5e:	2300      	movs	r3, #0
 8004e60:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e62:	e012      	b.n	8004e8a <mbedtls_aes_crypt_xts+0x106>
            output[i] = tmp[i] ^ tweak[i];
 8004e64:	f107 0214 	add.w	r2, r7, #20
 8004e68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e6a:	4413      	add	r3, r2
 8004e6c:	7819      	ldrb	r1, [r3, #0]
 8004e6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e74:	4413      	add	r3, r2
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e7c:	4403      	add	r3, r0
 8004e7e:	404a      	eors	r2, r1
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e86:	3301      	adds	r3, #1
 8004e88:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d9e9      	bls.n	8004e64 <mbedtls_aes_crypt_xts+0xe0>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );
 8004e90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fd1c 	bl	80048d8 <mbedtls_gf128mul_x_ble>

        output += 16;
 8004ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	677b      	str	r3, [r7, #116]	; 0x74
        input += 16;
 8004ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	673b      	str	r3, [r7, #112]	; 0x70
    while( blocks-- )
 8004eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d193      	bne.n	8004dde <mbedtls_aes_crypt_xts+0x5a>
    }

    if( leftover )
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d06a      	beq.n	8004f92 <mbedtls_aes_crypt_xts+0x20e>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <mbedtls_aes_crypt_xts+0x144>
 8004ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec6:	e001      	b.n	8004ecc <mbedtls_aes_crypt_xts+0x148>
 8004ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	3b10      	subs	r3, #16
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed8:	e01a      	b.n	8004f10 <mbedtls_aes_crypt_xts+0x18c>
        {
            output[i] = prev_output[i];
 8004eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	441a      	add	r2, r3
 8004ee0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee4:	440b      	add	r3, r1
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
            tmp[i] = input[i] ^ t[i];
 8004eea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	4413      	add	r3, r2
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef6:	440b      	add	r3, r1
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	4053      	eors	r3, r2
 8004efc:	b2d9      	uxtb	r1, r3
 8004efe:	f107 0214 	add.w	r2, r7, #20
 8004f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f04:	4413      	add	r3, r2
 8004f06:	460a      	mov	r2, r1
 8004f08:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < leftover; i++ )
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d3e0      	bcc.n	8004eda <mbedtls_aes_crypt_xts+0x156>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 8004f18:	e012      	b.n	8004f40 <mbedtls_aes_crypt_xts+0x1bc>
            tmp[i] = prev_output[i] ^ t[i];
 8004f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	4413      	add	r3, r2
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f26:	440b      	add	r3, r1
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	4053      	eors	r3, r2
 8004f2c:	b2d9      	uxtb	r1, r3
 8004f2e:	f107 0214 	add.w	r2, r7, #20
 8004f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f34:	4413      	add	r3, r2
 8004f36:	460a      	mov	r2, r1
 8004f38:	701a      	strb	r2, [r3, #0]
        for( ; i < 16; i++ )
 8004f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f42:	2b0f      	cmp	r3, #15
 8004f44:	d9e9      	bls.n	8004f1a <mbedtls_aes_crypt_xts+0x196>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f107 0314 	add.w	r3, r7, #20
 8004f4c:	f107 0214 	add.w	r2, r7, #20
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	f7ff fc25 	bl	80047a0 <mbedtls_aes_crypt_ecb>
 8004f56:	6538      	str	r0, [r7, #80]	; 0x50
        if( ret != 0 )
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <mbedtls_aes_crypt_xts+0x1de>
            return ret;
 8004f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f60:	e018      	b.n	8004f94 <mbedtls_aes_crypt_xts+0x210>

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
 8004f62:	2300      	movs	r3, #0
 8004f64:	657b      	str	r3, [r7, #84]	; 0x54
 8004f66:	e011      	b.n	8004f8c <mbedtls_aes_crypt_xts+0x208>
            prev_output[i] = tmp[i] ^ t[i];
 8004f68:	f107 0214 	add.w	r2, r7, #20
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	4413      	add	r3, r2
 8004f70:	7819      	ldrb	r1, [r3, #0]
 8004f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f76:	4413      	add	r3, r2
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7e:	4403      	add	r3, r0
 8004f80:	404a      	eors	r2, r1
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	3301      	adds	r3, #1
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d9ea      	bls.n	8004f68 <mbedtls_aes_crypt_xts+0x1e4>
    }

    return( 0 );
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3764      	adds	r7, #100	; 0x64
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}

08004f9c <mbedtls_aes_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	617b      	str	r3, [r7, #20]

    if( n > 15 )
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d902      	bls.n	8004fbc <mbedtls_aes_crypt_cfb128+0x20>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004fb6:	f06f 0320 	mvn.w	r3, #32
 8004fba:	e05a      	b.n	8005072 <mbedtls_aes_crypt_cfb128+0xd6>

    if( mode == MBEDTLS_AES_DECRYPT )
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d14e      	bne.n	8005060 <mbedtls_aes_crypt_cfb128+0xc4>
    {
        while( length-- )
 8004fc2:	e026      	b.n	8005012 <mbedtls_aes_crypt_cfb128+0x76>
        {
            if( n == 0 )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <mbedtls_aes_crypt_cfb128+0x3a>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fbe5 	bl	80047a0 <mbedtls_aes_crypt_ecb>

            c = *input++;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	627a      	str	r2, [r7, #36]	; 0x24
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char)( c ^ iv[n] );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	440b      	add	r3, r1
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	4053      	eors	r3, r2
 8004ff0:	b259      	sxtb	r1, r3
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ff8:	b2ca      	uxtb	r2, r1
 8004ffa:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8004ffc:	6a3a      	ldr	r2, [r7, #32]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) & 0x0F;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3301      	adds	r3, #1
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	617b      	str	r3, [r7, #20]
        while( length-- )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1d3      	bne.n	8004fc4 <mbedtls_aes_crypt_cfb128+0x28>
 800501c:	e025      	b.n	800506a <mbedtls_aes_crypt_cfb128+0xce>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <mbedtls_aes_crypt_cfb128+0x94>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	2101      	movs	r1, #1
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fbb8 	bl	80047a0 <mbedtls_aes_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	7819      	ldrb	r1, [r3, #0]
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	627a      	str	r2, [r7, #36]	; 0x24
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	1c58      	adds	r0, r3, #1
 8005044:	62b8      	str	r0, [r7, #40]	; 0x28
 8005046:	404a      	eors	r2, r1
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	440a      	add	r2, r1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) & 0x0F;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3301      	adds	r3, #1
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	617b      	str	r3, [r7, #20]
        while( length-- )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1d9      	bne.n	800501e <mbedtls_aes_crypt_cfb128+0x82>
        }
    }

    *iv_off = n;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	601a      	str	r2, [r3, #0]

    return( 0 );
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	613b      	str	r3, [r7, #16]

    if( n > 15 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b0f      	cmp	r3, #15
 8005096:	d922      	bls.n	80050de <mbedtls_aes_crypt_ofb+0x64>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8005098:	f06f 0320 	mvn.w	r3, #32
 800509c:	e02a      	b.n	80050f4 <mbedtls_aes_crypt_ofb+0x7a>

    while( length-- )
    {
        if( n == 0 )
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <mbedtls_aes_crypt_ofb+0x3e>
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fb78 	bl	80047a0 <mbedtls_aes_crypt_ecb>
 80050b0:	6178      	str	r0, [r7, #20]
            if( ret != 0 )
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11b      	bne.n	80050f0 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	623a      	str	r2, [r7, #32]
 80050be:	7819      	ldrb	r1, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1c58      	adds	r0, r3, #1
 80050cc:	6278      	str	r0, [r7, #36]	; 0x24
 80050ce:	404a      	eors	r2, r1
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3301      	adds	r3, #1
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	613b      	str	r3, [r7, #16]
    while( length-- )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	60ba      	str	r2, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1da      	bne.n	800509e <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e000      	b.n	80050f2 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 80050f0:	bf00      	nop

exit:
    return( ret );
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
    AES_VALIDATE_RET( nonce_counter != NULL );
    AES_VALIDATE_RET( stream_block != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *nc_off;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]

    if ( n > 0x0F )
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d939      	bls.n	800518a <mbedtls_aes_crypt_ctr+0x8e>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8005116:	f06f 0320 	mvn.w	r3, #32
 800511a:	e03f      	b.n	800519c <mbedtls_aes_crypt_ctr+0xa0>

    while( length-- )
    {
        if( n == 0 ) {
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11b      	bne.n	800515a <mbedtls_aes_crypt_ctr+0x5e>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	2101      	movs	r1, #1
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fb39 	bl	80047a0 <mbedtls_aes_crypt_ecb>

            for( i = 16; i > 0; i-- )
 800512e:	2310      	movs	r3, #16
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	e00d      	b.n	8005150 <mbedtls_aes_crypt_ctr+0x54>
                if( ++nonce_counter[i - 1] != 0 )
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3b01      	subs	r3, #1
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	4413      	add	r3, r2
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	3201      	adds	r2, #1
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <mbedtls_aes_crypt_ctr+0x5c>
            for( i = 16; i > 0; i-- )
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3b01      	subs	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dcee      	bgt.n	8005134 <mbedtls_aes_crypt_ctr+0x38>
 8005156:	e000      	b.n	800515a <mbedtls_aes_crypt_ctr+0x5e>
                    break;
 8005158:	bf00      	nop
        }
        c = *input++;
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	b25a      	sxtb	r2, r3
 8005168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	440b      	add	r3, r1
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	b25b      	sxtb	r3, r3
 8005172:	4053      	eors	r3, r2
 8005174:	b259      	sxtb	r1, r3
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
 800517c:	b2ca      	uxtb	r2, r1
 800517e:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	3301      	adds	r3, #1
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	61bb      	str	r3, [r7, #24]
    while( length-- )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	1e5a      	subs	r2, r3, #1
 800518e:	60ba      	str	r2, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1c3      	bne.n	800511c <mbedtls_aes_crypt_ctr+0x20>
    }

    *nc_off = n;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	601a      	str	r2, [r3, #0]

    return( 0 );
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f00e fb27 	bl	8013808 <mbedtls_platform_zeroize>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
    X->n = 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01a      	beq.n	800522c <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7ff ffcb 	bl	80051a4 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f00f f9d8 	bl	80145c8 <free>
    }

    X->s = 1;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	e000      	b.n	800522e <mbedtls_mpi_free+0x46>
        return;
 800522c:	bf00      	nop
}
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f242 7210 	movw	r2, #10000	; 0x2710
 8005244:	4293      	cmp	r3, r2
 8005246:	d902      	bls.n	800524e <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005248:	f06f 030f 	mvn.w	r3, #15
 800524c:	e031      	b.n	80052b2 <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d92b      	bls.n	80052b0 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8005258:	2104      	movs	r1, #4
 800525a:	6838      	ldr	r0, [r7, #0]
 800525c:	f00e ff86 	bl	801416c <calloc>
 8005260:	4603      	mov	r3, r0
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800526a:	f06f 030f 	mvn.w	r3, #15
 800526e:	e020      	b.n	80052b2 <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	461a      	mov	r2, r3
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f00f f9a7 	bl	80145d8 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7ff ff85 	bl	80051a4 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f00f f992 	bl	80145c8 <free>
        }

        X->n = nblimbs;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	605a      	str	r2, [r3, #4]
        X->p = p;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d902      	bls.n	80052d4 <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80052ce:	f06f 030f 	mvn.w	r3, #15
 80052d2:	e054      	b.n	800537e <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up if there are currently fewer than nblimbs limbs. */
    if( X->n <= nblimbs )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d305      	bcc.n	80052ea <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ffa7 	bl	8005234 <mbedtls_mpi_grow>
 80052e6:	4603      	mov	r3, r0
 80052e8:	e049      	b.n	800537e <mbedtls_mpi_shrink+0xc4>
    /* After this point, then X->n > nblimbs and in particular X->n > 0. */

    for( i = X->n - 1; i > 0; i-- )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e00a      	b.n	800530a <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f1      	bne.n	80052f4 <mbedtls_mpi_shrink+0x3a>
 8005310:	e000      	b.n	8005314 <mbedtls_mpi_shrink+0x5a>
            break;
 8005312:	bf00      	nop
    i++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d201      	bcs.n	8005326 <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 8005326:	2104      	movs	r1, #4
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f00e ff1f 	bl	801416c <calloc>
 800532e:	4603      	mov	r3, r0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8005338:	f06f 030f 	mvn.w	r3, #15
 800533c:	e01f      	b.n	800537e <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d014      	beq.n	8005370 <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	461a      	mov	r2, r3
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f00f f941 	bl	80145d8 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7ff ff1f 	bl	80051a4 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f00f f92c 	bl	80145c8 <free>
    }

    X->n = i;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	605a      	str	r2, [r3, #4]
    X->p = p;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]

    return( 0 );
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <mbedtls_mpi_resize_clear>:

/* Resize X to have exactly n limbs and set it to 0. */
static int mbedtls_mpi_resize_clear( mbedtls_mpi *X, size_t limbs )
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
    if( limbs == 0 )
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <mbedtls_mpi_resize_clear+0x1a>
    {
        mbedtls_mpi_free( X );
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff ff26 	bl	80051e8 <mbedtls_mpi_free>
        return( 0 );
 800539c:	2300      	movs	r3, #0
 800539e:	e019      	b.n	80053d4 <mbedtls_mpi_resize_clear+0x4e>
    }
    else if( X->n == limbs )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d10c      	bne.n	80053c4 <mbedtls_mpi_resize_clear+0x3e>
    {
        memset( X->p, 0, limbs * ciL );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6898      	ldr	r0, [r3, #8]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	461a      	mov	r2, r3
 80053b4:	2100      	movs	r1, #0
 80053b6:	f00f f91d 	bl	80145f4 <memset>
        X->s = 1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
        return( 0 );
 80053c0:	2300      	movs	r3, #0
 80053c2:	e007      	b.n	80053d4 <mbedtls_mpi_resize_clear+0x4e>
    }
    else
    {
        mbedtls_mpi_free( X );
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ff0f 	bl	80051e8 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff31 	bl	8005234 <mbedtls_mpi_grow>
 80053d2:	4603      	mov	r3, r0
    }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <mbedtls_mpi_copy>:
 * Ensure that X does not shrink. This is not guaranteed by the public API,
 * but some code in the bignum module relies on this property, for example
 * in mbedtls_mpi_exp_mod().
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
    int ret = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d101      	bne.n	80053f6 <mbedtls_mpi_copy+0x1a>
        return( 0 );
 80053f2:	2300      	movs	r3, #0
 80053f4:	e057      	b.n	80054a6 <mbedtls_mpi_copy+0xca>

    if( Y->n == 0 )
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d111      	bne.n	8005422 <mbedtls_mpi_copy+0x46>
    {
        if( X->n != 0 )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <mbedtls_mpi_copy+0x42>
        {
            X->s = 1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
            memset( X->p, 0, X->n * ciL );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6898      	ldr	r0, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	461a      	mov	r2, r3
 8005418:	2100      	movs	r1, #0
 800541a:	f00f f8eb 	bl	80145f4 <memset>
        }
        return( 0 );
 800541e:	2300      	movs	r3, #0
 8005420:	e041      	b.n	80054a6 <mbedtls_mpi_copy+0xca>
    }

    for( i = Y->n - 1; i > 0; i-- )
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	e00a      	b.n	8005442 <mbedtls_mpi_copy+0x66>
        if( Y->p[i] != 0 )
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <mbedtls_mpi_copy+0x6e>
    for( i = Y->n - 1; i > 0; i-- )
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3b01      	subs	r3, #1
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f1      	bne.n	800542c <mbedtls_mpi_copy+0x50>
 8005448:	e000      	b.n	800544c <mbedtls_mpi_copy+0x70>
            break;
 800544a:	bf00      	nop
    i++;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	d908      	bls.n	8005476 <mbedtls_mpi_copy+0x9a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fee4 	bl	8005234 <mbedtls_mpi_grow>
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <mbedtls_mpi_copy+0xb6>
 8005474:	e016      	b.n	80054a4 <mbedtls_mpi_copy+0xc8>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	18d0      	adds	r0, r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	461a      	mov	r2, r3
 800548c:	2100      	movs	r1, #0
 800548e:	f00f f8b1 	bl	80145f4 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6898      	ldr	r0, [r3, #8]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	461a      	mov	r2, r3
 80054a0:	f00f f89a 	bl	80145d8 <memcpy>

cleanup:

    return( ret );
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <mpi_safe_cond_select_sign>:
 * \param[in] second    Must be either 1 (return b) or 0 (return a).
 *
 * \return The selected sign value.
 */
static int mpi_safe_cond_select_sign( int a, int b, unsigned char second )
{
 80054ae:	b480      	push	{r7}
 80054b0:	b089      	sub	sp, #36	; 0x24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
    /* In order to avoid questions about what we can reasonnably assume about
     * the representations of signed integers, move everything to unsigned
     * by taking advantage of the fact that a and b are either +1 or -1. */
    unsigned ua = a + 1;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
    unsigned ub = b + 1;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61bb      	str	r3, [r7, #24]

    /* second was 0 or 1, mask is 0 or 2 as are ua and ub */
    const unsigned mask = second << 1;
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	617b      	str	r3, [r7, #20]

    /* select ua or ub */
    unsigned ur = ( ua & ~mask ) | ( ub & mask );
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	43da      	mvns	r2, r3
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	401a      	ands	r2, r3
 80054d6:	69b9      	ldr	r1, [r7, #24]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	400b      	ands	r3, r1
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

    /* ur is now 0 or 2, convert back to -1 or +1 */
    return( (int) ur - 1 );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3b01      	subs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3724      	adds	r7, #36	; 0x24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	70fb      	strb	r3, [r7, #3]
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    const mbedtls_mpi_uint mask = -assign;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	425b      	negs	r3, r3
 8005502:	613b      	str	r3, [r7, #16]

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e018      	b.n	800553c <mpi_safe_cond_assign+0x4c>
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	ea02 0103 	and.w	r1, r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	43db      	mvns	r3, r3
 8005528:	401a      	ands	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	68b8      	ldr	r0, [r7, #8]
 8005530:	4403      	add	r3, r0
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3301      	adds	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	429a      	cmp	r2, r3
 8005542:	d3e2      	bcc.n	800550a <mpi_safe_cond_assign+0x1a>
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b088      	sub	sp, #32
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	4613      	mov	r3, r2
 800555e:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> (sizeof( assign ) * 8 - 1);
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	425b      	negs	r3, r3
 8005568:	b2da      	uxtb	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	4313      	orrs	r3, r2
 800556e:	b2db      	uxtb	r3, r3
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	71fb      	strb	r3, [r7, #7]
    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    limb_mask = -assign;
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	425b      	negs	r3, r3
 8005578:	617b      	str	r3, [r7, #20]

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4619      	mov	r1, r3
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff fe57 	bl	8005234 <mbedtls_mpi_grow>
 8005586:	61b8      	str	r0, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d12f      	bne.n	80055ee <mbedtls_mpi_safe_cond_assign+0x9c>

    X->s = mpi_safe_cond_select_sign( X->s, Y->s, assign );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	79fa      	ldrb	r2, [r7, #7]
 8005598:	4619      	mov	r1, r3
 800559a:	f7ff ff88 	bl	80054ae <mpi_safe_cond_select_sign>
 800559e:	4602      	mov	r2, r0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

    mpi_safe_cond_assign( Y->n, X->p, Y->p, assign );
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6858      	ldr	r0, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6899      	ldr	r1, [r3, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	f7ff ff9d 	bl	80054f0 <mpi_safe_cond_assign>

    for( i = Y->n; i < X->n; i++ )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e011      	b.n	80055e2 <mbedtls_mpi_safe_cond_assign+0x90>
        X->p[i] &= ~limb_mask;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	43da      	mvns	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6898      	ldr	r0, [r3, #8]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4403      	add	r3, r0
 80055d8:	400a      	ands	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
    for( i = Y->n; i < X->n; i++ )
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3e8      	bcc.n	80055be <mbedtls_mpi_safe_cond_assign+0x6c>

cleanup:
 80055ec:	e000      	b.n	80055f0 <mbedtls_mpi_safe_cond_assign+0x9e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80055ee:	bf00      	nop
    return( ret );
 80055f0:	69bb      	ldr	r3, [r7, #24]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08a      	sub	sp, #40	; 0x28
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	4613      	mov	r3, r2
 8005606:	71fb      	strb	r3, [r7, #7]
    mbedtls_mpi_uint limb_mask;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d101      	bne.n	8005614 <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 8005610:	2300      	movs	r3, #0
 8005612:	e07a      	b.n	800570a <mbedtls_mpi_safe_cond_swap+0x110>
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> (sizeof( swap ) * 8 - 1);
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	425b      	negs	r3, r3
 8005618:	b2da      	uxtb	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	4313      	orrs	r3, r2
 800561e:	b2db      	uxtb	r3, r3
 8005620:	09db      	lsrs	r3, r3, #7
 8005622:	71fb      	strb	r3, [r7, #7]
    /* all-bits 1 if swap is 1, all-bits 0 if swap is 0 */
    limb_mask = -swap;
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	425b      	negs	r3, r3
 8005628:	61fb      	str	r3, [r7, #28]

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fdff 	bl	8005234 <mbedtls_mpi_grow>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d161      	bne.n	8005702 <mbedtls_mpi_safe_cond_swap+0x108>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	68b8      	ldr	r0, [r7, #8]
 8005646:	f7ff fdf5 	bl	8005234 <mbedtls_mpi_grow>
 800564a:	6278      	str	r0, [r7, #36]	; 0x24
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d159      	bne.n	8005706 <mbedtls_mpi_safe_cond_swap+0x10c>

    s = X->s;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
    X->s = mpi_safe_cond_select_sign( X->s, Y->s, swap );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	79fa      	ldrb	r2, [r7, #7]
 8005662:	4619      	mov	r1, r3
 8005664:	f7ff ff23 	bl	80054ae <mpi_safe_cond_select_sign>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	601a      	str	r2, [r3, #0]
    Y->s = mpi_safe_cond_select_sign( Y->s, s, swap );
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	79fa      	ldrb	r2, [r7, #7]
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff ff19 	bl	80054ae <mpi_safe_cond_select_sign>
 800567c:	4602      	mov	r2, r0
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 8005682:	2300      	movs	r3, #0
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	e036      	b.n	80056f6 <mbedtls_mpi_safe_cond_swap+0xfc>
    {
        tmp = X->p[i];
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
        X->p[i] = ( X->p[i] & ~limb_mask ) | ( Y->p[i] & limb_mask );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	ea02 0103 	and.w	r1, r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	401a      	ands	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6898      	ldr	r0, [r3, #8]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4403      	add	r3, r0
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
        Y->p[i] = ( Y->p[i] & ~limb_mask ) | (     tmp & limb_mask );
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	ea02 0103 	and.w	r1, r2, r3
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	401a      	ands	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6898      	ldr	r0, [r3, #8]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4403      	add	r3, r0
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	3301      	adds	r3, #1
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d3c3      	bcc.n	8005688 <mbedtls_mpi_safe_cond_swap+0x8e>
    }

cleanup:
 8005700:	e002      	b.n	8005708 <mbedtls_mpi_safe_cond_swap+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <mbedtls_mpi_safe_cond_swap+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 8005706:	bf00      	nop
    return( ret );
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800571c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8005720:	60fb      	str	r3, [r7, #12]
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8005722:	2101      	movs	r1, #1
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff fd85 	bl	8005234 <mbedtls_mpi_grow>
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11a      	bne.n	8005768 <mbedtls_mpi_lset+0x56>
    memset( X->p, 0, X->n * ciL );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6898      	ldr	r0, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	461a      	mov	r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	f00e ff58 	bl	80145f4 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800574a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	da02      	bge.n	8005760 <mbedtls_mpi_lset+0x4e>
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	e000      	b.n	8005762 <mbedtls_mpi_lset+0x50>
 8005760:	2201      	movs	r2, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e000      	b.n	800576a <mbedtls_mpi_lset+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 8005768:	bf00      	nop

cleanup:

    return( ret );
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	015b      	lsls	r3, r3, #5
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d301      	bcc.n	800578e <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800578a:	2300      	movs	r3, #0
 800578c:	e00d      	b.n	80057aa <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	f003 0301 	and.w	r3, r3, #1
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b088      	sub	sp, #32
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <mbedtls_mpi_set_bit+0x32>
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d002      	beq.n	80057e8 <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80057e2:	f06f 0303 	mvn.w	r3, #3
 80057e6:	e039      	b.n	800585c <mbedtls_mpi_set_bit+0xa6>

    if( X->n * biL <= pos )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d30e      	bcc.n	8005812 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 80057fa:	2300      	movs	r3, #0
 80057fc:	e02e      	b.n	800585c <mbedtls_mpi_set_bit+0xa6>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	3301      	adds	r3, #1
 8005802:	4619      	mov	r1, r3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff fd15 	bl	8005234 <mbedtls_mpi_grow>
 800580a:	61f8      	str	r0, [r7, #28]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d122      	bne.n	8005858 <mbedtls_mpi_set_bit+0xa2>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	6819      	ldr	r1, [r3, #0]
 800581e:	2201      	movs	r2, #1
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43da      	mvns	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6898      	ldr	r0, [r3, #8]
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4403      	add	r3, r0
 8005832:	400a      	ands	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	79fa      	ldrb	r2, [r7, #7]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	409a      	lsls	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6898      	ldr	r0, [r3, #8]
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4403      	add	r3, r0
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e000      	b.n	800585a <mbedtls_mpi_set_bit+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 8005858:	bf00      	nop

cleanup:

    return( ret );
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e01d      	b.n	80058b2 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e014      	b.n	80058a6 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <mbedtls_mpi_lsb+0x36>
                return( count );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	e011      	b.n	80058be <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3301      	adds	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b1f      	cmp	r3, #31
 80058aa:	d9e7      	bls.n	800587c <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3dc      	bcc.n	8005876 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80058d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058d6:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e00a      	b.n	80058f4 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <mbedtls_clz+0x32>

        mask >>= 1;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b1f      	cmp	r3, #31
 80058f8:	d9f1      	bls.n	80058de <mbedtls_clz+0x14>
 80058fa:	e000      	b.n	80058fe <mbedtls_clz+0x34>
        if( x & mask ) break;
 80058fc:	bf00      	nop
    }

    return j;
 80058fe:	68fb      	ldr	r3, [r7, #12]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800591c:	2300      	movs	r3, #0
 800591e:	e025      	b.n	800596c <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	3b01      	subs	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e00a      	b.n	8005940 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3b01      	subs	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <mbedtls_mpi_bitlen+0x1e>
 8005946:	e000      	b.n	800594a <mbedtls_mpi_bitlen+0x3e>
            break;
 8005948:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ffb7 	bl	80058ca <mbedtls_clz>
 800595c:	4603      	mov	r3, r0
 800595e:	f1c3 0320 	rsb	r3, r3, #32
 8005962:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4413      	add	r3, r2
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ffc5 	bl	800590c <mbedtls_mpi_bitlen>
 8005982:	4603      	mov	r3, r0
 8005984:	3307      	adds	r3, #7
 8005986:	08db      	lsrs	r3, r3, #3
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <mpi_uint_bigendian_to_host>:

    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d026      	beq.n	8005a06 <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	e016      	b.n	80059fc <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff ffdc 	bl	8005990 <mpi_uint_bigendian_to_host>
 80059d8:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ffd6 	bl	8005990 <mpi_uint_bigendian_to_host>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3304      	adds	r3, #4
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3b04      	subs	r3, #4
 80059fa:	613b      	str	r3, [r7, #16]
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d9e4      	bls.n	80059ce <mpi_bigendian_to_host+0x26>
 8005a04:	e000      	b.n	8005a08 <mpi_bigendian_to_host+0x60>
        return;
 8005a06:	bf00      	nop
    }
}
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b088      	sub	sp, #32
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8005a1a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8005a1e:	61fb      	str	r3, [r7, #28]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	f002 0203 	and.w	r2, r2, #3
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	bf14      	ite	ne
 8005a2e:	2201      	movne	r2, #1
 8005a30:	2200      	moveq	r2, #0
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	4413      	add	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
 8005a42:	69b9      	ldr	r1, [r7, #24]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fc9e 	bl	8005386 <mbedtls_mpi_resize_clear>
 8005a4a:	61f8      	str	r0, [r7, #28]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d114      	bne.n	8005a7c <mbedtls_mpi_read_binary+0x6e>

    /* Avoid calling `memcpy` with NULL source or destination argument,
     * even if buflen is 0. */
    if( buflen != 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d013      	beq.n	8005a80 <mbedtls_mpi_read_binary+0x72>
    {
        Xp = (unsigned char*) X->p;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f00e fdb5 	bl	80145d8 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff ff97 	bl	80059a8 <mpi_bigendian_to_host>
 8005a7a:	e002      	b.n	8005a82 <mbedtls_mpi_read_binary+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
 8005a7c:	bf00      	nop
 8005a7e:	e000      	b.n	8005a82 <mbedtls_mpi_read_binary+0x74>
    }

cleanup:
 8005a80:	bf00      	nop
    /*
     * This function is also used to import keys. However, wiping the buffers
     * upon failure is not necessary because failure only can happen before any
     * input is copied.
     */
    return( ret );
 8005a82:	69fb      	ldr	r3, [r7, #28]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <mbedtls_mpi_write_binary_le>:
/*
 * Export X into unsigned binary data, little endian
 */
int mbedtls_mpi_write_binary_le( const mbedtls_mpi *X,
                                 unsigned char *buf, size_t buflen )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
    size_t stored_bytes = X->n * ciL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	617b      	str	r3, [r7, #20]
    size_t bytes_to_copy;
    size_t i;

    if( stored_bytes < buflen )
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d202      	bcs.n	8005aae <mbedtls_mpi_write_binary_le+0x22>
    {
        bytes_to_copy = stored_bytes;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e01e      	b.n	8005aec <mbedtls_mpi_write_binary_le+0x60>
    }
    else
    {
        bytes_to_copy = buflen;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	61fb      	str	r3, [r7, #28]

        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e015      	b.n	8005ae4 <mbedtls_mpi_write_binary_le+0x58>
        {
            if( GET_BYTE( X, i ) != 0 )
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <mbedtls_mpi_write_binary_le+0x52>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8005ad8:	f06f 0307 	mvn.w	r3, #7
 8005adc:	e031      	b.n	8005b42 <mbedtls_mpi_write_binary_le+0xb6>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d3e5      	bcc.n	8005ab8 <mbedtls_mpi_write_binary_le+0x2c>
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e014      	b.n	8005b1c <mbedtls_mpi_write_binary_le+0x90>
        buf[i] = GET_BYTE( X, i );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	fa22 f103 	lsr.w	r1, r2, r3
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	4413      	add	r3, r2
 8005b12:	b2ca      	uxtb	r2, r1
 8005b14:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < bytes_to_copy; i++ )
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3e6      	bcc.n	8005af2 <mbedtls_mpi_write_binary_le+0x66>

    if( stored_bytes < buflen )
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d209      	bcs.n	8005b40 <mbedtls_mpi_write_binary_le+0xb4>
    {
        /* Write trailing 0 bytes */
        memset( buf + stored_bytes, 0, buflen - stored_bytes );
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	18d0      	adds	r0, r2, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f00e fd5a 	bl	80145f4 <memset>
    }

    return( 0 );
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b088      	sub	sp, #32
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	607a      	str	r2, [r7, #4]
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	613b      	str	r3, [r7, #16]

    if( stored_bytes < buflen )
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d210      	bcs.n	8005b88 <mbedtls_mpi_write_binary+0x3e>
        /* There is enough space in the output buffer. Write initial
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	61fb      	str	r3, [r7, #28]
        p = buf + buflen - stored_bytes;
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	4413      	add	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        memset( buf, 0, buflen - stored_bytes );
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2100      	movs	r1, #0
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f00e fd37 	bl	80145f4 <memset>
 8005b86:	e020      	b.n	8005bca <mbedtls_mpi_write_binary+0x80>
    }
    else
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	61fb      	str	r3, [r7, #28]
        p = buf;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61bb      	str	r3, [r7, #24]
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e015      	b.n	8005bc2 <mbedtls_mpi_write_binary+0x78>
        {
            if( GET_BYTE( X, i ) != 0 )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <mbedtls_mpi_write_binary+0x72>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8005bb6:	f06f 0307 	mvn.w	r3, #7
 8005bba:	e026      	b.n	8005c0a <mbedtls_mpi_write_binary+0xc0>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3e5      	bcc.n	8005b96 <mbedtls_mpi_write_binary+0x4c>
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e017      	b.n	8005c00 <mbedtls_mpi_write_binary+0xb6>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	fa22 f103 	lsr.w	r1, r2, r3
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b2ca      	uxtb	r2, r1
 8005bf8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < bytes_to_copy; i++ )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d3e3      	bcc.n	8005bd0 <mbedtls_mpi_write_binary+0x86>

    return( 0 );
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b088      	sub	sp, #32
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8005c1c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8005c20:	61fb      	str	r3, [r7, #28]
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff fe69 	bl	800590c <mbedtls_mpi_bitlen>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	015b      	lsls	r3, r3, #5
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d912      	bls.n	8005c74 <mbedtls_mpi_shift_l+0x62>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	f002 021f 	and.w	r2, r2, #31
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	bf14      	ite	ne
 8005c5c:	2201      	movne	r2, #1
 8005c5e:	2200      	moveq	r2, #0
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	4413      	add	r3, r2
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff fae4 	bl	8005234 <mbedtls_mpi_grow>
 8005c6c:	61f8      	str	r0, [r7, #28]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d16e      	bne.n	8005d52 <mbedtls_mpi_shift_l+0x140>

    ret = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02f      	beq.n	8005cde <mbedtls_mpi_shift_l+0xcc>
    {
        for( i = X->n; i > v0; i-- )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e016      	b.n	8005cb4 <mbedtls_mpi_shift_l+0xa2>
            X->p[i - 1] = X->p[i - v0 - 1];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ac9      	subs	r1, r1, r3
 8005c90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005c94:	440b      	add	r3, r1
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005ca4:	4403      	add	r3, r0
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d8e4      	bhi.n	8005c86 <mbedtls_mpi_shift_l+0x74>

        for( ; i > 0; i-- )
 8005cbc:	e00c      	b.n	8005cd8 <mbedtls_mpi_shift_l+0xc6>
            X->p[i - 1] = 0;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005cc8:	440b      	add	r3, r1
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ef      	bne.n	8005cbe <mbedtls_mpi_shift_l+0xac>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d038      	beq.n	8005d56 <mbedtls_mpi_shift_l+0x144>
    {
        for( i = v0; i < X->n; i++ )
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e02d      	b.n	8005d46 <mbedtls_mpi_shift_l+0x134>
        {
            r1 = X->p[i] >> (biL - t1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f1c3 0320 	rsb	r3, r3, #32
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1e:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3cc      	bcc.n	8005cea <mbedtls_mpi_shift_l+0xd8>
        }
    }

cleanup:
 8005d50:	e001      	b.n	8005d56 <mbedtls_mpi_shift_l+0x144>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <mbedtls_mpi_shift_l+0x146>
cleanup:
 8005d56:	bf00      	nop

    return( ret );
 8005d58:	69fb      	ldr	r3, [r7, #28]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b088      	sub	sp, #32
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f003 031f 	and.w	r3, r3, #31
 8005d7c:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d807      	bhi.n	8005d98 <mbedtls_mpi_shift_r+0x36>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d108      	bne.n	8005da4 <mbedtls_mpi_shift_r+0x42>
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 8005d98:	2100      	movs	r1, #0
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fcb9 	bl	8005712 <mbedtls_mpi_lset>
 8005da0:	4603      	mov	r3, r0
 8005da2:	e075      	b.n	8005e90 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02a      	beq.n	8005e00 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e010      	b.n	8005dd2 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	69f9      	ldr	r1, [r7, #28]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	440b      	add	r3, r1
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3e7      	bcc.n	8005db0 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 8005de0:	e009      	b.n	8005df6 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	3301      	adds	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d3f0      	bcc.n	8005de2 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d043      	beq.n	8005e8e <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e03c      	b.n	8005e88 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	69f9      	ldr	r1, [r7, #28]
 8005e14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e18:	440b      	add	r3, r1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f1c3 0320 	rsb	r3, r3, #32
 8005e26:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2a:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e36:	440b      	add	r3, r1
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	69f8      	ldr	r0, [r7, #28]
 8005e44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e48:	4403      	add	r3, r0
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	fa21 f202 	lsr.w	r2, r1, r2
 8005e54:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e60:	440b      	add	r3, r1
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	6819      	ldr	r1, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	69f8      	ldr	r0, [r7, #28]
 8005e6e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e72:	4403      	add	r3, r0
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
            r0 = r1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1bf      	bne.n	8005e0e <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e00d      	b.n	8005ec6 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005eb4:	440b      	add	r3, r1
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ee      	bne.n	8005eaa <mbedtls_mpi_cmp_abs+0x12>
 8005ecc:	e000      	b.n	8005ed0 <mbedtls_mpi_cmp_abs+0x38>
            break;
 8005ece:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	e00d      	b.n	8005ef4 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005ee2:	440b      	add	r3, r1
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ee      	bne.n	8005ed8 <mbedtls_mpi_cmp_abs+0x40>
 8005efa:	e000      	b.n	8005efe <mbedtls_mpi_cmp_abs+0x66>
            break;
 8005efc:	bf00      	nop

    if( i == 0 && j == 0 )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <mbedtls_mpi_cmp_abs+0x76>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e040      	b.n	8005f90 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d901      	bls.n	8005f1a <mbedtls_mpi_cmp_abs+0x82>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e03a      	b.n	8005f90 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d932      	bls.n	8005f88 <mbedtls_mpi_cmp_abs+0xf0>
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	e033      	b.n	8005f90 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f32:	440b      	add	r3, r1
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f44:	4403      	add	r3, r0
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d901      	bls.n	8005f54 <mbedtls_mpi_cmp_abs+0xbc>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e01d      	b.n	8005f90 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68f9      	ldr	r1, [r7, #12]
 8005f5a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f5e:	440b      	add	r3, r1
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6899      	ldr	r1, [r3, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f70:	4403      	add	r3, r0
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d202      	bcs.n	8005f82 <mbedtls_mpi_cmp_abs+0xea>
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f80:	e006      	b.n	8005f90 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1cc      	bne.n	8005f28 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e00d      	b.n	8005fca <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005fb8:	440b      	add	r3, r1
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ee      	bne.n	8005fae <mbedtls_mpi_cmp_mpi+0x12>
 8005fd0:	e000      	b.n	8005fd4 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 8005fd2:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	e00d      	b.n	8005ff8 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005fe6:	440b      	add	r3, r1
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1ee      	bne.n	8005fdc <mbedtls_mpi_cmp_mpi+0x40>
 8005ffe:	e000      	b.n	8006002 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 8006000:	bf00      	nop

    if( i == 0 && j == 0 )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <mbedtls_mpi_cmp_mpi+0x76>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 800600e:	2300      	movs	r3, #0
 8006010:	e059      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d902      	bls.n	8006020 <mbedtls_mpi_cmp_mpi+0x84>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	e052      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <mbedtls_mpi_cmp_mpi+0x94>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	425b      	negs	r3, r3
 800602e:	e04a      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd05      	ble.n	8006044 <mbedtls_mpi_cmp_mpi+0xa8>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da01      	bge.n	8006044 <mbedtls_mpi_cmp_mpi+0xa8>
 8006040:	2301      	movs	r3, #1
 8006042:	e040      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd38      	ble.n	80060be <mbedtls_mpi_cmp_mpi+0x122>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	da34      	bge.n	80060be <mbedtls_mpi_cmp_mpi+0x122>
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	e035      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006064:	440b      	add	r3, r1
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006076:	4403      	add	r3, r0
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d902      	bls.n	8006088 <mbedtls_mpi_cmp_mpi+0xec>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	e01e      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68f9      	ldr	r1, [r7, #12]
 800608e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006092:	440b      	add	r3, r1
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80060a4:	4403      	add	r3, r0
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d203      	bcs.n	80060b8 <mbedtls_mpi_cmp_mpi+0x11c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	425b      	negs	r3, r3
 80060b6:	e006      	b.n	80060c6 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1ca      	bne.n	800605a <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <ct_lt_mpi_uint>:
 *
 * \return          1 if \p x is less than \p y, 0 otherwise
 */
static unsigned ct_lt_mpi_uint( const mbedtls_mpi_uint x,
        const mbedtls_mpi_uint y )
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint cond;

    /*
     * Check if the most significant bits (MSB) of the operands are different.
     */
    cond = ( x ^ y );
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	4053      	eors	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
    /*
     * If the MSB are the same then the difference x-y will be negative (and
     * have its MSB set to 1 during conversion to unsigned) if and only if x<y.
     */
    ret = ( x - y ) & ~cond;
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	1ad2      	subs	r2, r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	4013      	ands	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]
    /*
     * If the MSB are different, then the operand with the MSB of 1 is the
     * bigger. (That is if y has MSB of 1, then x<y is true and it is false if
     * the MSB of y is 0.)
     */
    ret |= y & cond;
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4013      	ands	r3, r2
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60bb      	str	r3, [r7, #8]


    ret = ret >> ( biL - 1 );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0fdb      	lsrs	r3, r3, #31
 8006102:	60bb      	str	r3, [r7, #8]

    return (unsigned) ret;
 8006104:	68bb      	ldr	r3, [r7, #8]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <mbedtls_mpi_lt_mpi_ct>:
/*
 * Compare signed values in constant time
 */
int mbedtls_mpi_lt_mpi_ct( const mbedtls_mpi *X, const mbedtls_mpi *Y,
        unsigned *ret )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b08a      	sub	sp, #40	; 0x28
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );
    MPI_VALIDATE_RET( ret != NULL );

    if( X->n != Y->n )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d002      	beq.n	8006130 <mbedtls_mpi_lt_mpi_ct+0x1e>
        return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 800612a:	f06f 0303 	mvn.w	r3, #3
 800612e:	e06f      	b.n	8006210 <mbedtls_mpi_lt_mpi_ct+0xfe>

    /*
     * Set sign_N to 1 if N >= 0, 0 if N < 0.
     * We know that N->s == 1 if N >= 0 and N->s == -1 if N < 0.
     */
    X_is_negative = ( X->s & 2 ) >> 1;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	105b      	asrs	r3, r3, #1
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
    Y_is_negative = ( Y->s & 2 ) >> 1;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	105b      	asrs	r3, r3, #1
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	61bb      	str	r3, [r7, #24]
    /*
     * If the signs are different, then the positive operand is the bigger.
     * That is if X is negative (X_is_negative == 1), then X < Y is true and it
     * is false if X is positive (X_is_negative == 0).
     */
    cond = ( X_is_negative ^ Y_is_negative );
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4053      	eors	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    *ret = cond & X_is_negative;
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	401a      	ands	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]

    /*
     * This is a constant-time function. We might have the result, but we still
     * need to go through the loop. Record if we have the result already.
     */
    done = cond;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	623b      	str	r3, [r7, #32]

    for( i = X->n; i > 0; i-- )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	e050      	b.n	8006208 <mbedtls_mpi_lt_mpi_ct+0xf6>
         * X and Y are negative.
         *
         * Again even if we can make a decision, we just mark the result and
         * the fact that we are done and continue looping.
         */
        cond = ct_lt_mpi_uint( Y->p[i - 1], X->p[i - 1] );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006170:	440b      	add	r3, r1
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800617e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006182:	440b      	add	r3, r1
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	f7ff ffa1 	bl	80060d2 <ct_lt_mpi_uint>
 8006190:	6178      	str	r0, [r7, #20]
        *ret |= cond & ( 1 - done ) & X_is_negative;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f1c3 0101 	rsb	r1, r3, #1
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4019      	ands	r1, r3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	400b      	ands	r3, r1
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
        done |= cond;
 80061aa:	6a3a      	ldr	r2, [r7, #32]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	623b      	str	r3, [r7, #32]
         * X and Y are positive.
         *
         * Again even if we can make a decision, we just mark the result and
         * the fact that we are done and continue looping.
         */
        cond = ct_lt_mpi_uint( X->p[i - 1], Y->p[i - 1] );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061bc:	440b      	add	r3, r1
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061ce:	440b      	add	r3, r1
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7ff ff7b 	bl	80060d2 <ct_lt_mpi_uint>
 80061dc:	6178      	str	r0, [r7, #20]
        *ret |= cond & ( 1 - done ) & ( 1 - X_is_negative );
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f1c3 0101 	rsb	r1, r3, #1
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4019      	ands	r1, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f1c3 0301 	rsb	r3, r3, #1
 80061f2:	400b      	ands	r3, r1
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
        done |= cond;
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	623b      	str	r3, [r7, #32]
    for( i = X->n; i > 0; i-- )
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	3b01      	subs	r3, #1
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1ab      	bne.n	8006166 <mbedtls_mpi_lt_mpi_ct+0x54>
    }

    return( 0 );
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3728      	adds	r7, #40	; 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfb8      	it	lt
 8006228:	425b      	neglt	r3, r3
 800622a:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da02      	bge.n	8006238 <mbedtls_mpi_cmp_int+0x20>
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	e000      	b.n	800623a <mbedtls_mpi_cmp_int+0x22>
 8006238:	2301      	movs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 800623c:	2301      	movs	r3, #1
 800623e:	613b      	str	r3, [r7, #16]
    Y.p = p;
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8006246:	f107 030c 	add.w	r3, r7, #12
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fea5 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8006252:	4603      	mov	r3, r0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006268:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d105      	bne.n	8006282 <mbedtls_mpi_add_abs+0x26>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	d008      	beq.n	800629c <mbedtls_mpi_add_abs+0x40>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff f8a5 	bl	80053dc <mbedtls_mpi_copy>
 8006292:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 808d 	bne.w	80063b6 <mbedtls_mpi_add_abs+0x15a>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
 80062a8:	e00d      	b.n	80062c6 <mbedtls_mpi_add_abs+0x6a>
        if( B->p[j - 1] != 0 )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80062b4:	440b      	add	r3, r1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <mbedtls_mpi_add_abs+0x72>
    for( j = B->n; j > 0; j-- )
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	3b01      	subs	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ee      	bne.n	80062aa <mbedtls_mpi_add_abs+0x4e>
 80062cc:	e000      	b.n	80062d0 <mbedtls_mpi_add_abs+0x74>
            break;
 80062ce:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80062d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7fe ffae 	bl	8005234 <mbedtls_mpi_grow>
 80062d8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d16c      	bne.n	80063ba <mbedtls_mpi_add_abs+0x15e>

    o = B->p; p = X->p; c = 0;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80062f0:	2300      	movs	r3, #0
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f4:	e02c      	b.n	8006350 <mbedtls_mpi_add_abs+0xf4>
    {
        tmp= *o;
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	441a      	add	r2, r3
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	bf8c      	ite	hi
 8006312:	2301      	movhi	r3, #1
 8006314:	2300      	movls	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	441a      	add	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	bf8c      	ite	hi
 8006330:	2301      	movhi	r3, #1
 8006332:	2300      	movls	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	3301      	adds	r3, #1
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	3304      	adds	r3, #4
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3304      	adds	r3, #4
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	429a      	cmp	r2, r3
 8006356:	d3ce      	bcc.n	80062f6 <mbedtls_mpi_add_abs+0x9a>
    }

    while( c != 0 )
 8006358:	e029      	b.n	80063ae <mbedtls_mpi_add_abs+0x152>
    {
        if( i >= X->n )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	429a      	cmp	r2, r3
 8006362:	d30f      	bcc.n	8006384 <mbedtls_mpi_add_abs+0x128>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	3301      	adds	r3, #1
 8006368:	4619      	mov	r1, r3
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7fe ff62 	bl	8005234 <mbedtls_mpi_grow>
 8006370:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d122      	bne.n	80063be <mbedtls_mpi_add_abs+0x162>
            p = X->p + i;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	441a      	add	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	429a      	cmp	r2, r3
 8006398:	bf8c      	ite	hi
 800639a:	2301      	movhi	r3, #1
 800639c:	2300      	movls	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	3301      	adds	r3, #1
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3304      	adds	r3, #4
 80063ac:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1d2      	bne.n	800635a <mbedtls_mpi_add_abs+0xfe>
    }

cleanup:
 80063b4:	e004      	b.n	80063c0 <mbedtls_mpi_add_abs+0x164>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <mbedtls_mpi_add_abs+0x164>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <mbedtls_mpi_add_abs+0x164>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80063be:	bf00      	nop

    return( ret );
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <mpi_sub_hlp>:
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *l,
                                     const mbedtls_mpi_uint *r )
{
 80063ca:	b480      	push	{r7}
 80063cc:	b089      	sub	sp, #36	; 0x24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
    size_t i;
    mbedtls_mpi_uint c = 0, t, z;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < n; i++ )
 80063dc:	2300      	movs	r3, #0
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e031      	b.n	8006446 <mpi_sub_hlp+0x7c>
    {
        z = ( l[i] <  c );    t = l[i] - c;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	bf8c      	ite	hi
 80063f2:	2301      	movhi	r3, #1
 80063f4:	2300      	movls	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	613b      	str	r3, [r7, #16]
        c = ( t < r[i] ) + z; d[i] = t - r[i];
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4413      	add	r3, r2
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	bf34      	ite	cc
 800641a:	2301      	movcc	r3, #1
 800641c:	2300      	movcs	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	4413      	add	r3, r2
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	440b      	add	r3, r1
 800643a:	6939      	ldr	r1, [r7, #16]
 800643c:	1a8a      	subs	r2, r1, r2
 800643e:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	429a      	cmp	r2, r3
 800644c:	d3c9      	bcc.n	80063e2 <mpi_sub_hlp+0x18>
    }

    return( c );
 800644e:	69bb      	ldr	r3, [r7, #24]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3724      	adds	r7, #36	; 0x24
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9, 14.10)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8006468:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800646c:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_uint carry;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    for( n = B->n; n > 0; n-- )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	e00d      	b.n	8006492 <mbedtls_mpi_sub_abs+0x36>
        if( B->p[n - 1] != 0 )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	69b9      	ldr	r1, [r7, #24]
 800647c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006480:	440b      	add	r3, r1
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <mbedtls_mpi_sub_abs+0x3e>
    for( n = B->n; n > 0; n-- )
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	3b01      	subs	r3, #1
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ee      	bne.n	8006476 <mbedtls_mpi_sub_abs+0x1a>
 8006498:	e000      	b.n	800649c <mbedtls_mpi_sub_abs+0x40>
            break;
 800649a:	bf00      	nop
    if( n > A->n )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d903      	bls.n	80064ae <mbedtls_mpi_sub_abs+0x52>
    {
        /* B >= (2^ciL)^n > A */
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
 80064a6:	f06f 0309 	mvn.w	r3, #9
 80064aa:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 80064ac:	e072      	b.n	8006594 <mbedtls_mpi_sub_abs+0x138>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7fe febd 	bl	8005234 <mbedtls_mpi_grow>
 80064ba:	61f8      	str	r0, [r7, #28]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d167      	bne.n	8006592 <mbedtls_mpi_sub_abs+0x136>

    /* Set the high limbs of X to match A. Don't touch the lower limbs
     * because X might be aliased to B, and we must not overwrite the
     * significant digits of B. */
    if( A->n > n )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d211      	bcs.n	80064f0 <mbedtls_mpi_sub_abs+0x94>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	18d0      	adds	r0, r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	18d1      	adds	r1, r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	461a      	mov	r2, r3
 80064ec:	f00e f874 	bl	80145d8 <memcpy>
    if( X->n > A->n )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d90f      	bls.n	800651c <mbedtls_mpi_sub_abs+0xc0>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	18d0      	adds	r0, r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	461a      	mov	r2, r3
 8006516:	2100      	movs	r1, #0
 8006518:	f00e f86c 	bl	80145f4 <memset>

    carry = mpi_sub_hlp( n, X->p, A->p, B->p );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6899      	ldr	r1, [r3, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	69b8      	ldr	r0, [r7, #24]
 800652a:	f7ff ff4e 	bl	80063ca <mpi_sub_hlp>
 800652e:	6178      	str	r0, [r7, #20]
    if( carry != 0 )
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d029      	beq.n	800658a <mbedtls_mpi_sub_abs+0x12e>
    {
        /* Propagate the carry to the first nonzero limb of X. */
        for( ; n < X->n && X->p[n] == 0; n++ )
 8006536:	e00a      	b.n	800654e <mbedtls_mpi_sub_abs+0xf2>
            --X->p[n];
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	3a01      	subs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
        for( ; n < X->n && X->p[n] == 0; n++ )
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	3301      	adds	r3, #1
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	429a      	cmp	r2, r3
 8006556:	d207      	bcs.n	8006568 <mbedtls_mpi_sub_abs+0x10c>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0e7      	beq.n	8006538 <mbedtls_mpi_sub_abs+0xdc>
        /* If we ran out of space for the carry, it means that the result
         * is negative. */
        if( n == X->n )
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	429a      	cmp	r2, r3
 8006570:	d103      	bne.n	800657a <mbedtls_mpi_sub_abs+0x11e>
        {
            ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
 8006572:	f06f 0309 	mvn.w	r3, #9
 8006576:	61fb      	str	r3, [r7, #28]
            goto cleanup;
 8006578:	e00c      	b.n	8006594 <mbedtls_mpi_sub_abs+0x138>
        }
        --X->p[n];
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	3a01      	subs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
    }

    /* X should always be positive as a result of unsigned subtractions. */
    X->s = 1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e000      	b.n	8006594 <mbedtls_mpi_sub_abs+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
 8006592:	bf00      	nop

cleanup:
    return( ret );
 8006594:	69fb      	ldr	r3, [r7, #28]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	fb02 f303 	mul.w	r3, r2, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da21      	bge.n	8006604 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f7ff fc68 	bl	8005e98 <mbedtls_mpi_cmp_abs>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db0c      	blt.n	80065e8 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff ff42 	bl	800645c <mbedtls_mpi_sub_abs>
 80065d8:	6178      	str	r0, [r7, #20]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11e      	bne.n	800661e <mbedtls_mpi_add_mpi+0x80>
            X->s =  s;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e01f      	b.n	8006628 <mbedtls_mpi_add_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ff35 	bl	800645c <mbedtls_mpi_sub_abs>
 80065f2:	6178      	str	r0, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d113      	bne.n	8006622 <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	425a      	negs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	e011      	b.n	8006628 <mbedtls_mpi_add_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff fe27 	bl	800625c <mbedtls_mpi_add_abs>
 800660e:	6178      	str	r0, [r7, #20]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <mbedtls_mpi_add_mpi+0x88>
        X->s = s;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e004      	b.n	8006628 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <mbedtls_mpi_add_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <mbedtls_mpi_add_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8006626:	bf00      	nop
    }

cleanup:

    return( ret );
 8006628:	697b      	ldr	r3, [r7, #20]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	dd21      	ble.n	8006698 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	68b8      	ldr	r0, [r7, #8]
 8006658:	f7ff fc1e 	bl	8005e98 <mbedtls_mpi_cmp_abs>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	db0c      	blt.n	800667c <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fef8 	bl	800645c <mbedtls_mpi_sub_abs>
 800666c:	6178      	str	r0, [r7, #20]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11e      	bne.n	80066b2 <mbedtls_mpi_sub_mpi+0x80>
            X->s =  s;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e01f      	b.n	80066bc <mbedtls_mpi_sub_mpi+0x8a>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff feeb 	bl	800645c <mbedtls_mpi_sub_abs>
 8006686:	6178      	str	r0, [r7, #20]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d113      	bne.n	80066b6 <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	425a      	negs	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e011      	b.n	80066bc <mbedtls_mpi_sub_mpi+0x8a>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fddd 	bl	800625c <mbedtls_mpi_add_abs>
 80066a2:	6178      	str	r0, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <mbedtls_mpi_sub_mpi+0x88>
        X->s = s;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e004      	b.n	80066bc <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <mbedtls_mpi_sub_mpi+0x8a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <mbedtls_mpi_sub_mpi+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80066ba:	bf00      	nop
    }

cleanup:

    return( ret );
 80066bc:	697b      	ldr	r3, [r7, #20]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b088      	sub	sp, #32
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
    mbedtls_mpi B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bfb8      	it	lt
 80066d8:	425b      	neglt	r3, r3
 80066da:	613b      	str	r3, [r7, #16]
    B.s = ( b < 0 ) ? -1 : 1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da02      	bge.n	80066e8 <mbedtls_mpi_add_int+0x22>
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	e000      	b.n	80066ea <mbedtls_mpi_add_int+0x24>
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
    B.n = 1;
 80066ec:	2301      	movs	r3, #1
 80066ee:	61bb      	str	r3, [r7, #24]
    B.p = p;
 80066f0:	f107 0310 	add.w	r3, r7, #16
 80066f4:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &B ) );
 80066f6:	f107 0314 	add.w	r3, r7, #20
 80066fa:	461a      	mov	r2, r3
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff ff4d 	bl	800659e <mbedtls_mpi_add_mpi>
 8006704:	4603      	mov	r3, r0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b088      	sub	sp, #32
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
    mbedtls_mpi B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfb8      	it	lt
 8006720:	425b      	neglt	r3, r3
 8006722:	613b      	str	r3, [r7, #16]
    B.s = ( b < 0 ) ? -1 : 1;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	da02      	bge.n	8006730 <mbedtls_mpi_sub_int+0x22>
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	e000      	b.n	8006732 <mbedtls_mpi_sub_int+0x24>
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
    B.n = 1;
 8006734:	2301      	movs	r3, #1
 8006736:	61bb      	str	r3, [r7, #24]
    B.p = p;
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &B ) );
 800673e:	f107 0314 	add.w	r3, r7, #20
 8006742:	461a      	mov	r2, r3
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ff73 	bl	8006632 <mbedtls_mpi_sub_mpi>
 800674c:	4603      	mov	r3, r0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <mpi_mul_hlp>:
#endif
void mpi_mul_hlp( size_t i,
                  const mbedtls_mpi_uint *s,
                  mbedtls_mpi_uint *d,
                  mbedtls_mpi_uint b )
{
 8006756:	b480      	push	{r7}
 8006758:	b09f      	sub	sp, #124	; 0x7c
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	677b      	str	r3, [r7, #116]	; 0x74
 8006768:	2300      	movs	r3, #0
 800676a:	673b      	str	r3, [r7, #112]	; 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800676c:	f000 bf49 	b.w	8007602 <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
        MULADDC_CORE   MULADDC_CORE
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	623b      	str	r3, [r7, #32]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3304      	adds	r3, #4
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a0:	fb02 f303 	mul.w	r3, r2, r3
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	0c1b      	lsrs	r3, r3, #16
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4413      	add	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	bf34      	ite	cc
 80067ea:	2301      	movcc	r3, #1
 80067ec:	2300      	movcs	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	4413      	add	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	429a      	cmp	r2, r3
 8006806:	bf34      	ite	cc
 8006808:	2301      	movcc	r3, #1
 800680a:	2300      	movcs	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681a:	4413      	add	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006822:	429a      	cmp	r2, r3
 8006824:	bf34      	ite	cc
 8006826:	2301      	movcc	r3, #1
 8006828:	2300      	movcs	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4413      	add	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	bf34      	ite	cc
 8006848:	2301      	movcc	r3, #1
 800684a:	2300      	movcs	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	677b      	str	r3, [r7, #116]	; 0x74
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	0c1b      	lsrs	r3, r3, #16
 8006872:	623b      	str	r3, [r7, #32]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3304      	adds	r3, #4
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	041b      	lsls	r3, r3, #16
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf34      	ite	cc
 80068d2:	2301      	movcc	r3, #1
 80068d4:	2300      	movcs	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4413      	add	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bf34      	ite	cc
 80068f0:	2301      	movcc	r3, #1
 80068f2:	2300      	movcs	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006902:	4413      	add	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800690a:	429a      	cmp	r2, r3
 800690c:	bf34      	ite	cc
 800690e:	2301      	movcc	r3, #1
 8006910:	2300      	movcs	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4413      	add	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	429a      	cmp	r2, r3
 800692e:	bf34      	ite	cc
 8006930:	2301      	movcc	r3, #1
 8006932:	2300      	movcs	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	677b      	str	r3, [r7, #116]	; 0x74
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	1d1a      	adds	r2, r3, #4
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	623b      	str	r3, [r7, #32]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3304      	adds	r3, #4
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006984:	fb02 f303 	mul.w	r3, r2, r3
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	bf34      	ite	cc
 80069ba:	2301      	movcc	r3, #1
 80069bc:	2300      	movcs	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	bf34      	ite	cc
 80069d8:	2301      	movcc	r3, #1
 80069da:	2300      	movcs	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4413      	add	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ea:	4413      	add	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f2:	429a      	cmp	r2, r3
 80069f4:	bf34      	ite	cc
 80069f6:	2301      	movcc	r3, #1
 80069f8:	2300      	movcs	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4413      	add	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bf34      	ite	cc
 8006a18:	2301      	movcc	r3, #1
 8006a1a:	2300      	movcs	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	677b      	str	r3, [r7, #116]	; 0x74
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	1d1a      	adds	r2, r3, #4
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3304      	adds	r3, #4
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	041b      	lsls	r3, r3, #16
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf34      	ite	cc
 8006aa2:	2301      	movcc	r3, #1
 8006aa4:	2300      	movcs	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	4413      	add	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	bf34      	ite	cc
 8006ac0:	2301      	movcc	r3, #1
 8006ac2:	2300      	movcs	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4413      	add	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad2:	4413      	add	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bf34      	ite	cc
 8006ade:	2301      	movcc	r3, #1
 8006ae0:	2300      	movcs	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	4413      	add	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	bf34      	ite	cc
 8006b00:	2301      	movcc	r3, #1
 8006b02:	2300      	movcs	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	677b      	str	r3, [r7, #116]	; 0x74
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1d1a      	adds	r2, r3, #4
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	623b      	str	r3, [r7, #32]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b36:	fb02 f303 	mul.w	r3, r2, r3
 8006b3a:	61fb      	str	r3, [r7, #28]
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	bf34      	ite	cc
 8006b8a:	2301      	movcc	r3, #1
 8006b8c:	2300      	movcs	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4413      	add	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	bf34      	ite	cc
 8006ba8:	2301      	movcc	r3, #1
 8006baa:	2300      	movcs	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bba:	4413      	add	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf34      	ite	cc
 8006bc6:	2301      	movcc	r3, #1
 8006bc8:	2300      	movcs	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bf34      	ite	cc
 8006be8:	2301      	movcc	r3, #1
 8006bea:	2300      	movcs	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	677b      	str	r3, [r7, #116]	; 0x74
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	623b      	str	r3, [r7, #32]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	3304      	adds	r3, #4
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1e:	fb02 f303 	mul.w	r3, r2, r3
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4413      	add	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	041b      	lsls	r3, r3, #16
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	bf34      	ite	cc
 8006c72:	2301      	movcc	r3, #1
 8006c74:	2300      	movcs	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	bf34      	ite	cc
 8006c90:	2301      	movcc	r3, #1
 8006c92:	2300      	movcs	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca2:	4413      	add	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006caa:	429a      	cmp	r2, r3
 8006cac:	bf34      	ite	cc
 8006cae:	2301      	movcc	r3, #1
 8006cb0:	2300      	movcs	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4413      	add	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	bf34      	ite	cc
 8006cd0:	2301      	movcc	r3, #1
 8006cd2:	2300      	movcs	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	1d1a      	adds	r2, r3, #4
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4413      	add	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bf34      	ite	cc
 8006d5a:	2301      	movcc	r3, #1
 8006d5c:	2300      	movcs	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4413      	add	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	bf34      	ite	cc
 8006d78:	2301      	movcc	r3, #1
 8006d7a:	2300      	movcs	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d8a:	4413      	add	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d92:	429a      	cmp	r2, r3
 8006d94:	bf34      	ite	cc
 8006d96:	2301      	movcc	r3, #1
 8006d98:	2300      	movcs	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4413      	add	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	bf34      	ite	cc
 8006db8:	2301      	movcc	r3, #1
 8006dba:	2300      	movcs	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	677b      	str	r3, [r7, #116]	; 0x74
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	1d1a      	adds	r2, r3, #4
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	3304      	adds	r3, #4
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4413      	add	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf34      	ite	cc
 8006e42:	2301      	movcc	r3, #1
 8006e44:	2300      	movcs	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	bf34      	ite	cc
 8006e60:	2301      	movcc	r3, #1
 8006e62:	2300      	movcs	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e72:	4413      	add	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	bf34      	ite	cc
 8006e7e:	2301      	movcc	r3, #1
 8006e80:	2300      	movcs	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	461a      	mov	r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4413      	add	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	bf34      	ite	cc
 8006ea0:	2301      	movcc	r3, #1
 8006ea2:	2300      	movcs	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4413      	add	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1d1a      	adds	r2, r3, #4
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	0c1b      	lsrs	r3, r3, #16
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	60bb      	str	r3, [r7, #8]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef4:	fb02 f303 	mul.w	r3, r2, r3
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	0c1b      	lsrs	r3, r3, #16
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	bf34      	ite	cc
 8006f2a:	2301      	movcc	r3, #1
 8006f2c:	2300      	movcs	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	bf34      	ite	cc
 8006f48:	2301      	movcc	r3, #1
 8006f4a:	2300      	movcs	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4413      	add	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5a:	4413      	add	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f62:	429a      	cmp	r2, r3
 8006f64:	bf34      	ite	cc
 8006f66:	2301      	movcc	r3, #1
 8006f68:	2300      	movcs	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4413      	add	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf34      	ite	cc
 8006f88:	2301      	movcc	r3, #1
 8006f8a:	2300      	movcs	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	677b      	str	r3, [r7, #116]	; 0x74
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	60bb      	str	r3, [r7, #8]
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4413      	add	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	041b      	lsls	r3, r3, #16
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	429a      	cmp	r2, r3
 8007010:	bf34      	ite	cc
 8007012:	2301      	movcc	r3, #1
 8007014:	2300      	movcs	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	4413      	add	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	429a      	cmp	r2, r3
 800702e:	bf34      	ite	cc
 8007030:	2301      	movcc	r3, #1
 8007032:	2300      	movcs	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	4413      	add	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007042:	4413      	add	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704a:	429a      	cmp	r2, r3
 800704c:	bf34      	ite	cc
 800704e:	2301      	movcc	r3, #1
 8007050:	2300      	movcs	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4413      	add	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4413      	add	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	429a      	cmp	r2, r3
 800706e:	bf34      	ite	cc
 8007070:	2301      	movcc	r3, #1
 8007072:	2300      	movcs	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	677b      	str	r3, [r7, #116]	; 0x74
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	1d1a      	adds	r2, r3, #4
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	623b      	str	r3, [r7, #32]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	3304      	adds	r3, #4
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	0c1b      	lsrs	r3, r3, #16
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4413      	add	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4413      	add	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	4413      	add	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	bf34      	ite	cc
 80070fa:	2301      	movcc	r3, #1
 80070fc:	2300      	movcs	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	429a      	cmp	r2, r3
 8007116:	bf34      	ite	cc
 8007118:	2301      	movcc	r3, #1
 800711a:	2300      	movcs	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800712a:	4413      	add	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007132:	429a      	cmp	r2, r3
 8007134:	bf34      	ite	cc
 8007136:	2301      	movcc	r3, #1
 8007138:	2300      	movcs	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4413      	add	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4413      	add	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	429a      	cmp	r2, r3
 8007156:	bf34      	ite	cc
 8007158:	2301      	movcc	r3, #1
 800715a:	2300      	movcs	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4413      	add	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	677b      	str	r3, [r7, #116]	; 0x74
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	1d1a      	adds	r2, r3, #4
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3304      	adds	r3, #4
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007198:	fb02 f303 	mul.w	r3, r2, r3
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4413      	add	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	429a      	cmp	r2, r3
 80071e0:	bf34      	ite	cc
 80071e2:	2301      	movcc	r3, #1
 80071e4:	2300      	movcs	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4413      	add	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4413      	add	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	bf34      	ite	cc
 8007200:	2301      	movcc	r3, #1
 8007202:	2300      	movcs	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007212:	4413      	add	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721a:	429a      	cmp	r2, r3
 800721c:	bf34      	ite	cc
 800721e:	2301      	movcc	r3, #1
 8007220:	2300      	movcs	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	4413      	add	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	4413      	add	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf34      	ite	cc
 8007240:	2301      	movcc	r3, #1
 8007242:	2300      	movcs	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	677b      	str	r3, [r7, #116]	; 0x74
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	1d1a      	adds	r2, r3, #4
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	623b      	str	r3, [r7, #32]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3304      	adds	r3, #4
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007280:	fb02 f303 	mul.w	r3, r2, r3
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728a:	fb02 f303 	mul.w	r3, r2, r3
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007294:	fb02 f303 	mul.w	r3, r2, r3
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	0c1b      	lsrs	r3, r3, #16
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4413      	add	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bf34      	ite	cc
 80072ca:	2301      	movcc	r3, #1
 80072cc:	2300      	movcs	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4413      	add	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	bf34      	ite	cc
 80072e8:	2301      	movcc	r3, #1
 80072ea:	2300      	movcs	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4413      	add	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072fa:	4413      	add	r3, r2
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007302:	429a      	cmp	r2, r3
 8007304:	bf34      	ite	cc
 8007306:	2301      	movcc	r3, #1
 8007308:	2300      	movcs	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4413      	add	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4413      	add	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	429a      	cmp	r2, r3
 8007326:	bf34      	ite	cc
 8007328:	2301      	movcc	r3, #1
 800732a:	2300      	movcs	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	677b      	str	r3, [r7, #116]	; 0x74
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	1d1a      	adds	r2, r3, #4
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	623b      	str	r3, [r7, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	3304      	adds	r3, #4
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007372:	fb02 f303 	mul.w	r3, r2, r3
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4413      	add	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4413      	add	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	041b      	lsls	r3, r3, #16
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	bf34      	ite	cc
 80073b2:	2301      	movcc	r3, #1
 80073b4:	2300      	movcs	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4413      	add	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	bf34      	ite	cc
 80073d0:	2301      	movcc	r3, #1
 80073d2:	2300      	movcs	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e2:	4413      	add	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ea:	429a      	cmp	r2, r3
 80073ec:	bf34      	ite	cc
 80073ee:	2301      	movcc	r3, #1
 80073f0:	2300      	movcs	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4413      	add	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	bf34      	ite	cc
 8007410:	2301      	movcc	r3, #1
 8007412:	2300      	movcs	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4413      	add	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	677b      	str	r3, [r7, #116]	; 0x74
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	623b      	str	r3, [r7, #32]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	3304      	adds	r3, #4
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007450:	fb02 f303 	mul.w	r3, r2, r3
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007464:	fb02 f303 	mul.w	r3, r2, r3
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4413      	add	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	429a      	cmp	r2, r3
 8007498:	bf34      	ite	cc
 800749a:	2301      	movcc	r3, #1
 800749c:	2300      	movcs	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4413      	add	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	bf34      	ite	cc
 80074b8:	2301      	movcc	r3, #1
 80074ba:	2300      	movcs	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4413      	add	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ca:	4413      	add	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d2:	429a      	cmp	r2, r3
 80074d4:	bf34      	ite	cc
 80074d6:	2301      	movcc	r3, #1
 80074d8:	2300      	movcs	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4413      	add	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4413      	add	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bf34      	ite	cc
 80074f8:	2301      	movcc	r3, #1
 80074fa:	2300      	movcs	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4413      	add	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	677b      	str	r3, [r7, #116]	; 0x74
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	623b      	str	r3, [r7, #32]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	3304      	adds	r3, #4
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754c:	fb02 f303 	mul.w	r3, r2, r3
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4413      	add	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	0c1b      	lsrs	r3, r3, #16
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	429a      	cmp	r2, r3
 8007580:	bf34      	ite	cc
 8007582:	2301      	movcc	r3, #1
 8007584:	2300      	movcs	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4413      	add	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	bf34      	ite	cc
 80075a0:	2301      	movcc	r3, #1
 80075a2:	2300      	movcs	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4413      	add	r3, r2
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b2:	4413      	add	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ba:	429a      	cmp	r2, r3
 80075bc:	bf34      	ite	cc
 80075be:	2301      	movcc	r3, #1
 80075c0:	2300      	movcs	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4413      	add	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4413      	add	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	bf34      	ite	cc
 80075e0:	2301      	movcc	r3, #1
 80075e2:	2300      	movcs	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	677b      	str	r3, [r7, #116]	; 0x74
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1d1a      	adds	r2, r3, #4
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3b10      	subs	r3, #16
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	f63f a8b3 	bhi.w	8006770 <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800760a:	e3a8      	b.n	8007d5e <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
        MULADDC_CORE   MULADDC_CORE
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	647b      	str	r3, [r7, #68]	; 0x44
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	0c1b      	lsrs	r3, r3, #16
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3304      	adds	r3, #4
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007632:	fb02 f303 	mul.w	r3, r2, r3
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	63bb      	str	r3, [r7, #56]	; 0x38
 8007642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	637b      	str	r3, [r7, #52]	; 0x34
 800764c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007650:	fb02 f303 	mul.w	r3, r2, r3
 8007654:	633b      	str	r3, [r7, #48]	; 0x30
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765c:	4413      	add	r3, r2
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
 8007660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007666:	4413      	add	r3, r2
 8007668:	633b      	str	r3, [r7, #48]	; 0x30
 800766a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
 8007676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767a:	4413      	add	r3, r2
 800767c:	63bb      	str	r3, [r7, #56]	; 0x38
 800767e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	bf34      	ite	cc
 8007686:	2301      	movcc	r3, #1
 8007688:	2300      	movcs	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	4413      	add	r3, r2
 8007692:	633b      	str	r3, [r7, #48]	; 0x30
 8007694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	4413      	add	r3, r2
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
 800769c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bf34      	ite	cc
 80076a4:	2301      	movcc	r3, #1
 80076a6:	2300      	movcs	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	4413      	add	r3, r2
 80076b0:	633b      	str	r3, [r7, #48]	; 0x30
 80076b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b6:	4413      	add	r3, r2
 80076b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076be:	429a      	cmp	r2, r3
 80076c0:	bf34      	ite	cc
 80076c2:	2301      	movcc	r3, #1
 80076c4:	2300      	movcs	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	4413      	add	r3, r2
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d6:	4413      	add	r3, r2
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e0:	429a      	cmp	r2, r3
 80076e2:	bf34      	ite	cc
 80076e4:	2301      	movcc	r3, #1
 80076e6:	2300      	movcs	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	4413      	add	r3, r2
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	677b      	str	r3, [r7, #116]	; 0x74
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	647b      	str	r3, [r7, #68]	; 0x44
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	643b      	str	r3, [r7, #64]	; 0x40
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3304      	adds	r3, #4
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007724:	fb02 f303 	mul.w	r3, r2, r3
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
 800772a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	633b      	str	r3, [r7, #48]	; 0x30
 800773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007744:	4413      	add	r3, r2
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	0c1b      	lsrs	r3, r3, #16
 800774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774e:	4413      	add	r3, r2
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	637b      	str	r3, [r7, #52]	; 0x34
 800775e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	4413      	add	r3, r2
 8007764:	63bb      	str	r3, [r7, #56]	; 0x38
 8007766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	429a      	cmp	r2, r3
 800776c:	bf34      	ite	cc
 800776e:	2301      	movcc	r3, #1
 8007770:	2300      	movcs	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	4413      	add	r3, r2
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
 800777c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	4413      	add	r3, r2
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
 8007784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	429a      	cmp	r2, r3
 800778a:	bf34      	ite	cc
 800778c:	2301      	movcc	r3, #1
 800778e:	2300      	movcs	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	4413      	add	r3, r2
 8007798:	633b      	str	r3, [r7, #48]	; 0x30
 800779a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800779c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779e:	4413      	add	r3, r2
 80077a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bf34      	ite	cc
 80077aa:	2301      	movcc	r3, #1
 80077ac:	2300      	movcs	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	4413      	add	r3, r2
 80077b6:	633b      	str	r3, [r7, #48]	; 0x30
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077be:	4413      	add	r3, r2
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c8:	429a      	cmp	r2, r3
 80077ca:	bf34      	ite	cc
 80077cc:	2301      	movcc	r3, #1
 80077ce:	2300      	movcs	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	4413      	add	r3, r2
 80077d8:	633b      	str	r3, [r7, #48]	; 0x30
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	677b      	str	r3, [r7, #116]	; 0x74
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	1d1a      	adds	r2, r3, #4
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e6:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	647b      	str	r3, [r7, #68]	; 0x44
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	643b      	str	r3, [r7, #64]	; 0x40
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3304      	adds	r3, #4
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800780c:	fb02 f303 	mul.w	r3, r2, r3
 8007810:	63bb      	str	r3, [r7, #56]	; 0x38
 8007812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007814:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	637b      	str	r3, [r7, #52]	; 0x34
 800781c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800781e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	633b      	str	r3, [r7, #48]	; 0x30
 8007826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782c:	4413      	add	r3, r2
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
 8007830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007832:	0c1b      	lsrs	r3, r3, #16
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	4413      	add	r3, r2
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	041b      	lsls	r3, r3, #16
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784a:	4413      	add	r3, r2
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
 800784e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007852:	429a      	cmp	r2, r3
 8007854:	bf34      	ite	cc
 8007856:	2301      	movcc	r3, #1
 8007858:	2300      	movcs	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	4413      	add	r3, r2
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
 8007864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	4413      	add	r3, r2
 800786a:	63bb      	str	r3, [r7, #56]	; 0x38
 800786c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	429a      	cmp	r2, r3
 8007872:	bf34      	ite	cc
 8007874:	2301      	movcc	r3, #1
 8007876:	2300      	movcs	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	4413      	add	r3, r2
 8007880:	633b      	str	r3, [r7, #48]	; 0x30
 8007882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007886:	4413      	add	r3, r2
 8007888:	63bb      	str	r3, [r7, #56]	; 0x38
 800788a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800788c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800788e:	429a      	cmp	r2, r3
 8007890:	bf34      	ite	cc
 8007892:	2301      	movcc	r3, #1
 8007894:	2300      	movcs	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	4413      	add	r3, r2
 800789e:	633b      	str	r3, [r7, #48]	; 0x30
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a6:	4413      	add	r3, r2
 80078a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078b0:	429a      	cmp	r2, r3
 80078b2:	bf34      	ite	cc
 80078b4:	2301      	movcc	r3, #1
 80078b6:	2300      	movcs	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	4413      	add	r3, r2
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	677b      	str	r3, [r7, #116]	; 0x74
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	647b      	str	r3, [r7, #68]	; 0x44
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	0c1b      	lsrs	r3, r3, #16
 80078de:	643b      	str	r3, [r7, #64]	; 0x40
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3304      	adds	r3, #4
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
 8007904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	633b      	str	r3, [r7, #48]	; 0x30
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	0c1b      	lsrs	r3, r3, #16
 8007912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007914:	4413      	add	r3, r2
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	0c1b      	lsrs	r3, r3, #16
 800791c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791e:	4413      	add	r3, r2
 8007920:	633b      	str	r3, [r7, #48]	; 0x30
 8007922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
 800792e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	4413      	add	r3, r2
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
 8007936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	429a      	cmp	r2, r3
 800793c:	bf34      	ite	cc
 800793e:	2301      	movcc	r3, #1
 8007940:	2300      	movcs	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	4413      	add	r3, r2
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
 800794c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	4413      	add	r3, r2
 8007952:	63bb      	str	r3, [r7, #56]	; 0x38
 8007954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	429a      	cmp	r2, r3
 800795a:	bf34      	ite	cc
 800795c:	2301      	movcc	r3, #1
 800795e:	2300      	movcs	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	4413      	add	r3, r2
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
 800796a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800796c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800796e:	4413      	add	r3, r2
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
 8007972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007976:	429a      	cmp	r2, r3
 8007978:	bf34      	ite	cc
 800797a:	2301      	movcc	r3, #1
 800797c:	2300      	movcs	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	4413      	add	r3, r2
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798e:	4413      	add	r3, r2
 8007990:	63bb      	str	r3, [r7, #56]	; 0x38
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007998:	429a      	cmp	r2, r3
 800799a:	bf34      	ite	cc
 800799c:	2301      	movcc	r3, #1
 800799e:	2300      	movcs	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	4413      	add	r3, r2
 80079a8:	633b      	str	r3, [r7, #48]	; 0x30
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	677b      	str	r3, [r7, #116]	; 0x74
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b6:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	643b      	str	r3, [r7, #64]	; 0x40
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	3304      	adds	r3, #4
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	fb02 f303 	mul.w	r3, r2, r3
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079dc:	fb02 f303 	mul.w	r3, r2, r3
 80079e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
 80079ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	633b      	str	r3, [r7, #48]	; 0x30
 80079f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fc:	4413      	add	r3, r2
 80079fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a06:	4413      	add	r3, r2
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0c:	041b      	lsls	r3, r3, #16
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	4413      	add	r3, r2
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	bf34      	ite	cc
 8007a26:	2301      	movcc	r3, #1
 8007a28:	2300      	movcs	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	4413      	add	r3, r2
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	4413      	add	r3, r2
 8007a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	429a      	cmp	r2, r3
 8007a42:	bf34      	ite	cc
 8007a44:	2301      	movcc	r3, #1
 8007a46:	2300      	movcs	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	4413      	add	r3, r2
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
 8007a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a56:	4413      	add	r3, r2
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	bf34      	ite	cc
 8007a62:	2301      	movcc	r3, #1
 8007a64:	2300      	movcs	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	4413      	add	r3, r2
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a76:	4413      	add	r3, r2
 8007a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a80:	429a      	cmp	r2, r3
 8007a82:	bf34      	ite	cc
 8007a84:	2301      	movcc	r3, #1
 8007a86:	2300      	movcs	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	4413      	add	r3, r2
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	677b      	str	r3, [r7, #116]	; 0x74
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad8:	fb02 f303 	mul.w	r3, r2, r3
 8007adc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae4:	4413      	add	r3, r2
 8007ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aee:	4413      	add	r3, r2
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30
 8007af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af4:	041b      	lsls	r3, r3, #16
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	4413      	add	r3, r2
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bf34      	ite	cc
 8007b0e:	2301      	movcc	r3, #1
 8007b10:	2300      	movcs	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	4413      	add	r3, r2
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	4413      	add	r3, r2
 8007b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	bf34      	ite	cc
 8007b2c:	2301      	movcc	r3, #1
 8007b2e:	2300      	movcs	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	4413      	add	r3, r2
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3e:	4413      	add	r3, r2
 8007b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b46:	429a      	cmp	r2, r3
 8007b48:	bf34      	ite	cc
 8007b4a:	2301      	movcc	r3, #1
 8007b4c:	2300      	movcs	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	4413      	add	r3, r2
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b5e:	4413      	add	r3, r2
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	bf34      	ite	cc
 8007b6c:	2301      	movcc	r3, #1
 8007b6e:	2300      	movcs	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	4413      	add	r3, r2
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	1d1a      	adds	r2, r3, #4
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b86:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	643b      	str	r3, [r7, #64]	; 0x40
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
 8007bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bcc:	4413      	add	r3, r2
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	4413      	add	r3, r2
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	041b      	lsls	r3, r3, #16
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
 8007be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	4413      	add	r3, r2
 8007bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf34      	ite	cc
 8007bf6:	2301      	movcc	r3, #1
 8007bf8:	2300      	movcs	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	4413      	add	r3, r2
 8007c02:	633b      	str	r3, [r7, #48]	; 0x30
 8007c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	4413      	add	r3, r2
 8007c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c10:	429a      	cmp	r2, r3
 8007c12:	bf34      	ite	cc
 8007c14:	2301      	movcc	r3, #1
 8007c16:	2300      	movcs	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	4413      	add	r3, r2
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30
 8007c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c26:	4413      	add	r3, r2
 8007c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	bf34      	ite	cc
 8007c32:	2301      	movcc	r3, #1
 8007c34:	2300      	movcs	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	4413      	add	r3, r2
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c46:	4413      	add	r3, r2
 8007c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c50:	429a      	cmp	r2, r3
 8007c52:	bf34      	ite	cc
 8007c54:	2301      	movcc	r3, #1
 8007c56:	2300      	movcs	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	4413      	add	r3, r2
 8007c60:	633b      	str	r3, [r7, #48]	; 0x30
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	677b      	str	r3, [r7, #116]	; 0x74
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	647b      	str	r3, [r7, #68]	; 0x44
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	3304      	adds	r3, #4
 8007c84:	60bb      	str	r3, [r7, #8]
 8007c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	4413      	add	r3, r2
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cba:	0c1b      	lsrs	r3, r3, #16
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	4413      	add	r3, r2
 8007cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc4:	041b      	lsls	r3, r3, #16
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd2:	4413      	add	r3, r2
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	bf34      	ite	cc
 8007cde:	2301      	movcc	r3, #1
 8007ce0:	2300      	movcs	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	4413      	add	r3, r2
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
 8007cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf0:	4413      	add	r3, r2
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bf34      	ite	cc
 8007cfc:	2301      	movcc	r3, #1
 8007cfe:	2300      	movcs	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	4413      	add	r3, r2
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30
 8007d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0e:	4413      	add	r3, r2
 8007d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bf34      	ite	cc
 8007d1a:	2301      	movcc	r3, #1
 8007d1c:	2300      	movcs	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	4413      	add	r3, r2
 8007d26:	633b      	str	r3, [r7, #48]	; 0x30
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2e:	4413      	add	r3, r2
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	bf34      	ite	cc
 8007d3c:	2301      	movcc	r3, #1
 8007d3e:	2300      	movcs	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	461a      	mov	r2, r3
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	4413      	add	r3, r2
 8007d48:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	1d1a      	adds	r2, r3, #4
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d56:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b08      	subs	r3, #8
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b07      	cmp	r3, #7
 8007d62:	f63f ac53 	bhi.w	800760c <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8007d66:	e07c      	b.n	8007e62 <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	66bb      	str	r3, [r7, #104]	; 0x68
        MULADDC_CORE
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	663b      	str	r3, [r7, #96]	; 0x60
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	3304      	adds	r3, #4
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	657b      	str	r3, [r7, #84]	; 0x54
 8007da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dac:	fb02 f303 	mul.w	r3, r2, r3
 8007db0:	653b      	str	r3, [r7, #80]	; 0x50
 8007db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007db8:	4413      	add	r3, r2
 8007dba:	653b      	str	r3, [r7, #80]	; 0x50
 8007dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dc2:	4413      	add	r3, r2
 8007dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8007dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8007dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd6:	4413      	add	r3, r2
 8007dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dde:	429a      	cmp	r2, r3
 8007de0:	bf34      	ite	cc
 8007de2:	2301      	movcc	r3, #1
 8007de4:	2300      	movcs	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dec:	4413      	add	r3, r2
 8007dee:	653b      	str	r3, [r7, #80]	; 0x50
 8007df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df4:	4413      	add	r3, r2
 8007df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	bf34      	ite	cc
 8007e00:	2301      	movcc	r3, #1
 8007e02:	2300      	movcs	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0a:	4413      	add	r3, r2
 8007e0c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e12:	4413      	add	r3, r2
 8007e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bf34      	ite	cc
 8007e1e:	2301      	movcc	r3, #1
 8007e20:	2300      	movcs	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e28:	4413      	add	r3, r2
 8007e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e32:	4413      	add	r3, r2
 8007e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	bf34      	ite	cc
 8007e40:	2301      	movcc	r3, #1
 8007e42:	2300      	movcs	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e4a:	4413      	add	r3, r2
 8007e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e50:	677b      	str	r3, [r7, #116]	; 0x74
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	1d1a      	adds	r2, r3, #4
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e5a:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f47f af7f 	bne.w	8007d68 <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	673b      	str	r3, [r7, #112]	; 0x70

    while( c != 0 )
 8007e70:	e011      	b.n	8007e96 <mpi_mul_hlp+0x1740>
    {
        *d += c; c = ( *d < c ); d++;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e78:	441a      	add	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e84:	429a      	cmp	r2, r3
 8007e86:	bf8c      	ite	hi
 8007e88:	2301      	movhi	r3, #1
 8007e8a:	2300      	movls	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	677b      	str	r3, [r7, #116]	; 0x74
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 8007e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ea      	bne.n	8007e72 <mpi_mul_hlp+0x171c>
    }
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	377c      	adds	r7, #124	; 0x7c
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8007eaa:	b590      	push	{r4, r7, lr}
 8007eac:	b08f      	sub	sp, #60	; 0x3c
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007eb6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
    size_t i, j;
    mbedtls_mpi TA, TB;
    int result_is_zero = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8007ec0:	f107 031c 	add.w	r3, r7, #28
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd f97c 	bl	80051c2 <mbedtls_mpi_init>
 8007eca:	f107 0310 	add.w	r3, r7, #16
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd f977 	bl	80051c2 <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d10d      	bne.n	8007ef8 <mbedtls_mpi_mul_mpi+0x4e>
 8007edc:	f107 031c 	add.w	r3, r7, #28
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fd fa7a 	bl	80053dc <mbedtls_mpi_copy>
 8007ee8:	6378      	str	r0, [r7, #52]	; 0x34
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 808e 	bne.w	800800e <mbedtls_mpi_mul_mpi+0x164>
 8007ef2:	f107 031c 	add.w	r3, r7, #28
 8007ef6:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d10c      	bne.n	8007f1a <mbedtls_mpi_mul_mpi+0x70>
 8007f00:	f107 0310 	add.w	r3, r7, #16
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd fa68 	bl	80053dc <mbedtls_mpi_copy>
 8007f0c:	6378      	str	r0, [r7, #52]	; 0x34
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d17e      	bne.n	8008012 <mbedtls_mpi_mul_mpi+0x168>
 8007f14:	f107 0310 	add.w	r3, r7, #16
 8007f18:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f20:	e00d      	b.n	8007f3e <mbedtls_mpi_mul_mpi+0x94>
        if( A->p[i - 1] != 0 )
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f2c:	440b      	add	r3, r1
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <mbedtls_mpi_mul_mpi+0x9c>
    for( i = A->n; i > 0; i-- )
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1ee      	bne.n	8007f22 <mbedtls_mpi_mul_mpi+0x78>
 8007f44:	e000      	b.n	8007f48 <mbedtls_mpi_mul_mpi+0x9e>
            break;
 8007f46:	bf00      	nop
    if( i == 0 )
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <mbedtls_mpi_mul_mpi+0xa8>
        result_is_zero = 1;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	62bb      	str	r3, [r7, #40]	; 0x28

    for( j = B->n; j > 0; j-- )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f58:	e00d      	b.n	8007f76 <mbedtls_mpi_mul_mpi+0xcc>
        if( B->p[j - 1] != 0 )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f64:	440b      	add	r3, r1
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d106      	bne.n	8007f7e <mbedtls_mpi_mul_mpi+0xd4>
    for( j = B->n; j > 0; j-- )
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	3b01      	subs	r3, #1
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1ee      	bne.n	8007f5a <mbedtls_mpi_mul_mpi+0xb0>
 8007f7c:	e000      	b.n	8007f80 <mbedtls_mpi_mul_mpi+0xd6>
            break;
 8007f7e:	bf00      	nop
    if( j == 0 )
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <mbedtls_mpi_mul_mpi+0xe0>
        result_is_zero = 1;
 8007f86:	2301      	movs	r3, #1
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8007f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	4413      	add	r3, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7fd f94e 	bl	8005234 <mbedtls_mpi_grow>
 8007f98:	6378      	str	r0, [r7, #52]	; 0x34
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d13a      	bne.n	8008016 <mbedtls_mpi_mul_mpi+0x16c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7fd fbb5 	bl	8005712 <mbedtls_mpi_lset>
 8007fa8:	6378      	str	r0, [r7, #52]	; 0x34
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d134      	bne.n	800801a <mbedtls_mpi_mul_mpi+0x170>

    for( ; j > 0; j-- )
 8007fb0:	e01a      	b.n	8007fe8 <mbedtls_mpi_mul_mpi+0x13e>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6898      	ldr	r0, [r3, #8]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007fc0:	440b      	add	r3, r1
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	18d4      	adds	r4, r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007fd0:	440b      	add	r3, r1
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4601      	mov	r1, r0
 8007fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fde:	f7fe fbba 	bl	8006756 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e1      	bne.n	8007fb2 <mbedtls_mpi_mul_mpi+0x108>

    /* If the result is 0, we don't shortcut the operation, which reduces
     * but does not eliminate side channels leaking the zero-ness. We do
     * need to take care to set the sign bit properly since the library does
     * not fully support an MPI object with a value of 0 and s == -1. */
    if( result_is_zero )
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <mbedtls_mpi_mul_mpi+0x152>
        X->s = 1;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e00f      	b.n	800801c <mbedtls_mpi_mul_mpi+0x172>
    else
        X->s = A->s * B->s;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	fb02 f203 	mul.w	r2, r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e006      	b.n	800801c <mbedtls_mpi_mul_mpi+0x172>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800800e:	bf00      	nop
 8008010:	e004      	b.n	800801c <mbedtls_mpi_mul_mpi+0x172>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8008012:	bf00      	nop
 8008014:	e002      	b.n	800801c <mbedtls_mpi_mul_mpi+0x172>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8008016:	bf00      	nop
 8008018:	e000      	b.n	800801c <mbedtls_mpi_mul_mpi+0x172>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800801a:	bf00      	nop

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800801c:	f107 0310 	add.w	r3, r7, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f7fd f8e1 	bl	80051e8 <mbedtls_mpi_free>
 8008026:	f107 031c 	add.w	r3, r7, #28
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd f8dc 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008032:	4618      	mov	r0, r3
 8008034:	373c      	adds	r7, #60	; 0x3c
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}

0800803a <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    /* mpi_mul_hlp can't deal with a leading 0. */
    size_t n = A->n;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	617b      	str	r3, [r7, #20]
    while( n > 0 && A->p[n - 1] == 0 )
 800804c:	e002      	b.n	8008054 <mbedtls_mpi_mul_int+0x1a>
        --n;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	3b01      	subs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]
    while( n > 0 && A->p[n - 1] == 0 )
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <mbedtls_mpi_mul_int+0x36>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	6979      	ldr	r1, [r7, #20]
 8008060:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008064:	440b      	add	r3, r1
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0ee      	beq.n	800804e <mbedtls_mpi_mul_int+0x14>

    /* The general method below doesn't work if n==0 or b==0. By chance
     * calculating the result is trivial in those cases. */
    if( b == 0 || n == 0 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <mbedtls_mpi_mul_int+0x42>
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <mbedtls_mpi_mul_int+0x4e>
    {
        return( mbedtls_mpi_lset( X, 0 ) );
 800807c:	2100      	movs	r1, #0
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7fd fb47 	bl	8005712 <mbedtls_mpi_lset>
 8008084:	4603      	mov	r3, r0
 8008086:	e022      	b.n	80080ce <mbedtls_mpi_mul_int+0x94>
    }

    /* Calculate A*b as A + A*(b-1) to take advantage of mpi_mul_hlp */
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008088:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800808c:	613b      	str	r3, [r7, #16]
     * copy() will take care of the growth if needed. However, experimentally,
     * making the call to grow() unconditional causes slightly fewer
     * calls to calloc() in ECP code, presumably because it reuses the
     * same mpi for a while and this way the mpi is more likely to directly
     * grow to its final size. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	3301      	adds	r3, #1
 8008092:	4619      	mov	r1, r3
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7fd f8cd 	bl	8005234 <mbedtls_mpi_grow>
 800809a:	6138      	str	r0, [r7, #16]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d111      	bne.n	80080c6 <mbedtls_mpi_mul_int+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7fd f999 	bl	80053dc <mbedtls_mpi_copy>
 80080aa:	6138      	str	r0, [r7, #16]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <mbedtls_mpi_mul_int+0x90>
    mpi_mul_hlp( n, A->p, X->p, b - 1 );
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6899      	ldr	r1, [r3, #8]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3b01      	subs	r3, #1
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	f7fe fb49 	bl	8006756 <mpi_mul_hlp>
 80080c4:	e002      	b.n	80080cc <mbedtls_mpi_mul_int+0x92>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <mbedtls_mpi_mul_int+0x92>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80080ca:	bf00      	nop

cleanup:
    return( ret );
 80080cc:	693b      	ldr	r3, [r7, #16]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b090      	sub	sp, #64	; 0x40
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 80080e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 80080ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <mbedtls_int_div_int+0x28>
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d309      	bcc.n	8008112 <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <mbedtls_int_div_int+0x36>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	e0a7      	b.n	8008262 <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fd fbd9 	bl	80058ca <mbedtls_clz>
 8008118:	62b8      	str	r0, [r7, #40]	; 0x28
    d = d << s;
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	f1c3 0320 	rsb	r3, r3, #32
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	fa22 f303 	lsr.w	r3, r2, r3
 800813a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813c:	4252      	negs	r2, r2
 800813e:	17d2      	asrs	r2, r2, #31
 8008140:	4013      	ands	r3, r2
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	627b      	str	r3, [r7, #36]	; 0x24
    d0 = d & uint_halfword_mask;
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	4013      	ands	r3, r2
 800815e:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	4013      	ands	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	63bb      	str	r3, [r7, #56]	; 0x38
    r0 = u1 - d1 * q1;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	637b      	str	r3, [r7, #52]	; 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 8008186:	e00a      	b.n	800819e <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	3b01      	subs	r3, #1
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38
        r0 += d1;
 800818e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	4413      	add	r3, r2
 8008194:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8008196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	429a      	cmp	r2, r3
 800819c:	d210      	bcs.n	80081c0 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800819e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d2f0      	bcs.n	8008188 <mbedtls_int_div_int+0xb2>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	6a3a      	ldr	r2, [r7, #32]
 80081aa:	fb02 f203 	mul.w	r2, r2, r3
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081b2:	fb01 f103 	mul.w	r1, r1, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	440b      	add	r3, r1
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d8e4      	bhi.n	8008188 <mbedtls_int_div_int+0xb2>
 80081be:	e000      	b.n	80081c2 <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 80081c0:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c6:	fb02 f203 	mul.w	r2, r2, r3
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    r0 = rAX - q0 * d1;
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 80081f2:	e00a      	b.n	800820a <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	3b01      	subs	r3, #1
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        r0 += d1;
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	4413      	add	r3, r2
 8008200:	637b      	str	r3, [r7, #52]	; 0x34

        if ( r0 >= radix ) break;
 8008202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	429a      	cmp	r2, r3
 8008208:	d210      	bcs.n	800822c <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800820a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	429a      	cmp	r2, r3
 8008210:	d2f0      	bcs.n	80081f4 <mbedtls_int_div_int+0x11e>
 8008212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008214:	6a3a      	ldr	r2, [r7, #32]
 8008216:	fb02 f203 	mul.w	r2, r2, r3
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800821e:	fb01 f103 	mul.w	r1, r1, r3
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	440b      	add	r3, r1
 8008226:	429a      	cmp	r2, r3
 8008228:	d8e4      	bhi.n	80081f4 <mbedtls_int_div_int+0x11e>
 800822a:	e000      	b.n	800822e <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 800822c:	bf00      	nop
    }

    if (r != NULL)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008238:	fb02 f203 	mul.w	r2, r2, r3
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	441a      	add	r2, r3
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	fb01 f303 	mul.w	r3, r1, r3
 8008248:	1ad2      	subs	r2, r2, r3
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	40da      	lsrs	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800825c:	4413      	add	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

    return quotient;
 8008260:	693b      	ldr	r3, [r7, #16]
#endif
}
 8008262:	4618      	mov	r0, r3
 8008264:	3740      	adds	r7, #64	; 0x40
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 800826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826e:	b09d      	sub	sp, #116	; 0x74
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800827a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800827e:	66fb      	str	r3, [r7, #108]	; 0x6c
    mbedtls_mpi X, Y, Z, T1, T2;
    mbedtls_mpi_uint TP2[3];
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8008280:	2100      	movs	r1, #0
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f7fd ffc8 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <mbedtls_mpi_div_mpi+0x28>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800828e:	f06f 030b 	mvn.w	r3, #11
 8008292:	e2a9      	b.n	80087e8 <mbedtls_mpi_div_mpi+0x57c>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8008294:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008298:	4618      	mov	r0, r3
 800829a:	f7fc ff92 	bl	80051c2 <mbedtls_mpi_init>
 800829e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fc ff8d 	bl	80051c2 <mbedtls_mpi_init>
 80082a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fc ff88 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 );
 80082b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fc ff83 	bl	80051c2 <mbedtls_mpi_init>
     *
     * T2 is used for comparison only and the 3 limbs are assigned explicitly,
     * so nobody increase the size of the MPI and we're safe to use an on-stack
     * buffer.
     */
    T2.s = 1;
 80082bc:	2301      	movs	r3, #1
 80082be:	623b      	str	r3, [r7, #32]
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
 80082c0:	2303      	movs	r3, #3
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
    T2.p = TP2;
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fd fde3 	bl	8005e98 <mbedtls_mpi_cmp_abs>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da19      	bge.n	800830c <mbedtls_mpi_div_mpi+0xa0>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <mbedtls_mpi_div_mpi+0x84>
 80082de:	2100      	movs	r1, #0
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7fd fa16 	bl	8005712 <mbedtls_mpi_lset>
 80082e6:	66f8      	str	r0, [r7, #108]	; 0x6c
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f040 8231 	bne.w	8008752 <mbedtls_mpi_div_mpi+0x4e6>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <mbedtls_mpi_div_mpi+0x9c>
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	68b8      	ldr	r0, [r7, #8]
 80082fa:	f7fd f86f 	bl	80053dc <mbedtls_mpi_copy>
 80082fe:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 8227 	bne.w	8008756 <mbedtls_mpi_div_mpi+0x4ea>
        return( 0 );
 8008308:	2300      	movs	r3, #0
 800830a:	e26d      	b.n	80087e8 <mbedtls_mpi_div_mpi+0x57c>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800830c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	f7fd f862 	bl	80053dc <mbedtls_mpi_copy>
 8008318:	66f8      	str	r0, [r7, #108]	; 0x6c
 800831a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 821c 	bne.w	800875a <mbedtls_mpi_div_mpi+0x4ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8008322:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f7fd f857 	bl	80053dc <mbedtls_mpi_copy>
 800832e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 8213 	bne.w	800875e <mbedtls_mpi_div_mpi+0x4f2>
    X.s = Y.s = 1;
 8008338:	2301      	movs	r3, #1
 800833a:	647b      	str	r3, [r7, #68]	; 0x44
 800833c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833e:	653b      	str	r3, [r7, #80]	; 0x50

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	1c9a      	adds	r2, r3, #2
 8008346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7fc ff71 	bl	8005234 <mbedtls_mpi_grow>
 8008352:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 8203 	bne.w	8008762 <mbedtls_mpi_div_mpi+0x4f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800835c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd f9d5 	bl	8005712 <mbedtls_mpi_lset>
 8008368:	66f8      	str	r0, [r7, #108]	; 0x6c
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 81fa 	bne.w	8008766 <mbedtls_mpi_div_mpi+0x4fa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	1c9a      	adds	r2, r3, #2
 8008378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fc ff58 	bl	8005234 <mbedtls_mpi_grow>
 8008384:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 81ee 	bne.w	800876a <mbedtls_mpi_div_mpi+0x4fe>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800838e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd faba 	bl	800590c <mbedtls_mpi_bitlen>
 8008398:	4603      	mov	r3, r0
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	667b      	str	r3, [r7, #100]	; 0x64
    if( k < biL - 1 )
 80083a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a2:	2b1e      	cmp	r3, #30
 80083a4:	d819      	bhi.n	80083da <mbedtls_mpi_div_mpi+0x16e>
    {
        k = biL - 1 - k;
 80083a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a8:	f1c3 031f 	rsb	r3, r3, #31
 80083ac:	667b      	str	r3, [r7, #100]	; 0x64
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80083ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fd fc2c 	bl	8005c12 <mbedtls_mpi_shift_l>
 80083ba:	66f8      	str	r0, [r7, #108]	; 0x6c
 80083bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 81d5 	bne.w	800876e <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80083c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083c8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fc21 	bl	8005c12 <mbedtls_mpi_shift_l>
 80083d0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80083d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <mbedtls_mpi_div_mpi+0x172>
 80083d8:	e1eb      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    }
    else k = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	667b      	str	r3, [r7, #100]	; 0x64

    n = X.n - 1;
 80083de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e0:	3b01      	subs	r3, #1
 80083e2:	663b      	str	r3, [r7, #96]	; 0x60
    t = Y.n - 1;
 80083e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e6:	3b01      	subs	r3, #1
 80083e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80083ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fd fc0a 	bl	8005c12 <mbedtls_mpi_shift_l>
 80083fe:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008402:	2b00      	cmp	r3, #0
 8008404:	f040 81b5 	bne.w	8008772 <mbedtls_mpi_div_mpi+0x506>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8008408:	e016      	b.n	8008438 <mbedtls_mpi_div_mpi+0x1cc>
    {
        Z.p[n - t]++;
 800840a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800840c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800840e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008410:	1acb      	subs	r3, r1, r3
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	3201      	adds	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800841c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008420:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe f902 	bl	8006632 <mbedtls_mpi_sub_mpi>
 800842e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 819f 	bne.w	8008776 <mbedtls_mpi_div_mpi+0x50a>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8008438:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800843c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fdaa 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	dadd      	bge.n	800840a <mbedtls_mpi_div_mpi+0x19e>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800844e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fc80 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008462:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 8187 	bne.w	800877a <mbedtls_mpi_div_mpi+0x50e>

    for( i = n; i > t ; i-- )
 800846c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800846e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008470:	e130      	b.n	80086d4 <mbedtls_mpi_div_mpi+0x468>
    {
        if( X.p[i] >= Y.p[t] )
 8008472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800847e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d30c      	bcc.n	80084a4 <mbedtls_mpi_div_mpi+0x238>
            Z.p[i - t - 1] = ~0;
 800848a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800848c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800848e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008490:	1ac9      	subs	r1, r1, r3
 8008492:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008496:	440b      	add	r3, r1
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e021      	b.n	80084e8 <mbedtls_mpi_div_mpi+0x27c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80084a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80084b6:	440b      	add	r3, r1
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 80084be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80084c6:	681e      	ldr	r6, [r3, #0]
 80084c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ce:	1ac9      	subs	r1, r1, r3
 80084d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80084d4:	440b      	add	r3, r1
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	18d4      	adds	r4, r2, r3
 80084da:	2300      	movs	r3, #0
 80084dc:	4632      	mov	r2, r6
 80084de:	4629      	mov	r1, r5
 80084e0:	f7ff fdf9 	bl	80080d6 <mbedtls_int_div_int>
 80084e4:	4603      	mov	r3, r0
 80084e6:	6023      	str	r3, [r4, #0]
        }

        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80084e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d907      	bls.n	80084fe <mbedtls_mpi_div_mpi+0x292>
 80084ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084f2:	4bae      	ldr	r3, [pc, #696]	; (80087ac <mbedtls_mpi_div_mpi+0x540>)
 80084f4:	440b      	add	r3, r1
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	e000      	b.n	8008500 <mbedtls_mpi_div_mpi+0x294>
 80084fe:	2300      	movs	r3, #0
 8008500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008502:	6013      	str	r3, [r2, #0]
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8008504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <mbedtls_mpi_div_mpi+0x2b0>
 800850a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800850c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800850e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008512:	440b      	add	r3, r1
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	e000      	b.n	800851e <mbedtls_mpi_div_mpi+0x2b2>
 800851c:	2300      	movs	r3, #0
 800851e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008520:	3204      	adds	r2, #4
 8008522:	6013      	str	r3, [r2, #0]
        T2.p[2] = X.p[i];
 8008524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	441a      	add	r2, r3
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	3308      	adds	r3, #8
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	601a      	str	r2, [r3, #0]

        Z.p[i - t - 1]++;
 8008534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853a:	1ac9      	subs	r1, r1, r3
 800853c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008540:	440b      	add	r3, r1
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	3201      	adds	r2, #1
 800854a:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 800854c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800854e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008552:	1ac9      	subs	r1, r1, r3
 8008554:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008558:	440b      	add	r3, r1
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	3a01      	subs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8008564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd f8d1 	bl	8005712 <mbedtls_mpi_lset>
 8008570:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 8102 	bne.w	800877e <mbedtls_mpi_div_mpi+0x512>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800857a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <mbedtls_mpi_div_mpi+0x326>
 8008580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008582:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008584:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008588:	440b      	add	r3, r1
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	e000      	b.n	8008594 <mbedtls_mpi_div_mpi+0x328>
 8008592:	2300      	movs	r3, #0
 8008594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008596:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8008598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800859a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	441a      	add	r2, r3
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	3304      	adds	r3, #4
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80085a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ae:	1ac9      	subs	r1, r1, r3
 80085b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80085b4:	440b      	add	r3, r1
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80085c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fd38 	bl	800803a <mbedtls_mpi_mul_int>
 80085ca:	66f8      	str	r0, [r7, #108]	; 0x6c
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 80d7 	bne.w	8008782 <mbedtls_mpi_div_mpi+0x516>
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80085d4:	f107 0220 	add.w	r2, r7, #32
 80085d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fd fcdc 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dcb0      	bgt.n	800854c <mbedtls_mpi_div_mpi+0x2e0>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80085ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f0:	1ac9      	subs	r1, r1, r3
 80085f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80085f6:	440b      	add	r3, r1
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8008602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fd17 	bl	800803a <mbedtls_mpi_mul_int>
 800860c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800860e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 80b8 	bne.w	8008786 <mbedtls_mpi_div_mpi+0x51a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8008616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7fd faf3 	bl	8005c12 <mbedtls_mpi_shift_l>
 800862c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 80aa 	bne.w	800878a <mbedtls_mpi_div_mpi+0x51e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8008636:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800863a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800863e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd fff5 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008648:	66f8      	str	r0, [r7, #108]	; 0x6c
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	2b00      	cmp	r3, #0
 800864e:	f040 809e 	bne.w	800878e <mbedtls_mpi_div_mpi+0x522>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8008652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f7fd fddd 	bl	8006218 <mbedtls_mpi_cmp_int>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	da34      	bge.n	80086ce <mbedtls_mpi_div_mpi+0x462>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8008664:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f7fc feb4 	bl	80053dc <mbedtls_mpi_copy>
 8008674:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 808a 	bne.w	8008792 <mbedtls_mpi_div_mpi+0x526>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800867e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	015a      	lsls	r2, r3, #5
 8008688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fd fabf 	bl	8005c12 <mbedtls_mpi_shift_l>
 8008694:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d17c      	bne.n	8008796 <mbedtls_mpi_div_mpi+0x52a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800869c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80086a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80086a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fd ff78 	bl	800659e <mbedtls_mpi_add_mpi>
 80086ae:	66f8      	str	r0, [r7, #108]	; 0x6c
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d171      	bne.n	800879a <mbedtls_mpi_div_mpi+0x52e>
            Z.p[i - t - 1]--;
 80086b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086bc:	1ac9      	subs	r1, r1, r3
 80086be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80086c2:	440b      	add	r3, r1
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	3a01      	subs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 80086ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086d0:	3b01      	subs	r3, #1
 80086d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80086d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d8:	429a      	cmp	r2, r3
 80086da:	f63f aeca 	bhi.w	8008472 <mbedtls_mpi_div_mpi+0x206>
        }
    }

    if( Q != NULL )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d011      	beq.n	8008708 <mbedtls_mpi_div_mpi+0x49c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80086e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086e8:	4619      	mov	r1, r3
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7fc fe76 	bl	80053dc <mbedtls_mpi_copy>
 80086f0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d152      	bne.n	800879e <mbedtls_mpi_div_mpi+0x532>
        Q->s = A->s * B->s;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	fb02 f203 	mul.w	r2, r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d049      	beq.n	80087a2 <mbedtls_mpi_div_mpi+0x536>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800870e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008712:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fb24 	bl	8005d62 <mbedtls_mpi_shift_r>
 800871a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800871c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d141      	bne.n	80087a6 <mbedtls_mpi_div_mpi+0x53a>
        X.s = A->s;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	653b      	str	r3, [r7, #80]	; 0x50
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8008728:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800872c:	4619      	mov	r1, r3
 800872e:	68b8      	ldr	r0, [r7, #8]
 8008730:	f7fc fe54 	bl	80053dc <mbedtls_mpi_copy>
 8008734:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008738:	2b00      	cmp	r3, #0
 800873a:	d139      	bne.n	80087b0 <mbedtls_mpi_div_mpi+0x544>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800873c:	2100      	movs	r1, #0
 800873e:	68b8      	ldr	r0, [r7, #8]
 8008740:	f7fd fd6a 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12b      	bne.n	80087a2 <mbedtls_mpi_div_mpi+0x536>
            R->s = 1;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e02f      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8008752:	bf00      	nop
 8008754:	e02d      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8008756:	bf00      	nop
 8008758:	e02b      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800875a:	bf00      	nop
 800875c:	e029      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800875e:	bf00      	nop
 8008760:	e027      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8008762:	bf00      	nop
 8008764:	e025      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8008766:	bf00      	nop
 8008768:	e023      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
 800876a:	bf00      	nop
 800876c:	e021      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800876e:	bf00      	nop
 8008770:	e01f      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8008772:	bf00      	nop
 8008774:	e01d      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8008776:	bf00      	nop
 8008778:	e01b      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800877a:	bf00      	nop
 800877c:	e019      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800877e:	bf00      	nop
 8008780:	e017      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8008782:	bf00      	nop
 8008784:	e015      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8008786:	bf00      	nop
 8008788:	e013      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800878a:	bf00      	nop
 800878c:	e011      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800878e:	bf00      	nop
 8008790:	e00f      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8008792:	bf00      	nop
 8008794:	e00d      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8008796:	bf00      	nop
 8008798:	e00b      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800879a:	bf00      	nop
 800879c:	e009      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800879e:	bf00      	nop
 80087a0:	e007      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
    }

cleanup:
 80087a2:	bf00      	nop
 80087a4:	e005      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80087a6:	bf00      	nop
 80087a8:	e003      	b.n	80087b2 <mbedtls_mpi_div_mpi+0x546>
 80087aa:	bf00      	nop
 80087ac:	3ffffffe 	.word	0x3ffffffe
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80087b0:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80087b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fc fd16 	bl	80051e8 <mbedtls_mpi_free>
 80087bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fc fd11 	bl	80051e8 <mbedtls_mpi_free>
 80087c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fc fd0c 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
 80087d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fc fd07 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
 80087da:	f107 0314 	add.w	r3, r7, #20
 80087de:	210c      	movs	r1, #12
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00b f811 	bl	8013808 <mbedtls_platform_zeroize>

    return( ret );
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3774      	adds	r7, #116	; 0x74
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087f0 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80087fc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008800:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8008802:	2100      	movs	r1, #0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7fd fd07 	bl	8006218 <mbedtls_mpi_cmp_int>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	da02      	bge.n	8008816 <mbedtls_mpi_mod_mpi+0x26>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8008810:	f06f 0309 	mvn.w	r3, #9
 8008814:	e032      	b.n	800887c <mbedtls_mpi_mod_mpi+0x8c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	2000      	movs	r0, #0
 800881e:	f7ff fd25 	bl	800826c <mbedtls_mpi_div_mpi>
 8008822:	6178      	str	r0, [r7, #20]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d122      	bne.n	8008870 <mbedtls_mpi_mod_mpi+0x80>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800882a:	e008      	b.n	800883e <mbedtls_mpi_mod_mpi+0x4e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7fd feb4 	bl	800659e <mbedtls_mpi_add_mpi>
 8008836:	6178      	str	r0, [r7, #20]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d11a      	bne.n	8008874 <mbedtls_mpi_mod_mpi+0x84>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7fd fce9 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	dbef      	blt.n	800882c <mbedtls_mpi_mod_mpi+0x3c>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800884c:	e008      	b.n	8008860 <mbedtls_mpi_mod_mpi+0x70>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68f9      	ldr	r1, [r7, #12]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7fd feed 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008858:	6178      	str	r0, [r7, #20]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10b      	bne.n	8008878 <mbedtls_mpi_mod_mpi+0x88>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7fd fb9a 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	daef      	bge.n	800884e <mbedtls_mpi_mod_mpi+0x5e>

cleanup:
 800886e:	e004      	b.n	800887a <mbedtls_mpi_mod_mpi+0x8a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <mbedtls_mpi_mod_mpi+0x8a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <mbedtls_mpi_mod_mpi+0x8a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8008878:	bf00      	nop

    return( ret );
 800887a:	697b      	ldr	r3, [r7, #20]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08e      	sub	sp, #56	; 0x38
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008890:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008894:	637b      	str	r3, [r7, #52]	; 0x34

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 8008896:	f107 0320 	add.w	r3, r7, #32
 800889a:	4618      	mov	r0, r3
 800889c:	f7fc fc91 	bl	80051c2 <mbedtls_mpi_init>
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fc fc8c 	bl	80051c2 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80088aa:	f107 0320 	add.w	r3, r7, #32
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fc fd93 	bl	80053dc <mbedtls_mpi_copy>
 80088b6:	6378      	str	r0, [r7, #52]	; 0x34
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f040 80ab 	bne.w	8008a16 <mbedtls_mpi_gcd+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fc fd88 	bl	80053dc <mbedtls_mpi_copy>
 80088cc:	6378      	str	r0, [r7, #52]	; 0x34
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 80a2 	bne.w	8008a1a <mbedtls_mpi_gcd+0x196>

    lz = mbedtls_mpi_lsb( &TA );
 80088d6:	f107 0320 	add.w	r3, r7, #32
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fc ffc2 	bl	8005864 <mbedtls_mpi_lsb>
 80088e0:	6338      	str	r0, [r7, #48]	; 0x30
    lzt = mbedtls_mpi_lsb( &TB );
 80088e2:	f107 0314 	add.w	r3, r7, #20
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fc ffbc 	bl	8005864 <mbedtls_mpi_lsb>
 80088ec:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* The loop below gives the correct result when A==0 but not when B==0.
     * So have a special case for B==0. Leverage the fact that we just
     * calculated the lsb and lsb(B)==0 iff B is odd or 0 to make the test
     * slightly more efficient than cmp_int(). */
    if( lzt == 0 && mbedtls_mpi_get_bit( &TB, 0 ) == 0 )
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10e      	bne.n	8008912 <mbedtls_mpi_gcd+0x8e>
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fc ff3a 	bl	8005774 <mbedtls_mpi_get_bit>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <mbedtls_mpi_gcd+0x8e>
    {
        ret = mbedtls_mpi_copy( G, A );
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7fc fd67 	bl	80053dc <mbedtls_mpi_copy>
 800890e:	6378      	str	r0, [r7, #52]	; 0x34
        goto cleanup;
 8008910:	e090      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
    }

    if( lzt < lz )
 8008912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	429a      	cmp	r2, r3
 8008918:	d201      	bcs.n	800891e <mbedtls_mpi_gcd+0x9a>
        lz = lzt;
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	633b      	str	r3, [r7, #48]	; 0x30

    TA.s = TB.s = 1;
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	623b      	str	r3, [r7, #32]
     * value and the nonnegative integer bitlen(TA) + bitlen(TB) decreases
     * by at least 1, or the right-shift by 1 is made on zero and then
     * TA becomes 0 which ends the loop (TB cannot be 0 if it is right-shifted
     * since in that case TB is calculated from TB-TA with the condition TB>TA).
     */
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8008926:	e059      	b.n	80089dc <mbedtls_mpi_gcd+0x158>
    {
        /* Divisions by 2 preserve the invariant (I). */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8008928:	f107 0320 	add.w	r3, r7, #32
 800892c:	4618      	mov	r0, r3
 800892e:	f7fc ff99 	bl	8005864 <mbedtls_mpi_lsb>
 8008932:	4602      	mov	r2, r0
 8008934:	f107 0320 	add.w	r3, r7, #32
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fa11 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008940:	6378      	str	r0, [r7, #52]	; 0x34
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	2b00      	cmp	r3, #0
 8008946:	d16a      	bne.n	8008a1e <mbedtls_mpi_gcd+0x19a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8008948:	f107 0314 	add.w	r3, r7, #20
 800894c:	4618      	mov	r0, r3
 800894e:	f7fc ff89 	bl	8005864 <mbedtls_mpi_lsb>
 8008952:	4602      	mov	r2, r0
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7fd fa01 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008960:	6378      	str	r0, [r7, #52]	; 0x34
 8008962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008964:	2b00      	cmp	r3, #0
 8008966:	d15c      	bne.n	8008a22 <mbedtls_mpi_gcd+0x19e>
         * Invariant (I) is preserved since any odd divisor of both TA and TB
         * also divides |TA-TB|/2, and any odd divisor of both TA and |TA-TB|/2
         * also divides TB, and any odd divisior of both TB and |TA-TB|/2 also
         * divides TA.
         */
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8008968:	f107 0214 	add.w	r2, r7, #20
 800896c:	f107 0320 	add.w	r3, r7, #32
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fd fb12 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	db17      	blt.n	80089ae <mbedtls_mpi_gcd+0x12a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800897e:	f107 0214 	add.w	r2, r7, #20
 8008982:	f107 0120 	add.w	r1, r7, #32
 8008986:	f107 0320 	add.w	r3, r7, #32
 800898a:	4618      	mov	r0, r3
 800898c:	f7fd fd66 	bl	800645c <mbedtls_mpi_sub_abs>
 8008990:	6378      	str	r0, [r7, #52]	; 0x34
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d146      	bne.n	8008a26 <mbedtls_mpi_gcd+0x1a2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8008998:	f107 0320 	add.w	r3, r7, #32
 800899c:	2101      	movs	r1, #1
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd f9df 	bl	8005d62 <mbedtls_mpi_shift_r>
 80089a4:	6378      	str	r0, [r7, #52]	; 0x34
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d017      	beq.n	80089dc <mbedtls_mpi_gcd+0x158>
 80089ac:	e042      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80089ae:	f107 0220 	add.w	r2, r7, #32
 80089b2:	f107 0114 	add.w	r1, r7, #20
 80089b6:	f107 0314 	add.w	r3, r7, #20
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fd fd4e 	bl	800645c <mbedtls_mpi_sub_abs>
 80089c0:	6378      	str	r0, [r7, #52]	; 0x34
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d130      	bne.n	8008a2a <mbedtls_mpi_gcd+0x1a6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fd f9c7 	bl	8005d62 <mbedtls_mpi_shift_r>
 80089d4:	6378      	str	r0, [r7, #52]	; 0x34
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d128      	bne.n	8008a2e <mbedtls_mpi_gcd+0x1aa>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 80089dc:	f107 0320 	add.w	r3, r7, #32
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fd fc18 	bl	8006218 <mbedtls_mpi_cmp_int>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d19c      	bne.n	8008928 <mbedtls_mpi_gcd+0xa4>
     *   lz = min(a,b) so gcd(A,B) = 2^lz * TB.
     * - If there was no loop iteration, then A was 0, and gcd(A,B) = B.
     *   In this case, lz = 0 and B = TB so gcd(A,B) = B = 2^lz * TB as well.
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd f90c 	bl	8005c12 <mbedtls_mpi_shift_l>
 80089fa:	6378      	str	r0, [r7, #52]	; 0x34
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d117      	bne.n	8008a32 <mbedtls_mpi_gcd+0x1ae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	4619      	mov	r1, r3
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7fc fce7 	bl	80053dc <mbedtls_mpi_copy>
 8008a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	2b00      	cmp	r3, #0

cleanup:
 8008a14:	e00e      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8008a16:	bf00      	nop
 8008a18:	e00c      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8008a1a:	bf00      	nop
 8008a1c:	e00a      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8008a1e:	bf00      	nop
 8008a20:	e008      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8008a22:	bf00      	nop
 8008a24:	e006      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8008a26:	bf00      	nop
 8008a28:	e004      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8008a2a:	bf00      	nop
 8008a2c:	e002      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8008a2e:	bf00      	nop
 8008a30:	e000      	b.n	8008a34 <mbedtls_mpi_gcd+0x1b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8008a32:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8008a34:	f107 0320 	add.w	r3, r7, #32
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fc fbd5 	bl	80051e8 <mbedtls_mpi_free>
 8008a3e:	f107 0314 	add.w	r3, r7, #20
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fc fbd0 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3738      	adds	r7, #56	; 0x38
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <mpi_fill_random_internal>:
 * n_bytes must not be 0.
 */
static int mpi_fill_random_internal(
    mbedtls_mpi *X, size_t n_bytes,
    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b088      	sub	sp, #32
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	607a      	str	r2, [r7, #4]
 8008a5e:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008a60:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008a64:	61fb      	str	r3, [r7, #28]
    const size_t limbs = CHARS_TO_LIMBS( n_bytes );
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	089b      	lsrs	r3, r3, #2
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	f002 0203 	and.w	r2, r2, #3
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2201      	movne	r2, #1
 8008a76:	2200      	moveq	r2, #0
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
    const size_t overhead = ( limbs * ciL ) - n_bytes;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	009a      	lsls	r2, r3, #2
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	617b      	str	r3, [r7, #20]

    if( X->n < limbs )
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d902      	bls.n	8008a98 <mpi_fill_random_internal+0x46>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008a92:	f06f 0303 	mvn.w	r3, #3
 8008a96:	e029      	b.n	8008aec <mpi_fill_random_internal+0x9a>

    memset( X->p, 0, overhead );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f00b fda7 	bl	80145f4 <memset>
    memset( (unsigned char *) X->p + limbs * ciL, 0, ( X->n - limbs ) * ciL );
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	18d0      	adds	r0, r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	461a      	mov	r2, r3
 8008abc:	2100      	movs	r1, #0
 8008abe:	f00b fd99 	bl	80145f4 <memset>
    MBEDTLS_MPI_CHK( f_rng( p_rng, (unsigned char *) X->p + overhead, n_bytes ) );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	18d1      	adds	r1, r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	4798      	blx	r3
 8008ad2:	61f8      	str	r0, [r7, #28]
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <mpi_fill_random_internal+0x96>
    mpi_bigendian_to_host( X->p, limbs );
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	69b9      	ldr	r1, [r7, #24]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fc ff61 	bl	80059a8 <mpi_bigendian_to_host>
 8008ae6:	e000      	b.n	8008aea <mpi_fill_random_internal+0x98>
    MBEDTLS_MPI_CHK( f_rng( p_rng, (unsigned char *) X->p + overhead, n_bytes ) );
 8008ae8:	bf00      	nop

cleanup:
    return( ret );
 8008aea:	69fb      	ldr	r3, [r7, #28]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3720      	adds	r7, #32
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008b02:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008b06:	617b      	str	r3, [r7, #20]
    size_t const limbs = CHARS_TO_LIMBS( size );
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	089b      	lsrs	r3, r3, #2
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	f002 0203 	and.w	r2, r2, #3
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	bf14      	ite	ne
 8008b16:	2201      	movne	r2, #1
 8008b18:	2200      	moveq	r2, #0
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
 8008b20:	6939      	ldr	r1, [r7, #16]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7fc fc2f 	bl	8005386 <mbedtls_mpi_resize_clear>
 8008b28:	6178      	str	r0, [r7, #20]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10c      	bne.n	8008b4a <mbedtls_mpi_fill_random+0x56>
    if( size == 0 )
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <mbedtls_mpi_fill_random+0x46>
        return( 0 );
 8008b36:	2300      	movs	r3, #0
 8008b38:	e009      	b.n	8008b4e <mbedtls_mpi_fill_random+0x5a>

    ret = mpi_fill_random_internal( X, size, f_rng, p_rng );
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff86 	bl	8008a52 <mpi_fill_random_internal>
 8008b46:	6178      	str	r0, [r7, #20]
 8008b48:	e000      	b.n	8008b4c <mbedtls_mpi_fill_random+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
 8008b4a:	bf00      	nop

cleanup:
    return( ret );
 8008b4c:	697b      	ldr	r3, [r7, #20]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <mbedtls_mpi_random>:
int mbedtls_mpi_random( mbedtls_mpi *X,
                        mbedtls_mpi_sint min,
                        const mbedtls_mpi *N,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b08e      	sub	sp, #56	; 0x38
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8008b64:	f06f 0303 	mvn.w	r3, #3
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
    int count;
    unsigned lt_lower = 1, lt_upper = 0;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b6e:	2300      	movs	r3, #0
 8008b70:	623b      	str	r3, [r7, #32]
    size_t n_bits = mbedtls_mpi_bitlen( N );
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7fc feca 	bl	800590c <mbedtls_mpi_bitlen>
 8008b78:	62f8      	str	r0, [r7, #44]	; 0x2c
    size_t n_bytes = ( n_bits + 7 ) / 8;
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	08db      	lsrs	r3, r3, #3
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
    mbedtls_mpi lower_bound;

    if( min < 0 )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	da02      	bge.n	8008b8e <mbedtls_mpi_random+0x38>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008b88:	f06f 0303 	mvn.w	r3, #3
 8008b8c:	e086      	b.n	8008c9c <mbedtls_mpi_random+0x146>
    if( mbedtls_mpi_cmp_int( N, min ) <= 0 )
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fd fb41 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dc02      	bgt.n	8008ba2 <mbedtls_mpi_random+0x4c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008b9c:	f06f 0303 	mvn.w	r3, #3
 8008ba0:	e07c      	b.n	8008c9c <mbedtls_mpi_random+0x146>
     * compared to N. This is always the case when N is crypto-sized, but
     * it's convenient to support small N for testing purposes. When N
     * is small, use a higher repeat count, otherwise the probability of
     * failure is macroscopic.
     */
    count = ( n_bytes > 4 ? 30 : 250 );
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d901      	bls.n	8008bac <mbedtls_mpi_random+0x56>
 8008ba8:	231e      	movs	r3, #30
 8008baa:	e000      	b.n	8008bae <mbedtls_mpi_random+0x58>
 8008bac:	23fa      	movs	r3, #250	; 0xfa
 8008bae:	633b      	str	r3, [r7, #48]	; 0x30

    mbedtls_mpi_init( &lower_bound );
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fc fb04 	bl	80051c2 <mbedtls_mpi_init>

    /* Ensure that target MPI has exactly the same number of limbs
     * as the upper bound, even if the upper bound has leading zeros.
     * This is necessary for the mbedtls_mpi_lt_mpi_ct() check. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, N->n ) );
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fc fbe0 	bl	8005386 <mbedtls_mpi_resize_clear>
 8008bc6:	6378      	str	r0, [r7, #52]	; 0x34
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d153      	bne.n	8008c76 <mbedtls_mpi_random+0x120>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &lower_bound, N->n ) );
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	f107 0314 	add.w	r3, r7, #20
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fc fb2b 	bl	8005234 <mbedtls_mpi_grow>
 8008bde:	6378      	str	r0, [r7, #52]	; 0x34
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d149      	bne.n	8008c7a <mbedtls_mpi_random+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &lower_bound, min ) );
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fc fd90 	bl	8005712 <mbedtls_mpi_lset>
 8008bf2:	6378      	str	r0, [r7, #52]	; 0x34
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d141      	bne.n	8008c7e <mbedtls_mpi_random+0x128>
     * - try until result is in the desired range.
     * This also avoids any bias, which is especially important for ECDSA.
     */
    do
    {
        MBEDTLS_MPI_CHK( mpi_fill_random_internal( X, n_bytes, f_rng, p_rng ) );
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff ff26 	bl	8008a52 <mpi_fill_random_internal>
 8008c06:	6378      	str	r0, [r7, #52]	; 0x34
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d139      	bne.n	8008c82 <mbedtls_mpi_random+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, 8 * n_bytes - n_bits ) );
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	00da      	lsls	r2, r3, #3
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7fd f8a2 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8008c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d12f      	bne.n	8008c86 <mbedtls_mpi_random+0x130>

        if( --count == 0 )
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <mbedtls_mpi_random+0xe4>
        {
            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8008c32:	f06f 030d 	mvn.w	r3, #13
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
            goto cleanup;
 8008c38:	e02a      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_lt_mpi_ct( X, &lower_bound, &lt_lower ) );
 8008c3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	4619      	mov	r1, r3
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7fd fa64 	bl	8006112 <mbedtls_mpi_lt_mpi_ct>
 8008c4a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11b      	bne.n	8008c8a <mbedtls_mpi_random+0x134>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lt_mpi_ct( X, N, &lt_upper ) );
 8008c52:	f107 0320 	add.w	r3, r7, #32
 8008c56:	461a      	mov	r2, r3
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7fd fa59 	bl	8006112 <mbedtls_mpi_lt_mpi_ct>
 8008c60:	6378      	str	r0, [r7, #52]	; 0x34
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d112      	bne.n	8008c8e <mbedtls_mpi_random+0x138>
    }
    while( lt_lower != 0 || lt_upper == 0 );
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1c5      	bne.n	8008bfa <mbedtls_mpi_random+0xa4>
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0c2      	beq.n	8008bfa <mbedtls_mpi_random+0xa4>

cleanup:
 8008c74:	e00c      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, N->n ) );
 8008c76:	bf00      	nop
 8008c78:	e00a      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &lower_bound, N->n ) );
 8008c7a:	bf00      	nop
 8008c7c:	e008      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &lower_bound, min ) );
 8008c7e:	bf00      	nop
 8008c80:	e006      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
        MBEDTLS_MPI_CHK( mpi_fill_random_internal( X, n_bytes, f_rng, p_rng ) );
 8008c82:	bf00      	nop
 8008c84:	e004      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, 8 * n_bytes - n_bits ) );
 8008c86:	bf00      	nop
 8008c88:	e002      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lt_mpi_ct( X, &lower_bound, &lt_lower ) );
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <mbedtls_mpi_random+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lt_mpi_ct( X, N, &lt_upper ) );
 8008c8e:	bf00      	nop
    mbedtls_mpi_free( &lower_bound );
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fc faa7 	bl	80051e8 <mbedtls_mpi_free>
    return( ret );
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3738      	adds	r7, #56	; 0x38
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b0a0      	sub	sp, #128	; 0x80
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008cb0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fd faad 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dc02      	bgt.n	8008cca <mbedtls_mpi_inv_mod+0x26>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8008cc4:	f06f 0303 	mvn.w	r3, #3
 8008cc8:	e23e      	b.n	8009148 <mbedtls_mpi_inv_mod+0x4a4>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 8008cca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fc fa77 	bl	80051c2 <mbedtls_mpi_init>
 8008cd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fc fa72 	bl	80051c2 <mbedtls_mpi_init>
 8008cde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fc fa6d 	bl	80051c2 <mbedtls_mpi_init>
 8008ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fc fa68 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 8008cf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fc fa63 	bl	80051c2 <mbedtls_mpi_init>
 8008cfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fc fa5e 	bl	80051c2 <mbedtls_mpi_init>
 8008d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fc fa59 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 8008d10:	f107 031c 	add.w	r3, r7, #28
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fc fa54 	bl	80051c2 <mbedtls_mpi_init>
 8008d1a:	f107 0310 	add.w	r3, r7, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fc fa4f 	bl	80051c2 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8008d24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fda9 	bl	8008884 <mbedtls_mpi_gcd>
 8008d32:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008d34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 81a5 	bne.w	8009086 <mbedtls_mpi_inv_mod+0x3e2>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8008d3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008d40:	2101      	movs	r1, #1
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fd fa68 	bl	8006218 <mbedtls_mpi_cmp_int>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <mbedtls_mpi_inv_mod+0xb2>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8008d4e:	f06f 030d 	mvn.w	r3, #13
 8008d52:	67fb      	str	r3, [r7, #124]	; 0x7c
        goto cleanup;
 8008d54:	e1ca      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8008d56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff fd46 	bl	80087f0 <mbedtls_mpi_mod_mpi>
 8008d64:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 818e 	bne.w	800908a <mbedtls_mpi_inv_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8008d6e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008d72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fc fb2f 	bl	80053dc <mbedtls_mpi_copy>
 8008d7e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008d80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f040 8183 	bne.w	800908e <mbedtls_mpi_inv_mod+0x3ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8008d88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fc fb24 	bl	80053dc <mbedtls_mpi_copy>
 8008d94:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f040 817a 	bne.w	8009092 <mbedtls_mpi_inv_mod+0x3ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8008d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fc fb19 	bl	80053dc <mbedtls_mpi_copy>
 8008daa:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008dac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f040 8171 	bne.w	8009096 <mbedtls_mpi_inv_mod+0x3f2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8008db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008db8:	2101      	movs	r1, #1
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fc fca9 	bl	8005712 <mbedtls_mpi_lset>
 8008dc0:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 8168 	bne.w	800909a <mbedtls_mpi_inv_mod+0x3f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8008dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fc fc9e 	bl	8005712 <mbedtls_mpi_lset>
 8008dd6:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f040 815f 	bne.w	800909e <mbedtls_mpi_inv_mod+0x3fa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8008de0:	f107 031c 	add.w	r3, r7, #28
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fc fc93 	bl	8005712 <mbedtls_mpi_lset>
 8008dec:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 8156 	bne.w	80090a2 <mbedtls_mpi_inv_mod+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8008df6:	f107 0310 	add.w	r3, r7, #16
 8008dfa:	2101      	movs	r1, #1
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fc fc88 	bl	8005712 <mbedtls_mpi_lset>
 8008e02:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f040 814d 	bne.w	80090a6 <mbedtls_mpi_inv_mod+0x402>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 8008e0c:	e048      	b.n	8008ea0 <mbedtls_mpi_inv_mod+0x1fc>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8008e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e12:	2101      	movs	r1, #1
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fc ffa4 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008e1a:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 8143 	bne.w	80090aa <mbedtls_mpi_inv_mod+0x406>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8008e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <mbedtls_mpi_inv_mod+0x198>
 8008e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01b      	beq.n	8008e74 <mbedtls_mpi_inv_mod+0x1d0>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8008e3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008e40:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008e44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fd fba8 	bl	800659e <mbedtls_mpi_add_mpi>
 8008e4e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 812b 	bne.w	80090ae <mbedtls_mpi_inv_mod+0x40a>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8008e58:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008e5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fd fbe4 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008e6a:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f040 811f 	bne.w	80090b2 <mbedtls_mpi_inv_mod+0x40e>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 8008e74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e78:	2101      	movs	r1, #1
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fc ff71 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008e80:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f040 8116 	bne.w	80090b6 <mbedtls_mpi_inv_mod+0x412>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8008e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e8e:	2101      	movs	r1, #1
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fc ff66 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008e96:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008e98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 810d 	bne.w	80090ba <mbedtls_mpi_inv_mod+0x416>
        while( ( TU.p[0] & 1 ) == 0 )
 8008ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0b0      	beq.n	8008e0e <mbedtls_mpi_inv_mod+0x16a>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 8008eac:	e048      	b.n	8008f40 <mbedtls_mpi_inv_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8008eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fc ff54 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008eba:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 80fd 	bne.w	80090be <mbedtls_mpi_inv_mod+0x41a>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d105      	bne.n	8008edc <mbedtls_mpi_inv_mod+0x238>
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01b      	beq.n	8008f14 <mbedtls_mpi_inv_mod+0x270>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8008edc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008ee0:	f107 011c 	add.w	r1, r7, #28
 8008ee4:	f107 031c 	add.w	r3, r7, #28
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fd fb58 	bl	800659e <mbedtls_mpi_add_mpi>
 8008eee:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 80e5 	bne.w	80090c2 <mbedtls_mpi_inv_mod+0x41e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8008ef8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8008efc:	f107 0110 	add.w	r1, r7, #16
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fd fb94 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008f0a:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f040 80d9 	bne.w	80090c6 <mbedtls_mpi_inv_mod+0x422>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8008f14:	f107 031c 	add.w	r3, r7, #28
 8008f18:	2101      	movs	r1, #1
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fc ff21 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008f20:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 80d0 	bne.w	80090ca <mbedtls_mpi_inv_mod+0x426>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8008f2a:	f107 0310 	add.w	r3, r7, #16
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc ff16 	bl	8005d62 <mbedtls_mpi_shift_r>
 8008f36:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 80c7 	bne.w	80090ce <mbedtls_mpi_inv_mod+0x42a>
        while( ( TV.p[0] & 1 ) == 0 )
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0b0      	beq.n	8008eae <mbedtls_mpi_inv_mod+0x20a>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8008f4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fd f820 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	db29      	blt.n	8008fb6 <mbedtls_mpi_inv_mod+0x312>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8008f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008f6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd fb5f 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008f74:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 80aa 	bne.w	80090d2 <mbedtls_mpi_inv_mod+0x42e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8008f7e:	f107 021c 	add.w	r2, r7, #28
 8008f82:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008f86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fd fb51 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008f90:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f040 809e 	bne.w	80090d6 <mbedtls_mpi_inv_mod+0x432>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8008f9a:	f107 0210 	add.w	r2, r7, #16
 8008f9e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008fa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fd fb43 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008fac:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d028      	beq.n	8009006 <mbedtls_mpi_inv_mod+0x362>
 8008fb4:	e09a      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8008fb6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008fba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fd fb35 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008fc8:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8084 	bne.w	80090da <mbedtls_mpi_inv_mod+0x436>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8008fd2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008fd6:	f107 011c 	add.w	r1, r7, #28
 8008fda:	f107 031c 	add.w	r3, r7, #28
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd fb27 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008fe4:	67f8      	str	r0, [r7, #124]	; 0x7c
 8008fe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d178      	bne.n	80090de <mbedtls_mpi_inv_mod+0x43a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8008fec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ff0:	f107 0110 	add.w	r1, r7, #16
 8008ff4:	f107 0310 	add.w	r3, r7, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd fb1a 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8008ffe:	67f8      	str	r0, [r7, #124]	; 0x7c
 8009000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d16d      	bne.n	80090e2 <mbedtls_mpi_inv_mod+0x43e>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8009006:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd f903 	bl	8006218 <mbedtls_mpi_cmp_int>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	f47f af43 	bne.w	8008ea0 <mbedtls_mpi_inv_mod+0x1fc>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800901a:	e00b      	b.n	8009034 <mbedtls_mpi_inv_mod+0x390>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800901c:	f107 011c 	add.w	r1, r7, #28
 8009020:	f107 031c 	add.w	r3, r7, #28
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd fab9 	bl	800659e <mbedtls_mpi_add_mpi>
 800902c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800902e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d158      	bne.n	80090e6 <mbedtls_mpi_inv_mod+0x442>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8009034:	f107 031c 	add.w	r3, r7, #28
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd f8ec 	bl	8006218 <mbedtls_mpi_cmp_int>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	dbea      	blt.n	800901c <mbedtls_mpi_inv_mod+0x378>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8009046:	e00b      	b.n	8009060 <mbedtls_mpi_inv_mod+0x3bc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8009048:	f107 011c 	add.w	r1, r7, #28
 800904c:	f107 031c 	add.w	r3, r7, #28
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	f7fd faed 	bl	8006632 <mbedtls_mpi_sub_mpi>
 8009058:	67f8      	str	r0, [r7, #124]	; 0x7c
 800905a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d144      	bne.n	80090ea <mbedtls_mpi_inv_mod+0x446>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8009060:	f107 031c 	add.w	r3, r7, #28
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc ff98 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	daea      	bge.n	8009048 <mbedtls_mpi_inv_mod+0x3a4>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8009072:	f107 031c 	add.w	r3, r7, #28
 8009076:	4619      	mov	r1, r3
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7fc f9af 	bl	80053dc <mbedtls_mpi_copy>
 800907e:	67f8      	str	r0, [r7, #124]	; 0x7c
 8009080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009082:	2b00      	cmp	r3, #0

cleanup:
 8009084:	e032      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8009086:	bf00      	nop
 8009088:	e030      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800908a:	bf00      	nop
 800908c:	e02e      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800908e:	bf00      	nop
 8009090:	e02c      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8009092:	bf00      	nop
 8009094:	e02a      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8009096:	bf00      	nop
 8009098:	e028      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800909a:	bf00      	nop
 800909c:	e026      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800909e:	bf00      	nop
 80090a0:	e024      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 80090a2:	bf00      	nop
 80090a4:	e022      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80090a6:	bf00      	nop
 80090a8:	e020      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80090aa:	bf00      	nop
 80090ac:	e01e      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80090ae:	bf00      	nop
 80090b0:	e01c      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80090b2:	bf00      	nop
 80090b4:	e01a      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80090b6:	bf00      	nop
 80090b8:	e018      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80090ba:	bf00      	nop
 80090bc:	e016      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80090be:	bf00      	nop
 80090c0:	e014      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80090c2:	bf00      	nop
 80090c4:	e012      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80090c6:	bf00      	nop
 80090c8:	e010      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80090ca:	bf00      	nop
 80090cc:	e00e      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80090ce:	bf00      	nop
 80090d0:	e00c      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80090d2:	bf00      	nop
 80090d4:	e00a      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80090d6:	bf00      	nop
 80090d8:	e008      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80090da:	bf00      	nop
 80090dc:	e006      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80090de:	bf00      	nop
 80090e0:	e004      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80090e2:	bf00      	nop
 80090e4:	e002      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80090e6:	bf00      	nop
 80090e8:	e000      	b.n	80090ec <mbedtls_mpi_inv_mod+0x448>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80090ea:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80090ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fc f879 	bl	80051e8 <mbedtls_mpi_free>
 80090f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fc f874 	bl	80051e8 <mbedtls_mpi_free>
 8009100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009104:	4618      	mov	r0, r3
 8009106:	f7fc f86f 	bl	80051e8 <mbedtls_mpi_free>
 800910a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800910e:	4618      	mov	r0, r3
 8009110:	f7fc f86a 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 8009114:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009118:	4618      	mov	r0, r3
 800911a:	f7fc f865 	bl	80051e8 <mbedtls_mpi_free>
 800911e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009122:	4618      	mov	r0, r3
 8009124:	f7fc f860 	bl	80051e8 <mbedtls_mpi_free>
 8009128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800912c:	4618      	mov	r0, r3
 800912e:	f7fc f85b 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8009132:	f107 031c 	add.w	r3, r7, #28
 8009136:	4618      	mov	r0, r3
 8009138:	f7fc f856 	bl	80051e8 <mbedtls_mpi_free>
 800913c:	f107 0310 	add.w	r3, r7, #16
 8009140:	4618      	mov	r0, r3
 8009142:	f7fc f851 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 8009146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8009148:	4618      	mov	r0, r3
 800914a:	3780      	adds	r7, #128	; 0x80
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4053      	eors	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3304      	adds	r3, #4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3304      	adds	r3, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4053      	eors	r3, r2
 8009176:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1( MBEDTLS_BYTE_3( I0 )) << 24) |
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	0e1b      	lsrs	r3, r3, #24
 800917c:	b2db      	uxtb	r3, r3
 800917e:	461a      	mov	r2, r3
 8009180:	4b31      	ldr	r3, [pc, #196]	; (8009248 <camellia_feistel+0xf8>)
 8009182:	5c9b      	ldrb	r3, [r3, r2]
 8009184:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2( MBEDTLS_BYTE_2( I0 )) << 16) |
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	4b2f      	ldr	r3, [pc, #188]	; (800924c <camellia_feistel+0xfc>)
 8009190:	5c5b      	ldrb	r3, [r3, r1]
 8009192:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1( MBEDTLS_BYTE_3( I0 )) << 24) |
 8009194:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3( MBEDTLS_BYTE_1( I0 )) <<  8) |
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	b2db      	uxtb	r3, r3
 800919c:	4619      	mov	r1, r3
 800919e:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <camellia_feistel+0x100>)
 80091a0:	5c5b      	ldrb	r3, [r3, r1]
 80091a2:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2( MBEDTLS_BYTE_2( I0 )) << 16) |
 80091a4:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4( MBEDTLS_BYTE_0( I0 ))      );
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	b2d2      	uxtb	r2, r2
 80091aa:	4611      	mov	r1, r2
 80091ac:	4a29      	ldr	r2, [pc, #164]	; (8009254 <camellia_feistel+0x104>)
 80091ae:	5c52      	ldrb	r2, [r2, r1]
    I0 = ((uint32_t) SBOX1( MBEDTLS_BYTE_3( I0 )) << 24) |
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2( MBEDTLS_BYTE_3( I1 )) << 24) |
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	0e1b      	lsrs	r3, r3, #24
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b23      	ldr	r3, [pc, #140]	; (800924c <camellia_feistel+0xfc>)
 80091be:	5c9b      	ldrb	r3, [r3, r2]
 80091c0:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3( MBEDTLS_BYTE_2( I1 )) << 16) |
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	4619      	mov	r1, r3
 80091ca:	4b21      	ldr	r3, [pc, #132]	; (8009250 <camellia_feistel+0x100>)
 80091cc:	5c5b      	ldrb	r3, [r3, r1]
 80091ce:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2( MBEDTLS_BYTE_3( I1 )) << 24) |
 80091d0:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4( MBEDTLS_BYTE_1( I1 )) <<  8) |
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	4619      	mov	r1, r3
 80091da:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <camellia_feistel+0x104>)
 80091dc:	5c5b      	ldrb	r3, [r3, r1]
 80091de:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3( MBEDTLS_BYTE_2( I1 )) << 16) |
 80091e0:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1( MBEDTLS_BYTE_0( I1 ))      );
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	4611      	mov	r1, r2
 80091e8:	4a17      	ldr	r2, [pc, #92]	; (8009248 <camellia_feistel+0xf8>)
 80091ea:	5c52      	ldrb	r2, [r2, r1]
    I1 = ((uint32_t) SBOX2( MBEDTLS_BYTE_3( I1 )) << 24) |
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4053      	eors	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	ea4f 4333 	mov.w	r3, r3, ror #16
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	4053      	eors	r3, r2
 8009206:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4053      	eors	r3, r2
 8009212:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	ea4f 2333 	mov.w	r3, r3, ror #8
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4053      	eors	r3, r2
 800921e:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	405a      	eors	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3304      	adds	r3, #4
 8009230:	6819      	ldr	r1, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3304      	adds	r3, #4
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	404a      	eors	r2, r1
 800923a:	601a      	str	r2, [r3, #0]
}
 800923c:	bf00      	nop
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	08015b78 	.word	0x08015b78
 800924c:	08015c78 	.word	0x08015c78
 8009250:	08015d78 	.word	0x08015d78
 8009254:	08015e78 	.word	0x08015e78

08009258 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 8009260:	f44f 728a 	mov.w	r2, #276	; 0x114
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f00b f9c4 	bl	80145f4 <memset>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <mbedtls_camellia_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 8009282:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f00a fabe 	bl	8013808 <mbedtls_platform_zeroize>
 800928c:	e000      	b.n	8009290 <mbedtls_camellia_free+0x1c>
        return;
 800928e:	bf00      	nop
}
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b0c8      	sub	sp, #288	; 0x120
 800929c:	af00      	add	r7, sp, #0
 800929e:	f107 030c 	add.w	r3, r7, #12
 80092a2:	6018      	str	r0, [r3, #0]
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	6019      	str	r1, [r3, #0]
 80092aa:	1d3b      	adds	r3, r7, #4
 80092ac:	601a      	str	r2, [r3, #0]
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3304      	adds	r3, #4
 80092b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    memset( t, 0, 64 );
 80092ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80092be:	2240      	movs	r2, #64	; 0x40
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f00b f996 	bl	80145f4 <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 80092c8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80092cc:	2100      	movs	r1, #0
 80092ce:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80092d2:	f00b f98f 	bl	80145f4 <memset>

    switch( keybits )
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092de:	d016      	beq.n	800930e <mbedtls_camellia_setkey_enc+0x76>
 80092e0:	1d3b      	adds	r3, r7, #4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e8:	d81a      	bhi.n	8009320 <mbedtls_camellia_setkey_enc+0x88>
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b80      	cmp	r3, #128	; 0x80
 80092f0:	d004      	beq.n	80092fc <mbedtls_camellia_setkey_enc+0x64>
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2bc0      	cmp	r3, #192	; 0xc0
 80092f8:	d009      	beq.n	800930e <mbedtls_camellia_setkey_enc+0x76>
 80092fa:	e011      	b.n	8009320 <mbedtls_camellia_setkey_enc+0x88>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2203      	movs	r2, #3
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800930c:	e00c      	b.n	8009328 <mbedtls_camellia_setkey_enc+0x90>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2204      	movs	r2, #4
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	2301      	movs	r3, #1
 800931a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800931e:	e003      	b.n	8009328 <mbedtls_camellia_setkey_enc+0x90>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8009320:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8009324:	f000 bda4 	b.w	8009e70 <mbedtls_camellia_setkey_enc+0xbd8>
    }

    for( i = 0; i < keybits / 8; ++i )
 8009328:	2300      	movs	r3, #0
 800932a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800932e:	e012      	b.n	8009356 <mbedtls_camellia_setkey_enc+0xbe>
        t[i] = key[i];
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800933a:	4413      	add	r3, r2
 800933c:	7819      	ldrb	r1, [r3, #0]
 800933e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8009342:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009346:	4413      	add	r3, r2
 8009348:	460a      	mov	r2, r1
 800934a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keybits / 8; ++i )
 800934c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009350:	3301      	adds	r3, #1
 8009352:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	08db      	lsrs	r3, r3, #3
 800935c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009360:	429a      	cmp	r2, r3
 8009362:	d3e5      	bcc.n	8009330 <mbedtls_camellia_setkey_enc+0x98>

    if( keybits == 192 ) {
 8009364:	1d3b      	adds	r3, r7, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2bc0      	cmp	r3, #192	; 0xc0
 800936a:	d11e      	bne.n	80093aa <mbedtls_camellia_setkey_enc+0x112>
        for( i = 0; i < 8; i++ )
 800936c:	2300      	movs	r3, #0
 800936e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009372:	e016      	b.n	80093a2 <mbedtls_camellia_setkey_enc+0x10a>
            t[24 + i] = ~t[16 + i];
 8009374:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009378:	3310      	adds	r3, #16
 800937a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800937e:	4413      	add	r3, r2
 8009380:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8009384:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009388:	3318      	adds	r3, #24
 800938a:	43d2      	mvns	r2, r2
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8009392:	440b      	add	r3, r1
 8009394:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for( i = 0; i < 8; i++ )
 8009398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800939c:	3301      	adds	r3, #1
 800939e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	d9e4      	bls.n	8009374 <mbedtls_camellia_setkey_enc+0xdc>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093b0:	e04f      	b.n	8009452 <mbedtls_camellia_setkey_enc+0x1ba>
        SIGMA[i][0] = MBEDTLS_GET_UINT32_BE( SIGMA_CHARS[i], 0 );
 80093b2:	4ab8      	ldr	r2, [pc, #736]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 80093b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093b8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80093bc:	061a      	lsls	r2, r3, #24
 80093be:	49b5      	ldr	r1, [pc, #724]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 80093c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	440b      	add	r3, r1
 80093c8:	785b      	ldrb	r3, [r3, #1]
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	431a      	orrs	r2, r3
 80093ce:	49b1      	ldr	r1, [pc, #708]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 80093d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	440b      	add	r3, r1
 80093d8:	789b      	ldrb	r3, [r3, #2]
 80093da:	021b      	lsls	r3, r3, #8
 80093dc:	431a      	orrs	r2, r3
 80093de:	49ad      	ldr	r1, [pc, #692]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 80093e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	440b      	add	r3, r1
 80093e8:	78db      	ldrb	r3, [r3, #3]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80093f6:	440b      	add	r3, r1
 80093f8:	f843 2c7c 	str.w	r2, [r3, #-124]
        SIGMA[i][1] = MBEDTLS_GET_UINT32_BE( SIGMA_CHARS[i], 4 );
 80093fc:	4aa5      	ldr	r2, [pc, #660]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 80093fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	4413      	add	r3, r2
 8009406:	791b      	ldrb	r3, [r3, #4]
 8009408:	061a      	lsls	r2, r3, #24
 800940a:	49a2      	ldr	r1, [pc, #648]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 800940c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	795b      	ldrb	r3, [r3, #5]
 8009416:	041b      	lsls	r3, r3, #16
 8009418:	431a      	orrs	r2, r3
 800941a:	499e      	ldr	r1, [pc, #632]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 800941c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	440b      	add	r3, r1
 8009424:	799b      	ldrb	r3, [r3, #6]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	431a      	orrs	r2, r3
 800942a:	499a      	ldr	r1, [pc, #616]	; (8009694 <mbedtls_camellia_setkey_enc+0x3fc>)
 800942c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	440b      	add	r3, r1
 8009434:	79db      	ldrb	r3, [r3, #7]
 8009436:	431a      	orrs	r2, r3
 8009438:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800943c:	00db      	lsls	r3, r3, #3
 800943e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8009442:	440b      	add	r3, r1
 8009444:	f843 2c78 	str.w	r2, [r3, #-120]
    for( i = 0; i < 6; i++ ) {
 8009448:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800944c:	3301      	adds	r3, #1
 800944e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009452:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009456:	2b05      	cmp	r3, #5
 8009458:	d9ab      	bls.n	80093b2 <mbedtls_camellia_setkey_enc+0x11a>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 800945a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800945e:	2240      	movs	r2, #64	; 0x40
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f00b f8c6 	bl	80145f4 <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 8009468:	2300      	movs	r3, #0
 800946a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800946e:	e035      	b.n	80094dc <mbedtls_camellia_setkey_enc+0x244>
        KC[i] = MBEDTLS_GET_UINT32_BE( t, i * 4 );
 8009470:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800947a:	4413      	add	r3, r2
 800947c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8009480:	061a      	lsls	r2, r3, #24
 8009482:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	3301      	adds	r3, #1
 800948a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800948e:	440b      	add	r3, r1
 8009490:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	431a      	orrs	r2, r3
 8009498:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	3302      	adds	r3, #2
 80094a0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80094a4:	440b      	add	r3, r1
 80094a6:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	3203      	adds	r2, #3
 80094b6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80094ba:	440a      	add	r2, r1
 80094bc:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80094cc:	440b      	add	r3, r1
 80094ce:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 8; i++ )
 80094d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094d6:	3301      	adds	r3, #1
 80094d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094e0:	2b07      	cmp	r3, #7
 80094e2:	d9c5      	bls.n	8009470 <mbedtls_camellia_setkey_enc+0x1d8>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
 80094e4:	2300      	movs	r3, #0
 80094e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094ea:	e01f      	b.n	800952c <mbedtls_camellia_setkey_enc+0x294>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 80094ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80094f6:	4413      	add	r3, r2
 80094f8:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 80094fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009500:	3304      	adds	r3, #4
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009508:	4413      	add	r3, r2
 800950a:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800950e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009512:	3308      	adds	r3, #8
 8009514:	404a      	eors	r2, r1
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800951c:	440b      	add	r3, r1
 800951e:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8009522:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009526:	3301      	adds	r3, #1
 8009528:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800952c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009530:	2b03      	cmp	r3, #3
 8009532:	d9db      	bls.n	80094ec <mbedtls_camellia_setkey_enc+0x254>

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8009534:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009538:	3320      	adds	r3, #32
 800953a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800953e:	3228      	adds	r2, #40	; 0x28
 8009540:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff fe03 	bl	8009150 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 800954a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800954e:	3328      	adds	r3, #40	; 0x28
 8009550:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009554:	3220      	adds	r2, #32
 8009556:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800955a:	3108      	adds	r1, #8
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fdf7 	bl	8009150 <camellia_feistel>

    for( i = 0; i < 4; ++i )
 8009562:	2300      	movs	r3, #0
 8009564:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009568:	e01f      	b.n	80095aa <mbedtls_camellia_setkey_enc+0x312>
        KC[8 + i] ^= KC[i];
 800956a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800956e:	3308      	adds	r3, #8
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009576:	4413      	add	r3, r2
 8009578:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 800957c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009586:	4413      	add	r3, r2
 8009588:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800958c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009590:	3308      	adds	r3, #8
 8009592:	404a      	eors	r2, r1
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800959a:	440b      	add	r3, r1
 800959c:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 80095a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80095a4:	3301      	adds	r3, #1
 80095a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80095aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d9db      	bls.n	800956a <mbedtls_camellia_setkey_enc+0x2d2>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 80095b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095b6:	3320      	adds	r3, #32
 80095b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80095bc:	3228      	adds	r2, #40	; 0x28
 80095be:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80095c2:	3110      	adds	r1, #16
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fdc3 	bl	8009150 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 80095ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095ce:	3328      	adds	r3, #40	; 0x28
 80095d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80095d4:	3220      	adds	r2, #32
 80095d6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80095da:	3118      	adds	r1, #24
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff fdb7 	bl	8009150 <camellia_feistel>

    if( keybits > 128 ) {
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b80      	cmp	r3, #128	; 0x80
 80095e8:	d940      	bls.n	800966c <mbedtls_camellia_setkey_enc+0x3d4>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80095f0:	e020      	b.n	8009634 <mbedtls_camellia_setkey_enc+0x39c>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 80095f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80095f6:	3304      	adds	r3, #4
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80095fe:	4413      	add	r3, r2
 8009600:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8009604:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009608:	3308      	adds	r3, #8
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8009610:	4413      	add	r3, r2
 8009612:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8009616:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800961a:	330c      	adds	r3, #12
 800961c:	404a      	eors	r2, r1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8009624:	440b      	add	r3, r1
 8009626:	f843 2cbc 	str.w	r2, [r3, #-188]
        for( i = 0; i < 4; ++i )
 800962a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800962e:	3301      	adds	r3, #1
 8009630:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009634:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009638:	2b03      	cmp	r3, #3
 800963a:	d9da      	bls.n	80095f2 <mbedtls_camellia_setkey_enc+0x35a>

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 800963c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009640:	3330      	adds	r3, #48	; 0x30
 8009642:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009646:	3238      	adds	r2, #56	; 0x38
 8009648:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800964c:	3120      	adds	r1, #32
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fd7e 	bl	8009150 <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 8009654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009658:	3338      	adds	r3, #56	; 0x38
 800965a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800965e:	3230      	adds	r2, #48	; 0x30
 8009660:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009664:	3128      	adds	r1, #40	; 0x28
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff fd72 	bl	8009150 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 800966c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009676:	f107 0314 	add.w	r3, r7, #20
 800967a:	605a      	str	r2, [r3, #4]
 800967c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	609a      	str	r2, [r3, #8]
 8009684:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009686:	f107 0314 	add.w	r3, r7, #20
 800968a:	60da      	str	r2, [r3, #12]
 800968c:	2301      	movs	r3, #1
 800968e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009692:	e09a      	b.n	80097ca <mbedtls_camellia_setkey_enc+0x532>
 8009694:	08015b48 	.word	0x08015b48
 8009698:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800969c:	3b01      	subs	r3, #1
 800969e:	49c6      	ldr	r1, [pc, #792]	; (80099b8 <mbedtls_camellia_setkey_enc+0x720>)
 80096a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80096a4:	0112      	lsls	r2, r2, #4
 80096a6:	440a      	add	r2, r1
 80096a8:	4413      	add	r3, r2
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8087 	beq.w	80097c0 <mbedtls_camellia_setkey_enc+0x528>
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	6819      	ldr	r1, [r3, #0]
 80096b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80096bc:	4613      	mov	r3, r2
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	f003 031f 	and.w	r3, r3, #31
 80096c6:	4099      	lsls	r1, r3
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	6858      	ldr	r0, [r3, #4]
 80096ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80096d2:	4613      	mov	r3, r2
 80096d4:	011b      	lsls	r3, r3, #4
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	f1c3 0320 	rsb	r3, r3, #32
 80096e0:	fa20 f203 	lsr.w	r2, r0, r3
 80096e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	f107 0014 	add.w	r0, r7, #20
 80096ee:	4403      	add	r3, r0
 80096f0:	404a      	eors	r2, r1
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	6859      	ldr	r1, [r3, #4]
 80096fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80096fe:	4613      	mov	r3, r2
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	f003 031f 	and.w	r3, r3, #31
 8009708:	4099      	lsls	r1, r3
 800970a:	f107 0314 	add.w	r3, r7, #20
 800970e:	6898      	ldr	r0, [r3, #8]
 8009710:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009714:	4613      	mov	r3, r2
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	f003 031f 	and.w	r3, r3, #31
 800971e:	f1c3 0320 	rsb	r3, r3, #32
 8009722:	fa20 f203 	lsr.w	r2, r0, r3
 8009726:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	3304      	adds	r3, #4
 800972e:	f107 0014 	add.w	r0, r7, #20
 8009732:	4403      	add	r3, r0
 8009734:	404a      	eors	r2, r1
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f107 0314 	add.w	r3, r7, #20
 800973c:	6899      	ldr	r1, [r3, #8]
 800973e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009742:	4613      	mov	r3, r2
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	f003 031f 	and.w	r3, r3, #31
 800974c:	4099      	lsls	r1, r3
 800974e:	f107 0314 	add.w	r3, r7, #20
 8009752:	68d8      	ldr	r0, [r3, #12]
 8009754:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009758:	4613      	mov	r3, r2
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	f003 031f 	and.w	r3, r3, #31
 8009762:	f1c3 0320 	rsb	r3, r3, #32
 8009766:	fa20 f203 	lsr.w	r2, r0, r3
 800976a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	3308      	adds	r3, #8
 8009772:	f107 0014 	add.w	r0, r7, #20
 8009776:	4403      	add	r3, r0
 8009778:	404a      	eors	r2, r1
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	68d9      	ldr	r1, [r3, #12]
 8009782:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009786:	4613      	mov	r3, r2
 8009788:	011b      	lsls	r3, r3, #4
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	f003 031f 	and.w	r3, r3, #31
 8009790:	4099      	lsls	r1, r3
 8009792:	f107 0314 	add.w	r3, r7, #20
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800979c:	4613      	mov	r3, r2
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	f1c3 0320 	rsb	r3, r3, #32
 80097aa:	fa20 f203 	lsr.w	r2, r0, r3
 80097ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	330c      	adds	r3, #12
 80097b6:	f107 0014 	add.w	r0, r7, #20
 80097ba:	4403      	add	r3, r0
 80097bc:	404a      	eors	r2, r1
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097c4:	3301      	adds	r3, #1
 80097c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	f67f af62 	bls.w	8009698 <mbedtls_camellia_setkey_enc+0x400>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80097da:	e02c      	b.n	8009836 <mbedtls_camellia_setkey_enc+0x59e>
 80097dc:	4977      	ldr	r1, [pc, #476]	; (80099bc <mbedtls_camellia_setkey_enc+0x724>)
 80097de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	18ca      	adds	r2, r1, r3
 80097ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80097f0:	4413      	add	r3, r2
 80097f2:	f993 3000 	ldrsb.w	r3, [r3]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d017      	beq.n	800982c <mbedtls_camellia_setkey_enc+0x594>
 80097fc:	496f      	ldr	r1, [pc, #444]	; (80099bc <mbedtls_camellia_setkey_enc+0x724>)
 80097fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	18ca      	adds	r2, r1, r3
 800980c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009810:	4413      	add	r3, r2
 8009812:	f993 3000 	ldrsb.w	r3, [r3]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800981c:	4413      	add	r3, r2
 800981e:	f107 0214 	add.w	r2, r7, #20
 8009822:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009826:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009830:	3301      	adds	r3, #1
 8009832:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009836:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800983a:	2b13      	cmp	r3, #19
 800983c:	d9ce      	bls.n	80097dc <mbedtls_camellia_setkey_enc+0x544>

    /* Manipulating KR */
    if( keybits > 128 ) {
 800983e:	1d3b      	adds	r3, r7, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	f240 80ef 	bls.w	8009a26 <mbedtls_camellia_setkey_enc+0x78e>
        SHIFT_AND_PLACE( idx, 1 );
 8009848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800984a:	f107 0314 	add.w	r3, r7, #20
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	605a      	str	r2, [r3, #4]
 8009858:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	609a      	str	r2, [r3, #8]
 8009860:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	2301      	movs	r3, #1
 800986c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009870:	e099      	b.n	80099a6 <mbedtls_camellia_setkey_enc+0x70e>
 8009872:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009876:	3b01      	subs	r3, #1
 8009878:	494f      	ldr	r1, [pc, #316]	; (80099b8 <mbedtls_camellia_setkey_enc+0x720>)
 800987a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800987e:	0112      	lsls	r2, r2, #4
 8009880:	440a      	add	r2, r1
 8009882:	4413      	add	r3, r2
 8009884:	3304      	adds	r3, #4
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8087 	beq.w	800999c <mbedtls_camellia_setkey_enc+0x704>
 800988e:	f107 0314 	add.w	r3, r7, #20
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009898:	4613      	mov	r3, r2
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	f003 031f 	and.w	r3, r3, #31
 80098a2:	4099      	lsls	r1, r3
 80098a4:	f107 0314 	add.w	r3, r7, #20
 80098a8:	6858      	ldr	r0, [r3, #4]
 80098aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098ae:	4613      	mov	r3, r2
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	f003 031f 	and.w	r3, r3, #31
 80098b8:	f1c3 0320 	rsb	r3, r3, #32
 80098bc:	fa20 f203 	lsr.w	r2, r0, r3
 80098c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80098c4:	011b      	lsls	r3, r3, #4
 80098c6:	f107 0014 	add.w	r0, r7, #20
 80098ca:	4403      	add	r3, r0
 80098cc:	404a      	eors	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f107 0314 	add.w	r3, r7, #20
 80098d4:	6859      	ldr	r1, [r3, #4]
 80098d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098da:	4613      	mov	r3, r2
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	4099      	lsls	r1, r3
 80098e6:	f107 0314 	add.w	r3, r7, #20
 80098ea:	6898      	ldr	r0, [r3, #8]
 80098ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80098f0:	4613      	mov	r3, r2
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	f003 031f 	and.w	r3, r3, #31
 80098fa:	f1c3 0320 	rsb	r3, r3, #32
 80098fe:	fa20 f203 	lsr.w	r2, r0, r3
 8009902:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	3304      	adds	r3, #4
 800990a:	f107 0014 	add.w	r0, r7, #20
 800990e:	4403      	add	r3, r0
 8009910:	404a      	eors	r2, r1
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	6899      	ldr	r1, [r3, #8]
 800991a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800991e:	4613      	mov	r3, r2
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	4099      	lsls	r1, r3
 800992a:	f107 0314 	add.w	r3, r7, #20
 800992e:	68d8      	ldr	r0, [r3, #12]
 8009930:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	f1c3 0320 	rsb	r3, r3, #32
 8009942:	fa20 f203 	lsr.w	r2, r0, r3
 8009946:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	3308      	adds	r3, #8
 800994e:	f107 0014 	add.w	r0, r7, #20
 8009952:	4403      	add	r3, r0
 8009954:	404a      	eors	r2, r1
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	68d9      	ldr	r1, [r3, #12]
 800995e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009962:	4613      	mov	r3, r2
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	1a9b      	subs	r3, r3, r2
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	4099      	lsls	r1, r3
 800996e:	f107 0314 	add.w	r3, r7, #20
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009978:	4613      	mov	r3, r2
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	f1c3 0320 	rsb	r3, r3, #32
 8009986:	fa20 f203 	lsr.w	r2, r0, r3
 800998a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	330c      	adds	r3, #12
 8009992:	f107 0014 	add.w	r0, r7, #20
 8009996:	4403      	add	r3, r0
 8009998:	404a      	eors	r2, r1
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099a0:	3301      	adds	r3, #1
 80099a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	f67f af61 	bls.w	8009872 <mbedtls_camellia_setkey_enc+0x5da>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099b6:	e032      	b.n	8009a1e <mbedtls_camellia_setkey_enc+0x786>
 80099b8:	08015f78 	.word	0x08015f78
 80099bc:	08015f98 	.word	0x08015f98
 80099c0:	499e      	ldr	r1, [pc, #632]	; (8009c3c <mbedtls_camellia_setkey_enc+0x9a4>)
 80099c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	18ca      	adds	r2, r1, r3
 80099d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099d4:	4413      	add	r3, r2
 80099d6:	3314      	adds	r3, #20
 80099d8:	f993 3000 	ldrsb.w	r3, [r3]
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e0:	d018      	beq.n	8009a14 <mbedtls_camellia_setkey_enc+0x77c>
 80099e2:	4996      	ldr	r1, [pc, #600]	; (8009c3c <mbedtls_camellia_setkey_enc+0x9a4>)
 80099e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	18ca      	adds	r2, r1, r3
 80099f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099f6:	4413      	add	r3, r2
 80099f8:	3314      	adds	r3, #20
 80099fa:	f993 3000 	ldrsb.w	r3, [r3]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009a04:	4413      	add	r3, r2
 8009a06:	f107 0214 	add.w	r2, r7, #20
 8009a0a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009a0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a18:	3301      	adds	r3, #1
 8009a1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a22:	2b13      	cmp	r3, #19
 8009a24:	d9cc      	bls.n	80099c0 <mbedtls_camellia_setkey_enc+0x728>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 8009a26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a2a:	f107 0314 	add.w	r3, r7, #20
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009a34:	f107 0314 	add.w	r3, r7, #20
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009a3e:	f107 0314 	add.w	r3, r7, #20
 8009a42:	609a      	str	r2, [r3, #8]
 8009a44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	60da      	str	r2, [r3, #12]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009a54:	e099      	b.n	8009b8a <mbedtls_camellia_setkey_enc+0x8f2>
 8009a56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	4978      	ldr	r1, [pc, #480]	; (8009c40 <mbedtls_camellia_setkey_enc+0x9a8>)
 8009a5e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009a62:	0112      	lsls	r2, r2, #4
 8009a64:	440a      	add	r2, r1
 8009a66:	4413      	add	r3, r2
 8009a68:	3308      	adds	r3, #8
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8087 	beq.w	8009b80 <mbedtls_camellia_setkey_enc+0x8e8>
 8009a72:	f107 0314 	add.w	r3, r7, #20
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	4099      	lsls	r1, r3
 8009a88:	f107 0314 	add.w	r3, r7, #20
 8009a8c:	6858      	ldr	r0, [r3, #4]
 8009a8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009a92:	4613      	mov	r3, r2
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	f1c3 0320 	rsb	r3, r3, #32
 8009aa0:	fa20 f203 	lsr.w	r2, r0, r3
 8009aa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009aa8:	011b      	lsls	r3, r3, #4
 8009aaa:	f107 0014 	add.w	r0, r7, #20
 8009aae:	4403      	add	r3, r0
 8009ab0:	404a      	eors	r2, r1
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009abe:	4613      	mov	r3, r2
 8009ac0:	011b      	lsls	r3, r3, #4
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	4099      	lsls	r1, r3
 8009aca:	f107 0314 	add.w	r3, r7, #20
 8009ace:	6898      	ldr	r0, [r3, #8]
 8009ad0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	011b      	lsls	r3, r3, #4
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	f1c3 0320 	rsb	r3, r3, #32
 8009ae2:	fa20 f203 	lsr.w	r2, r0, r3
 8009ae6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	3304      	adds	r3, #4
 8009aee:	f107 0014 	add.w	r0, r7, #20
 8009af2:	4403      	add	r3, r0
 8009af4:	404a      	eors	r2, r1
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	f107 0314 	add.w	r3, r7, #20
 8009afc:	6899      	ldr	r1, [r3, #8]
 8009afe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009b02:	4613      	mov	r3, r2
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	f003 031f 	and.w	r3, r3, #31
 8009b0c:	4099      	lsls	r1, r3
 8009b0e:	f107 0314 	add.w	r3, r7, #20
 8009b12:	68d8      	ldr	r0, [r3, #12]
 8009b14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009b18:	4613      	mov	r3, r2
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	f003 031f 	and.w	r3, r3, #31
 8009b22:	f1c3 0320 	rsb	r3, r3, #32
 8009b26:	fa20 f203 	lsr.w	r2, r0, r3
 8009b2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	3308      	adds	r3, #8
 8009b32:	f107 0014 	add.w	r0, r7, #20
 8009b36:	4403      	add	r3, r0
 8009b38:	404a      	eors	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f107 0314 	add.w	r3, r7, #20
 8009b40:	68d9      	ldr	r1, [r3, #12]
 8009b42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009b46:	4613      	mov	r3, r2
 8009b48:	011b      	lsls	r3, r3, #4
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	f003 031f 	and.w	r3, r3, #31
 8009b50:	4099      	lsls	r1, r3
 8009b52:	f107 0314 	add.w	r3, r7, #20
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	f003 031f 	and.w	r3, r3, #31
 8009b66:	f1c3 0320 	rsb	r3, r3, #32
 8009b6a:	fa20 f203 	lsr.w	r2, r0, r3
 8009b6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	330c      	adds	r3, #12
 8009b76:	f107 0014 	add.w	r0, r7, #20
 8009b7a:	4403      	add	r3, r0
 8009b7c:	404a      	eors	r2, r1
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b84:	3301      	adds	r3, #1
 8009b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	f67f af61 	bls.w	8009a56 <mbedtls_camellia_setkey_enc+0x7be>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b9a:	e02e      	b.n	8009bfa <mbedtls_camellia_setkey_enc+0x962>
 8009b9c:	4927      	ldr	r1, [pc, #156]	; (8009c3c <mbedtls_camellia_setkey_enc+0x9a4>)
 8009b9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	18ca      	adds	r2, r1, r3
 8009bac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bb0:	4413      	add	r3, r2
 8009bb2:	3328      	adds	r3, #40	; 0x28
 8009bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d018      	beq.n	8009bf0 <mbedtls_camellia_setkey_enc+0x958>
 8009bbe:	491f      	ldr	r1, [pc, #124]	; (8009c3c <mbedtls_camellia_setkey_enc+0x9a4>)
 8009bc0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	18ca      	adds	r2, r1, r3
 8009bce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3328      	adds	r3, #40	; 0x28
 8009bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009be0:	4413      	add	r3, r2
 8009be2:	f107 0214 	add.w	r2, r7, #20
 8009be6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009bea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bfe:	2b13      	cmp	r3, #19
 8009c00:	d9cc      	bls.n	8009b9c <mbedtls_camellia_setkey_enc+0x904>

    /* Manipulating KB */
    if( keybits > 128 ) {
 8009c02:	1d3b      	adds	r3, r7, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b80      	cmp	r3, #128	; 0x80
 8009c08:	f240 80f2 	bls.w	8009df0 <mbedtls_camellia_setkey_enc+0xb58>
        SHIFT_AND_PLACE( idx, 3 );
 8009c0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c10:	f107 0314 	add.w	r3, r7, #20
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	605a      	str	r2, [r3, #4]
 8009c20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	609a      	str	r2, [r3, #8]
 8009c2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c2e:	f107 0314 	add.w	r3, r7, #20
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	2301      	movs	r3, #1
 8009c36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c3a:	e09d      	b.n	8009d78 <mbedtls_camellia_setkey_enc+0xae0>
 8009c3c:	08015f98 	.word	0x08015f98
 8009c40:	08015f78 	.word	0x08015f78
 8009c44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	498c      	ldr	r1, [pc, #560]	; (8009e7c <mbedtls_camellia_setkey_enc+0xbe4>)
 8009c4c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009c50:	0112      	lsls	r2, r2, #4
 8009c52:	440a      	add	r2, r1
 8009c54:	4413      	add	r3, r2
 8009c56:	330c      	adds	r3, #12
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 8087 	beq.w	8009d6e <mbedtls_camellia_setkey_enc+0xad6>
 8009c60:	f107 0314 	add.w	r3, r7, #20
 8009c64:	6819      	ldr	r1, [r3, #0]
 8009c66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	f003 031f 	and.w	r3, r3, #31
 8009c74:	4099      	lsls	r1, r3
 8009c76:	f107 0314 	add.w	r3, r7, #20
 8009c7a:	6858      	ldr	r0, [r3, #4]
 8009c7c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009c80:	4613      	mov	r3, r2
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	1a9b      	subs	r3, r3, r2
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	f1c3 0320 	rsb	r3, r3, #32
 8009c8e:	fa20 f203 	lsr.w	r2, r0, r3
 8009c92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c96:	011b      	lsls	r3, r3, #4
 8009c98:	f107 0014 	add.w	r0, r7, #20
 8009c9c:	4403      	add	r3, r0
 8009c9e:	404a      	eors	r2, r1
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	f107 0314 	add.w	r3, r7, #20
 8009ca6:	6859      	ldr	r1, [r3, #4]
 8009ca8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009cac:	4613      	mov	r3, r2
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	1a9b      	subs	r3, r3, r2
 8009cb2:	f003 031f 	and.w	r3, r3, #31
 8009cb6:	4099      	lsls	r1, r3
 8009cb8:	f107 0314 	add.w	r3, r7, #20
 8009cbc:	6898      	ldr	r0, [r3, #8]
 8009cbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	f003 031f 	and.w	r3, r3, #31
 8009ccc:	f1c3 0320 	rsb	r3, r3, #32
 8009cd0:	fa20 f203 	lsr.w	r2, r0, r3
 8009cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	3304      	adds	r3, #4
 8009cdc:	f107 0014 	add.w	r0, r7, #20
 8009ce0:	4403      	add	r3, r0
 8009ce2:	404a      	eors	r2, r1
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	f107 0314 	add.w	r3, r7, #20
 8009cea:	6899      	ldr	r1, [r3, #8]
 8009cec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	f003 031f 	and.w	r3, r3, #31
 8009cfa:	4099      	lsls	r1, r3
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	68d8      	ldr	r0, [r3, #12]
 8009d02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009d06:	4613      	mov	r3, r2
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	f003 031f 	and.w	r3, r3, #31
 8009d10:	f1c3 0320 	rsb	r3, r3, #32
 8009d14:	fa20 f203 	lsr.w	r2, r0, r3
 8009d18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	3308      	adds	r3, #8
 8009d20:	f107 0014 	add.w	r0, r7, #20
 8009d24:	4403      	add	r3, r0
 8009d26:	404a      	eors	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	68d9      	ldr	r1, [r3, #12]
 8009d30:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009d34:	4613      	mov	r3, r2
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	f003 031f 	and.w	r3, r3, #31
 8009d3e:	4099      	lsls	r1, r3
 8009d40:	f107 0314 	add.w	r3, r7, #20
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	f1c3 0320 	rsb	r3, r3, #32
 8009d58:	fa20 f203 	lsr.w	r2, r0, r3
 8009d5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	330c      	adds	r3, #12
 8009d64:	f107 0014 	add.w	r0, r7, #20
 8009d68:	4403      	add	r3, r0
 8009d6a:	404a      	eors	r2, r1
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d72:	3301      	adds	r3, #1
 8009d74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009d78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	f67f af61 	bls.w	8009c44 <mbedtls_camellia_setkey_enc+0x9ac>
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009d88:	e02e      	b.n	8009de8 <mbedtls_camellia_setkey_enc+0xb50>
 8009d8a:	493d      	ldr	r1, [pc, #244]	; (8009e80 <mbedtls_camellia_setkey_enc+0xbe8>)
 8009d8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	18ca      	adds	r2, r1, r3
 8009d9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d9e:	4413      	add	r3, r2
 8009da0:	333c      	adds	r3, #60	; 0x3c
 8009da2:	f993 3000 	ldrsb.w	r3, [r3]
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d018      	beq.n	8009dde <mbedtls_camellia_setkey_enc+0xb46>
 8009dac:	4934      	ldr	r1, [pc, #208]	; (8009e80 <mbedtls_camellia_setkey_enc+0xbe8>)
 8009dae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	18ca      	adds	r2, r1, r3
 8009dbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009dc0:	4413      	add	r3, r2
 8009dc2:	333c      	adds	r3, #60	; 0x3c
 8009dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009dce:	4413      	add	r3, r2
 8009dd0:	f107 0214 	add.w	r2, r7, #20
 8009dd4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009dd8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009de2:	3301      	adds	r3, #1
 8009de4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009de8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009dec:	2b13      	cmp	r3, #19
 8009dee:	d9cc      	bls.n	8009d8a <mbedtls_camellia_setkey_enc+0xaf2>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009df6:	e036      	b.n	8009e66 <mbedtls_camellia_setkey_enc+0xbce>
        if( transposes[idx][i] != -1 ) {
 8009df8:	4922      	ldr	r1, [pc, #136]	; (8009e84 <mbedtls_camellia_setkey_enc+0xbec>)
 8009dfa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	18ca      	adds	r2, r1, r3
 8009e08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d021      	beq.n	8009e5c <mbedtls_camellia_setkey_enc+0xbc4>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 8009e18:	491a      	ldr	r1, [pc, #104]	; (8009e84 <mbedtls_camellia_setkey_enc+0xbec>)
 8009e1a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	18ca      	adds	r2, r1, r3
 8009e28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f993 3000 	ldrsb.w	r3, [r3]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009e38:	18d1      	adds	r1, r2, r3
 8009e3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009e3e:	4613      	mov	r3, r2
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	4413      	add	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	461a      	mov	r2, r3
 8009e48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3320      	adds	r3, #32
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009e56:	4413      	add	r3, r2
 8009e58:	680a      	ldr	r2, [r1, #0]
 8009e5a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 8009e5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e60:	3301      	adds	r3, #1
 8009e62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009e66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e6a:	2b13      	cmp	r3, #19
 8009e6c:	d9c4      	bls.n	8009df8 <mbedtls_camellia_setkey_enc+0xb60>
        }
    }

    return( 0 );
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	08015f78 	.word	0x08015f78
 8009e80:	08015f98 	.word	0x08015f98
 8009e84:	08016038 	.word	0x08016038

08009e88 <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b0ce      	sub	sp, #312	; 0x138
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	f107 030c 	add.w	r3, r7, #12
 8009e92:	6018      	str	r0, [r3, #0]
 8009e94:	f107 0308 	add.w	r3, r7, #8
 8009e98:	6019      	str	r1, [r3, #0]
 8009e9a:	1d3b      	adds	r3, r7, #4
 8009e9c:	601a      	str	r2, [r3, #0]
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 8009e9e:	f107 0310 	add.w	r3, r7, #16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff f9d8 	bl	8009258 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 8009ea8:	1d3a      	adds	r2, r7, #4
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	f107 0010 	add.w	r0, r7, #16
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	f7ff f9ef 	bl	8009298 <mbedtls_camellia_setkey_enc>
 8009eba:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8009ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 80bb 	bne.w	800a03e <mbedtls_camellia_setkey_dec+0x1b6>
        goto exit;

    ctx->nr = cty.nr;
 8009ec8:	f107 0310 	add.w	r3, r7, #16
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	f107 030c 	add.w	r3, r7, #12
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	601a      	str	r2, [r3, #0]
    idx = ( ctx->nr == 4 );
 8009ed6:	f107 030c 	add.w	r3, r7, #12
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	bf0c      	ite	eq
 8009ee2:	2301      	moveq	r3, #1
 8009ee4:	2300      	movne	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8009ef8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	3318      	adds	r3, #24
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	f107 0210 	add.w	r2, r7, #16
 8009f06:	3204      	adds	r2, #4
 8009f08:	4413      	add	r3, r2
 8009f0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 8009f0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009f12:	1d13      	adds	r3, r2, #4
 8009f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f1c:	1d19      	adds	r1, r3, #4
 8009f1e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009f26:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009f2a:	1d13      	adds	r3, r2, #4
 8009f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f34:	1d19      	adds	r1, r3, #4
 8009f36:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009f3e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009f42:	1d13      	adds	r3, r2, #4
 8009f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f4c:	1d19      	adds	r1, r3, #4
 8009f4e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009f56:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009f5a:	1d13      	adds	r3, r2, #4
 8009f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f64:	1d19      	adds	r1, r3, #4
 8009f66:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	601a      	str	r2, [r3, #0]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8009f6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	3316      	adds	r3, #22
 8009f76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7e:	3b18      	subs	r3, #24
 8009f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f84:	e021      	b.n	8009fca <mbedtls_camellia_setkey_dec+0x142>
    {
        *RK++ = *SK++;
 8009f86:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009f8a:	1d13      	adds	r3, r2, #4
 8009f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 8009f9e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009fa2:	1d13      	adds	r3, r2, #4
 8009fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009fa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009fac:	1d19      	adds	r1, r3, #4
 8009fae:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009fb2:	6812      	ldr	r2, [r2, #0]
 8009fb4:	601a      	str	r2, [r3, #0]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8009fb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8009fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc4:	3b10      	subs	r3, #16
 8009fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009fca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1d9      	bne.n	8009f86 <mbedtls_camellia_setkey_dec+0xfe>
    }

    SK -= 2;
 8009fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fd6:	3b08      	subs	r3, #8
 8009fd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 8009fdc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009fe0:	1d13      	adds	r3, r2, #4
 8009fe2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009fe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009fea:	1d19      	adds	r1, r3, #4
 8009fec:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009ff4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8009ff8:	1d13      	adds	r3, r2, #4
 8009ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a002:	1d19      	adds	r1, r3, #4
 800a004:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800a008:	6812      	ldr	r2, [r2, #0]
 800a00a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a00c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800a010:	1d13      	adds	r3, r2, #4
 800a012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a016:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a01a:	1d19      	adds	r1, r3, #4
 800a01c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800a020:	6812      	ldr	r2, [r2, #0]
 800a022:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a024:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800a028:	1d13      	adds	r3, r2, #4
 800a02a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a02e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a032:	1d19      	adds	r1, r3, #4
 800a034:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	e000      	b.n	800a040 <mbedtls_camellia_setkey_dec+0x1b8>
        goto exit;
 800a03e:	bf00      	nop

exit:
    mbedtls_camellia_free( &cty );
 800a040:	f107 0310 	add.w	r3, r7, #16
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff f915 	bl	8009274 <mbedtls_camellia_free>

    return( ret );
 800a04a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 800a04e:	4618      	mov	r0, r3
 800a050:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	; 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
    RK = ctx->rk;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3304      	adds	r3, #4
 800a070:	623b      	str	r3, [r7, #32]

    X[0] = MBEDTLS_GET_UINT32_BE( input,  0 );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	061a      	lsls	r2, r3, #24
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3301      	adds	r3, #1
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	041b      	lsls	r3, r3, #16
 800a080:	431a      	orrs	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3302      	adds	r3, #2
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	4313      	orrs	r3, r2
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	3203      	adds	r2, #3
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
    X[1] = MBEDTLS_GET_UINT32_BE( input,  4 );
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3304      	adds	r3, #4
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	061a      	lsls	r2, r3, #24
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3305      	adds	r3, #5
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	041b      	lsls	r3, r3, #16
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3306      	adds	r3, #6
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	3207      	adds	r2, #7
 800a0b6:	7812      	ldrb	r2, [r2, #0]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
    X[2] = MBEDTLS_GET_UINT32_BE( input,  8 );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3308      	adds	r3, #8
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	061a      	lsls	r2, r3, #24
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3309      	adds	r3, #9
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	330a      	adds	r3, #10
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	320b      	adds	r2, #11
 800a0dc:	7812      	ldrb	r2, [r2, #0]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	61bb      	str	r3, [r7, #24]
    X[3] = MBEDTLS_GET_UINT32_BE( input, 12 );
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	061a      	lsls	r2, r3, #24
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	330d      	adds	r3, #13
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	330e      	adds	r3, #14
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	021b      	lsls	r3, r3, #8
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	320f      	adds	r2, #15
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	4313      	orrs	r3, r2
 800a106:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	623a      	str	r2, [r7, #32]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4053      	eors	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	1d1a      	adds	r2, r3, #4
 800a11a:	623a      	str	r2, [r7, #32]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	4053      	eors	r3, r2
 800a122:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	1d1a      	adds	r2, r3, #4
 800a128:	623a      	str	r2, [r7, #32]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	4053      	eors	r3, r2
 800a130:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	1d1a      	adds	r2, r3, #4
 800a136:	623a      	str	r2, [r7, #32]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4053      	eors	r3, r2
 800a13e:	61fb      	str	r3, [r7, #28]

    while( NR ) {
 800a140:	e075      	b.n	800a22e <mbedtls_camellia_crypt_ecb+0x1d6>
        --NR;
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	3b01      	subs	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
        camellia_feistel( X, RK, X + 2 );
 800a148:	f107 0310 	add.w	r3, r7, #16
 800a14c:	3308      	adds	r3, #8
 800a14e:	f107 0010 	add.w	r0, r7, #16
 800a152:	461a      	mov	r2, r3
 800a154:	6a39      	ldr	r1, [r7, #32]
 800a156:	f7fe fffb 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	3308      	adds	r3, #8
 800a15e:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 800a160:	f107 0310 	add.w	r3, r7, #16
 800a164:	3308      	adds	r3, #8
 800a166:	f107 0210 	add.w	r2, r7, #16
 800a16a:	6a39      	ldr	r1, [r7, #32]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe ffef 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	3308      	adds	r3, #8
 800a176:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 800a178:	f107 0310 	add.w	r3, r7, #16
 800a17c:	3308      	adds	r3, #8
 800a17e:	f107 0010 	add.w	r0, r7, #16
 800a182:	461a      	mov	r2, r3
 800a184:	6a39      	ldr	r1, [r7, #32]
 800a186:	f7fe ffe3 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	3308      	adds	r3, #8
 800a18e:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 800a190:	f107 0310 	add.w	r3, r7, #16
 800a194:	3308      	adds	r3, #8
 800a196:	f107 0210 	add.w	r2, r7, #16
 800a19a:	6a39      	ldr	r1, [r7, #32]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe ffd7 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 800a1a8:	f107 0310 	add.w	r3, r7, #16
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	f107 0010 	add.w	r0, r7, #16
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6a39      	ldr	r1, [r7, #32]
 800a1b6:	f7fe ffcb 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 800a1c0:	f107 0310 	add.w	r3, r7, #16
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	f107 0210 	add.w	r2, r7, #16
 800a1ca:	6a39      	ldr	r1, [r7, #32]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe ffbf 	bl	8009150 <camellia_feistel>
        RK += 2;
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	623b      	str	r3, [r7, #32]

        if( NR ) {
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d027      	beq.n	800a22e <mbedtls_camellia_crypt_ecb+0x1d6>
            FL(X[0], X[1], RK[0], RK[1]);
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4053      	eors	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	4053      	eors	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
            RK += 2;
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	3308      	adds	r3, #8
 800a204:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	3304      	adds	r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	431a      	orrs	r2, r3
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	4053      	eors	r3, r2
 800a214:	61bb      	str	r3, [r7, #24]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4013      	ands	r3, r2
 800a21e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	4053      	eors	r3, r2
 800a226:	61fb      	str	r3, [r7, #28]
            RK += 2;
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	3308      	adds	r3, #8
 800a22c:	623b      	str	r3, [r7, #32]
    while( NR ) {
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	d186      	bne.n	800a142 <mbedtls_camellia_crypt_ecb+0xea>
        }
    }

    X[2] ^= *RK++;
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	1d1a      	adds	r2, r3, #4
 800a238:	623a      	str	r2, [r7, #32]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	4053      	eors	r3, r2
 800a240:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	623a      	str	r2, [r7, #32]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	4053      	eors	r3, r2
 800a24e:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	1d1a      	adds	r2, r3, #4
 800a254:	623a      	str	r2, [r7, #32]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	4053      	eors	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	1d1a      	adds	r2, r3, #4
 800a262:	623a      	str	r2, [r7, #32]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	4053      	eors	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

    MBEDTLS_PUT_UINT32_BE( X[2], output,  0 );
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	0e1b      	lsrs	r3, r3, #24
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	0c1a      	lsrs	r2, r3, #16
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	3301      	adds	r3, #1
 800a27e:	b2d2      	uxtb	r2, r2
 800a280:	701a      	strb	r2, [r3, #0]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	0a1a      	lsrs	r2, r3, #8
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	3302      	adds	r3, #2
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	3303      	adds	r3, #3
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X[3], output,  4 );
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	0e1a      	lsrs	r2, r3, #24
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	b2d2      	uxtb	r2, r2
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	0c1a      	lsrs	r2, r3, #16
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	3305      	adds	r3, #5
 800a2ac:	b2d2      	uxtb	r2, r2
 800a2ae:	701a      	strb	r2, [r3, #0]
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	0a1a      	lsrs	r2, r3, #8
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	3306      	adds	r3, #6
 800a2b8:	b2d2      	uxtb	r2, r2
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	69fa      	ldr	r2, [r7, #28]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	3307      	adds	r3, #7
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X[0], output,  8 );
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	0e1a      	lsrs	r2, r3, #24
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	0c1a      	lsrs	r2, r3, #16
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	3309      	adds	r3, #9
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	0a1a      	lsrs	r2, r3, #8
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	330a      	adds	r3, #10
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	330b      	adds	r3, #11
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X[1], output, 12 );
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	0e1a      	lsrs	r2, r3, #24
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	0c1a      	lsrs	r2, r3, #16
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	330d      	adds	r3, #13
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	0a1a      	lsrs	r2, r3, #8
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	330e      	adds	r3, #14
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	330f      	adds	r3, #15
 800a31e:	b2d2      	uxtb	r2, r2
 800a320:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3728      	adds	r7, #40	; 0x28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f003 030f 	and.w	r3, r3, #15
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <mbedtls_camellia_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 800a344:	f06f 0325 	mvn.w	r3, #37	; 0x25
 800a348:	e06d      	b.n	800a426 <mbedtls_camellia_crypt_cbc+0xfa>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d166      	bne.n	800a41e <mbedtls_camellia_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800a350:	e036      	b.n	800a3c0 <mbedtls_camellia_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	f107 0414 	add.w	r4, r7, #20
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	6859      	ldr	r1, [r3, #4]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fe75 	bl	800a058 <mbedtls_camellia_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800a36e:	2300      	movs	r3, #0
 800a370:	627b      	str	r3, [r7, #36]	; 0x24
 800a372:	e010      	b.n	800a396 <mbedtls_camellia_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a378:	4413      	add	r3, r2
 800a37a:	7819      	ldrb	r1, [r3, #0]
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	4413      	add	r3, r2
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a388:	4403      	add	r3, r0
 800a38a:	404a      	eors	r2, r1
 800a38c:	b2d2      	uxtb	r2, r2
 800a38e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	3301      	adds	r3, #1
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	2b0f      	cmp	r3, #15
 800a39a:	ddeb      	ble.n	800a374 <mbedtls_camellia_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	461d      	mov	r5, r3
 800a3a0:	f107 0414 	add.w	r4, r7, #20
 800a3a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3a6:	6028      	str	r0, [r5, #0]
 800a3a8:	6069      	str	r1, [r5, #4]
 800a3aa:	60aa      	str	r2, [r5, #8]
 800a3ac:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	3310      	adds	r3, #16
 800a3b2:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 800a3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b6:	3310      	adds	r3, #16
 800a3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3b10      	subs	r3, #16
 800a3be:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1c5      	bne.n	800a352 <mbedtls_camellia_crypt_cbc+0x26>
 800a3c6:	e02d      	b.n	800a424 <mbedtls_camellia_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a3cc:	e010      	b.n	800a3f0 <mbedtls_camellia_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d2:	4413      	add	r3, r2
 800a3d4:	7819      	ldrb	r1, [r3, #0]
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	4413      	add	r3, r2
 800a3dc:	781a      	ldrb	r2, [r3, #0]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3e2:	4403      	add	r3, r0
 800a3e4:	404a      	eors	r2, r1
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	ddeb      	ble.n	800a3ce <mbedtls_camellia_crypt_cbc+0xa2>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fe2b 	bl	800a058 <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 800a402:	2210      	movs	r2, #16
 800a404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a406:	6838      	ldr	r0, [r7, #0]
 800a408:	f00a f8e6 	bl	80145d8 <memcpy>

            input  += 16;
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	3310      	adds	r3, #16
 800a410:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 800a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a414:	3310      	adds	r3, #16
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3b10      	subs	r3, #16
 800a41c:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1d1      	bne.n	800a3c8 <mbedtls_camellia_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3728      	adds	r7, #40	; 0x28
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bdb0      	pop	{r4, r5, r7, pc}

0800a42e <mbedtls_camellia_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( iv     != NULL );
    CAMELLIA_VALIDATE_RET( iv_off != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    n = *iv_off;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	617b      	str	r3, [r7, #20]
    if( n >= 16 )
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d902      	bls.n	800a44e <mbedtls_camellia_crypt_cfb128+0x20>
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 800a448:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800a44c:	e05a      	b.n	800a504 <mbedtls_camellia_crypt_cfb128+0xd6>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d14e      	bne.n	800a4f2 <mbedtls_camellia_crypt_cfb128+0xc4>
    {
        while( length-- )
 800a454:	e026      	b.n	800a4a4 <mbedtls_camellia_crypt_cfb128+0x76>
        {
            if( n == 0 )
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <mbedtls_camellia_crypt_cfb128+0x3a>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	6a3a      	ldr	r2, [r7, #32]
 800a460:	2101      	movs	r1, #1
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff fdf8 	bl	800a058 <mbedtls_camellia_crypt_ecb>

            c = *input++;
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	627a      	str	r2, [r7, #36]	; 0x24
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char)( c ^ iv[n] );
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	b25a      	sxtb	r2, r3
 800a476:	6a39      	ldr	r1, [r7, #32]
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	440b      	add	r3, r1
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	b25b      	sxtb	r3, r3
 800a480:	4053      	eors	r3, r2
 800a482:	b259      	sxtb	r1, r3
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	62ba      	str	r2, [r7, #40]	; 0x28
 800a48a:	b2ca      	uxtb	r2, r1
 800a48c:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 800a48e:	6a3a      	ldr	r2, [r7, #32]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) & 0x0F;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	3301      	adds	r3, #1
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	617b      	str	r3, [r7, #20]
        while( length-- )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	1e5a      	subs	r2, r3, #1
 800a4a8:	607a      	str	r2, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1d3      	bne.n	800a456 <mbedtls_camellia_crypt_cfb128+0x28>
 800a4ae:	e025      	b.n	800a4fc <mbedtls_camellia_crypt_cfb128+0xce>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d105      	bne.n	800a4c2 <mbedtls_camellia_crypt_cfb128+0x94>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff fdcb 	bl	800a058 <mbedtls_camellia_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 800a4c2:	6a3a      	ldr	r2, [r7, #32]
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	7819      	ldrb	r1, [r3, #0]
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	627a      	str	r2, [r7, #36]	; 0x24
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	1c58      	adds	r0, r3, #1
 800a4d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a4d8:	404a      	eors	r2, r1
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	6a39      	ldr	r1, [r7, #32]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	440a      	add	r2, r1
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) & 0x0F;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	617b      	str	r3, [r7, #20]
        while( length-- )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	1e5a      	subs	r2, r3, #1
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1d9      	bne.n	800a4b0 <mbedtls_camellia_crypt_cfb128+0x82>
        }
    }

    *iv_off = n;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	601a      	str	r2, [r3, #0]

    return( 0 );
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <mbedtls_camellia_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( stream_block  != NULL );
    CAMELLIA_VALIDATE_RET( nc_off != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    n = *nc_off;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	61bb      	str	r3, [r7, #24]
    if( n >= 16 )
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2b0f      	cmp	r3, #15
 800a524:	d939      	bls.n	800a59a <mbedtls_camellia_crypt_ctr+0x8e>
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 800a526:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800a52a:	e03f      	b.n	800a5ac <mbedtls_camellia_crypt_ctr+0xa0>

    while( length-- )
    {
        if( n == 0 ) {
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d11b      	bne.n	800a56a <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	2101      	movs	r1, #1
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fd8d 	bl	800a058 <mbedtls_camellia_crypt_ecb>
                                stream_block );

            for( i = 16; i > 0; i-- )
 800a53e:	2310      	movs	r3, #16
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	e00d      	b.n	800a560 <mbedtls_camellia_crypt_ctr+0x54>
                if( ++nonce_counter[i - 1] != 0 )
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	3b01      	subs	r3, #1
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	4413      	add	r3, r2
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	3201      	adds	r2, #1
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <mbedtls_camellia_crypt_ctr+0x5c>
            for( i = 16; i > 0; i-- )
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	61fb      	str	r3, [r7, #28]
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	2b00      	cmp	r3, #0
 800a564:	dcee      	bgt.n	800a544 <mbedtls_camellia_crypt_ctr+0x38>
 800a566:	e000      	b.n	800a56a <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 800a568:	bf00      	nop
        }
        c = *input++;
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	b25a      	sxtb	r2, r3
 800a578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	440b      	add	r3, r1
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b25b      	sxtb	r3, r3
 800a582:	4053      	eors	r3, r2
 800a584:	b259      	sxtb	r1, r3
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	633a      	str	r2, [r7, #48]	; 0x30
 800a58c:	b2ca      	uxtb	r2, r1
 800a58e:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	3301      	adds	r3, #1
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	61bb      	str	r3, [r7, #24]
    while( length-- )
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	1e5a      	subs	r2, r3, #1
 800a59e:	60ba      	str	r2, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1c3      	bne.n	800a52c <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69ba      	ldr	r2, [r7, #24]
 800a5a8:	601a      	str	r2, [r3, #0]

    return( 0 );
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 800a5bc:	2278      	movs	r2, #120	; 0x78
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f00a f817 	bl	80145f4 <memset>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b086      	sub	sp, #24
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a5de:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a5e2:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	7afb      	ldrb	r3, [r7, #11]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fd46 	bl	800b07c <mbedtls_cipher_info_from_values>
 800a5f0:	6138      	str	r0, [r7, #16]
                                                   MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <mbedtls_ccm_setkey+0x30>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800a5f8:	f06f 030c 	mvn.w	r3, #12
 800a5fc:	e026      	b.n	800a64c <mbedtls_ccm_setkey+0x7e>

    if( cipher_info->block_size != 16 )
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	2b10      	cmp	r3, #16
 800a604:	d002      	beq.n	800a60c <mbedtls_ccm_setkey+0x3e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800a606:	f06f 030c 	mvn.w	r3, #12
 800a60a:	e01f      	b.n	800a64c <mbedtls_ccm_setkey+0x7e>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3320      	adds	r3, #32
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fd65 	bl	800b0e0 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3320      	adds	r3, #32
 800a61a:	6939      	ldr	r1, [r7, #16]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fd7b 	bl	800b118 <mbedtls_cipher_setup>
 800a622:	6178      	str	r0, [r7, #20]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <mbedtls_ccm_setkey+0x60>
        return( ret );
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	e00e      	b.n	800a64c <mbedtls_ccm_setkey+0x7e>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f103 0020 	add.w	r0, r3, #32
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	2301      	movs	r3, #1
 800a638:	6879      	ldr	r1, [r7, #4]
 800a63a:	f000 fd99 	bl	800b170 <mbedtls_cipher_setkey>
 800a63e:	6178      	str	r0, [r7, #20]
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <mbedtls_ccm_setkey+0x7c>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	e000      	b.n	800a64c <mbedtls_ccm_setkey+0x7e>
    }

    return( 0 );
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <mbedtls_ccm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3320      	adds	r3, #32
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fd3a 	bl	800b0e0 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800a66c:	2178      	movs	r1, #120	; 0x78
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f009 f8ca 	bl	8013808 <mbedtls_platform_zeroize>
 800a674:	e000      	b.n	800a678 <mbedtls_ccm_free+0x24>
        return;
 800a676:	bf00      	nop
}
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <chacha20_quarter_round>:
static inline void chacha20_quarter_round( uint32_t state[16],
                                           size_t a,
                                           size_t b,
                                           size_t c,
                                           size_t d )
{
 800a67e:	b480      	push	{r7}
 800a680:	b085      	sub	sp, #20
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	4413      	add	r3, r2
 800a694:	6819      	ldr	r1, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	4403      	add	r3, r0
 800a6a8:	440a      	add	r2, r1
 800a6aa:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	4403      	add	r3, r0
 800a6c8:	404a      	eors	r2, r1
 800a6ca:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 16 );
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	440b      	add	r3, r1
 800a6de:	ea4f 4232 	mov.w	r2, r2, ror #16
 800a6e2:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	6819      	ldr	r1, [r3, #0]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	4403      	add	r3, r0
 800a700:	440a      	add	r2, r1
 800a702:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	4403      	add	r3, r0
 800a720:	404a      	eors	r2, r1
 800a722:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 12 );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	440b      	add	r3, r1
 800a736:	ea4f 5232 	mov.w	r2, r2, ror #20
 800a73a:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4413      	add	r3, r2
 800a744:	6819      	ldr	r1, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	4413      	add	r3, r2
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	4403      	add	r3, r0
 800a758:	440a      	add	r2, r1
 800a75a:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	4403      	add	r3, r0
 800a778:	404a      	eors	r2, r1
 800a77a:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 8 );
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	68f9      	ldr	r1, [r7, #12]
 800a78c:	440b      	add	r3, r1
 800a78e:	ea4f 6232 	mov.w	r2, r2, ror #24
 800a792:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	6819      	ldr	r1, [r3, #0]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	4403      	add	r3, r0
 800a7b0:	440a      	add	r2, r1
 800a7b2:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	4403      	add	r3, r0
 800a7d0:	404a      	eors	r2, r1
 800a7d2:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 7 );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	68f9      	ldr	r1, [r7, #12]
 800a7e4:	440b      	add	r3, r1
 800a7e6:	ea4f 6272 	mov.w	r2, r2, ror #25
 800a7ea:	601a      	str	r2, [r3, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block( uint32_t state[16] )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round( state, 0, 4, 8,  12 );
 800a800:	230c      	movs	r3, #12
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	2308      	movs	r3, #8
 800a806:	2204      	movs	r2, #4
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff ff37 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 5, 9,  13 );
 800a810:	230d      	movs	r3, #13
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	2309      	movs	r3, #9
 800a816:	2205      	movs	r2, #5
 800a818:	2101      	movs	r1, #1
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff ff2f 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 6, 10, 14 );
 800a820:	230e      	movs	r3, #14
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	230a      	movs	r3, #10
 800a826:	2206      	movs	r2, #6
 800a828:	2102      	movs	r1, #2
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7ff ff27 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 7, 11, 15 );
 800a830:	230f      	movs	r3, #15
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	230b      	movs	r3, #11
 800a836:	2207      	movs	r2, #7
 800a838:	2103      	movs	r1, #3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff ff1f 	bl	800a67e <chacha20_quarter_round>

    chacha20_quarter_round( state, 0, 5, 10, 15 );
 800a840:	230f      	movs	r3, #15
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	230a      	movs	r3, #10
 800a846:	2205      	movs	r2, #5
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff ff17 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 6, 11, 12 );
 800a850:	230c      	movs	r3, #12
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	230b      	movs	r3, #11
 800a856:	2206      	movs	r2, #6
 800a858:	2101      	movs	r1, #1
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff ff0f 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 7, 8,  13 );
 800a860:	230d      	movs	r3, #13
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	2308      	movs	r3, #8
 800a866:	2207      	movs	r2, #7
 800a868:	2102      	movs	r1, #2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff ff07 	bl	800a67e <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 4, 9,  14 );
 800a870:	230e      	movs	r3, #14
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2309      	movs	r3, #9
 800a876:	2204      	movs	r2, #4
 800a878:	2103      	movs	r1, #3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff feff 	bl	800a67e <chacha20_quarter_round>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b094      	sub	sp, #80	; 0x50
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	2240      	movs	r2, #64	; 0x40
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f009 fe9c 	bl	80145d8 <memcpy>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8a4:	e007      	b.n	800a8b6 <chacha20_block+0x2e>
        chacha20_inner_block( working_state );
 800a8a6:	f107 0308 	add.w	r3, r7, #8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ffa4 	bl	800a7f8 <chacha20_inner_block>
    for( i = 0U; i < 10U; i++ )
 800a8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b8:	2b09      	cmp	r3, #9
 800a8ba:	d9f4      	bls.n	800a8a6 <chacha20_block+0x1e>

    working_state[ 0] += initial_state[ 0];
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	60bb      	str	r3, [r7, #8]
    working_state[ 1] += initial_state[ 1];
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
    working_state[ 2] += initial_state[ 2];
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4413      	add	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]
    working_state[ 3] += initial_state[ 3];
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	330c      	adds	r3, #12
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]
    working_state[ 4] += initial_state[ 4];
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3310      	adds	r3, #16
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
    working_state[ 5] += initial_state[ 5];
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3314      	adds	r3, #20
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4413      	add	r3, r2
 800a900:	61fb      	str	r3, [r7, #28]
    working_state[ 6] += initial_state[ 6];
 800a902:	6a3a      	ldr	r2, [r7, #32]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3318      	adds	r3, #24
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4413      	add	r3, r2
 800a90c:	623b      	str	r3, [r7, #32]
    working_state[ 7] += initial_state[ 7];
 800a90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	331c      	adds	r3, #28
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4413      	add	r3, r2
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[ 8] += initial_state[ 8];
 800a91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3320      	adds	r3, #32
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4413      	add	r3, r2
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[ 9] += initial_state[ 9];
 800a926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3324      	adds	r3, #36	; 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4413      	add	r3, r2
 800a930:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[10] += initial_state[10];
 800a932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3328      	adds	r3, #40	; 0x28
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4413      	add	r3, r2
 800a93c:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[11] += initial_state[11];
 800a93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	332c      	adds	r3, #44	; 0x2c
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4413      	add	r3, r2
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[12] += initial_state[12];
 800a94a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3330      	adds	r3, #48	; 0x30
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4413      	add	r3, r2
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[13] += initial_state[13];
 800a956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3334      	adds	r3, #52	; 0x34
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[14] += initial_state[14];
 800a962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3338      	adds	r3, #56	; 0x38
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4413      	add	r3, r2
 800a96c:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[15] += initial_state[15];
 800a96e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	333c      	adds	r3, #60	; 0x3c
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4413      	add	r3, r2
 800a978:	647b      	str	r3, [r7, #68]	; 0x44

    for( i = 0U; i < 16; i++ )
 800a97a:	2300      	movs	r3, #0
 800a97c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a97e:	e03b      	b.n	800a9f8 <chacha20_block+0x170>
    {
        size_t offset = i * 4U;
 800a980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	64bb      	str	r3, [r7, #72]	; 0x48

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
 800a986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a98e:	4413      	add	r3, r2
 800a990:	f853 1c48 	ldr.w	r1, [r3, #-72]
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	4413      	add	r3, r2
 800a99a:	b2ca      	uxtb	r2, r1
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800a9ac:	0a19      	lsrs	r1, r3, #8
 800a9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b2ca      	uxtb	r2, r1
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800a9c8:	0c19      	lsrs	r1, r3, #16
 800a9ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9cc:	3302      	adds	r3, #2
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	b2ca      	uxtb	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a9de:	4413      	add	r3, r2
 800a9e0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800a9e4:	0e19      	lsrs	r1, r3, #24
 800a9e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9e8:	3303      	adds	r3, #3
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	b2ca      	uxtb	r2, r1
 800a9f0:	701a      	strb	r2, [r3, #0]
    for( i = 0U; i < 16; i++ )
 800a9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fa:	2b0f      	cmp	r3, #15
 800a9fc:	d9c0      	bls.n	800a980 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 800a9fe:	f107 0308 	add.w	r3, r7, #8
 800aa02:	2140      	movs	r1, #64	; 0x40
 800aa04:	4618      	mov	r0, r3
 800aa06:	f008 feff 	bl	8013808 <mbedtls_platform_zeroize>
}
 800aa0a:	bf00      	nop
 800aa0c:	3750      	adds	r7, #80	; 0x50
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2140      	movs	r1, #64	; 0x40
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f008 fef2 	bl	8013808 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3340      	adds	r3, #64	; 0x40
 800aa28:	2140      	movs	r1, #64	; 0x40
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f008 feec 	bl	8013808 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2240      	movs	r2, #64	; 0x40
 800aa34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800aa38:	bf00      	nop
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
    if( ctx != NULL )
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <mbedtls_chacha20_free+0x16>
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 800aa4e:	2184      	movs	r1, #132	; 0x84
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f008 fed9 	bl	8013808 <mbedtls_platform_zeroize>
    }
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey( mbedtls_chacha20_context *ctx,
                            const unsigned char key[32] )
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a5c      	ldr	r2, [pc, #368]	; (800abe0 <mbedtls_chacha20_setkey+0x180>)
 800aa6e:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a5c      	ldr	r2, [pc, #368]	; (800abe4 <mbedtls_chacha20_setkey+0x184>)
 800aa74:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a5b      	ldr	r2, [pc, #364]	; (800abe8 <mbedtls_chacha20_setkey+0x188>)
 800aa7a:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a5b      	ldr	r2, [pc, #364]	; (800abec <mbedtls_chacha20_setkey+0x18c>)
 800aa80:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE( key, 0 );
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	431a      	orrs	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	3302      	adds	r3, #2
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	041b      	lsls	r3, r3, #16
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	061b      	lsls	r3, r3, #24
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE( key, 4 );
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	3304      	adds	r3, #4
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	3305      	adds	r3, #5
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	431a      	orrs	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	3306      	adds	r3, #6
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	041b      	lsls	r3, r3, #16
 800aac4:	431a      	orrs	r2, r3
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	3307      	adds	r3, #7
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	061b      	lsls	r3, r3, #24
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE( key, 8 );
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	3309      	adds	r3, #9
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	431a      	orrs	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	330a      	adds	r3, #10
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	041b      	lsls	r3, r3, #16
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	330b      	adds	r3, #11
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	061b      	lsls	r3, r3, #24
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE( key, 12 );
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	330c      	adds	r3, #12
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	461a      	mov	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	330d      	adds	r3, #13
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	330e      	adds	r3, #14
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	041b      	lsls	r3, r3, #16
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	330f      	adds	r3, #15
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	061b      	lsls	r3, r3, #24
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE( key, 16 );
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	3310      	adds	r3, #16
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	3311      	adds	r3, #17
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	3312      	adds	r3, #18
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	041b      	lsls	r3, r3, #16
 800ab42:	431a      	orrs	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	3313      	adds	r3, #19
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	061b      	lsls	r3, r3, #24
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE( key, 20 );
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	3314      	adds	r3, #20
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	3315      	adds	r3, #21
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	431a      	orrs	r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	3316      	adds	r3, #22
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	041b      	lsls	r3, r3, #16
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	3317      	adds	r3, #23
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	061b      	lsls	r3, r3, #24
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = MBEDTLS_GET_UINT32_LE( key, 24 );
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	3318      	adds	r3, #24
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	3319      	adds	r3, #25
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	331a      	adds	r3, #26
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	041b      	lsls	r3, r3, #16
 800ab96:	431a      	orrs	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	331b      	adds	r3, #27
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	061b      	lsls	r3, r3, #24
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = MBEDTLS_GET_UINT32_LE( key, 28 );
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	331c      	adds	r3, #28
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	461a      	mov	r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	331d      	adds	r3, #29
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	431a      	orrs	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	331e      	adds	r3, #30
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	041b      	lsls	r3, r3, #16
 800abc0:	431a      	orrs	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	331f      	adds	r3, #31
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	061b      	lsls	r3, r3, #24
 800abca:	431a      	orrs	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

    return( 0 );
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	61707865 	.word	0x61707865
 800abe4:	3320646e 	.word	0x3320646e
 800abe8:	79622d32 	.word	0x79622d32
 800abec:	6b206574 	.word	0x6b206574

0800abf0 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update( mbedtls_chacha20_context *ctx,
                              size_t size,
                              const unsigned char *input,
                              unsigned char *output )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 800ac02:	e01d      	b.n	800ac40 <mbedtls_chacha20_update+0x50>
    {
        output[offset] = input[offset]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	4413      	add	r3, r2
 800ac0a:	7819      	ldrb	r1, [r3, #0]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 800ac1a:	6838      	ldr	r0, [r7, #0]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	4403      	add	r3, r0
 800ac20:	404a      	eors	r2, r1
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	3301      	adds	r3, #1
 800ac38:	617b      	str	r3, [r7, #20]
        size--;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	60bb      	str	r3, [r7, #8]
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 80cf 	beq.w	800ade6 <mbedtls_chacha20_update+0x1f6>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac4e:	2b3f      	cmp	r3, #63	; 0x3f
 800ac50:	d9d8      	bls.n	800ac04 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 800ac52:	e0c8      	b.n	800ade6 <mbedtls_chacha20_update+0x1f6>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3340      	adds	r3, #64	; 0x40
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7ff fe13 	bl	800a888 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30

        for( i = 0U; i < 64U; i += 8U )
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	e0af      	b.n	800add2 <mbedtls_chacha20_update+0x1e2>
        {
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	4413      	add	r3, r2
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	4413      	add	r3, r2
 800ac84:	3340      	adds	r3, #64	; 0x40
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	6978      	ldr	r0, [r7, #20]
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	4403      	add	r3, r0
 800ac8e:	6838      	ldr	r0, [r7, #0]
 800ac90:	4403      	add	r3, r0
 800ac92:	404a      	eors	r2, r1
 800ac94:	b2d2      	uxtb	r2, r2
 800ac96:	701a      	strb	r2, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3301      	adds	r3, #1
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	4413      	add	r3, r2
 800aca4:	7819      	ldrb	r1, [r3, #0]
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3301      	adds	r3, #1
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	4413      	add	r3, r2
 800acae:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800acb2:	6978      	ldr	r0, [r7, #20]
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4403      	add	r3, r0
 800acb8:	3301      	adds	r3, #1
 800acba:	6838      	ldr	r0, [r7, #0]
 800acbc:	4403      	add	r3, r0
 800acbe:	404a      	eors	r2, r1
 800acc0:	b2d2      	uxtb	r2, r2
 800acc2:	701a      	strb	r2, [r3, #0]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	4413      	add	r3, r2
 800acca:	3302      	adds	r3, #2
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	4413      	add	r3, r2
 800acd0:	7819      	ldrb	r1, [r3, #0]
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	3302      	adds	r3, #2
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4413      	add	r3, r2
 800acda:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800acde:	6978      	ldr	r0, [r7, #20]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	4403      	add	r3, r0
 800ace4:	3302      	adds	r3, #2
 800ace6:	6838      	ldr	r0, [r7, #0]
 800ace8:	4403      	add	r3, r0
 800acea:	404a      	eors	r2, r1
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	701a      	strb	r2, [r3, #0]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	4413      	add	r3, r2
 800acf6:	3303      	adds	r3, #3
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4413      	add	r3, r2
 800acfc:	7819      	ldrb	r1, [r3, #0]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	3303      	adds	r3, #3
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4413      	add	r3, r2
 800ad06:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ad0a:	6978      	ldr	r0, [r7, #20]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	4403      	add	r3, r0
 800ad10:	3303      	adds	r3, #3
 800ad12:	6838      	ldr	r0, [r7, #0]
 800ad14:	4403      	add	r3, r0
 800ad16:	404a      	eors	r2, r1
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	701a      	strb	r2, [r3, #0]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4413      	add	r3, r2
 800ad22:	3304      	adds	r3, #4
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	4413      	add	r3, r2
 800ad28:	7819      	ldrb	r1, [r3, #0]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4413      	add	r3, r2
 800ad32:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ad36:	6978      	ldr	r0, [r7, #20]
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	4403      	add	r3, r0
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	6838      	ldr	r0, [r7, #0]
 800ad40:	4403      	add	r3, r0
 800ad42:	404a      	eors	r2, r1
 800ad44:	b2d2      	uxtb	r2, r2
 800ad46:	701a      	strb	r2, [r3, #0]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3305      	adds	r3, #5
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	4413      	add	r3, r2
 800ad54:	7819      	ldrb	r1, [r3, #0]
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	3305      	adds	r3, #5
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ad62:	6978      	ldr	r0, [r7, #20]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	4403      	add	r3, r0
 800ad68:	3305      	adds	r3, #5
 800ad6a:	6838      	ldr	r0, [r7, #0]
 800ad6c:	4403      	add	r3, r0
 800ad6e:	404a      	eors	r2, r1
 800ad70:	b2d2      	uxtb	r2, r2
 800ad72:	701a      	strb	r2, [r3, #0]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	4413      	add	r3, r2
 800ad7a:	3306      	adds	r3, #6
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	4413      	add	r3, r2
 800ad80:	7819      	ldrb	r1, [r3, #0]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	3306      	adds	r3, #6
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ad8e:	6978      	ldr	r0, [r7, #20]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	4403      	add	r3, r0
 800ad94:	3306      	adds	r3, #6
 800ad96:	6838      	ldr	r0, [r7, #0]
 800ad98:	4403      	add	r3, r0
 800ad9a:	404a      	eors	r2, r1
 800ad9c:	b2d2      	uxtb	r2, r2
 800ad9e:	701a      	strb	r2, [r3, #0]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	3307      	adds	r3, #7
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4413      	add	r3, r2
 800adac:	7819      	ldrb	r1, [r3, #0]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	3307      	adds	r3, #7
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800adba:	6978      	ldr	r0, [r7, #20]
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4403      	add	r3, r0
 800adc0:	3307      	adds	r3, #7
 800adc2:	6838      	ldr	r0, [r7, #0]
 800adc4:	4403      	add	r3, r0
 800adc6:	404a      	eors	r2, r1
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < 64U; i += 8U )
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3308      	adds	r3, #8
 800add0:	613b      	str	r3, [r7, #16]
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b3f      	cmp	r3, #63	; 0x3f
 800add6:	f67f af4c 	bls.w	800ac72 <mbedtls_chacha20_update+0x82>
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	3340      	adds	r3, #64	; 0x40
 800adde:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	3b40      	subs	r3, #64	; 0x40
 800ade4:	60bb      	str	r3, [r7, #8]
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2b3f      	cmp	r3, #63	; 0x3f
 800adea:	f63f af33 	bhi.w	800ac54 <mbedtls_chacha20_update+0x64>
    }

    /* Last (partial) block */
    if( size > 0U )
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d02c      	beq.n	800ae4e <mbedtls_chacha20_update+0x25e>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3340      	adds	r3, #64	; 0x40
 800adfa:	4619      	mov	r1, r3
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7ff fd43 	bl	800a888 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30

        for( i = 0U; i < size; i++)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	e015      	b.n	800ae3e <mbedtls_chacha20_update+0x24e>
        {
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	4413      	add	r3, r2
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	7819      	ldrb	r1, [r3, #0]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	4413      	add	r3, r2
 800ae24:	3340      	adds	r3, #64	; 0x40
 800ae26:	781a      	ldrb	r2, [r3, #0]
 800ae28:	6978      	ldr	r0, [r7, #20]
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	4403      	add	r3, r0
 800ae2e:	6838      	ldr	r0, [r7, #0]
 800ae30:	4403      	add	r3, r0
 800ae32:	404a      	eors	r2, r1
 800ae34:	b2d2      	uxtb	r2, r2
 800ae36:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < size; i++)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d3e5      	bcc.n	800ae12 <mbedtls_chacha20_update+0x222>
        }

        ctx->keystream_bytes_used = size;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return( 0 );
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b088      	sub	sp, #32
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 800ae66:	4613      	mov	r3, r2
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <chachapoly_pad_aad+0x20>
        return( 0 );
 800ae74:	2300      	movs	r3, #0
 800ae76:	e012      	b.n	800ae9e <chachapoly_pad_aad+0x46>

    memset( zeroes, 0, sizeof( zeroes ) );
 800ae78:	f107 030c 	add.w	r3, r7, #12
 800ae7c:	220f      	movs	r2, #15
 800ae7e:	2100      	movs	r1, #0
 800ae80:	4618      	mov	r0, r3
 800ae82:	f009 fbb7 	bl	80145f4 <memset>

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 800ae92:	f107 030c 	add.w	r3, r7, #12
 800ae96:	4619      	mov	r1, r3
 800ae98:	f009 f8f0 	bl	801407c <mbedtls_poly1305_update>
 800ae9c:	4603      	mov	r3, r0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <mbedtls_chachapoly_init>:
                                     zeroes,
                                     16U - partial_block_len ) );
}

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff fdae 	bl	800aa12 <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	3384      	adds	r3, #132	; 0x84
 800aeba:	4618      	mov	r0, r3
 800aebc:	f009 f8c2 	bl	8014044 <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	f04f 0300 	mov.w	r3, #0
 800aeca:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	f04f 0300 	mov.w	r3, #0
 800aed8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01f      	beq.n	800af42 <mbedtls_chachapoly_free+0x4e>
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff fd9b 	bl	800aa40 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3384      	adds	r3, #132	; 0x84
 800af0e:	4618      	mov	r0, r3
 800af10:	f009 f8a4 	bl	801405c <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	f04f 0200 	mov.w	r2, #0
 800af1a:	f04f 0300 	mov.w	r3, #0
 800af1e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	f04f 0200 	mov.w	r2, #0
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 800af40:	e000      	b.n	800af44 <mbedtls_chachapoly_free+0x50>
        return;
 800af42:	bf00      	nop
}
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800af54:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800af58:	60fb      	str	r3, [r7, #12]
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fd7e 	bl	800aa60 <mbedtls_chacha20_setkey>
 800af64:	60f8      	str	r0, [r7, #12]

    return( ret );
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 800af70:	b5b0      	push	{r4, r5, r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800af7e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800af82:	617b      	str	r3, [r7, #20]
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d007      	beq.n	800af9e <mbedtls_chachapoly_update+0x2e>
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 800af94:	2b02      	cmp	r3, #2
 800af96:	d002      	beq.n	800af9e <mbedtls_chachapoly_update+0x2e>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 800af98:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800af9c:	e056      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d10c      	bne.n	800afc2 <mbedtls_chachapoly_update+0x52>
    {
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2202      	movs	r2, #2
 800afac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad( ctx );
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff ff51 	bl	800ae58 <chachapoly_pad_aad>
 800afb6:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <mbedtls_chachapoly_update+0x52>
            return( ret );
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	e044      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>
    }

    ctx->ciphertext_len += len;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	461a      	mov	r2, r3
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	1884      	adds	r4, r0, r2
 800afd2:	eb41 0503 	adc.w	r5, r1, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	e9c3 4536 	strd	r4, r5, [r3, #216]	; 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d118      	bne.n	800b018 <mbedtls_chachapoly_update+0xa8>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	f7ff fdff 	bl	800abf0 <mbedtls_chacha20_update>
 800aff2:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <mbedtls_chachapoly_update+0x8e>
            return( ret );
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	e026      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>

        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3384      	adds	r3, #132	; 0x84
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	4618      	mov	r0, r3
 800b008:	f009 f838 	bl	801407c <mbedtls_poly1305_update>
 800b00c:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d01a      	beq.n	800b04a <mbedtls_chachapoly_update+0xda>
            return( ret );
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	e019      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>
    }
    else /* DECRYPT */
    {
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3384      	adds	r3, #132	; 0x84
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	4618      	mov	r0, r3
 800b022:	f009 f82b 	bl	801407c <mbedtls_poly1305_update>
 800b026:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <mbedtls_chachapoly_update+0xc2>
            return( ret );
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	e00c      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>

        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	68b9      	ldr	r1, [r7, #8]
 800b03a:	f7ff fdd9 	bl	800abf0 <mbedtls_chacha20_update>
 800b03e:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <mbedtls_chachapoly_update+0xda>
            return( ret );
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	e000      	b.n	800b04c <mbedtls_chachapoly_update+0xdc>
    }

    return( 0 );
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bdb0      	pop	{r4, r5, r7, pc}

0800b054 <mbedtls_cipher_get_block_size>:
 * \return       The block size of the underlying cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->MBEDTLS_PRIVATE(cipher_info) == NULL )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 800b064:	2300      	movs	r3, #0
 800b066:	e002      	b.n	800b06e <mbedtls_cipher_get_block_size+0x1a>

    return ctx->MBEDTLS_PRIVATE(cipher_info)->MBEDTLS_PRIVATE(block_size);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
	...

0800b07c <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	6039      	str	r1, [r7, #0]
 800b086:	71fb      	strb	r3, [r7, #7]
 800b088:	4613      	mov	r3, r2
 800b08a:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b08c:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <mbedtls_cipher_info_from_values+0x60>)
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e018      	b.n	800b0c4 <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	79fa      	ldrb	r2, [r7, #7]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d10e      	bne.n	800b0be <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d108      	bne.n	800b0be <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b0b2:	79ba      	ldrb	r2, [r7, #6]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d102      	bne.n	800b0be <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	e007      	b.n	800b0ce <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1e2      	bne.n	800b092 <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	080167fc 	.word	0x080167fc

0800b0e0 <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <mbedtls_cipher_free+0x30>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d007      	beq.n	800b106 <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b102:	4610      	mov	r0, r2
 800b104:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b106:	2140      	movs	r1, #64	; 0x40
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f008 fb7d 	bl	8013808 <mbedtls_platform_zeroize>
 800b10e:	e000      	b.n	800b112 <mbedtls_cipher_free+0x32>
        return;
 800b110:	bf00      	nop
}
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx,
                          const mbedtls_cipher_info_t *cipher_info )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <mbedtls_cipher_setup+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <mbedtls_cipher_setup+0x50>)
 800b12a:	e019      	b.n	800b160 <mbedtls_cipher_setup+0x48>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800b12c:	2240      	movs	r2, #64	; 0x40
 800b12e:	2100      	movs	r1, #0
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f009 fa5f 	bl	80145f4 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	4798      	blx	r3
 800b13e:	4602      	mov	r2, r0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	63da      	str	r2, [r3, #60]	; 0x3c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <mbedtls_cipher_setup+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800b14c:	4b07      	ldr	r3, [pc, #28]	; (800b16c <mbedtls_cipher_setup+0x54>)
 800b14e:	e007      	b.n	800b160 <mbedtls_cipher_setup+0x48>

    ctx->cipher_info = cipher_info;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 800b156:	2100      	movs	r1, #0
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fca7 	bl	800baac <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	ffff9f00 	.word	0xffff9f00
 800b16c:	ffff9e80 	.word	0xffff9e80

0800b170 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <mbedtls_cipher_setkey+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b186:	4b26      	ldr	r3, [pc, #152]	; (800b220 <mbedtls_cipher_setkey+0xb0>)
 800b188:	e045      	b.n	800b216 <mbedtls_cipher_setkey+0xa6>
        ctx->operation = operation;
        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d108      	bne.n	800b1aa <mbedtls_cipher_setkey+0x3a>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d001      	beq.n	800b1aa <mbedtls_cipher_setkey+0x3a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b1a6:	4b1e      	ldr	r3, [pc, #120]	; (800b220 <mbedtls_cipher_setkey+0xb0>)
 800b1a8:	e035      	b.n	800b216 <mbedtls_cipher_setkey+0xa6>
    }

    ctx->key_bitlen = key_bitlen;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	78fa      	ldrb	r2, [r7, #3]
 800b1b4:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b1b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d00e      	beq.n	800b1dc <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d009      	beq.n	800b1dc <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d004      	beq.n	800b1dc <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800b1d8:	2b05      	cmp	r3, #5
 800b1da:	d10b      	bne.n	800b1f4 <mbedtls_cipher_setkey+0x84>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                         ctx->key_bitlen ) );
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	4798      	blx	r3
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	e010      	b.n	800b216 <mbedtls_cipher_setkey+0xa6>
    }

    if( MBEDTLS_DECRYPT == operation )
 800b1f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10b      	bne.n	800b214 <mbedtls_cipher_setkey+0xa4>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                         ctx->key_bitlen ) );
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	4798      	blx	r3
 800b210:	4603      	mov	r3, r0
 800b212:	e000      	b.n	800b216 <mbedtls_cipher_setkey+0xa6>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b214:	4b02      	ldr	r3, [pc, #8]	; (800b220 <mbedtls_cipher_setkey+0xb0>)
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	ffff9f00 	.word	0xffff9f00

0800b224 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b224:	b5b0      	push	{r4, r5, r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af04      	add	r7, sp, #16
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b232:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b236:	61bb      	str	r3, [r7, #24]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <mbedtls_cipher_update+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b240:	4b6d      	ldr	r3, [pc, #436]	; (800b3f8 <mbedtls_cipher_update+0x1d4>)
 800b242:	e1fc      	b.n	800b63e <mbedtls_cipher_update+0x41a>
         * accessible through the cipher layer. */
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff ff02 	bl	800b054 <mbedtls_cipher_get_block_size>
 800b250:	6178      	str	r0, [r7, #20]
    if ( 0 == block_size )
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <mbedtls_cipher_update+0x38>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 800b258:	4b68      	ldr	r3, [pc, #416]	; (800b3fc <mbedtls_cipher_update+0x1d8>)
 800b25a:	e1f0      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	785b      	ldrb	r3, [r3, #1]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d11c      	bne.n	800b2a0 <mbedtls_cipher_update+0x7c>
    {
        if( ilen != block_size )
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d001      	beq.n	800b272 <mbedtls_cipher_update+0x4e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b26e:	4b64      	ldr	r3, [pc, #400]	; (800b400 <mbedtls_cipher_update+0x1dc>)
 800b270:	e1e5      	b.n	800b63e <mbedtls_cipher_update+0x41a>

        *olen = ilen;
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	685c      	ldr	r4, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	47a0      	blx	r4
 800b290:	61b8      	str	r0, [r7, #24]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <mbedtls_cipher_update+0x78>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	e1d0      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        return( 0 );
 800b29c:	2300      	movs	r3, #0
 800b29e:	e1ce      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d10c      	bne.n	800b2c4 <mbedtls_cipher_update+0xa0>
    {
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx,
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	f008 f969 	bl	8013592 <mbedtls_gcm_update>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	e1bc      	b.n	800b63e <mbedtls_cipher_update+0x41a>
                                    output, ilen, olen ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b44      	cmp	r3, #68	; 0x44
 800b2cc:	d10b      	bne.n	800b2e6 <mbedtls_cipher_update+0xc2>
    {
        *olen = ilen;
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	f7ff fe47 	bl	800af70 <mbedtls_chachapoly_update>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	e1ab      	b.n	800b63e <mbedtls_cipher_update+0x41a>
                                           ilen, input, output ) );
    }
#endif

    if( input == output &&
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d10f      	bne.n	800b30e <mbedtls_cipher_update+0xea>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if( input == output &&
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <mbedtls_cipher_update+0xe6>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2fe:	6979      	ldr	r1, [r7, #20]
 800b300:	fb01 f202 	mul.w	r2, r1, r2
 800b304:	1a9b      	subs	r3, r3, r2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <mbedtls_cipher_update+0xea>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b30a:	4b3b      	ldr	r3, [pc, #236]	; (800b3f8 <mbedtls_cipher_update+0x1d4>)
 800b30c:	e197      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	785b      	ldrb	r3, [r3, #1]
 800b314:	2b02      	cmp	r3, #2
 800b316:	f040 80de 	bne.w	800b4d6 <mbedtls_cipher_update+0x2b2>
    {
        size_t copy_len = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <mbedtls_cipher_update+0x11a>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <mbedtls_cipher_update+0x11a>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d91b      	bls.n	800b376 <mbedtls_cipher_update+0x152>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <mbedtls_cipher_update+0x13a>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d106      	bne.n	800b35e <mbedtls_cipher_update+0x13a>
                ilen < block_size - ctx->unprocessed_len ) ||
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	1ad3      	subs	r3, r2, r3
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d30b      	bcc.n	800b376 <mbedtls_cipher_update+0x152>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen < block_size - ctx->unprocessed_len ) ||
 800b364:	2b01      	cmp	r3, #1
 800b366:	d119      	bne.n	800b39c <mbedtls_cipher_update+0x178>
                ilen < block_size - ctx->unprocessed_len ) )
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	429a      	cmp	r2, r3
 800b374:	d212      	bcs.n	800b39c <mbedtls_cipher_update+0x178>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	3310      	adds	r3, #16
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	3304      	adds	r3, #4
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	4618      	mov	r0, r3
 800b388:	f009 f926 	bl	80145d8 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	441a      	add	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	625a      	str	r2, [r3, #36]	; 0x24
            return( 0 );
 800b398:	2300      	movs	r3, #0
 800b39a:	e150      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d044      	beq.n	800b42e <mbedtls_cipher_update+0x20a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	3310      	adds	r3, #16
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	68b9      	ldr	r1, [r7, #8]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f009 f90a 	bl	80145d8 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	689c      	ldr	r4, [r3, #8]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f103 0528 	add.w	r5, r3, #40	; 0x28
                    ctx->unprocessed_data, output ) ) )
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	9201      	str	r2, [sp, #4]
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	462b      	mov	r3, r5
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	47a0      	blx	r4
 800b3ec:	61b8      	str	r0, [r7, #24]
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <mbedtls_cipher_update+0x1e0>
            {
                return( ret );
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	e122      	b.n	800b63e <mbedtls_cipher_update+0x41a>
 800b3f8:	ffff9f00 	.word	0xffff9f00
 800b3fc:	ffff9c80 	.word	0xffff9c80
 800b400:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	441a      	add	r2, r3
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	601a      	str	r2, [r3, #0]
            output += block_size;
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	4413      	add	r3, r2
 800b416:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	4413      	add	r3, r2
 800b424:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d02c      	beq.n	800b48e <mbedtls_cipher_update+0x26a>
        {
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	fbb3 f2f2 	udiv	r2, r3, r2
 800b43c:	6979      	ldr	r1, [r7, #20]
 800b43e:	fb01 f202 	mul.w	r2, r1, r2
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 &&
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <mbedtls_cipher_update+0x23e>
                ctx->operation == MBEDTLS_DECRYPT &&
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if( copy_len == 0 &&
 800b452:	2b00      	cmp	r3, #0
 800b454:	d105      	bne.n	800b462 <mbedtls_cipher_update+0x23e>
                NULL != ctx->add_padding)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <mbedtls_cipher_update+0x23e>
            {
                copy_len = block_size;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	61fb      	str	r3, [r7, #28]
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f103 0014 	add.w	r0, r3, #20
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	4619      	mov	r1, r3
 800b476:	f009 f8af 	bl	80145d8 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	441a      	add	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01e      	beq.n	800b4d2 <mbedtls_cipher_update+0x2ae>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	689c      	ldr	r4, [r3, #8]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	47a0      	blx	r4
 800b4ba:	61b8      	str	r0, [r7, #24]
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <mbedtls_cipher_update+0x2a2>
            {
                return( ret );
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	e0bb      	b.n	800b63e <mbedtls_cipher_update+0x41a>
            }

            *olen += ilen;
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	441a      	add	r2, r3
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e0b3      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	785b      	ldrb	r3, [r3, #1]
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d120      	bne.n	800b522 <mbedtls_cipher_update+0x2fe>
    {
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	68dc      	ldr	r4, [r3, #12]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f993 1008 	ldrsb.w	r1, [r3, #8]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f103 0524 	add.w	r5, r3, #36	; 0x24
                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3328      	adds	r3, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	9202      	str	r2, [sp, #8]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	9201      	str	r2, [sp, #4]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462b      	mov	r3, r5
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	47a0      	blx	r4
 800b50c:	61b8      	str	r0, [r7, #24]
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <mbedtls_cipher_update+0x2f4>
                input, output ) ) )
        {
            return( ret );
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	e092      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        *olen = ilen;
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	601a      	str	r2, [r3, #0]

        return( 0 );
 800b51e:	2300      	movs	r3, #0
 800b520:	e08d      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d11d      	bne.n	800b568 <mbedtls_cipher_update+0x344>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	691c      	ldr	r4, [r3, #16]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f103 0224 	add.w	r2, r3, #36	; 0x24
                ilen, &ctx->unprocessed_len, ctx->iv, input, output ) ) )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	460b      	mov	r3, r1
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	47a0      	blx	r4
 800b552:	61b8      	str	r0, [r7, #24]
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <mbedtls_cipher_update+0x33a>
        {
            return( ret );
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	e06f      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        *olen = ilen;
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	601a      	str	r2, [r3, #0]

        return( 0 );
 800b564:	2300      	movs	r3, #0
 800b566:	e06a      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	785b      	ldrb	r3, [r3, #1]
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d121      	bne.n	800b5b6 <mbedtls_cipher_update+0x392>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	695c      	ldr	r4, [r3, #20]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f103 0124 	add.w	r1, r3, #36	; 0x24
                ilen, &ctx->unprocessed_len, ctx->iv,
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f103 0528 	add.w	r5, r3, #40	; 0x28
                ctx->unprocessed_data, input, output ) ) )
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3314      	adds	r3, #20
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	9202      	str	r2, [sp, #8]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	9201      	str	r2, [sp, #4]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	462b      	mov	r3, r5
 800b59a:	460a      	mov	r2, r1
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	47a0      	blx	r4
 800b5a0:	61b8      	str	r0, [r7, #24]
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <mbedtls_cipher_update+0x388>
        {
            return( ret );
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	e048      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        *olen = ilen;
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	601a      	str	r2, [r3, #0]

        return( 0 );
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e043      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	785b      	ldrb	r3, [r3, #1]
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d123      	bne.n	800b608 <mbedtls_cipher_update+0x3e4>
    {
        if( ctx->unprocessed_len > 0 ) {
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <mbedtls_cipher_update+0x3a8>
            /* We can only process an entire data unit at a time. */
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b5c8:	4b1f      	ldr	r3, [pc, #124]	; (800b648 <mbedtls_cipher_update+0x424>)
 800b5ca:	e038      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	699c      	ldr	r4, [r3, #24]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f993 1008 	ldrsb.w	r1, [r3, #8]
                ctx->operation, ilen, ctx->iv, input, output );
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	9301      	str	r3, [sp, #4]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	47a0      	blx	r4
 800b5f2:	61b8      	str	r0, [r7, #24]
        if( ret != 0 )
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <mbedtls_cipher_update+0x3da>
        {
            return( ret );
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	e01f      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        *olen = ilen;
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	601a      	str	r2, [r3, #0]

        return( 0 );
 800b604:	2300      	movs	r3, #0
 800b606:	e01a      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	2b07      	cmp	r3, #7
 800b610:	d114      	bne.n	800b63c <mbedtls_cipher_update+0x418>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	69dc      	ldr	r4, [r3, #28]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	47a0      	blx	r4
 800b626:	61b8      	str	r0, [r7, #24]
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <mbedtls_cipher_update+0x40e>
                                                    ilen, input, output ) ) )
        {
            return( ret );
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	e005      	b.n	800b63e <mbedtls_cipher_update+0x41a>
        }

        *olen = ilen;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]

        return( 0 );
 800b638:	2300      	movs	r3, #0
 800b63a:	e000      	b.n	800b63e <mbedtls_cipher_update+0x41a>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b63c:	4b02      	ldr	r3, [pc, #8]	; (800b648 <mbedtls_cipher_update+0x424>)
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3720      	adds	r7, #32
 800b642:	46bd      	mov	sp, r7
 800b644:	bdb0      	pop	{r4, r5, r7, pc}
 800b646:	bf00      	nop
 800b648:	ffff9f80 	.word	0xffff9f80

0800b64c <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	613b      	str	r3, [r7, #16]
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 800b660:	2300      	movs	r3, #0
 800b662:	75fb      	strb	r3, [r7, #23]
 800b664:	e00a      	b.n	800b67c <add_pkcs_padding+0x30>
        output[data_len + i] = (unsigned char) padding_len;
 800b666:	7dfa      	ldrb	r2, [r7, #23]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4413      	add	r3, r2
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4413      	add	r3, r2
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < padding_len; i++ )
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	3301      	adds	r3, #1
 800b67a:	75fb      	strb	r3, [r7, #23]
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	429a      	cmp	r2, r3
 800b682:	d8f0      	bhi.n	800b666 <add_pkcs_padding+0x1a>
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop
 800b688:	371c      	adds	r7, #28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 800b694:	b480      	push	{r7}
 800b696:	b089      	sub	sp, #36	; 0x24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	76fb      	strb	r3, [r7, #27]

    if( NULL == input || NULL == data_len )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <get_pkcs_padding+0x1c>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b6b0:	4b2b      	ldr	r3, [pc, #172]	; (800b760 <get_pkcs_padding+0xcc>)
 800b6b2:	e04f      	b.n	800b754 <get_pkcs_padding+0xc0>

    padding_len = input[input_len - 1];
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 800b6c0:	7ebb      	ldrb	r3, [r7, #26]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 800b6ca:	7ebb      	ldrb	r3, [r7, #26]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	bf34      	ite	cc
 800b6d2:	2301      	movcc	r3, #1
 800b6d4:	2300      	movcs	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	b25a      	sxtb	r2, r3
 800b6da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	b25b      	sxtb	r3, r3
 800b6e2:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 800b6e4:	7ebb      	ldrb	r3, [r7, #26]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bf0c      	ite	eq
 800b6ea:	2301      	moveq	r3, #1
 800b6ec:	2300      	movne	r3, #0
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	b25a      	sxtb	r2, r3
 800b6f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	b25b      	sxtb	r3, r3
 800b6fa:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
 800b6fc:	7ebb      	ldrb	r3, [r7, #26]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	617b      	str	r3, [r7, #20]
    for( i = 0; i < input_len; i++ )
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	e01a      	b.n	800b740 <get_pkcs_padding+0xac>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	4413      	add	r3, r2
 800b710:	781a      	ldrb	r2, [r3, #0]
 800b712:	7ebb      	ldrb	r3, [r7, #26]
 800b714:	4053      	eors	r3, r2
 800b716:	b2da      	uxtb	r2, r3
 800b718:	69f9      	ldr	r1, [r7, #28]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	4299      	cmp	r1, r3
 800b71e:	bf2c      	ite	cs
 800b720:	2301      	movcs	r3, #1
 800b722:	2300      	movcc	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	b2db      	uxtb	r3, r3
 800b728:	fb12 f303 	smulbb	r3, r2, r3
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	b25a      	sxtb	r2, r3
 800b730:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b734:	4313      	orrs	r3, r2
 800b736:	b25b      	sxtb	r3, r3
 800b738:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < input_len; i++ )
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	3301      	adds	r3, #1
 800b73e:	61fb      	str	r3, [r7, #28]
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	429a      	cmp	r2, r3
 800b746:	d3e0      	bcc.n	800b70a <get_pkcs_padding+0x76>

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800b748:	7efb      	ldrb	r3, [r7, #27]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <get_pkcs_padding+0xbe>
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <get_pkcs_padding+0xd0>)
 800b750:	e000      	b.n	800b754 <get_pkcs_padding+0xc0>
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3724      	adds	r7, #36	; 0x24
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	ffff9f00 	.word	0xffff9f00
 800b764:	ffff9e00 	.word	0xffff9e00

0800b768 <add_one_and_zeros_padding>:
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	75fb      	strb	r3, [r7, #23]

    output[data_len] = 0x80;
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	2280      	movs	r2, #128	; 0x80
 800b788:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 800b78a:	2301      	movs	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
 800b78e:	e009      	b.n	800b7a4 <add_one_and_zeros_padding+0x3c>
        output[data_len + i] = 0x00;
 800b790:	7dfa      	ldrb	r2, [r7, #23]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4413      	add	r3, r2
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	75fb      	strb	r3, [r7, #23]
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d8f1      	bhi.n	800b790 <add_one_and_zeros_padding+0x28>
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
	...

0800b7bc <get_one_and_zeros_padding>:

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done, bad;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	74fb      	strb	r3, [r7, #19]

    if( NULL == input || NULL == data_len )
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <get_one_and_zeros_padding+0x1c>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <get_one_and_zeros_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b7d8:	4b29      	ldr	r3, [pc, #164]	; (800b880 <get_one_and_zeros_padding+0xc4>)
 800b7da:	e04b      	b.n	800b874 <get_one_and_zeros_padding+0xb8>

    bad = 0x80;
 800b7dc:	2380      	movs	r3, #128	; 0x80
 800b7de:	74bb      	strb	r3, [r7, #18]
    *data_len = 0;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	e03a      	b.n	800b862 <get_one_and_zeros_padding+0xa6>
    {
        prev_done = done;
 800b7ec:	7cfb      	ldrb	r3, [r7, #19]
 800b7ee:	747b      	strb	r3, [r7, #17]
        done |= ( input[i - 1] != 0 );
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bf14      	ite	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	2300      	moveq	r3, #0
 800b802:	b2db      	uxtb	r3, r3
 800b804:	b25a      	sxtb	r2, r3
 800b806:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	b25b      	sxtb	r3, r3
 800b80e:	74fb      	strb	r3, [r7, #19]
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	3b01      	subs	r3, #1
 800b818:	7cf8      	ldrb	r0, [r7, #19]
 800b81a:	7c79      	ldrb	r1, [r7, #17]
 800b81c:	4288      	cmp	r0, r1
 800b81e:	bf14      	ite	ne
 800b820:	2101      	movne	r1, #1
 800b822:	2100      	moveq	r1, #0
 800b824:	b2c9      	uxtb	r1, r1
 800b826:	fb01 f303 	mul.w	r3, r1, r3
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	601a      	str	r2, [r3, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3b01      	subs	r3, #1
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	781a      	ldrb	r2, [r3, #0]
 800b83a:	7cf9      	ldrb	r1, [r7, #19]
 800b83c:	7c7b      	ldrb	r3, [r7, #17]
 800b83e:	4299      	cmp	r1, r3
 800b840:	bf14      	ite	ne
 800b842:	2301      	movne	r3, #1
 800b844:	2300      	moveq	r3, #0
 800b846:	b2db      	uxtb	r3, r3
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	fb12 f303 	smulbb	r3, r2, r3
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	b25a      	sxtb	r2, r3
 800b852:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800b856:	4053      	eors	r3, r2
 800b858:	b25b      	sxtb	r3, r3
 800b85a:	74bb      	strb	r3, [r7, #18]
    for( i = input_len; i > 0; i-- )
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	3b01      	subs	r3, #1
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1c1      	bne.n	800b7ec <get_one_and_zeros_padding+0x30>
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800b868:	7cbb      	ldrb	r3, [r7, #18]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <get_one_and_zeros_padding+0xb6>
 800b86e:	4b05      	ldr	r3, [pc, #20]	; (800b884 <get_one_and_zeros_padding+0xc8>)
 800b870:	e000      	b.n	800b874 <get_one_and_zeros_padding+0xb8>
 800b872:	2300      	movs	r3, #0

}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	ffff9f00 	.word	0xffff9f00
 800b884:	ffff9e00 	.word	0xffff9e00

0800b888 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	75fb      	strb	r3, [r7, #23]

    for( i = 1; i < padding_len; i++ )
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	75fb      	strb	r3, [r7, #23]
 800b8a4:	e00a      	b.n	800b8bc <add_zeros_and_len_padding+0x34>
        output[data_len + i - 1] = 0x00;
 800b8a6:	7dfa      	ldrb	r2, [r7, #23]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	75fb      	strb	r3, [r7, #23]
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d8f0      	bhi.n	800b8a6 <add_zeros_and_len_padding+0x1e>
    output[output_len - 1] = (unsigned char) padding_len;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	b2d2      	uxtb	r2, r2
 800b8d0:	701a      	strb	r2, [r3, #0]
}
 800b8d2:	bf00      	nop
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b089      	sub	sp, #36	; 0x24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	76fb      	strb	r3, [r7, #27]

    if( NULL == input || NULL == data_len )
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <get_zeros_and_len_padding+0x1c>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b8fc:	4b2a      	ldr	r3, [pc, #168]	; (800b9a8 <get_zeros_and_len_padding+0xc8>)
 800b8fe:	e04d      	b.n	800b99c <get_zeros_and_len_padding+0xbc>

    padding_len = input[input_len - 1];
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	3b01      	subs	r3, #1
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 800b90c:	7ebb      	ldrb	r3, [r7, #26]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 800b916:	7ebb      	ldrb	r3, [r7, #26]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	bf34      	ite	cc
 800b91e:	2301      	movcc	r3, #1
 800b920:	2300      	movcs	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	b25a      	sxtb	r2, r3
 800b926:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	b25b      	sxtb	r3, r3
 800b92e:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 800b930:	7ebb      	ldrb	r3, [r7, #26]
 800b932:	2b00      	cmp	r3, #0
 800b934:	bf0c      	ite	eq
 800b936:	2301      	moveq	r3, #1
 800b938:	2300      	movne	r3, #0
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	b25a      	sxtb	r2, r3
 800b93e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b942:	4313      	orrs	r3, r2
 800b944:	b25b      	sxtb	r3, r3
 800b946:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
 800b948:	7ebb      	ldrb	r3, [r7, #26]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	617b      	str	r3, [r7, #20]
    for( i = 0; i < input_len - 1; i++ )
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	e017      	b.n	800b986 <get_zeros_and_len_padding+0xa6>
        bad |= input[i] * ( i >= pad_idx );
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	69f9      	ldr	r1, [r7, #28]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	4299      	cmp	r1, r3
 800b964:	bf2c      	ite	cs
 800b966:	2301      	movcs	r3, #1
 800b968:	2300      	movcc	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	fb12 f303 	smulbb	r3, r2, r3
 800b972:	b2db      	uxtb	r3, r3
 800b974:	b25a      	sxtb	r2, r3
 800b976:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	b25b      	sxtb	r3, r3
 800b97e:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < input_len - 1; i++ )
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	3b01      	subs	r3, #1
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d3e2      	bcc.n	800b956 <get_zeros_and_len_padding+0x76>

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800b990:	7efb      	ldrb	r3, [r7, #27]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <get_zeros_and_len_padding+0xba>
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <get_zeros_and_len_padding+0xcc>)
 800b998:	e000      	b.n	800b99c <get_zeros_and_len_padding+0xbc>
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3724      	adds	r7, #36	; 0x24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	ffff9f00 	.word	0xffff9f00
 800b9ac:	ffff9e00 	.word	0xffff9e00

0800b9b0 <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
    size_t i;

    for( i = data_len; i < output_len; i++ )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e007      	b.n	800b9d2 <add_zeros_padding+0x22>
        output[i] = 0x00;
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
    for( i = data_len; i < output_len; i++ )
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d3f3      	bcc.n	800b9c2 <add_zeros_padding+0x12>
}
 800b9da:	bf00      	nop
 800b9dc:	bf00      	nop
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <get_zeros_padding>:

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	74fb      	strb	r3, [r7, #19]

    if( NULL == input || NULL == data_len )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <get_zeros_padding+0x1c>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <get_zeros_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ba04:	4b1b      	ldr	r3, [pc, #108]	; (800ba74 <get_zeros_padding+0x8c>)
 800ba06:	e02e      	b.n	800ba66 <get_zeros_padding+0x7e>

    *data_len = 0;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	e024      	b.n	800ba5e <get_zeros_padding+0x76>
    {
        prev_done = done;
 800ba14:	7cfb      	ldrb	r3, [r7, #19]
 800ba16:	74bb      	strb	r3, [r7, #18]
        done |= ( input[i-1] != 0 );
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4413      	add	r3, r2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bf14      	ite	ne
 800ba26:	2301      	movne	r3, #1
 800ba28:	2300      	moveq	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	b25a      	sxtb	r2, r3
 800ba2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	b25b      	sxtb	r3, r3
 800ba36:	74fb      	strb	r3, [r7, #19]
        *data_len |= i * ( done != prev_done );
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	7cf9      	ldrb	r1, [r7, #19]
 800ba3e:	7cbb      	ldrb	r3, [r7, #18]
 800ba40:	4299      	cmp	r1, r3
 800ba42:	bf14      	ite	ne
 800ba44:	2301      	movne	r3, #1
 800ba46:	2300      	moveq	r3, #0
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	fb03 f301 	mul.w	r3, r3, r1
 800ba52:	431a      	orrs	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1d7      	bne.n	800ba14 <get_zeros_padding+0x2c>
    }

    return( 0 );
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	ffff9f00 	.word	0xffff9f00

0800ba78 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <get_no_padding+0x18>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ba90:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <get_no_padding+0x30>)
 800ba92:	e003      	b.n	800ba9c <get_no_padding+0x24>

    *data_len = input_len;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	601a      	str	r2, [r3, #0]

    return( 0 );
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	ffff9f00 	.word	0xffff9f00

0800baac <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <mbedtls_cipher_set_padding_mode+0x1e>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d001      	beq.n	800bace <mbedtls_cipher_set_padding_mode+0x22>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800baca:	4b1f      	ldr	r3, [pc, #124]	; (800bb48 <mbedtls_cipher_set_padding_mode+0x9c>)
 800bacc:	e036      	b.n	800bb3c <mbedtls_cipher_set_padding_mode+0x90>

        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch( mode )
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	d830      	bhi.n	800bb36 <mbedtls_cipher_set_padding_mode+0x8a>
 800bad4:	a201      	add	r2, pc, #4	; (adr r2, 800badc <mbedtls_cipher_set_padding_mode+0x30>)
 800bad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bada:	bf00      	nop
 800badc:	0800baf1 	.word	0x0800baf1
 800bae0:	0800baff 	.word	0x0800baff
 800bae4:	0800bb0d 	.word	0x0800bb0d
 800bae8:	0800bb1b 	.word	0x0800bb1b
 800baec:	0800bb29 	.word	0x0800bb29
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a16      	ldr	r2, [pc, #88]	; (800bb4c <mbedtls_cipher_set_padding_mode+0xa0>)
 800baf4:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_pkcs_padding;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a15      	ldr	r2, [pc, #84]	; (800bb50 <mbedtls_cipher_set_padding_mode+0xa4>)
 800bafa:	611a      	str	r2, [r3, #16]
        break;
 800bafc:	e01d      	b.n	800bb3a <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a14      	ldr	r2, [pc, #80]	; (800bb54 <mbedtls_cipher_set_padding_mode+0xa8>)
 800bb02:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a14      	ldr	r2, [pc, #80]	; (800bb58 <mbedtls_cipher_set_padding_mode+0xac>)
 800bb08:	611a      	str	r2, [r3, #16]
        break;
 800bb0a:	e016      	b.n	800bb3a <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a13      	ldr	r2, [pc, #76]	; (800bb5c <mbedtls_cipher_set_padding_mode+0xb0>)
 800bb10:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a12      	ldr	r2, [pc, #72]	; (800bb60 <mbedtls_cipher_set_padding_mode+0xb4>)
 800bb16:	611a      	str	r2, [r3, #16]
        break;
 800bb18:	e00f      	b.n	800bb3a <mbedtls_cipher_set_padding_mode+0x8e>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <mbedtls_cipher_set_padding_mode+0xb8>)
 800bb1e:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_zeros_padding;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a11      	ldr	r2, [pc, #68]	; (800bb68 <mbedtls_cipher_set_padding_mode+0xbc>)
 800bb24:	611a      	str	r2, [r3, #16]
        break;
 800bb26:	e008      	b.n	800bb3a <mbedtls_cipher_set_padding_mode+0x8e>
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <mbedtls_cipher_set_padding_mode+0xc0>)
 800bb32:	611a      	str	r2, [r3, #16]
        break;
 800bb34:	e001      	b.n	800bb3a <mbedtls_cipher_set_padding_mode+0x8e>

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800bb36:	4b0e      	ldr	r3, [pc, #56]	; (800bb70 <mbedtls_cipher_set_padding_mode+0xc4>)
 800bb38:	e000      	b.n	800bb3c <mbedtls_cipher_set_padding_mode+0x90>
    }

    return( 0 );
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	ffff9f00 	.word	0xffff9f00
 800bb4c:	0800b64d 	.word	0x0800b64d
 800bb50:	0800b695 	.word	0x0800b695
 800bb54:	0800b769 	.word	0x0800b769
 800bb58:	0800b7bd 	.word	0x0800b7bd
 800bb5c:	0800b889 	.word	0x0800b889
 800bb60:	0800b8e1 	.word	0x0800b8e1
 800bb64:	0800b9b1 	.word	0x0800b9b1
 800bb68:	0800b9e9 	.word	0x0800b9e9
 800bb6c:	0800ba79 	.word	0x0800ba79
 800bb70:	ffff9f80 	.word	0xffff9f80

0800bb74 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800bb7a:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800bb7e:	2001      	movs	r0, #1
 800bb80:	f008 faf4 	bl	801416c <calloc>
 800bb84:	4603      	mov	r3, r0
 800bb86:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f006 fffa 	bl	8012b88 <mbedtls_gcm_init>

    return( ctx );
 800bb94:	687b      	ldr	r3, [r7, #4]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f007 fe19 	bl	80137de <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f008 fd0b 	bl	80145c8 <free>
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 800bbc0:	2178      	movs	r1, #120	; 0x78
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f008 fad2 	bl	801416c <calloc>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7fe fcee 	bl	800a5b4 <mbedtls_ccm_init>

    return( ctx );
 800bbd8:	687b      	ldr	r3, [r7, #4]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <ccm_ctx_free>:

static void ccm_ctx_free( void *ctx )
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free( ctx );
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fe fd32 	bl	800a654 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f008 fce9 	bl	80145c8 <free>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800bc0e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7f8 fdc2 	bl	80047a0 <mbedtls_aes_crypt_ecb>
 800bc1c:	4603      	mov	r3, r0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b086      	sub	sp, #24
 800bc2a:	af02      	add	r7, sp, #8
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	607a      	str	r2, [r7, #4]
 800bc30:	603b      	str	r3, [r7, #0]
 800bc32:	460b      	mov	r3, r1
 800bc34:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800bc36:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7f8 fdc5 	bl	80047d6 <mbedtls_aes_crypt_cbc>
 800bc4c:	4603      	mov	r3, r0
                          output );
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b088      	sub	sp, #32
 800bc5a:	af04      	add	r7, sp, #16
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
 800bc62:	460b      	mov	r3, r1
 800bc64:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 800bc66:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bc6a:	6a3b      	ldr	r3, [r7, #32]
 800bc6c:	9302      	str	r3, [sp, #8]
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7f9 f98e 	bl	8004f9c <mbedtls_aes_crypt_cfb128>
 800bc80:	4603      	mov	r3, r0
                             input, output );
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap( void *ctx, size_t length, size_t *iv_off,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b086      	sub	sp, #24
 800bc8e:	af02      	add	r7, sp, #8
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	68b9      	ldr	r1, [r7, #8]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7f9 f9e7 	bl	800507a <mbedtls_aes_crypt_ofb>
 800bcac:	4603      	mov	r3, r0
                                    iv, input, output );
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b088      	sub	sp, #32
 800bcba:	af04      	add	r7, sp, #16
 800bcbc:	60f8      	str	r0, [r7, #12]
 800bcbe:	60b9      	str	r1, [r7, #8]
 800bcc0:	607a      	str	r2, [r7, #4]
 800bcc2:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	9302      	str	r3, [sp, #8]
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	9301      	str	r3, [sp, #4]
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7f9 fa10 	bl	80050fc <mbedtls_aes_crypt_ctr>
 800bcdc:	4603      	mov	r3, r0
                          stream_block, input, output );
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap( void *ctx, mbedtls_operation_t operation,
                               size_t length,
                               const unsigned char data_unit[16],
                               const unsigned char *input,
                               unsigned char *output )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	607a      	str	r2, [r7, #4]
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	613b      	str	r3, [r7, #16]
    int mode;

    switch( operation )
 800bcfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d004      	beq.n	800bd0e <aes_crypt_xts_wrap+0x26>
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d105      	bne.n	800bd14 <aes_crypt_xts_wrap+0x2c>
    {
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	617b      	str	r3, [r7, #20]
            break;
 800bd0c:	e004      	b.n	800bd18 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]
            break;
 800bd12:	e001      	b.n	800bd18 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800bd14:	4b08      	ldr	r3, [pc, #32]	; (800bd38 <aes_crypt_xts_wrap+0x50>)
 800bd16:	e00a      	b.n	800bd2e <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6979      	ldr	r1, [r7, #20]
 800bd26:	6938      	ldr	r0, [r7, #16]
 800bd28:	f7f9 f82c 	bl	8004d84 <mbedtls_aes_crypt_xts>
 800bd2c:	4603      	mov	r3, r0
                                  data_unit, input, output );
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	ffff9f00 	.word	0xffff9f00

0800bd3c <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7f7 fcfd 	bl	800374c <mbedtls_aes_setkey_dec>
 800bd52:	4603      	mov	r3, r0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f7f7 faf9 	bl	8003364 <mbedtls_aes_setkey_enc>
 800bd72:	4603      	mov	r3, r0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800bd82:	f44f 718c 	mov.w	r1, #280	; 0x118
 800bd86:	2001      	movs	r0, #1
 800bd88:	f008 f9f0 	bl	801416c <calloc>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <aes_ctx_alloc+0x1e>
        return( NULL );
 800bd96:	2300      	movs	r3, #0
 800bd98:	e003      	b.n	800bda2 <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7f7 fa9a 	bl	80032d4 <mbedtls_aes_init>

    return( aes );
 800bda0:	687b      	ldr	r3, [r7, #4]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7f7 fa9c 	bl	80032f0 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f008 fc05 	bl	80145c8 <free>
}
 800bdbe:	bf00      	nop
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	6978      	ldr	r0, [r7, #20]
 800bddc:	f7f7 fe02 	bl	80039e4 <mbedtls_aes_xts_setkey_enc>
 800bde0:	4603      	mov	r3, r0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b086      	sub	sp, #24
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	60b9      	str	r1, [r7, #8]
 800bdf4:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	68b9      	ldr	r1, [r7, #8]
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f7f7 fe27 	bl	8003a52 <mbedtls_aes_xts_setkey_dec>
 800be04:	4603      	mov	r3, r0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc( void )
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 800be14:	f44f 710c 	mov.w	r1, #560	; 0x230
 800be18:	2001      	movs	r0, #1
 800be1a:	f008 f9a7 	bl	801416c <calloc>
 800be1e:	4603      	mov	r3, r0
 800be20:	607b      	str	r3, [r7, #4]

    if( xts_ctx != NULL )
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init( xts_ctx );
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7f7 fa72 	bl	8003312 <mbedtls_aes_xts_init>

    return( xts_ctx );
 800be2e:	687b      	ldr	r3, [r7, #4]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <xts_aes_ctx_free>:

static void xts_aes_ctx_free( void *ctx )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60fb      	str	r3, [r7, #12]

    if( xts_ctx == NULL )
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <xts_aes_ctx_free+0x20>
        return;

    mbedtls_aes_xts_free( xts_ctx );
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7f7 fa73 	bl	8003336 <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f008 fbb9 	bl	80145c8 <free>
 800be56:	e000      	b.n	800be5a <xts_aes_ctx_free+0x22>
        return;
 800be58:	bf00      	nop
}
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	2102      	movs	r1, #2
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f006 ffef 	bl	8012e56 <mbedtls_gcm_setkey>
 800be78:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	2102      	movs	r1, #2
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7fe fb9a 	bl	800a5ce <mbedtls_ccm_setkey>
 800be9a:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	607a      	str	r2, [r7, #4]
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	460b      	mov	r3, r1
 800beb2:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 800beb4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7fe f8cb 	bl	800a058 <mbedtls_camellia_crypt_ecb>
 800bec2:	4603      	mov	r3, r0
                               output );
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	607a      	str	r2, [r7, #4]
 800bed6:	603b      	str	r3, [r7, #0]
 800bed8:	460b      	mov	r3, r1
 800beda:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 800bedc:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7fe fa1d 	bl	800a32c <mbedtls_camellia_crypt_cbc>
 800bef2:	4603      	mov	r3, r0
                               input, output );
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af04      	add	r7, sp, #16
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	607a      	str	r2, [r7, #4]
 800bf06:	603b      	str	r3, [r7, #0]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,
 800bf0c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	9302      	str	r3, [sp, #8]
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f7fe fa84 	bl	800a42e <mbedtls_camellia_crypt_cfb128>
 800bf26:	4603      	mov	r3, r0
                                  iv_off, iv, input, output );
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr( (mbedtls_camellia_context *) ctx, length, nc_off,
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7fe fadb 	bl	800a50c <mbedtls_camellia_crypt_ctr>
 800bf56:	4603      	mov	r3, r0
                               nonce_counter, stream_block, input, output );
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	68b9      	ldr	r1, [r7, #8]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7fd ff89 	bl	8009e88 <mbedtls_camellia_setkey_dec>
 800bf76:	4603      	mov	r3, r0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7fd f981 	bl	8009298 <mbedtls_camellia_setkey_enc>
 800bf96:	4603      	mov	r3, r0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <camellia_ctx_alloc>:

static void * camellia_ctx_alloc( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 800bfa6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800bfaa:	2001      	movs	r0, #1
 800bfac:	f008 f8de 	bl	801416c <calloc>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <camellia_ctx_alloc+0x1e>
        return( NULL );
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e003      	b.n	800bfc6 <camellia_ctx_alloc+0x26>

    mbedtls_camellia_init( ctx );
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7fd f94a 	bl	8009258 <mbedtls_camellia_init>

    return( ctx );
 800bfc4:	687b      	ldr	r3, [r7, #4]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <camellia_ctx_free>:

static void camellia_ctx_free( void *ctx )
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7fd f94c 	bl	8009274 <mbedtls_camellia_free>
    mbedtls_free( ctx );
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f008 faf3 	bl	80145c8 <free>
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	2105      	movs	r1, #5
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f006 ff2a 	bl	8012e56 <mbedtls_gcm_setkey>
 800c002:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	2105      	movs	r1, #5
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f7fe fad5 	bl	800a5ce <mbedtls_ccm_setkey>
 800c024:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	460b      	mov	r3, r1
 800c03c:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb( (mbedtls_des_context *) ctx, input, output );
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f000 fd82 	bl	800cb4c <mbedtls_des_crypt_ecb>
 800c048:	4603      	mov	r3, r0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b084      	sub	sp, #16
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
 800c05e:	460b      	mov	r3, r1
 800c060:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb( (mbedtls_des3_context *) ctx, input, output );
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 ffb6 	bl	800cfd8 <mbedtls_des3_crypt_ecb>
 800c06c:	4603      	mov	r3, r0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b086      	sub	sp, #24
 800c07a:	af02      	add	r7, sp, #8
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
 800c082:	460b      	mov	r3, r1
 800c084:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc( (mbedtls_des_context *) ctx, operation, length, iv, input,
 800c086:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 ff22 	bl	800cee0 <mbedtls_des_crypt_cbc>
 800c09c:	4603      	mov	r3, r0
                          output );
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b086      	sub	sp, #24
 800c0aa:	af02      	add	r7, sp, #8
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	603b      	str	r3, [r7, #0]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc( (mbedtls_des3_context *) ctx, operation, length, iv, input,
 800c0b6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f001 fabc 	bl	800d644 <mbedtls_des3_crypt_cbc>
 800c0cc:	4603      	mov	r3, r0
                           output );
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec( (mbedtls_des_context *) ctx, key );
 800c0e2:	68b9      	ldr	r1, [r7, #8]
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 fb7e 	bl	800c7e6 <mbedtls_des_setkey_dec>
 800c0ea:	4603      	mov	r3, r0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc( (mbedtls_des_context *) ctx, key );
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 fb60 	bl	800c7c8 <mbedtls_des_setkey_enc>
 800c108:	4603      	mov	r3, r0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec( (mbedtls_des3_context *) ctx, key );
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 fc48 	bl	800c9b6 <mbedtls_des3_set2key_dec>
 800c126:	4603      	mov	r3, r0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc( (mbedtls_des3_context *) ctx, key );
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f000 fc1d 	bl	800c97e <mbedtls_des3_set2key_enc>
 800c144:	4603      	mov	r3, r0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec( (mbedtls_des3_context *) ctx, key );
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 fcd9 	bl	800cb14 <mbedtls_des3_set3key_dec>
 800c162:	4603      	mov	r3, r0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc( (mbedtls_des3_context *) ctx, key );
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 fcae 	bl	800cadc <mbedtls_des3_set3key_enc>
 800c180:	4603      	mov	r3, r0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <des_ctx_alloc>:

static void * des_ctx_alloc( void )
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc( 1, sizeof( mbedtls_des_context ) );
 800c190:	2180      	movs	r1, #128	; 0x80
 800c192:	2001      	movs	r0, #1
 800c194:	f007 ffea 	bl	801416c <calloc>
 800c198:	4603      	mov	r3, r0
 800c19a:	607b      	str	r3, [r7, #4]

    if( des == NULL )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <des_ctx_alloc+0x1c>
        return( NULL );
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e003      	b.n	800c1ae <des_ctx_alloc+0x24>

    mbedtls_des_init( des );
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f8d6 	bl	800c358 <mbedtls_des_init>

    return( des );
 800c1ac:	687b      	ldr	r3, [r7, #4]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <des_ctx_free>:

static void des_ctx_free( void *ctx )
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
    mbedtls_des_free( (mbedtls_des_context *) ctx );
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f8d7 	bl	800c372 <mbedtls_des_free>
    mbedtls_free( ctx );
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f008 f9ff 	bl	80145c8 <free>
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <des3_ctx_alloc>:

static void * des3_ctx_alloc( void )
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b082      	sub	sp, #8
 800c1d6:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc( 1, sizeof( mbedtls_des3_context ) );
 800c1d8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c1dc:	2001      	movs	r0, #1
 800c1de:	f007 ffc5 	bl	801416c <calloc>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	607b      	str	r3, [r7, #4]

    if( des3 == NULL )
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <des3_ctx_alloc+0x1e>
        return( NULL );
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e003      	b.n	800c1f8 <des3_ctx_alloc+0x26>

    mbedtls_des3_init( des3 );
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f8ce 	bl	800c392 <mbedtls_des3_init>

    return( des3 );
 800c1f6:	687b      	ldr	r3, [r7, #4]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <des3_ctx_free>:

static void des3_ctx_free( void *ctx )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free( (mbedtls_des3_context *) ctx );
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f8d0 	bl	800c3ae <mbedtls_des3_free>
    mbedtls_free( ctx );
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f008 f9da 	bl	80145c8 <free>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c22e:	d001      	beq.n	800c234 <chacha20_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <chacha20_setkey_wrap+0x34>)
 800c232:	e009      	b.n	800c248 <chacha20_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7fe fc12 	bl	800aa60 <mbedtls_chacha20_setkey>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <chacha20_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800c242:	4b03      	ldr	r3, [pc, #12]	; (800c250 <chacha20_setkey_wrap+0x34>)
 800c244:	e000      	b.n	800c248 <chacha20_setkey_wrap+0x2c>

    return( 0 );
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	ffff9f00 	.word	0xffff9f00

0800c254 <chacha20_stream_wrap>:

static int chacha20_stream_wrap( void *ctx,  size_t length,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800c262:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800c266:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update( ctx, length, input, output );
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7fe fcbe 	bl	800abf0 <mbedtls_chacha20_update>
 800c274:	6178      	str	r0, [r7, #20]
    if( ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA )
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800c27c:	d101      	bne.n	800c282 <chacha20_stream_wrap+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800c27e:	4b03      	ldr	r3, [pc, #12]	; (800c28c <chacha20_stream_wrap+0x38>)
 800c280:	e000      	b.n	800c284 <chacha20_stream_wrap+0x30>

    return( ret );
 800c282:	697b      	ldr	r3, [r7, #20]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	ffff9f00 	.word	0xffff9f00

0800c290 <chacha20_ctx_alloc>:

static void * chacha20_ctx_alloc( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 800c296:	2184      	movs	r1, #132	; 0x84
 800c298:	2001      	movs	r0, #1
 800c29a:	f007 ff67 	bl	801416c <calloc>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <chacha20_ctx_alloc+0x1c>
        return( NULL );
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e003      	b.n	800c2b4 <chacha20_ctx_alloc+0x24>

    mbedtls_chacha20_init( ctx );
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7fe fbb0 	bl	800aa12 <mbedtls_chacha20_init>

    return( ctx );
 800c2b2:	687b      	ldr	r3, [r7, #4]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <chacha20_ctx_free>:

static void chacha20_ctx_free( void *ctx )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7fe fbbb 	bl	800aa40 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f008 f97c 	bl	80145c8 <free>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap( void *ctx,
                                   const unsigned char *key,
                                   unsigned int key_bitlen )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ea:	d001      	beq.n	800c2f0 <chachapoly_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800c2ec:	4b07      	ldr	r3, [pc, #28]	; (800c30c <chachapoly_setkey_wrap+0x34>)
 800c2ee:	e009      	b.n	800c304 <chachapoly_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 800c2f0:	68b9      	ldr	r1, [r7, #8]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f7fe fe29 	bl	800af4a <mbedtls_chachapoly_setkey>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <chachapoly_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800c2fe:	4b03      	ldr	r3, [pc, #12]	; (800c30c <chachapoly_setkey_wrap+0x34>)
 800c300:	e000      	b.n	800c304 <chachapoly_setkey_wrap+0x2c>

    return( 0 );
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	ffff9f00 	.word	0xffff9f00

0800c310 <chachapoly_ctx_alloc>:

static void * chachapoly_ctx_alloc( void )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 800c316:	21e8      	movs	r1, #232	; 0xe8
 800c318:	2001      	movs	r0, #1
 800c31a:	f007 ff27 	bl	801416c <calloc>
 800c31e:	4603      	mov	r3, r0
 800c320:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <chachapoly_ctx_alloc+0x1c>
        return( NULL );
 800c328:	2300      	movs	r3, #0
 800c32a:	e003      	b.n	800c334 <chachapoly_ctx_alloc+0x24>

    mbedtls_chachapoly_init( ctx );
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe fdba 	bl	800aea6 <mbedtls_chachapoly_init>

    return( ctx );
 800c332:	687b      	ldr	r3, [r7, #4]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <chachapoly_ctx_free>:

static void chachapoly_ctx_free( void *ctx )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7fe fdd5 	bl	800aef4 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f008 f93c 	bl	80145c8 <free>
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 800c360:	2280      	movs	r2, #128	; 0x80
 800c362:	2100      	movs	r1, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f008 f945 	bl	80145f4 <memset>
}
 800c36a:	bf00      	nop
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <mbedtls_des_free>:

void mbedtls_des_free( mbedtls_des_context *ctx )
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d004      	beq.n	800c38a <mbedtls_des_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des_context ) );
 800c380:	2180      	movs	r1, #128	; 0x80
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f007 fa40 	bl	8013808 <mbedtls_platform_zeroize>
 800c388:	e000      	b.n	800c38c <mbedtls_des_free+0x1a>
        return;
 800c38a:	bf00      	nop
}
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <mbedtls_des3_init>:

void mbedtls_des3_init( mbedtls_des3_context *ctx )
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des3_context ) );
 800c39a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c39e:	2100      	movs	r1, #0
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f008 f927 	bl	80145f4 <memset>
}
 800c3a6:	bf00      	nop
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <mbedtls_des3_free>:

void mbedtls_des3_free( mbedtls_des3_context *ctx )
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <mbedtls_des3_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des3_context ) );
 800c3bc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f007 fa21 	bl	8013808 <mbedtls_platform_zeroize>
 800c3c6:	e000      	b.n	800c3ca <mbedtls_des3_free+0x1c>
        return;
 800c3c8:	bf00      	nop
}
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    X = MBEDTLS_GET_UINT32_BE( key, 0 );
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	061a      	lsls	r2, r3, #24
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	041b      	lsls	r3, r3, #16
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	3302      	adds	r3, #2
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	3203      	adds	r2, #3
 800c3f8:	7812      	ldrb	r2, [r2, #0]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	613b      	str	r3, [r7, #16]
    Y = MBEDTLS_GET_UINT32_BE( key, 4 );
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	3304      	adds	r3, #4
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	061a      	lsls	r2, r3, #24
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	3305      	adds	r3, #5
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	041b      	lsls	r3, r3, #16
 800c40e:	431a      	orrs	r2, r3
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	3306      	adds	r3, #6
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	021b      	lsls	r3, r3, #8
 800c418:	4313      	orrs	r3, r2
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	3207      	adds	r2, #7
 800c41e:	7812      	ldrb	r2, [r2, #0]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	091a      	lsrs	r2, r3, #4
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	4053      	eors	r3, r2
 800c42c:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c430:	60bb      	str	r3, [r7, #8]
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	4053      	eors	r3, r2
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	4053      	eors	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	4053      	eors	r3, r2
 800c44a:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 800c44e:	60bb      	str	r3, [r7, #8]
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	4053      	eors	r3, r2
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	4053      	eors	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	4a55      	ldr	r2, [pc, #340]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46c:	00da      	lsls	r2, r3, #3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	0a1b      	lsrs	r3, r3, #8
 800c472:	f003 030f 	and.w	r3, r3, #15
 800c476:	4951      	ldr	r1, [pc, #324]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c478:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	0c1b      	lsrs	r3, r3, #16
 800c484:	f003 030f 	and.w	r3, r3, #15
 800c488:	494c      	ldr	r1, [pc, #304]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c48a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	431a      	orrs	r2, r3
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	0e1b      	lsrs	r3, r3, #24
 800c496:	f003 030f 	and.w	r3, r3, #15
 800c49a:	4948      	ldr	r1, [pc, #288]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c49c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4a0:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	095b      	lsrs	r3, r3, #5
 800c4a6:	f003 030f 	and.w	r3, r3, #15
 800c4aa:	4944      	ldr	r1, [pc, #272]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c4ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4b0:	01db      	lsls	r3, r3, #7
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	0b5b      	lsrs	r3, r3, #13
 800c4b8:	f003 030f 	and.w	r3, r3, #15
 800c4bc:	493f      	ldr	r1, [pc, #252]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c4be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4c2:	019b      	lsls	r3, r3, #6
 800c4c4:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	0d5b      	lsrs	r3, r3, #21
 800c4ca:	f003 030f 	and.w	r3, r3, #15
 800c4ce:	493b      	ldr	r1, [pc, #236]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c4d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4d4:	015b      	lsls	r3, r3, #5
 800c4d6:	431a      	orrs	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	0f5b      	lsrs	r3, r3, #29
 800c4dc:	4937      	ldr	r1, [pc, #220]	; (800c5bc <mbedtls_des_setkey+0x1ec>)
 800c4de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c4e2:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	085b      	lsrs	r3, r3, #1
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	4a33      	ldr	r2, [pc, #204]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f6:	00da      	lsls	r2, r3, #3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	0a5b      	lsrs	r3, r3, #9
 800c4fc:	f003 030f 	and.w	r3, r3, #15
 800c500:	492f      	ldr	r1, [pc, #188]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c502:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	0c5b      	lsrs	r3, r3, #17
 800c50e:	f003 030f 	and.w	r3, r3, #15
 800c512:	492b      	ldr	r1, [pc, #172]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c514:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	431a      	orrs	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	0e5b      	lsrs	r3, r3, #25
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	4926      	ldr	r1, [pc, #152]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c52a:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	091b      	lsrs	r3, r3, #4
 800c530:	f003 030f 	and.w	r3, r3, #15
 800c534:	4922      	ldr	r1, [pc, #136]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c53a:	01db      	lsls	r3, r3, #7
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	0b1b      	lsrs	r3, r3, #12
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	491e      	ldr	r1, [pc, #120]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c548:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c54c:	019b      	lsls	r3, r3, #6
 800c54e:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	0d1b      	lsrs	r3, r3, #20
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	4919      	ldr	r1, [pc, #100]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c55a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c55e:	015b      	lsls	r3, r3, #5
 800c560:	431a      	orrs	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	0f1b      	lsrs	r3, r3, #28
 800c566:	4916      	ldr	r1, [pc, #88]	; (800c5c0 <mbedtls_des_setkey+0x1f0>)
 800c568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c56c:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800c56e:	4313      	orrs	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c578:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c580:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
 800c586:	e113      	b.n	800c7b0 <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	dd05      	ble.n	800c59a <mbedtls_des_setkey+0x1ca>
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2b08      	cmp	r3, #8
 800c592:	d002      	beq.n	800c59a <mbedtls_des_setkey+0x1ca>
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	2b0f      	cmp	r3, #15
 800c598:	d114      	bne.n	800c5c4 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	005a      	lsls	r2, r3, #1
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	0edb      	lsrs	r3, r3, #27
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5a8:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	005a      	lsls	r2, r3, #1
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	0edb      	lsrs	r3, r3, #27
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	e013      	b.n	800c5e4 <mbedtls_des_setkey+0x214>
 800c5bc:	0801718c 	.word	0x0801718c
 800c5c0:	080171cc 	.word	0x080171cc
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	009a      	lsls	r2, r3, #2
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	0e9b      	lsrs	r3, r3, #26
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5d2:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	009a      	lsls	r2, r3, #2
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	0e9b      	lsrs	r3, r3, #26
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5e2:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	071b      	lsls	r3, r3, #28
 800c5f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f4:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	039b      	lsls	r3, r3, #14
 800c5fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5fe:	431a      	orrs	r2, r3
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	049b      	lsls	r3, r3, #18
 800c604:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 800c608:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	019b      	lsls	r3, r3, #6
 800c60e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c612:	431a      	orrs	r2, r3
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	025b      	lsls	r3, r3, #9
 800c618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c61c:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c626:	431a      	orrs	r2, r3
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	029b      	lsls	r3, r3, #10
 800c62c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c630:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c63a:	431a      	orrs	r2, r3
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	0a9b      	lsrs	r3, r3, #10
 800c640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c644:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	0b5b      	lsrs	r3, r3, #13
 800c64a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c64e:	431a      	orrs	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	091b      	lsrs	r3, r3, #4
 800c654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c658:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	019b      	lsls	r3, r3, #6
 800c65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c662:	431a      	orrs	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	085b      	lsrs	r3, r3, #1
 800c668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c66c:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	0b9b      	lsrs	r3, r3, #14
 800c672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c676:	431a      	orrs	r2, r3
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c67e:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	095b      	lsrs	r3, r3, #5
 800c684:	f003 0320 	and.w	r3, r3, #32
 800c688:	431a      	orrs	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	0a9b      	lsrs	r3, r3, #10
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	08db      	lsrs	r3, r3, #3
 800c698:	f003 0308 	and.w	r3, r3, #8
 800c69c:	431a      	orrs	r2, r3
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	0c9b      	lsrs	r3, r3, #18
 800c6a2:	f003 0304 	and.w	r3, r3, #4
 800c6a6:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	0e9b      	lsrs	r3, r3, #26
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	ea42 0103 	orr.w	r1, r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	0e1b      	lsrs	r3, r3, #24
 800c6b8:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	1d18      	adds	r0, r3, #4
 800c6c0:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800c6c2:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800c6c4:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	03db      	lsls	r3, r3, #15
 800c6ca:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	045b      	lsls	r3, r3, #17
 800c6d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6d6:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	029b      	lsls	r3, r3, #10
 800c6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	059b      	lsls	r3, r3, #22
 800c6e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6ea:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	089b      	lsrs	r3, r3, #2
 800c6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6fe:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	041b      	lsls	r3, r3, #16
 800c704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c708:	431a      	orrs	r2, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	02db      	lsls	r3, r3, #11
 800c70e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c712:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c71c:	431a      	orrs	r2, r3
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	099b      	lsrs	r3, r3, #6
 800c722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c726:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	03db      	lsls	r3, r3, #15
 800c72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c730:	431a      	orrs	r2, r3
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	091b      	lsrs	r3, r3, #4
 800c736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c73a:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	089b      	lsrs	r3, r3, #2
 800c740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c744:	431a      	orrs	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c74e:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	0b99      	lsrs	r1, r3, #14
 800c754:	f640 0308 	movw	r3, #2056	; 0x808
 800c758:	400b      	ands	r3, r1
 800c75a:	431a      	orrs	r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	0a5b      	lsrs	r3, r3, #9
 800c760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c764:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c76c:	431a      	orrs	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	01db      	lsls	r3, r3, #7
 800c772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c776:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	09db      	lsrs	r3, r3, #7
 800c77c:	f003 0320 	and.w	r3, r3, #32
 800c780:	431a      	orrs	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	08db      	lsrs	r3, r3, #3
 800c786:	f003 0311 	and.w	r3, r3, #17
 800c78a:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	ea42 0103 	orr.w	r1, r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	0d5b      	lsrs	r3, r3, #21
 800c79c:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	1d18      	adds	r0, r3, #4
 800c7a4:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800c7a6:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800c7a8:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	2b0f      	cmp	r3, #15
 800c7b4:	f77f aee8 	ble.w	800c588 <mbedtls_des_setkey+0x1b8>
    }
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop

0800c7c8 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff fdfa 	bl	800c3d0 <mbedtls_des_setkey>

    return( 0 );
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b086      	sub	sp, #24
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff fdeb 	bl	800c3d0 <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e034      	b.n	800c86a <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c808:	613b      	str	r3, [r7, #16]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f1c3 021e 	rsb	r2, r3, #30
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f1c3 021e 	rsb	r2, r3, #30
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6939      	ldr	r1, [r7, #16]
 800c828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c82c:	2300      	movs	r3, #0
 800c82e:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83a:	60fb      	str	r3, [r7, #12]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f1c3 011f 	rsb	r1, r3, #31
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f1c3 021f 	rsb	r2, r3, #31
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68f9      	ldr	r1, [r7, #12]
 800c85c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	3302      	adds	r3, #2
 800c868:	617b      	str	r3, [r7, #20]
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2b0f      	cmp	r3, #15
 800c86e:	ddc7      	ble.n	800c800 <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <des3_set2key>:

static void des3_set2key( uint32_t esk[96],
                          uint32_t dsk[96],
                          const unsigned char key[MBEDTLS_DES_KEY_SIZE*2] )
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey( esk, key );
 800c886:	6879      	ldr	r1, [r7, #4]
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fda1 	bl	800c3d0 <mbedtls_des_setkey>
    mbedtls_des_setkey( dsk + 32, key + 8 );
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3308      	adds	r3, #8
 800c898:	4619      	mov	r1, r3
 800c89a:	4610      	mov	r0, r2
 800c89c:	f7ff fd98 	bl	800c3d0 <mbedtls_des_setkey>

    for( i = 0; i < 32; i += 2 )
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	e063      	b.n	800c96e <des3_set2key+0xf4>
    {
        dsk[i     ] = esk[30 - i];
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	f1c3 031e 	rsb	r3, r3, #30
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	441a      	add	r2, r3
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	440b      	add	r3, r1
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f1c3 031f 	rsb	r3, r3, #31
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	68b9      	ldr	r1, [r7, #8]
 800c8d2:	440b      	add	r3, r1
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	441a      	add	r2, r3
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	3320      	adds	r3, #32
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	440b      	add	r3, r1
 800c8ee:	6812      	ldr	r2, [r2, #0]
 800c8f0:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	441a      	add	r2, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	3321      	adds	r3, #33	; 0x21
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	68f9      	ldr	r1, [r7, #12]
 800c906:	440b      	add	r3, r1
 800c908:	6812      	ldr	r2, [r2, #0]
 800c90a:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i    ];
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	441a      	add	r2, r3
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	3340      	adds	r3, #64	; 0x40
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	68f9      	ldr	r1, [r7, #12]
 800c91c:	440b      	add	r3, r1
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	3301      	adds	r3, #1
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	441a      	add	r2, r3
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3341      	adds	r3, #65	; 0x41
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	68f9      	ldr	r1, [r7, #12]
 800c934:	440b      	add	r3, r1
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i    ];
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	441a      	add	r2, r3
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	3340      	adds	r3, #64	; 0x40
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	440b      	add	r3, r1
 800c94c:	6812      	ldr	r2, [r2, #0]
 800c94e:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	3301      	adds	r3, #1
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	441a      	add	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	3341      	adds	r3, #65	; 0x41
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	440b      	add	r3, r1
 800c964:	6812      	ldr	r2, [r2, #0]
 800c966:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 32; i += 2 )
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	3302      	adds	r3, #2
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b1f      	cmp	r3, #31
 800c972:	dd98      	ble.n	800c8a6 <des3_set2key+0x2c>
    }
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b0e2      	sub	sp, #392	; 0x188
 800c982:	af00      	add	r7, sp, #0
 800c984:	1d3b      	adds	r3, r7, #4
 800c986:	6018      	str	r0, [r3, #0]
 800c988:	463b      	mov	r3, r7
 800c98a:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key( ctx->sk, sk, key );
 800c98c:	1d3b      	adds	r3, r7, #4
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	463b      	mov	r3, r7
 800c992:	f107 0108 	add.w	r1, r7, #8
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	f7ff ff6f 	bl	800c87a <des3_set2key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800c99c:	f107 0308 	add.w	r3, r7, #8
 800c9a0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f006 ff2f 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b0e2      	sub	sp, #392	; 0x188
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	1d3b      	adds	r3, r7, #4
 800c9be:	6018      	str	r0, [r3, #0]
 800c9c0:	463b      	mov	r3, r7
 800c9c2:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key( sk, ctx->sk, key );
 800c9c4:	1d3b      	adds	r3, r7, #4
 800c9c6:	6819      	ldr	r1, [r3, #0]
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	f107 0008 	add.w	r0, r7, #8
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	f7ff ff53 	bl	800c87a <des3_set2key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800c9d4:	f107 0308 	add.w	r3, r7, #8
 800c9d8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f006 ff13 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <des3_set3key>:

static void des3_set3key( uint32_t esk[96],
                          uint32_t dsk[96],
                          const unsigned char key[24] )
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey( esk, key );
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7ff fce7 	bl	800c3d0 <mbedtls_des_setkey>
    mbedtls_des_setkey( dsk + 32, key +  8 );
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3308      	adds	r3, #8
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	4610      	mov	r0, r2
 800ca10:	f7ff fcde 	bl	800c3d0 <mbedtls_des_setkey>
    mbedtls_des_setkey( esk + 64, key + 16 );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f7ff fcd5 	bl	800c3d0 <mbedtls_des_setkey>

    for( i = 0; i < 32; i += 2 )
 800ca26:	2300      	movs	r3, #0
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	e04f      	b.n	800cacc <des3_set3key+0xde>
    {
        dsk[i     ] = esk[94 - i];
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	441a      	add	r2, r3
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	440b      	add	r3, r1
 800ca40:	6812      	ldr	r2, [r2, #0]
 800ca42:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	441a      	add	r2, r3
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	3301      	adds	r3, #1
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	440b      	add	r3, r1
 800ca5a:	6812      	ldr	r2, [r2, #0]
 800ca5c:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	441a      	add	r2, r3
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	3320      	adds	r3, #32
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	68f9      	ldr	r1, [r7, #12]
 800ca72:	440b      	add	r3, r1
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	441a      	add	r2, r3
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	3321      	adds	r3, #33	; 0x21
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	68f9      	ldr	r1, [r7, #12]
 800ca8c:	440b      	add	r3, r1
 800ca8e:	6812      	ldr	r2, [r2, #0]
 800ca90:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f1c3 031e 	rsb	r3, r3, #30
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	441a      	add	r2, r3
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	3340      	adds	r3, #64	; 0x40
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	440b      	add	r3, r1
 800caa8:	6812      	ldr	r2, [r2, #0]
 800caaa:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f1c3 031f 	rsb	r3, r3, #31
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	441a      	add	r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	3341      	adds	r3, #65	; 0x41
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	440b      	add	r3, r1
 800cac2:	6812      	ldr	r2, [r2, #0]
 800cac4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 32; i += 2 )
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	3302      	adds	r3, #2
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2b1f      	cmp	r3, #31
 800cad0:	ddac      	ble.n	800ca2c <des3_set3key+0x3e>
    }
}
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b0e2      	sub	sp, #392	; 0x188
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	1d3b      	adds	r3, r7, #4
 800cae4:	6018      	str	r0, [r3, #0]
 800cae6:	463b      	mov	r3, r7
 800cae8:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( ctx->sk, sk, key );
 800caea:	1d3b      	adds	r3, r7, #4
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	463b      	mov	r3, r7
 800caf0:	f107 0108 	add.w	r1, r7, #8
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	f7ff ff7a 	bl	800c9ee <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800cb02:	4618      	mov	r0, r3
 800cb04:	f006 fe80 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b0e2      	sub	sp, #392	; 0x188
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	1d3b      	adds	r3, r7, #4
 800cb1c:	6018      	str	r0, [r3, #0]
 800cb1e:	463b      	mov	r3, r7
 800cb20:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( sk, ctx->sk, key );
 800cb22:	1d3b      	adds	r3, r7, #4
 800cb24:	6819      	ldr	r1, [r3, #0]
 800cb26:	463b      	mov	r3, r7
 800cb28:	f107 0008 	add.w	r0, r7, #8
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	f7ff ff5e 	bl	800c9ee <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800cb32:	f107 0308 	add.w	r3, r7, #8
 800cb36:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f006 fe64 	bl	8013808 <mbedtls_platform_zeroize>

    return( 0 );
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b08b      	sub	sp, #44	; 0x2c
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	061a      	lsls	r2, r3, #24
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	3301      	adds	r3, #1
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	041b      	lsls	r3, r3, #16
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	3302      	adds	r3, #2
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	4313      	orrs	r3, r2
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	3203      	adds	r2, #3
 800cb7a:	7812      	ldrb	r2, [r2, #0]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	3304      	adds	r3, #4
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	061a      	lsls	r2, r3, #24
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	3305      	adds	r3, #5
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	041b      	lsls	r3, r3, #16
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	3306      	adds	r3, #6
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	021b      	lsls	r3, r3, #8
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	3207      	adds	r2, #7
 800cba0:	7812      	ldrb	r2, [r2, #0]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	091a      	lsrs	r2, r3, #4
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	4053      	eors	r3, r2
 800cbae:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	69fa      	ldr	r2, [r7, #28]
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	4053      	eors	r3, r2
 800cbba:	61fb      	str	r3, [r7, #28]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	6a3a      	ldr	r2, [r7, #32]
 800cbc2:	4053      	eors	r3, r2
 800cbc4:	623b      	str	r3, [r7, #32]
 800cbc6:	6a3b      	ldr	r3, [r7, #32]
 800cbc8:	0c1a      	lsrs	r2, r3, #16
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	4053      	eors	r3, r2
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	69fa      	ldr	r2, [r7, #28]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	4053      	eors	r3, r2
 800cbd8:	61fb      	str	r3, [r7, #28]
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	041b      	lsls	r3, r3, #16
 800cbde:	6a3a      	ldr	r2, [r7, #32]
 800cbe0:	4053      	eors	r3, r2
 800cbe2:	623b      	str	r3, [r7, #32]
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	089a      	lsrs	r2, r3, #2
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	4053      	eors	r3, r2
 800cbec:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cbf0:	617b      	str	r3, [r7, #20]
 800cbf2:	6a3a      	ldr	r2, [r7, #32]
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	4053      	eors	r3, r2
 800cbf8:	623b      	str	r3, [r7, #32]
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	4053      	eors	r3, r2
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	0a1a      	lsrs	r2, r3, #8
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	4053      	eors	r3, r2
 800cc0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	6a3a      	ldr	r2, [r7, #32]
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	4053      	eors	r3, r2
 800cc18:	623b      	str	r3, [r7, #32]
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	69fa      	ldr	r2, [r7, #28]
 800cc20:	4053      	eors	r3, r2
 800cc22:	61fb      	str	r3, [r7, #28]
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	6a3a      	ldr	r2, [r7, #32]
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	4053      	eors	r3, r2
 800cc32:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	69fa      	ldr	r2, [r7, #28]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	4053      	eors	r3, r2
 800cc3e:	61fb      	str	r3, [r7, #28]
 800cc40:	6a3a      	ldr	r2, [r7, #32]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	4053      	eors	r3, r2
 800cc46:	623b      	str	r3, [r7, #32]
 800cc48:	6a3b      	ldr	r3, [r7, #32]
 800cc4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800cc4e:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 800cc50:	2300      	movs	r3, #0
 800cc52:	627b      	str	r3, [r7, #36]	; 0x24
 800cc54:	e0a6      	b.n	800cda4 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	1d1a      	adds	r2, r3, #4
 800cc5a:	61ba      	str	r2, [r7, #24]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	4053      	eors	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc6a:	4a95      	ldr	r2, [pc, #596]	; (800cec0 <mbedtls_des_crypt_ecb+0x374>)
 800cc6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	0a1b      	lsrs	r3, r3, #8
 800cc74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc78:	4992      	ldr	r1, [pc, #584]	; (800cec4 <mbedtls_des_crypt_ecb+0x378>)
 800cc7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc7e:	405a      	eors	r2, r3
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	0c1b      	lsrs	r3, r3, #16
 800cc84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc88:	498f      	ldr	r1, [pc, #572]	; (800cec8 <mbedtls_des_crypt_ecb+0x37c>)
 800cc8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc8e:	405a      	eors	r2, r3
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	0e1b      	lsrs	r3, r3, #24
 800cc94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc98:	498c      	ldr	r1, [pc, #560]	; (800cecc <mbedtls_des_crypt_ecb+0x380>)
 800cc9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc9e:	4053      	eors	r3, r2
 800cca0:	6a3a      	ldr	r2, [r7, #32]
 800cca2:	4053      	eors	r3, r2
 800cca4:	623b      	str	r3, [r7, #32]
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	1d1a      	adds	r2, r3, #4
 800ccaa:	61ba      	str	r2, [r7, #24]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ccb4:	4053      	eors	r3, r2
 800ccb6:	617b      	str	r3, [r7, #20]
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccbe:	4a84      	ldr	r2, [pc, #528]	; (800ced0 <mbedtls_des_crypt_ecb+0x384>)
 800ccc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	0a1b      	lsrs	r3, r3, #8
 800ccc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cccc:	4981      	ldr	r1, [pc, #516]	; (800ced4 <mbedtls_des_crypt_ecb+0x388>)
 800ccce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccd2:	405a      	eors	r2, r3
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	0c1b      	lsrs	r3, r3, #16
 800ccd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccdc:	497e      	ldr	r1, [pc, #504]	; (800ced8 <mbedtls_des_crypt_ecb+0x38c>)
 800ccde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cce2:	405a      	eors	r2, r3
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	0e1b      	lsrs	r3, r3, #24
 800cce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccec:	497b      	ldr	r1, [pc, #492]	; (800cedc <mbedtls_des_crypt_ecb+0x390>)
 800ccee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccf2:	4053      	eors	r3, r2
 800ccf4:	6a3a      	ldr	r2, [r7, #32]
 800ccf6:	4053      	eors	r3, r2
 800ccf8:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	1d1a      	adds	r2, r3, #4
 800ccfe:	61ba      	str	r2, [r7, #24]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6a3a      	ldr	r2, [r7, #32]
 800cd04:	4053      	eors	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd0e:	4a6c      	ldr	r2, [pc, #432]	; (800cec0 <mbedtls_des_crypt_ecb+0x374>)
 800cd10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd1c:	4969      	ldr	r1, [pc, #420]	; (800cec4 <mbedtls_des_crypt_ecb+0x378>)
 800cd1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd22:	405a      	eors	r2, r3
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	0c1b      	lsrs	r3, r3, #16
 800cd28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd2c:	4966      	ldr	r1, [pc, #408]	; (800cec8 <mbedtls_des_crypt_ecb+0x37c>)
 800cd2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd32:	405a      	eors	r2, r3
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	0e1b      	lsrs	r3, r3, #24
 800cd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd3c:	4963      	ldr	r1, [pc, #396]	; (800cecc <mbedtls_des_crypt_ecb+0x380>)
 800cd3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd42:	4053      	eors	r3, r2
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	4053      	eors	r3, r2
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	1d1a      	adds	r2, r3, #4
 800cd4e:	61ba      	str	r2, [r7, #24]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	ea4f 1333 	mov.w	r3, r3, ror #4
 800cd58:	4053      	eors	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd62:	4a5b      	ldr	r2, [pc, #364]	; (800ced0 <mbedtls_des_crypt_ecb+0x384>)
 800cd64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	0a1b      	lsrs	r3, r3, #8
 800cd6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd70:	4958      	ldr	r1, [pc, #352]	; (800ced4 <mbedtls_des_crypt_ecb+0x388>)
 800cd72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd76:	405a      	eors	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	0c1b      	lsrs	r3, r3, #16
 800cd7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd80:	4955      	ldr	r1, [pc, #340]	; (800ced8 <mbedtls_des_crypt_ecb+0x38c>)
 800cd82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd86:	405a      	eors	r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	0e1b      	lsrs	r3, r3, #24
 800cd8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd90:	4952      	ldr	r1, [pc, #328]	; (800cedc <mbedtls_des_crypt_ecb+0x390>)
 800cd92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd96:	4053      	eors	r3, r2
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	4053      	eors	r3, r2
 800cd9c:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	3301      	adds	r3, #1
 800cda2:	627b      	str	r3, [r7, #36]	; 0x24
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	2b07      	cmp	r3, #7
 800cda8:	f77f af55 	ble.w	800cc56 <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	ea4f 0373 	mov.w	r3, r3, ror #1
 800cdb2:	61fb      	str	r3, [r7, #28]
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	4053      	eors	r3, r2
 800cdba:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cdbe:	617b      	str	r3, [r7, #20]
 800cdc0:	69fa      	ldr	r2, [r7, #28]
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	4053      	eors	r3, r2
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	6a3a      	ldr	r2, [r7, #32]
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	4053      	eors	r3, r2
 800cdce:	623b      	str	r3, [r7, #32]
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
 800cdd2:	ea4f 0373 	mov.w	r3, r3, ror #1
 800cdd6:	623b      	str	r3, [r7, #32]
 800cdd8:	6a3b      	ldr	r3, [r7, #32]
 800cdda:	0a1a      	lsrs	r2, r3, #8
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	4053      	eors	r3, r2
 800cde0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cde4:	617b      	str	r3, [r7, #20]
 800cde6:	69fa      	ldr	r2, [r7, #28]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	4053      	eors	r3, r2
 800cdec:	61fb      	str	r3, [r7, #28]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	021b      	lsls	r3, r3, #8
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	4053      	eors	r3, r2
 800cdf6:	623b      	str	r3, [r7, #32]
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	089a      	lsrs	r2, r3, #2
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	4053      	eors	r3, r2
 800ce00:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800ce04:	617b      	str	r3, [r7, #20]
 800ce06:	69fa      	ldr	r2, [r7, #28]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	4053      	eors	r3, r2
 800ce0c:	61fb      	str	r3, [r7, #28]
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	6a3a      	ldr	r2, [r7, #32]
 800ce14:	4053      	eors	r3, r2
 800ce16:	623b      	str	r3, [r7, #32]
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	0c1a      	lsrs	r2, r3, #16
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	4053      	eors	r3, r2
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	617b      	str	r3, [r7, #20]
 800ce24:	6a3a      	ldr	r2, [r7, #32]
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	4053      	eors	r3, r2
 800ce2a:	623b      	str	r3, [r7, #32]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	4053      	eors	r3, r2
 800ce34:	61fb      	str	r3, [r7, #28]
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	091a      	lsrs	r2, r3, #4
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	4053      	eors	r3, r2
 800ce3e:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	6a3a      	ldr	r2, [r7, #32]
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	4053      	eors	r3, r2
 800ce4a:	623b      	str	r3, [r7, #32]
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	69fa      	ldr	r2, [r7, #28]
 800ce52:	4053      	eors	r3, r2
 800ce54:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	0e1b      	lsrs	r3, r3, #24
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	0c1a      	lsrs	r2, r3, #16
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	3301      	adds	r3, #1
 800ce68:	b2d2      	uxtb	r2, r2
 800ce6a:	701a      	strb	r2, [r3, #0]
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	0a1a      	lsrs	r2, r3, #8
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3302      	adds	r3, #2
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	701a      	strb	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3303      	adds	r3, #3
 800ce7c:	69fa      	ldr	r2, [r7, #28]
 800ce7e:	b2d2      	uxtb	r2, r2
 800ce80:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	0e1a      	lsrs	r2, r3, #24
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	b2d2      	uxtb	r2, r2
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	0c1a      	lsrs	r2, r3, #16
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3305      	adds	r3, #5
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	0a1a      	lsrs	r2, r3, #8
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3306      	adds	r3, #6
 800cea2:	b2d2      	uxtb	r2, r2
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3307      	adds	r3, #7
 800ceaa:	6a3a      	ldr	r2, [r7, #32]
 800ceac:	b2d2      	uxtb	r2, r2
 800ceae:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	372c      	adds	r7, #44	; 0x2c
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	0801708c 	.word	0x0801708c
 800cec4:	08016e8c 	.word	0x08016e8c
 800cec8:	08016c8c 	.word	0x08016c8c
 800cecc:	08016a8c 	.word	0x08016a8c
 800ced0:	08016f8c 	.word	0x08016f8c
 800ced4:	08016d8c 	.word	0x08016d8c
 800ced8:	08016b8c 	.word	0x08016b8c
 800cedc:	0801698c 	.word	0x0801698c

0800cee0 <mbedtls_des_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[8],
                    const unsigned char *input,
                    unsigned char *output )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]
 800ceec:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[8];

    if( length % 8 )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f003 0307 	and.w	r3, r3, #7
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <mbedtls_des_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
 800cef8:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800cefc:	e067      	b.n	800cfce <mbedtls_des_crypt_cbc+0xee>

    if( mode == MBEDTLS_DES_ENCRYPT )
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d160      	bne.n	800cfc6 <mbedtls_des_crypt_cbc+0xe6>
    {
        while( length > 0 )
 800cf04:	e029      	b.n	800cf5a <mbedtls_des_crypt_cbc+0x7a>
        {
            for( i = 0; i < 8; i++ )
 800cf06:	2300      	movs	r3, #0
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	e010      	b.n	800cf2e <mbedtls_des_crypt_cbc+0x4e>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf10:	4413      	add	r3, r2
 800cf12:	7819      	ldrb	r1, [r3, #0]
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4413      	add	r3, r2
 800cf1a:	781a      	ldrb	r2, [r3, #0]
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf20:	4403      	add	r3, r0
 800cf22:	404a      	eors	r2, r1
 800cf24:	b2d2      	uxtb	r2, r2
 800cf26:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	61fb      	str	r3, [r7, #28]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	2b07      	cmp	r3, #7
 800cf32:	ddeb      	ble.n	800cf0c <mbedtls_des_crypt_cbc+0x2c>

            mbedtls_des_crypt_ecb( ctx, output, output );
 800cf34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7ff fe07 	bl	800cb4c <mbedtls_des_crypt_ecb>
            memcpy( iv, output, 8 );
 800cf3e:	2208      	movs	r2, #8
 800cf40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf42:	6838      	ldr	r0, [r7, #0]
 800cf44:	f007 fb48 	bl	80145d8 <memcpy>

            input  += 8;
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	3308      	adds	r3, #8
 800cf52:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	3b08      	subs	r3, #8
 800cf58:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1d2      	bne.n	800cf06 <mbedtls_des_crypt_cbc+0x26>
 800cf60:	e034      	b.n	800cfcc <mbedtls_des_crypt_cbc+0xec>
    }
    else /* MBEDTLS_DES_DECRYPT */
    {
        while( length > 0 )
        {
            memcpy( temp, input, 8 );
 800cf62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	6810      	ldr	r0, [r2, #0]
 800cf6a:	6851      	ldr	r1, [r2, #4]
 800cf6c:	c303      	stmia	r3!, {r0, r1}
            mbedtls_des_crypt_ecb( ctx, input, output );
 800cf6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7ff fdea 	bl	800cb4c <mbedtls_des_crypt_ecb>

            for( i = 0; i < 8; i++ )
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]
 800cf7c:	e010      	b.n	800cfa0 <mbedtls_des_crypt_cbc+0xc0>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf82:	4413      	add	r3, r2
 800cf84:	7819      	ldrb	r1, [r3, #0]
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	781a      	ldrb	r2, [r3, #0]
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf92:	4403      	add	r3, r0
 800cf94:	404a      	eors	r2, r1
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	61fb      	str	r3, [r7, #28]
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2b07      	cmp	r3, #7
 800cfa4:	ddeb      	ble.n	800cf7e <mbedtls_des_crypt_cbc+0x9e>

            memcpy( iv, temp, 8 );
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	cb03      	ldmia	r3!, {r0, r1}
 800cfb0:	6010      	str	r0, [r2, #0]
 800cfb2:	6051      	str	r1, [r2, #4]

            input  += 8;
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	3b08      	subs	r3, #8
 800cfc4:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1ca      	bne.n	800cf62 <mbedtls_des_crypt_cbc+0x82>
        }
    }

    return( 0 );
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb( mbedtls_des3_context *ctx,
                     const unsigned char input[8],
                     unsigned char output[8] )
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b08b      	sub	sp, #44	; 0x2c
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	61bb      	str	r3, [r7, #24]

    X = MBEDTLS_GET_UINT32_BE( input, 0 );
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	061a      	lsls	r2, r3, #24
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3301      	adds	r3, #1
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	041b      	lsls	r3, r3, #16
 800cff6:	431a      	orrs	r2, r3
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	3302      	adds	r3, #2
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	4313      	orrs	r3, r2
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	3203      	adds	r2, #3
 800d006:	7812      	ldrb	r2, [r2, #0]
 800d008:	4313      	orrs	r3, r2
 800d00a:	623b      	str	r3, [r7, #32]
    Y = MBEDTLS_GET_UINT32_BE( input, 4 );
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	3304      	adds	r3, #4
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	061a      	lsls	r2, r3, #24
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	3305      	adds	r3, #5
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	041b      	lsls	r3, r3, #16
 800d01c:	431a      	orrs	r2, r3
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	3306      	adds	r3, #6
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	021b      	lsls	r3, r3, #8
 800d026:	4313      	orrs	r3, r2
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	3207      	adds	r2, #7
 800d02c:	7812      	ldrb	r2, [r2, #0]
 800d02e:	4313      	orrs	r3, r2
 800d030:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	091a      	lsrs	r2, r3, #4
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	4053      	eors	r3, r2
 800d03a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	69fa      	ldr	r2, [r7, #28]
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	4053      	eors	r3, r2
 800d046:	61fb      	str	r3, [r7, #28]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	011b      	lsls	r3, r3, #4
 800d04c:	6a3a      	ldr	r2, [r7, #32]
 800d04e:	4053      	eors	r3, r2
 800d050:	623b      	str	r3, [r7, #32]
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	0c1a      	lsrs	r2, r3, #16
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	4053      	eors	r3, r2
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	4053      	eors	r3, r2
 800d064:	61fb      	str	r3, [r7, #28]
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	041b      	lsls	r3, r3, #16
 800d06a:	6a3a      	ldr	r2, [r7, #32]
 800d06c:	4053      	eors	r3, r2
 800d06e:	623b      	str	r3, [r7, #32]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	089a      	lsrs	r2, r3, #2
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	4053      	eors	r3, r2
 800d078:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d07c:	617b      	str	r3, [r7, #20]
 800d07e:	6a3a      	ldr	r2, [r7, #32]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	4053      	eors	r3, r2
 800d084:	623b      	str	r3, [r7, #32]
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	69fa      	ldr	r2, [r7, #28]
 800d08c:	4053      	eors	r3, r2
 800d08e:	61fb      	str	r3, [r7, #28]
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	0a1a      	lsrs	r2, r3, #8
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	4053      	eors	r3, r2
 800d098:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d09c:	617b      	str	r3, [r7, #20]
 800d09e:	6a3a      	ldr	r2, [r7, #32]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	4053      	eors	r3, r2
 800d0a4:	623b      	str	r3, [r7, #32]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	021b      	lsls	r3, r3, #8
 800d0aa:	69fa      	ldr	r2, [r7, #28]
 800d0ac:	4053      	eors	r3, r2
 800d0ae:	61fb      	str	r3, [r7, #28]
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	6a3a      	ldr	r2, [r7, #32]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	4053      	eors	r3, r2
 800d0be:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	69fa      	ldr	r2, [r7, #28]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	4053      	eors	r3, r2
 800d0ca:	61fb      	str	r3, [r7, #28]
 800d0cc:	6a3a      	ldr	r2, [r7, #32]
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	4053      	eors	r3, r2
 800d0d2:	623b      	str	r3, [r7, #32]
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d0da:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 800d0dc:	2300      	movs	r3, #0
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24
 800d0e0:	e0a6      	b.n	800d230 <mbedtls_des3_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	1d1a      	adds	r2, r3, #4
 800d0e6:	61ba      	str	r2, [r7, #24]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	69fa      	ldr	r2, [r7, #28]
 800d0ec:	4053      	eors	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0f6:	4aa9      	ldr	r2, [pc, #676]	; (800d39c <mbedtls_des3_crypt_ecb+0x3c4>)
 800d0f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	0a1b      	lsrs	r3, r3, #8
 800d100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d104:	49a6      	ldr	r1, [pc, #664]	; (800d3a0 <mbedtls_des3_crypt_ecb+0x3c8>)
 800d106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d10a:	405a      	eors	r2, r3
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	0c1b      	lsrs	r3, r3, #16
 800d110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d114:	49a3      	ldr	r1, [pc, #652]	; (800d3a4 <mbedtls_des3_crypt_ecb+0x3cc>)
 800d116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d11a:	405a      	eors	r2, r3
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	0e1b      	lsrs	r3, r3, #24
 800d120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d124:	49a0      	ldr	r1, [pc, #640]	; (800d3a8 <mbedtls_des3_crypt_ecb+0x3d0>)
 800d126:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d12a:	4053      	eors	r3, r2
 800d12c:	6a3a      	ldr	r2, [r7, #32]
 800d12e:	4053      	eors	r3, r2
 800d130:	623b      	str	r3, [r7, #32]
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	1d1a      	adds	r2, r3, #4
 800d136:	61ba      	str	r2, [r7, #24]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d140:	4053      	eors	r3, r2
 800d142:	617b      	str	r3, [r7, #20]
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d14a:	4a98      	ldr	r2, [pc, #608]	; (800d3ac <mbedtls_des3_crypt_ecb+0x3d4>)
 800d14c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	0a1b      	lsrs	r3, r3, #8
 800d154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d158:	4995      	ldr	r1, [pc, #596]	; (800d3b0 <mbedtls_des3_crypt_ecb+0x3d8>)
 800d15a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d15e:	405a      	eors	r2, r3
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	0c1b      	lsrs	r3, r3, #16
 800d164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d168:	4992      	ldr	r1, [pc, #584]	; (800d3b4 <mbedtls_des3_crypt_ecb+0x3dc>)
 800d16a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d16e:	405a      	eors	r2, r3
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	0e1b      	lsrs	r3, r3, #24
 800d174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d178:	498f      	ldr	r1, [pc, #572]	; (800d3b8 <mbedtls_des3_crypt_ecb+0x3e0>)
 800d17a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d17e:	4053      	eors	r3, r2
 800d180:	6a3a      	ldr	r2, [r7, #32]
 800d182:	4053      	eors	r3, r2
 800d184:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	1d1a      	adds	r2, r3, #4
 800d18a:	61ba      	str	r2, [r7, #24]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6a3a      	ldr	r2, [r7, #32]
 800d190:	4053      	eors	r3, r2
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d19a:	4a80      	ldr	r2, [pc, #512]	; (800d39c <mbedtls_des3_crypt_ecb+0x3c4>)
 800d19c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	0a1b      	lsrs	r3, r3, #8
 800d1a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1a8:	497d      	ldr	r1, [pc, #500]	; (800d3a0 <mbedtls_des3_crypt_ecb+0x3c8>)
 800d1aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1ae:	405a      	eors	r2, r3
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	0c1b      	lsrs	r3, r3, #16
 800d1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1b8:	497a      	ldr	r1, [pc, #488]	; (800d3a4 <mbedtls_des3_crypt_ecb+0x3cc>)
 800d1ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1be:	405a      	eors	r2, r3
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	0e1b      	lsrs	r3, r3, #24
 800d1c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1c8:	4977      	ldr	r1, [pc, #476]	; (800d3a8 <mbedtls_des3_crypt_ecb+0x3d0>)
 800d1ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d1ce:	4053      	eors	r3, r2
 800d1d0:	69fa      	ldr	r2, [r7, #28]
 800d1d2:	4053      	eors	r3, r2
 800d1d4:	61fb      	str	r3, [r7, #28]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	1d1a      	adds	r2, r3, #4
 800d1da:	61ba      	str	r2, [r7, #24]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d1e4:	4053      	eors	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1ee:	4a6f      	ldr	r2, [pc, #444]	; (800d3ac <mbedtls_des3_crypt_ecb+0x3d4>)
 800d1f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1fc:	496c      	ldr	r1, [pc, #432]	; (800d3b0 <mbedtls_des3_crypt_ecb+0x3d8>)
 800d1fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d202:	405a      	eors	r2, r3
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	0c1b      	lsrs	r3, r3, #16
 800d208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d20c:	4969      	ldr	r1, [pc, #420]	; (800d3b4 <mbedtls_des3_crypt_ecb+0x3dc>)
 800d20e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d212:	405a      	eors	r2, r3
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	0e1b      	lsrs	r3, r3, #24
 800d218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d21c:	4966      	ldr	r1, [pc, #408]	; (800d3b8 <mbedtls_des3_crypt_ecb+0x3e0>)
 800d21e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d222:	4053      	eors	r3, r2
 800d224:	69fa      	ldr	r2, [r7, #28]
 800d226:	4053      	eors	r3, r2
 800d228:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	3301      	adds	r3, #1
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	2b07      	cmp	r3, #7
 800d234:	f77f af55 	ble.w	800d0e2 <mbedtls_des3_crypt_ecb+0x10a>
    }

    for( i = 0; i < 8; i++ )
 800d238:	2300      	movs	r3, #0
 800d23a:	627b      	str	r3, [r7, #36]	; 0x24
 800d23c:	e0a6      	b.n	800d38c <mbedtls_des3_crypt_ecb+0x3b4>
    {
        DES_ROUND( X, Y );
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	1d1a      	adds	r2, r3, #4
 800d242:	61ba      	str	r2, [r7, #24]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6a3a      	ldr	r2, [r7, #32]
 800d248:	4053      	eors	r3, r2
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d252:	4a52      	ldr	r2, [pc, #328]	; (800d39c <mbedtls_des3_crypt_ecb+0x3c4>)
 800d254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	0a1b      	lsrs	r3, r3, #8
 800d25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d260:	494f      	ldr	r1, [pc, #316]	; (800d3a0 <mbedtls_des3_crypt_ecb+0x3c8>)
 800d262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d266:	405a      	eors	r2, r3
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	0c1b      	lsrs	r3, r3, #16
 800d26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d270:	494c      	ldr	r1, [pc, #304]	; (800d3a4 <mbedtls_des3_crypt_ecb+0x3cc>)
 800d272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d276:	405a      	eors	r2, r3
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	0e1b      	lsrs	r3, r3, #24
 800d27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d280:	4949      	ldr	r1, [pc, #292]	; (800d3a8 <mbedtls_des3_crypt_ecb+0x3d0>)
 800d282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d286:	4053      	eors	r3, r2
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	4053      	eors	r3, r2
 800d28c:	61fb      	str	r3, [r7, #28]
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	1d1a      	adds	r2, r3, #4
 800d292:	61ba      	str	r2, [r7, #24]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d29c:	4053      	eors	r3, r2
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2a6:	4a41      	ldr	r2, [pc, #260]	; (800d3ac <mbedtls_des3_crypt_ecb+0x3d4>)
 800d2a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	0a1b      	lsrs	r3, r3, #8
 800d2b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2b4:	493e      	ldr	r1, [pc, #248]	; (800d3b0 <mbedtls_des3_crypt_ecb+0x3d8>)
 800d2b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2ba:	405a      	eors	r2, r3
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	0c1b      	lsrs	r3, r3, #16
 800d2c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2c4:	493b      	ldr	r1, [pc, #236]	; (800d3b4 <mbedtls_des3_crypt_ecb+0x3dc>)
 800d2c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2ca:	405a      	eors	r2, r3
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	0e1b      	lsrs	r3, r3, #24
 800d2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2d4:	4938      	ldr	r1, [pc, #224]	; (800d3b8 <mbedtls_des3_crypt_ecb+0x3e0>)
 800d2d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d2da:	4053      	eors	r3, r2
 800d2dc:	69fa      	ldr	r2, [r7, #28]
 800d2de:	4053      	eors	r3, r2
 800d2e0:	61fb      	str	r3, [r7, #28]
        DES_ROUND( Y, X );
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	1d1a      	adds	r2, r3, #4
 800d2e6:	61ba      	str	r2, [r7, #24]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	69fa      	ldr	r2, [r7, #28]
 800d2ec:	4053      	eors	r3, r2
 800d2ee:	617b      	str	r3, [r7, #20]
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f6:	4a29      	ldr	r2, [pc, #164]	; (800d39c <mbedtls_des3_crypt_ecb+0x3c4>)
 800d2f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	0a1b      	lsrs	r3, r3, #8
 800d300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d304:	4926      	ldr	r1, [pc, #152]	; (800d3a0 <mbedtls_des3_crypt_ecb+0x3c8>)
 800d306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d30a:	405a      	eors	r2, r3
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	0c1b      	lsrs	r3, r3, #16
 800d310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d314:	4923      	ldr	r1, [pc, #140]	; (800d3a4 <mbedtls_des3_crypt_ecb+0x3cc>)
 800d316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d31a:	405a      	eors	r2, r3
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	0e1b      	lsrs	r3, r3, #24
 800d320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d324:	4920      	ldr	r1, [pc, #128]	; (800d3a8 <mbedtls_des3_crypt_ecb+0x3d0>)
 800d326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d32a:	4053      	eors	r3, r2
 800d32c:	6a3a      	ldr	r2, [r7, #32]
 800d32e:	4053      	eors	r3, r2
 800d330:	623b      	str	r3, [r7, #32]
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	1d1a      	adds	r2, r3, #4
 800d336:	61ba      	str	r2, [r7, #24]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d340:	4053      	eors	r3, r2
 800d342:	617b      	str	r3, [r7, #20]
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d34a:	4a18      	ldr	r2, [pc, #96]	; (800d3ac <mbedtls_des3_crypt_ecb+0x3d4>)
 800d34c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	0a1b      	lsrs	r3, r3, #8
 800d354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d358:	4915      	ldr	r1, [pc, #84]	; (800d3b0 <mbedtls_des3_crypt_ecb+0x3d8>)
 800d35a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d35e:	405a      	eors	r2, r3
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	0c1b      	lsrs	r3, r3, #16
 800d364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d368:	4912      	ldr	r1, [pc, #72]	; (800d3b4 <mbedtls_des3_crypt_ecb+0x3dc>)
 800d36a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d36e:	405a      	eors	r2, r3
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	0e1b      	lsrs	r3, r3, #24
 800d374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d378:	490f      	ldr	r1, [pc, #60]	; (800d3b8 <mbedtls_des3_crypt_ecb+0x3e0>)
 800d37a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d37e:	4053      	eors	r3, r2
 800d380:	6a3a      	ldr	r2, [r7, #32]
 800d382:	4053      	eors	r3, r2
 800d384:	623b      	str	r3, [r7, #32]
    for( i = 0; i < 8; i++ )
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	3301      	adds	r3, #1
 800d38a:	627b      	str	r3, [r7, #36]	; 0x24
 800d38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38e:	2b07      	cmp	r3, #7
 800d390:	f77f af55 	ble.w	800d23e <mbedtls_des3_crypt_ecb+0x266>
    }

    for( i = 0; i < 8; i++ )
 800d394:	2300      	movs	r3, #0
 800d396:	627b      	str	r3, [r7, #36]	; 0x24
 800d398:	e0b7      	b.n	800d50a <mbedtls_des3_crypt_ecb+0x532>
 800d39a:	bf00      	nop
 800d39c:	0801708c 	.word	0x0801708c
 800d3a0:	08016e8c 	.word	0x08016e8c
 800d3a4:	08016c8c 	.word	0x08016c8c
 800d3a8:	08016a8c 	.word	0x08016a8c
 800d3ac:	08016f8c 	.word	0x08016f8c
 800d3b0:	08016d8c 	.word	0x08016d8c
 800d3b4:	08016b8c 	.word	0x08016b8c
 800d3b8:	0801698c 	.word	0x0801698c
    {
        DES_ROUND( Y, X );
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	1d1a      	adds	r2, r3, #4
 800d3c0:	61ba      	str	r2, [r7, #24]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	4053      	eors	r3, r2
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3d0:	4a94      	ldr	r2, [pc, #592]	; (800d624 <mbedtls_des3_crypt_ecb+0x64c>)
 800d3d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	0a1b      	lsrs	r3, r3, #8
 800d3da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3de:	4992      	ldr	r1, [pc, #584]	; (800d628 <mbedtls_des3_crypt_ecb+0x650>)
 800d3e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d3e4:	405a      	eors	r2, r3
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	0c1b      	lsrs	r3, r3, #16
 800d3ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ee:	498f      	ldr	r1, [pc, #572]	; (800d62c <mbedtls_des3_crypt_ecb+0x654>)
 800d3f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d3f4:	405a      	eors	r2, r3
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	0e1b      	lsrs	r3, r3, #24
 800d3fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3fe:	498c      	ldr	r1, [pc, #560]	; (800d630 <mbedtls_des3_crypt_ecb+0x658>)
 800d400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d404:	4053      	eors	r3, r2
 800d406:	6a3a      	ldr	r2, [r7, #32]
 800d408:	4053      	eors	r3, r2
 800d40a:	623b      	str	r3, [r7, #32]
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	1d1a      	adds	r2, r3, #4
 800d410:	61ba      	str	r2, [r7, #24]
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d41a:	4053      	eors	r3, r2
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d424:	4a83      	ldr	r2, [pc, #524]	; (800d634 <mbedtls_des3_crypt_ecb+0x65c>)
 800d426:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	0a1b      	lsrs	r3, r3, #8
 800d42e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d432:	4981      	ldr	r1, [pc, #516]	; (800d638 <mbedtls_des3_crypt_ecb+0x660>)
 800d434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d438:	405a      	eors	r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	0c1b      	lsrs	r3, r3, #16
 800d43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d442:	497e      	ldr	r1, [pc, #504]	; (800d63c <mbedtls_des3_crypt_ecb+0x664>)
 800d444:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d448:	405a      	eors	r2, r3
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	0e1b      	lsrs	r3, r3, #24
 800d44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d452:	497b      	ldr	r1, [pc, #492]	; (800d640 <mbedtls_des3_crypt_ecb+0x668>)
 800d454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d458:	4053      	eors	r3, r2
 800d45a:	6a3a      	ldr	r2, [r7, #32]
 800d45c:	4053      	eors	r3, r2
 800d45e:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	61ba      	str	r2, [r7, #24]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6a3a      	ldr	r2, [r7, #32]
 800d46a:	4053      	eors	r3, r2
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d474:	4a6b      	ldr	r2, [pc, #428]	; (800d624 <mbedtls_des3_crypt_ecb+0x64c>)
 800d476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	0a1b      	lsrs	r3, r3, #8
 800d47e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d482:	4969      	ldr	r1, [pc, #420]	; (800d628 <mbedtls_des3_crypt_ecb+0x650>)
 800d484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d488:	405a      	eors	r2, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	0c1b      	lsrs	r3, r3, #16
 800d48e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d492:	4966      	ldr	r1, [pc, #408]	; (800d62c <mbedtls_des3_crypt_ecb+0x654>)
 800d494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d498:	405a      	eors	r2, r3
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	0e1b      	lsrs	r3, r3, #24
 800d49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4a2:	4963      	ldr	r1, [pc, #396]	; (800d630 <mbedtls_des3_crypt_ecb+0x658>)
 800d4a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4a8:	4053      	eors	r3, r2
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	4053      	eors	r3, r2
 800d4ae:	61fb      	str	r3, [r7, #28]
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	61ba      	str	r2, [r7, #24]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	ea4f 1333 	mov.w	r3, r3, ror #4
 800d4be:	4053      	eors	r3, r2
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4c8:	4a5a      	ldr	r2, [pc, #360]	; (800d634 <mbedtls_des3_crypt_ecb+0x65c>)
 800d4ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	0a1b      	lsrs	r3, r3, #8
 800d4d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4d6:	4958      	ldr	r1, [pc, #352]	; (800d638 <mbedtls_des3_crypt_ecb+0x660>)
 800d4d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4dc:	405a      	eors	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	0c1b      	lsrs	r3, r3, #16
 800d4e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4e6:	4955      	ldr	r1, [pc, #340]	; (800d63c <mbedtls_des3_crypt_ecb+0x664>)
 800d4e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4ec:	405a      	eors	r2, r3
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	0e1b      	lsrs	r3, r3, #24
 800d4f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4f6:	4952      	ldr	r1, [pc, #328]	; (800d640 <mbedtls_des3_crypt_ecb+0x668>)
 800d4f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4fc:	4053      	eors	r3, r2
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	4053      	eors	r3, r2
 800d502:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	3301      	adds	r3, #1
 800d508:	627b      	str	r3, [r7, #36]	; 0x24
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	2b07      	cmp	r3, #7
 800d50e:	f77f af55 	ble.w	800d3bc <mbedtls_des3_crypt_ecb+0x3e4>
    }

    DES_FP( Y, X );
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	ea4f 0373 	mov.w	r3, r3, ror #1
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	6a3b      	ldr	r3, [r7, #32]
 800d51e:	4053      	eors	r3, r2
 800d520:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	69fa      	ldr	r2, [r7, #28]
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4053      	eors	r3, r2
 800d52c:	61fb      	str	r3, [r7, #28]
 800d52e:	6a3a      	ldr	r2, [r7, #32]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	4053      	eors	r3, r2
 800d534:	623b      	str	r3, [r7, #32]
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	ea4f 0373 	mov.w	r3, r3, ror #1
 800d53c:	623b      	str	r3, [r7, #32]
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	0a1a      	lsrs	r2, r3, #8
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	4053      	eors	r3, r2
 800d546:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	69fa      	ldr	r2, [r7, #28]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	4053      	eors	r3, r2
 800d552:	61fb      	str	r3, [r7, #28]
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	021b      	lsls	r3, r3, #8
 800d558:	6a3a      	ldr	r2, [r7, #32]
 800d55a:	4053      	eors	r3, r2
 800d55c:	623b      	str	r3, [r7, #32]
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	089a      	lsrs	r2, r3, #2
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	4053      	eors	r3, r2
 800d566:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800d56a:	617b      	str	r3, [r7, #20]
 800d56c:	69fa      	ldr	r2, [r7, #28]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	4053      	eors	r3, r2
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	6a3a      	ldr	r2, [r7, #32]
 800d57a:	4053      	eors	r3, r2
 800d57c:	623b      	str	r3, [r7, #32]
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	0c1a      	lsrs	r2, r3, #16
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	4053      	eors	r3, r2
 800d586:	b29b      	uxth	r3, r3
 800d588:	617b      	str	r3, [r7, #20]
 800d58a:	6a3a      	ldr	r2, [r7, #32]
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	4053      	eors	r3, r2
 800d590:	623b      	str	r3, [r7, #32]
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	041b      	lsls	r3, r3, #16
 800d596:	69fa      	ldr	r2, [r7, #28]
 800d598:	4053      	eors	r3, r2
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	091a      	lsrs	r2, r3, #4
 800d5a0:	6a3b      	ldr	r3, [r7, #32]
 800d5a2:	4053      	eors	r3, r2
 800d5a4:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	6a3a      	ldr	r2, [r7, #32]
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	4053      	eors	r3, r2
 800d5b0:	623b      	str	r3, [r7, #32]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	011b      	lsls	r3, r3, #4
 800d5b6:	69fa      	ldr	r2, [r7, #28]
 800d5b8:	4053      	eors	r3, r2
 800d5ba:	61fb      	str	r3, [r7, #28]

    MBEDTLS_PUT_UINT32_BE( Y, output, 0 );
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	0e1b      	lsrs	r3, r3, #24
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	701a      	strb	r2, [r3, #0]
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	0c1a      	lsrs	r2, r3, #16
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	b2d2      	uxtb	r2, r2
 800d5d0:	701a      	strb	r2, [r3, #0]
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	0a1a      	lsrs	r2, r3, #8
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3302      	adds	r3, #2
 800d5da:	b2d2      	uxtb	r2, r2
 800d5dc:	701a      	strb	r2, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3303      	adds	r3, #3
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	b2d2      	uxtb	r2, r2
 800d5e6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( X, output, 4 );
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	0e1a      	lsrs	r2, r3, #24
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	0c1a      	lsrs	r2, r3, #16
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3305      	adds	r3, #5
 800d5fc:	b2d2      	uxtb	r2, r2
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	0a1a      	lsrs	r2, r3, #8
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3306      	adds	r3, #6
 800d608:	b2d2      	uxtb	r2, r2
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3307      	adds	r3, #7
 800d610:	6a3a      	ldr	r2, [r7, #32]
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	372c      	adds	r7, #44	; 0x2c
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	0801708c 	.word	0x0801708c
 800d628:	08016e8c 	.word	0x08016e8c
 800d62c:	08016c8c 	.word	0x08016c8c
 800d630:	08016a8c 	.word	0x08016a8c
 800d634:	08016f8c 	.word	0x08016f8c
 800d638:	08016d8c 	.word	0x08016d8c
 800d63c:	08016b8c 	.word	0x08016b8c
 800d640:	0801698c 	.word	0x0801698c

0800d644 <mbedtls_des3_crypt_cbc>:
                     int mode,
                     size_t length,
                     unsigned char iv[8],
                     const unsigned char *input,
                     unsigned char *output )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[8];

    if( length % 8 )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f003 0307 	and.w	r3, r3, #7
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <mbedtls_des3_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
 800d65c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800d660:	e067      	b.n	800d732 <mbedtls_des3_crypt_cbc+0xee>

    if( mode == MBEDTLS_DES_ENCRYPT )
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d160      	bne.n	800d72a <mbedtls_des3_crypt_cbc+0xe6>
    {
        while( length > 0 )
 800d668:	e029      	b.n	800d6be <mbedtls_des3_crypt_cbc+0x7a>
        {
            for( i = 0; i < 8; i++ )
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]
 800d66e:	e010      	b.n	800d692 <mbedtls_des3_crypt_cbc+0x4e>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d674:	4413      	add	r3, r2
 800d676:	7819      	ldrb	r1, [r3, #0]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	4413      	add	r3, r2
 800d67e:	781a      	ldrb	r2, [r3, #0]
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d684:	4403      	add	r3, r0
 800d686:	404a      	eors	r2, r1
 800d688:	b2d2      	uxtb	r2, r2
 800d68a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	3301      	adds	r3, #1
 800d690:	61fb      	str	r3, [r7, #28]
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	2b07      	cmp	r3, #7
 800d696:	ddeb      	ble.n	800d670 <mbedtls_des3_crypt_cbc+0x2c>

            mbedtls_des3_crypt_ecb( ctx, output, output );
 800d698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7ff fc9b 	bl	800cfd8 <mbedtls_des3_crypt_ecb>
            memcpy( iv, output, 8 );
 800d6a2:	2208      	movs	r2, #8
 800d6a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6a6:	6838      	ldr	r0, [r7, #0]
 800d6a8:	f006 ff96 	bl	80145d8 <memcpy>

            input  += 8;
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3b08      	subs	r3, #8
 800d6bc:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1d2      	bne.n	800d66a <mbedtls_des3_crypt_cbc+0x26>
 800d6c4:	e034      	b.n	800d730 <mbedtls_des3_crypt_cbc+0xec>
    }
    else /* MBEDTLS_DES_DECRYPT */
    {
        while( length > 0 )
        {
            memcpy( temp, input, 8 );
 800d6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c8:	f107 0314 	add.w	r3, r7, #20
 800d6cc:	6810      	ldr	r0, [r2, #0]
 800d6ce:	6851      	ldr	r1, [r2, #4]
 800d6d0:	c303      	stmia	r3!, {r0, r1}
            mbedtls_des3_crypt_ecb( ctx, input, output );
 800d6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f7ff fc7e 	bl	800cfd8 <mbedtls_des3_crypt_ecb>

            for( i = 0; i < 8; i++ )
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	e010      	b.n	800d704 <mbedtls_des3_crypt_cbc+0xc0>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6e6:	4413      	add	r3, r2
 800d6e8:	7819      	ldrb	r1, [r3, #0]
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	781a      	ldrb	r2, [r3, #0]
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f6:	4403      	add	r3, r0
 800d6f8:	404a      	eors	r2, r1
 800d6fa:	b2d2      	uxtb	r2, r2
 800d6fc:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	3301      	adds	r3, #1
 800d702:	61fb      	str	r3, [r7, #28]
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	2b07      	cmp	r3, #7
 800d708:	ddeb      	ble.n	800d6e2 <mbedtls_des3_crypt_cbc+0x9e>

            memcpy( iv, temp, 8 );
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	f107 0314 	add.w	r3, r7, #20
 800d712:	cb03      	ldmia	r3!, {r0, r1}
 800d714:	6010      	str	r0, [r2, #0]
 800d716:	6051      	str	r1, [r2, #4]

            input  += 8;
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	3308      	adds	r3, #8
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d720:	3308      	adds	r3, #8
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3b08      	subs	r3, #8
 800d728:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1ca      	bne.n	800d6c6 <mbedtls_des3_crypt_cbc+0x82>
        }
    }

    return( 0 );
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <ecdh_gen_public_restartable>:
static int ecdh_gen_public_restartable( mbedtls_ecp_group *grp,
                    mbedtls_mpi *d, mbedtls_ecp_point *Q,
                    int (*f_rng)(void *, unsigned char *, size_t),
                    void *p_rng,
                    mbedtls_ecp_restart_ctx *rs_ctx )
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b08a      	sub	sp, #40	; 0x28
 800d73e:	af04      	add	r7, sp, #16
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	60b9      	str	r1, [r7, #8]
 800d744:	607a      	str	r2, [r7, #4]
 800d746:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d748:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d74c:	617b      	str	r3, [r7, #20]

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f002 fdef 	bl	8010338 <mbedtls_ecp_gen_privkey>
 800d75a:	6178      	str	r0, [r7, #20]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d112      	bne.n	800d788 <ecdh_gen_public_restartable+0x4e>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	9302      	str	r3, [sp, #8]
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	4613      	mov	r3, r2
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f002 fb34 	bl	800fde8 <mbedtls_ecp_mul_restartable>
 800d780:	6178      	str	r0, [r7, #20]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b00      	cmp	r3, #0
                                                  f_rng, p_rng, rs_ctx ) );

cleanup:
 800d786:	e000      	b.n	800d78a <ecdh_gen_public_restartable+0x50>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 800d788:	bf00      	nop
    return( ret );
 800d78a:	697b      	ldr	r3, [r7, #20]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af02      	add	r7, sp, #8
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	9301      	str	r3, [sp, #4]
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	68b9      	ldr	r1, [r7, #8]
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7ff ffc2 	bl	800d73a <ecdh_gen_public_restartable>
 800d7b6:	4603      	mov	r3, r0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <ecdh_init_internal>:
                                             f_rng, p_rng, NULL ) );
}
#endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */

static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
    mbedtls_ecp_group_init( &ctx->grp );
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 f8f3 	bl	800d9b6 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	337c      	adds	r3, #124	; 0x7c
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f7 fcf4 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3388      	adds	r3, #136	; 0x88
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f8d3 	bl	800d98a <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	33ac      	adds	r3, #172	; 0xac
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f8ce 	bl	800d98a <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	33d0      	adds	r3, #208	; 0xd0
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7f7 fce5 	bl	80051c2 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_init( &ctx->rs );
#endif
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
    mbedtls_ecp_point_init( &ctx->Vf  );
    mbedtls_mpi_init( &ctx->_d );
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 800d808:	22e0      	movs	r2, #224	; 0xe0
 800d80a:	2100      	movs	r1, #0
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f006 fef1 	bl	80145f4 <memset>

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	709a      	strb	r2, [r3, #2]
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	701a      	strb	r2, [r3, #0]
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <ecdh_setup_internal>:

static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
                                mbedtls_ecp_group_id grp_id )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d834:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d838:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	78fa      	ldrb	r2, [r7, #3]
 800d83e:	4611      	mov	r1, r2
 800d840:	4618      	mov	r0, r3
 800d842:	f002 ff79 	bl	8010738 <mbedtls_ecp_group_load>
 800d846:	60f8      	str	r0, [r7, #12]
    if( ret != 0 )
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <ecdh_setup_internal+0x2a>
    {
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800d84e:	4b03      	ldr	r3, [pc, #12]	; (800d85c <ecdh_setup_internal+0x34>)
 800d850:	e000      	b.n	800d854 <ecdh_setup_internal+0x2c>
    }

    return( 0 );
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	ffffb180 	.word	0xffffb180

0800d860 <mbedtls_ecdh_setup>:

/*
 * Setup context
 */
int mbedtls_ecdh_setup( mbedtls_ecdh_context *ctx, mbedtls_ecp_group_id grp_id )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
            ctx->var = MBEDTLS_ECDH_VARIANT_EVEREST;
            ctx->grp_id = grp_id;
            return( mbedtls_everest_setup( &ctx->ctx.everest_ecdh, grp_id ) );
#endif
        default:
            ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
            ctx->var = MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	709a      	strb	r2, [r3, #2]
            ctx->grp_id = grp_id;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	78fa      	ldrb	r2, [r7, #3]
 800d87c:	705a      	strb	r2, [r3, #1]
            ecdh_init_internal( &ctx->ctx.mbed_ecdh );
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	3304      	adds	r3, #4
 800d882:	4618      	mov	r0, r3
 800d884:	f7ff ff9c 	bl	800d7c0 <ecdh_init_internal>
            return( ecdh_setup_internal( &ctx->ctx.mbed_ecdh, grp_id ) );
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	3304      	adds	r3, #4
 800d88c:	78fa      	ldrb	r2, [r7, #3]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff ffc9 	bl	800d828 <ecdh_setup_internal>
 800d896:	4603      	mov	r3, r0
    }
#endif
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <ecdh_make_public_internal>:
                                      int (*f_rng)(void *,
                                                   unsigned char *,
                                                   size_t),
                                      void *p_rng,
                                      int restart_enabled )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d8ae:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d8b2:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <ecdh_make_public_internal+0x20>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800d8bc:	4b12      	ldr	r3, [pc, #72]	; (800d908 <ecdh_make_public_internal+0x68>)
 800d8be:	e01e      	b.n	800d8fe <ecdh_make_public_internal+0x5e>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
                                             f_rng, p_rng, rs_ctx ) ) != 0 )
        return( ret );
#else
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800d8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	f7ff ff5e 	bl	800d794 <mbedtls_ecdh_gen_public>
 800d8d8:	6178      	str	r0, [r7, #20]
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <ecdh_make_public_internal+0x44>
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	e00c      	b.n	800d8fe <ecdh_make_public_internal+0x5e>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	9301      	str	r3, [sp, #4]
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	f000 fa22 	bl	800dd40 <mbedtls_ecp_tls_write_point>
 800d8fc:	4603      	mov	r3, r0
                                        buf, blen );
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	ffffb080 	.word	0xffffb080

0800d90c <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af04      	add	r7, sp, #16
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
    int restart_enabled = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
                                       f_rng, p_rng, restart_enabled ) );
#else
    switch( ctx->var )
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	789b      	ldrb	r3, [r3, #2]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d112      	bne.n	800d94c <mbedtls_ecdh_make_public+0x40>
        case MBEDTLS_ECDH_VARIANT_EVEREST:
            return( mbedtls_everest_make_public( &ctx->ctx.everest_ecdh, olen,
                                                 buf, blen, f_rng, p_rng ) );
#endif
        case MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0:
            return( ecdh_make_public_internal( &ctx->ctx.mbed_ecdh, olen,
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	1d18      	adds	r0, r3, #4
                                               ctx->point_format, buf, blen,
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	781b      	ldrb	r3, [r3, #0]
            return( ecdh_make_public_internal( &ctx->ctx.mbed_ecdh, olen,
 800d92e:	461a      	mov	r2, r3
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	9303      	str	r3, [sp, #12]
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	9302      	str	r3, [sp, #8]
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	9301      	str	r3, [sp, #4]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	68b9      	ldr	r1, [r7, #8]
 800d944:	f7ff ffac 	bl	800d8a0 <ecdh_make_public_internal>
 800d948:	4603      	mov	r3, r0
 800d94a:	e000      	b.n	800d94e <mbedtls_ecdh_make_public+0x42>
                                               f_rng, p_rng,
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800d94c:	4b02      	ldr	r3, [pc, #8]	; (800d958 <mbedtls_ecdh_make_public+0x4c>)
    }
#endif
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	ffffb080 	.word	0xffffb080

0800d95c <mbedtls_ecp_get_type>:

/*
 * Get the type of a curve
 */
mbedtls_ecp_curve_type mbedtls_ecp_get_type( const mbedtls_ecp_group *grp )
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <mbedtls_ecp_get_type+0x14>
        return( MBEDTLS_ECP_TYPE_NONE );
 800d96c:	2300      	movs	r3, #0
 800d96e:	e006      	b.n	800d97e <mbedtls_ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <mbedtls_ecp_get_type+0x20>
        return( MBEDTLS_ECP_TYPE_MONTGOMERY );
 800d978:	2302      	movs	r3, #2
 800d97a:	e000      	b.n	800d97e <mbedtls_ecp_get_type+0x22>
    else
        return( MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS );
 800d97c:	2301      	movs	r3, #1
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b082      	sub	sp, #8
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4618      	mov	r0, r3
 800d996:	f7f7 fc14 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	330c      	adds	r3, #12
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f7 fc0f 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3318      	adds	r3, #24
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f7 fc0a 	bl	80051c2 <mbedtls_mpi_init>
}
 800d9ae:	bf00      	nop
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7f7 fbfa 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3310      	adds	r3, #16
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f7 fbf5 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	331c      	adds	r3, #28
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7f7 fbf0 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3328      	adds	r3, #40	; 0x28
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff ffcf 	bl	800d98a <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	334c      	adds	r3, #76	; 0x4c
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7f7 fbe6 	bl	80051c2 <mbedtls_mpi_init>
    grp->pbits = 0;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	65da      	str	r2, [r3, #92]	; 0x5c
    grp->h = 0;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	661a      	str	r2, [r3, #96]	; 0x60
    grp->modp = NULL;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	665a      	str	r2, [r3, #100]	; 0x64
    grp->t_pre = NULL;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	669a      	str	r2, [r3, #104]	; 0x68
    grp->t_post = NULL;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	66da      	str	r2, [r3, #108]	; 0x6c
    grp->t_data = NULL;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	671a      	str	r2, [r3, #112]	; 0x70
    grp->T = NULL;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	675a      	str	r2, [r3, #116]	; 0x74
    grp->T_size = 0;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4618      	mov	r0, r3
 800da46:	f7f7 fbcf 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	330c      	adds	r3, #12
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f7 fbca 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3318      	adds	r3, #24
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f7 fbc5 	bl	80051e8 <mbedtls_mpi_free>
 800da5e:	e000      	b.n	800da62 <mbedtls_ecp_point_free+0x2e>
        return;
 800da60:	bf00      	nop
}
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <ecp_group_is_static_comb_table>:

/*
 * Check that the comb table (grp->T) is static initialized.
 */
static int ecp_group_is_static_comb_table( const mbedtls_ecp_group *grp ) {
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    return grp->T != NULL && grp->T_size == 0;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <ecp_group_is_static_comb_table+0x1c>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <ecp_group_is_static_comb_table+0x1c>
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <ecp_group_is_static_comb_table+0x1e>
 800da84:	2300      	movs	r3, #0
#else
    (void) grp;
    return 0;
#endif
}
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d046      	beq.n	800db2e <mbedtls_ecp_group_free+0x9c>
        return;

    if( grp->h != 1 )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d018      	beq.n	800dada <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3304      	adds	r3, #4
 800daac:	4618      	mov	r0, r3
 800daae:	f7f7 fb9b 	bl	80051e8 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3310      	adds	r3, #16
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f7 fb96 	bl	80051e8 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	331c      	adds	r3, #28
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f7 fb91 	bl	80051e8 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	3328      	adds	r3, #40	; 0x28
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff ffb2 	bl	800da34 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	334c      	adds	r3, #76	; 0x4c
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f7 fb87 	bl	80051e8 <mbedtls_mpi_free>
    }

    if( !ecp_group_is_static_comb_table(grp) && grp->T != NULL )
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff ffc4 	bl	800da68 <ecp_group_is_static_comb_table>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d11e      	bne.n	800db24 <mbedtls_ecp_group_free+0x92>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daea:	2b00      	cmp	r3, #0
 800daec:	d01a      	beq.n	800db24 <mbedtls_ecp_group_free+0x92>
    {
        for( i = 0; i < grp->T_size; i++ )
 800daee:	2300      	movs	r3, #0
 800daf0:	60fb      	str	r3, [r7, #12]
 800daf2:	e00d      	b.n	800db10 <mbedtls_ecp_group_free+0x7e>
            mbedtls_ecp_point_free( &grp->T[i] );
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4613      	mov	r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	440b      	add	r3, r1
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff ff95 	bl	800da34 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3301      	adds	r3, #1
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	429a      	cmp	r2, r3
 800db18:	d3ec      	bcc.n	800daf4 <mbedtls_ecp_group_free+0x62>
        mbedtls_free( grp->T );
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db1e:	4618      	mov	r0, r3
 800db20:	f006 fd52 	bl	80145c8 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800db24:	217c      	movs	r1, #124	; 0x7c
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f005 fe6e 	bl	8013808 <mbedtls_platform_zeroize>
 800db2c:	e000      	b.n	800db30 <mbedtls_ecp_group_free+0x9e>
        return;
 800db2e:	bf00      	nop
}
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800db40:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800db44:	60fb      	str	r3, [r7, #12]
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	4611      	mov	r1, r2
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7f7 fc45 	bl	80053dc <mbedtls_mpi_copy>
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d119      	bne.n	800db8e <mbedtls_ecp_copy+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f103 020c 	add.w	r2, r3, #12
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	330c      	adds	r3, #12
 800db64:	4619      	mov	r1, r3
 800db66:	4610      	mov	r0, r2
 800db68:	f7f7 fc38 	bl	80053dc <mbedtls_mpi_copy>
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10e      	bne.n	800db92 <mbedtls_ecp_copy+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f103 0218 	add.w	r2, r3, #24
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	3318      	adds	r3, #24
 800db7e:	4619      	mov	r1, r3
 800db80:	4610      	mov	r0, r2
 800db82:	f7f7 fc2b 	bl	80053dc <mbedtls_mpi_copy>
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b00      	cmp	r3, #0

cleanup:
 800db8c:	e002      	b.n	800db94 <mbedtls_ecp_copy+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800db8e:	bf00      	nop
 800db90:	e000      	b.n	800db94 <mbedtls_ecp_copy+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800db92:	bf00      	nop
    return( ret );
 800db94:	68fb      	ldr	r3, [r7, #12]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dba6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dbaa:	60fb      	str	r3, [r7, #12]
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2101      	movs	r1, #1
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f7 fdae 	bl	8005712 <mbedtls_mpi_lset>
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d113      	bne.n	800dbe6 <mbedtls_ecp_set_zero+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	330c      	adds	r3, #12
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7f7 fda4 	bl	8005712 <mbedtls_mpi_lset>
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10b      	bne.n	800dbea <mbedtls_ecp_set_zero+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3318      	adds	r3, #24
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7f7 fd9a 	bl	8005712 <mbedtls_mpi_lset>
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0

cleanup:
 800dbe4:	e002      	b.n	800dbec <mbedtls_ecp_set_zero+0x4e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800dbe6:	bf00      	nop
 800dbe8:	e000      	b.n	800dbec <mbedtls_ecp_set_zero+0x4e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800dbea:	bf00      	nop
    return( ret );
 800dbec:	68fb      	ldr	r3, [r7, #12]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
	...

0800dbf8 <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 800dc06:	4b4c      	ldr	r3, [pc, #304]	; (800dd38 <mbedtls_ecp_point_write_binary+0x140>)
 800dc08:	617b      	str	r3, [r7, #20]
    ECP_VALIDATE_RET( olen != NULL );
    ECP_VALIDATE_RET( buf  != NULL );
    ECP_VALIDATE_RET( format == MBEDTLS_ECP_PF_UNCOMPRESSED ||
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    plen = mbedtls_mpi_size( &grp->P );
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f7 feb0 	bl	8005974 <mbedtls_mpi_size>
 800dc14:	6138      	str	r0, [r7, #16]

#if defined(MBEDTLS_ECP_MONTGOMERY_ENABLED)
    (void) format; /* Montgomery curves always use the same point format */
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7ff fea0 	bl	800d95c <mbedtls_ecp_get_type>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d113      	bne.n	800dc4a <mbedtls_ecp_point_write_binary+0x52>
    {
        *olen = plen;
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	601a      	str	r2, [r3, #0]
        if( buflen < *olen )
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d201      	bcs.n	800dc36 <mbedtls_ecp_point_write_binary+0x3e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800dc32:	4b42      	ldr	r3, [pc, #264]	; (800dd3c <mbedtls_ecp_point_write_binary+0x144>)
 800dc34:	e07c      	b.n	800dd30 <mbedtls_ecp_point_write_binary+0x138>

        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary_le( &P->X, buf, plen ) );
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	6a39      	ldr	r1, [r7, #32]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7f7 ff25 	bl	8005a8c <mbedtls_mpi_write_binary_le>
 800dc42:	6178      	str	r0, [r7, #20]
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d16c      	bne.n	800dd24 <mbedtls_ecp_point_write_binary+0x12c>
    }
#endif
#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f7ff fe86 	bl	800d95c <mbedtls_ecp_get_type>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d168      	bne.n	800dd28 <mbedtls_ecp_point_write_binary+0x130>
    {
        /*
         * Common case: P == 0
         */
        if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	3318      	adds	r3, #24
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f8 fadb 	bl	8006218 <mbedtls_mpi_cmp_int>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10c      	bne.n	800dc82 <mbedtls_ecp_point_write_binary+0x8a>
        {
            if( buflen < 1 )
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <mbedtls_ecp_point_write_binary+0x7a>
                return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800dc6e:	4b33      	ldr	r3, [pc, #204]	; (800dd3c <mbedtls_ecp_point_write_binary+0x144>)
 800dc70:	e05e      	b.n	800dd30 <mbedtls_ecp_point_write_binary+0x138>

            buf[0] = 0x00;
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
            *olen = 1;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	601a      	str	r2, [r3, #0]

            return( 0 );
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e056      	b.n	800dd30 <mbedtls_ecp_point_write_binary+0x138>
        }

        if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d128      	bne.n	800dcda <mbedtls_ecp_point_write_binary+0xe2>
        {
            *olen = 2 * plen + 1;
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	601a      	str	r2, [r3, #0]

            if( buflen < *olen )
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d201      	bcs.n	800dca0 <mbedtls_ecp_point_write_binary+0xa8>
                return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800dc9c:	4b27      	ldr	r3, [pc, #156]	; (800dd3c <mbedtls_ecp_point_write_binary+0x144>)
 800dc9e:	e047      	b.n	800dd30 <mbedtls_ecp_point_write_binary+0x138>

            buf[0] = 0x04;
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	2204      	movs	r2, #4
 800dca4:	701a      	strb	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800dca6:	68b8      	ldr	r0, [r7, #8]
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	f7f7 ff4b 	bl	8005b4a <mbedtls_mpi_write_binary>
 800dcb4:	6178      	str	r0, [r7, #20]
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d137      	bne.n	800dd2c <mbedtls_ecp_point_write_binary+0x134>
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f103 000c 	add.w	r0, r3, #12
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	6a3a      	ldr	r2, [r7, #32]
 800dcc8:	4413      	add	r3, r2
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4619      	mov	r1, r3
 800dcce:	f7f7 ff3c 	bl	8005b4a <mbedtls_mpi_write_binary>
 800dcd2:	6178      	str	r0, [r7, #20]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	e029      	b.n	800dd2e <mbedtls_ecp_point_write_binary+0x136>
        }
        else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d123      	bne.n	800dd28 <mbedtls_ecp_point_write_binary+0x130>
        {
            *olen = plen + 1;
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	601a      	str	r2, [r3, #0]

            if( buflen < *olen )
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d201      	bcs.n	800dcf6 <mbedtls_ecp_point_write_binary+0xfe>
                return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800dcf2:	4b12      	ldr	r3, [pc, #72]	; (800dd3c <mbedtls_ecp_point_write_binary+0x144>)
 800dcf4:	e01c      	b.n	800dd30 <mbedtls_ecp_point_write_binary+0x138>

            buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f7 fd39 	bl	8005774 <mbedtls_mpi_get_bit>
 800dd02:	4603      	mov	r3, r0
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	3302      	adds	r3, #2
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	701a      	strb	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	3301      	adds	r3, #1
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	4619      	mov	r1, r3
 800dd18:	f7f7 ff17 	bl	8005b4a <mbedtls_mpi_write_binary>
 800dd1c:	6178      	str	r0, [r7, #20]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b00      	cmp	r3, #0
        }
    }
#endif

cleanup:
 800dd22:	e001      	b.n	800dd28 <mbedtls_ecp_point_write_binary+0x130>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary_le( &P->X, buf, plen ) );
 800dd24:	bf00      	nop
 800dd26:	e002      	b.n	800dd2e <mbedtls_ecp_point_write_binary+0x136>
cleanup:
 800dd28:	bf00      	nop
 800dd2a:	e000      	b.n	800dd2e <mbedtls_ecp_point_write_binary+0x136>
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800dd2c:	bf00      	nop
    return( ret );
 800dd2e:	697b      	ldr	r3, [r7, #20]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	ffffb180 	.word	0xffffb180
 800dd3c:	ffffb100 	.word	0xffffb100

0800dd40 <mbedtls_ecp_tls_write_point>:
 *      } ECPoint;
 */
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af02      	add	r7, sp, #8
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dd4e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dd52:	617b      	str	r3, [r7, #20]
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d101      	bne.n	800dd5e <mbedtls_ecp_tls_write_point+0x1e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800dd5a:	4b11      	ldr	r3, [pc, #68]	; (800dda0 <mbedtls_ecp_tls_write_point+0x60>)
 800dd5c:	e01c      	b.n	800dd98 <mbedtls_ecp_tls_write_point+0x58>

    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	3301      	adds	r3, #1
 800dd62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd64:	3a01      	subs	r2, #1
 800dd66:	9201      	str	r2, [sp, #4]
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	68b9      	ldr	r1, [r7, #8]
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f7ff ff41 	bl	800dbf8 <mbedtls_ecp_point_write_binary>
 800dd76:	6178      	str	r0, [r7, #20]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <mbedtls_ecp_tls_write_point+0x42>
                    olen, buf + 1, blen - 1) ) != 0 )
        return( ret );
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	e00a      	b.n	800dd98 <mbedtls_ecp_tls_write_point+0x58>

    /*
     * write length to the first byte and update total length
     */
    buf[0] = (unsigned char) *olen;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	701a      	strb	r2, [r3, #0]
    ++*olen;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	601a      	str	r2, [r3, #0]

    return( 0 );
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	ffffb080 	.word	0xffffb080

0800dda4 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800ddae:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ddb2:	60fb      	str	r3, [r7, #12]

    if( grp->modp == NULL )
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d108      	bne.n	800ddce <ecp_modp+0x2a>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7fa fd13 	bl	80087f0 <mbedtls_mpi_mod_mpi>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	e050      	b.n	800de70 <ecp_modp+0xcc>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da06      	bge.n	800dde4 <ecp_modp+0x40>
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7f8 fa1d 	bl	8006218 <mbedtls_mpi_cmp_int>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d108      	bne.n	800ddf6 <ecp_modp+0x52>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7f7 fd91 	bl	800590c <mbedtls_mpi_bitlen>
 800ddea:	4602      	mov	r2, r0
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddf0:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d901      	bls.n	800ddfa <ecp_modp+0x56>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800ddf6:	4b20      	ldr	r3, [pc, #128]	; (800de78 <ecp_modp+0xd4>)
 800ddf8:	e03a      	b.n	800de70 <ecp_modp+0xcc>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	4798      	blx	r3
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d12c      	bne.n	800de64 <ecp_modp+0xc0>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800de0a:	e00a      	b.n	800de22 <ecp_modp+0x7e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	3304      	adds	r3, #4
 800de10:	461a      	mov	r2, r3
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7f8 fbc2 	bl	800659e <mbedtls_mpi_add_mpi>
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d122      	bne.n	800de68 <ecp_modp+0xc4>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	da12      	bge.n	800de50 <ecp_modp+0xac>
 800de2a:	2100      	movs	r1, #0
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7f8 f9f3 	bl	8006218 <mbedtls_mpi_cmp_int>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1e9      	bne.n	800de0c <ecp_modp+0x68>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800de38:	e00a      	b.n	800de50 <ecp_modp+0xac>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	3304      	adds	r3, #4
 800de3e:	461a      	mov	r2, r3
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7f8 fb0a 	bl	800645c <mbedtls_mpi_sub_abs>
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10d      	bne.n	800de6c <ecp_modp+0xc8>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	3304      	adds	r3, #4
 800de54:	4619      	mov	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7f8 f8a0 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	daeb      	bge.n	800de3a <ecp_modp+0x96>

cleanup:
 800de62:	e004      	b.n	800de6e <ecp_modp+0xca>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800de64:	bf00      	nop
 800de66:	e002      	b.n	800de6e <ecp_modp+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800de68:	bf00      	nop
 800de6a:	e000      	b.n	800de6e <ecp_modp+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800de6c:	bf00      	nop
    return( ret );
 800de6e:	68fb      	ldr	r3, [r7, #12]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	ffffb080 	.word	0xffffb080

0800de7c <mbedtls_mpi_mul_mod>:

static inline int mbedtls_mpi_mul_mod( const mbedtls_ecp_group *grp,
                                       mbedtls_mpi *X,
                                       const mbedtls_mpi *A,
                                       const mbedtls_mpi *B )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800de8a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800de8e:	617b      	str	r3, [r7, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( X, A, B ) );
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	68b8      	ldr	r0, [r7, #8]
 800de96:	f7fa f808 	bl	8007eaa <mbedtls_mpi_mul_mpi>
 800de9a:	6178      	str	r0, [r7, #20]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10d      	bne.n	800debe <mbedtls_mpi_mul_mod+0x42>
    MOD_MUL( *X );
 800dea2:	68f9      	ldr	r1, [r7, #12]
 800dea4:	68b8      	ldr	r0, [r7, #8]
 800dea6:	f7ff ff7d 	bl	800dda4 <ecp_modp>
 800deaa:	6178      	str	r0, [r7, #20]
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d107      	bne.n	800dec2 <mbedtls_mpi_mul_mod+0x46>
 800deb2:	4b07      	ldr	r3, [pc, #28]	; (800ded0 <mbedtls_mpi_mul_mod+0x54>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	4a05      	ldr	r2, [pc, #20]	; (800ded0 <mbedtls_mpi_mul_mod+0x54>)
 800deba:	6013      	str	r3, [r2, #0]
 800debc:	e002      	b.n	800dec4 <mbedtls_mpi_mul_mod+0x48>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( X, A, B ) );
 800debe:	bf00      	nop
 800dec0:	e000      	b.n	800dec4 <mbedtls_mpi_mul_mod+0x48>
    MOD_MUL( *X );
 800dec2:	bf00      	nop
cleanup:
    return( ret );
 800dec4:	697b      	ldr	r3, [r7, #20]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200022e8 	.word	0x200022e8

0800ded4 <mbedtls_mpi_sub_mod>:
         defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT) ) )
static inline int mbedtls_mpi_sub_mod( const mbedtls_ecp_group *grp,
                                       mbedtls_mpi *X,
                                       const mbedtls_mpi *A,
                                       const mbedtls_mpi *B )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dee2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dee6:	617b      	str	r3, [r7, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( X, A, B ) );
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	68b8      	ldr	r0, [r7, #8]
 800deee:	f7f8 fba0 	bl	8006632 <mbedtls_mpi_sub_mpi>
 800def2:	6178      	str	r0, [r7, #20]
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d117      	bne.n	800df2a <mbedtls_mpi_sub_mod+0x56>
    MOD_SUB( *X );
 800defa:	e00a      	b.n	800df12 <mbedtls_mpi_sub_mod+0x3e>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3304      	adds	r3, #4
 800df00:	461a      	mov	r2, r3
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	68b8      	ldr	r0, [r7, #8]
 800df06:	f7f8 fb4a 	bl	800659e <mbedtls_mpi_add_mpi>
 800df0a:	6178      	str	r0, [r7, #20]
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10d      	bne.n	800df2e <mbedtls_mpi_sub_mod+0x5a>
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	da0b      	bge.n	800df32 <mbedtls_mpi_sub_mod+0x5e>
 800df1a:	2100      	movs	r1, #0
 800df1c:	68b8      	ldr	r0, [r7, #8]
 800df1e:	f7f8 f97b 	bl	8006218 <mbedtls_mpi_cmp_int>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e9      	bne.n	800defc <mbedtls_mpi_sub_mod+0x28>
cleanup:
 800df28:	e003      	b.n	800df32 <mbedtls_mpi_sub_mod+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( X, A, B ) );
 800df2a:	bf00      	nop
 800df2c:	e002      	b.n	800df34 <mbedtls_mpi_sub_mod+0x60>
    MOD_SUB( *X );
 800df2e:	bf00      	nop
 800df30:	e000      	b.n	800df34 <mbedtls_mpi_sub_mod+0x60>
cleanup:
 800df32:	bf00      	nop
    return( ret );
 800df34:	697b      	ldr	r3, [r7, #20]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <mbedtls_mpi_add_mod>:

static inline int mbedtls_mpi_add_mod( const mbedtls_ecp_group *grp,
                                       mbedtls_mpi *X,
                                       const mbedtls_mpi *A,
                                       const mbedtls_mpi *B )
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b086      	sub	sp, #24
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	60b9      	str	r1, [r7, #8]
 800df48:	607a      	str	r2, [r7, #4]
 800df4a:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800df4c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800df50:	617b      	str	r3, [r7, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, A, B ) );
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	68b8      	ldr	r0, [r7, #8]
 800df58:	f7f8 fb21 	bl	800659e <mbedtls_mpi_add_mpi>
 800df5c:	6178      	str	r0, [r7, #20]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d115      	bne.n	800df90 <mbedtls_mpi_add_mod+0x52>
    MOD_ADD( *X );
 800df64:	e00a      	b.n	800df7c <mbedtls_mpi_add_mod+0x3e>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3304      	adds	r3, #4
 800df6a:	461a      	mov	r2, r3
 800df6c:	68b9      	ldr	r1, [r7, #8]
 800df6e:	68b8      	ldr	r0, [r7, #8]
 800df70:	f7f8 fa74 	bl	800645c <mbedtls_mpi_sub_abs>
 800df74:	6178      	str	r0, [r7, #20]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10b      	bne.n	800df94 <mbedtls_mpi_add_mod+0x56>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3304      	adds	r3, #4
 800df80:	4619      	mov	r1, r3
 800df82:	68b8      	ldr	r0, [r7, #8]
 800df84:	f7f8 f80a 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	daeb      	bge.n	800df66 <mbedtls_mpi_add_mod+0x28>
cleanup:
 800df8e:	e002      	b.n	800df96 <mbedtls_mpi_add_mod+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, A, B ) );
 800df90:	bf00      	nop
 800df92:	e000      	b.n	800df96 <mbedtls_mpi_add_mod+0x58>
    MOD_ADD( *X );
 800df94:	bf00      	nop
    return( ret );
 800df96:	697b      	ldr	r3, [r7, #20]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <mbedtls_mpi_shift_l_mod>:
       defined(MBEDTLS_ECP_DOUBLE_JAC_ALT) && \
       defined(MBEDTLS_ECP_ADD_MIXED_ALT) )
static inline int mbedtls_mpi_shift_l_mod( const mbedtls_ecp_group *grp,
                                           mbedtls_mpi *X,
                                           size_t count )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dfac:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dfb0:	617b      	str	r3, [r7, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( X, count ) );
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	68b8      	ldr	r0, [r7, #8]
 800dfb6:	f7f7 fe2c 	bl	8005c12 <mbedtls_mpi_shift_l>
 800dfba:	6178      	str	r0, [r7, #20]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d115      	bne.n	800dfee <mbedtls_mpi_shift_l_mod+0x4e>
    MOD_ADD( *X );
 800dfc2:	e00a      	b.n	800dfda <mbedtls_mpi_shift_l_mod+0x3a>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	461a      	mov	r2, r3
 800dfca:	68b9      	ldr	r1, [r7, #8]
 800dfcc:	68b8      	ldr	r0, [r7, #8]
 800dfce:	f7f8 fa45 	bl	800645c <mbedtls_mpi_sub_abs>
 800dfd2:	6178      	str	r0, [r7, #20]
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10b      	bne.n	800dff2 <mbedtls_mpi_shift_l_mod+0x52>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	4619      	mov	r1, r3
 800dfe0:	68b8      	ldr	r0, [r7, #8]
 800dfe2:	f7f7 ffdb 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	daeb      	bge.n	800dfc4 <mbedtls_mpi_shift_l_mod+0x24>
cleanup:
 800dfec:	e002      	b.n	800dff4 <mbedtls_mpi_shift_l_mod+0x54>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( X, count ) );
 800dfee:	bf00      	nop
 800dff0:	e000      	b.n	800dff4 <mbedtls_mpi_shift_l_mod+0x54>
    MOD_ADD( *X );
 800dff2:	bf00      	nop
    return( ret );
 800dff4:	697b      	ldr	r3, [r7, #20]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b08a      	sub	sp, #40	; 0x28
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3318      	adds	r3, #24
 800e00c:	2100      	movs	r1, #0
 800e00e:	4618      	mov	r0, r3
 800e010:	f7f8 f902 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <ecp_normalize_jac+0x20>
        return( 0 );
 800e01a:	2300      	movs	r3, #0
 800e01c:	e06e      	b.n	800e0fc <ecp_normalize_jac+0xfe>
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e01e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
    mbedtls_mpi Zi, ZZi;
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e024:	f107 0318 	add.w	r3, r7, #24
 800e028:	4618      	mov	r0, r3
 800e02a:	f7f7 f8ca 	bl	80051c2 <mbedtls_mpi_init>
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f7f7 f8c5 	bl	80051c2 <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	f103 0118 	add.w	r1, r3, #24
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	1d1a      	adds	r2, r3, #4
 800e042:	f107 0318 	add.w	r3, r7, #24
 800e046:	4618      	mov	r0, r3
 800e048:	f7fa fe2c 	bl	8008ca4 <mbedtls_mpi_inv_mod>
 800e04c:	6278      	str	r0, [r7, #36]	; 0x24
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	2b00      	cmp	r3, #0
 800e052:	d13f      	bne.n	800e0d4 <ecp_normalize_jac+0xd6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ZZi,     &Zi,        &Zi     ) );
 800e054:	f107 0318 	add.w	r3, r7, #24
 800e058:	f107 0218 	add.w	r2, r7, #24
 800e05c:	f107 010c 	add.w	r1, r7, #12
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7ff ff0b 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e066:	6278      	str	r0, [r7, #36]	; 0x24
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d134      	bne.n	800e0d8 <ecp_normalize_jac+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->X,   &pt->X,     &ZZi    ) );
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	f107 030c 	add.w	r3, r7, #12
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff ff00 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e07c:	6278      	str	r0, [r7, #36]	; 0x24
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d12b      	bne.n	800e0dc <ecp_normalize_jac+0xde>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Y,   &pt->Y,     &ZZi    ) );
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	f103 010c 	add.w	r1, r3, #12
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	f103 020c 	add.w	r2, r3, #12
 800e090:	f107 030c 	add.w	r3, r7, #12
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff fef1 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e09a:	6278      	str	r0, [r7, #36]	; 0x24
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d11e      	bne.n	800e0e0 <ecp_normalize_jac+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Y,   &pt->Y,     &Zi     ) );
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	f103 010c 	add.w	r1, r3, #12
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	f103 020c 	add.w	r2, r3, #12
 800e0ae:	f107 0318 	add.w	r3, r7, #24
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff fee2 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e0b8:	6278      	str	r0, [r7, #36]	; 0x24
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d111      	bne.n	800e0e4 <ecp_normalize_jac+0xe6>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	3318      	adds	r3, #24
 800e0c4:	2101      	movs	r1, #1
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f7 fb23 	bl	8005712 <mbedtls_mpi_lset>
 800e0cc:	6278      	str	r0, [r7, #36]	; 0x24
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d0:	2b00      	cmp	r3, #0

cleanup:
 800e0d2:	e008      	b.n	800e0e6 <ecp_normalize_jac+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800e0d4:	bf00      	nop
 800e0d6:	e006      	b.n	800e0e6 <ecp_normalize_jac+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ZZi,     &Zi,        &Zi     ) );
 800e0d8:	bf00      	nop
 800e0da:	e004      	b.n	800e0e6 <ecp_normalize_jac+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->X,   &pt->X,     &ZZi    ) );
 800e0dc:	bf00      	nop
 800e0de:	e002      	b.n	800e0e6 <ecp_normalize_jac+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Y,   &pt->Y,     &ZZi    ) );
 800e0e0:	bf00      	nop
 800e0e2:	e000      	b.n	800e0e6 <ecp_normalize_jac+0xe8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Y,   &pt->Y,     &Zi     ) );
 800e0e4:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e0e6:	f107 0318 	add.w	r3, r7, #24
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7f7 f87c 	bl	80051e8 <mbedtls_mpi_free>
 800e0f0:	f107 030c 	add.w	r3, r7, #12
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f7 f877 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT) */
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3728      	adds	r7, #40	; 0x28
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b090      	sub	sp, #64	; 0x40
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
    if( T_size < 2 )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d807      	bhi.n	800e126 <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4619      	mov	r1, r3
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff ff6e 	bl	800dffe <ecp_normalize_jac>
 800e122:	4603      	mov	r3, r0
 800e124:	e173      	b.n	800e40e <ecp_normalize_jac_many+0x30a>
#endif

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e126:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800e12c:	210c      	movs	r1, #12
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f006 f81c 	bl	801416c <calloc>
 800e134:	4603      	mov	r3, r0
 800e136:	637b      	str	r3, [r7, #52]	; 0x34
 800e138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <ecp_normalize_jac_many+0x3e>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800e13e:	4bb6      	ldr	r3, [pc, #728]	; (800e418 <ecp_normalize_jac_many+0x314>)
 800e140:	e165      	b.n	800e40e <ecp_normalize_jac_many+0x30a>

    for( i = 0; i < T_size; i++ )
 800e142:	2300      	movs	r3, #0
 800e144:	63bb      	str	r3, [r7, #56]	; 0x38
 800e146:	e00d      	b.n	800e164 <ecp_normalize_jac_many+0x60>
        mbedtls_mpi_init( &c[i] );
 800e148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	461a      	mov	r2, r3
 800e154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e156:	4413      	add	r3, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7f7 f832 	bl	80051c2 <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	3301      	adds	r3, #1
 800e162:	63bb      	str	r3, [r7, #56]	; 0x38
 800e164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d3ed      	bcc.n	800e148 <ecp_normalize_jac_many+0x44>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e16c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e170:	4618      	mov	r0, r3
 800e172:	f7f7 f826 	bl	80051c2 <mbedtls_mpi_init>
 800e176:	f107 031c 	add.w	r3, r7, #28
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f7 f821 	bl	80051c2 <mbedtls_mpi_init>
 800e180:	f107 0310 	add.w	r3, r7, #16
 800e184:	4618      	mov	r0, r3
 800e186:	f7f7 f81c 	bl	80051c2 <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3318      	adds	r3, #24
 800e190:	4619      	mov	r1, r3
 800e192:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e194:	f7f7 f922 	bl	80053dc <mbedtls_mpi_copy>
 800e198:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f040 80f7 	bne.w	800e390 <ecp_normalize_jac_many+0x28c>
    for( i = 1; i < T_size; i++ )
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1a6:	e021      	b.n	800e1ec <ecp_normalize_jac_many+0xe8>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &c[i], &c[i-1], &T[i]->Z ) );
 800e1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b6:	1899      	adds	r1, r3, r2
 800e1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	4413      	add	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	3b0c      	subs	r3, #12
 800e1c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c6:	18d0      	adds	r0, r2, r3
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3318      	adds	r3, #24
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f7ff fe50 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e1dc:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f040 80d7 	bne.w	800e394 <ecp_normalize_jac_many+0x290>
    for( i = 1; i < T_size; i++ )
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d3d9      	bcc.n	800e1a8 <ecp_normalize_jac_many+0xa4>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	4413      	add	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	3b0c      	subs	r3, #12
 800e200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e202:	18d1      	adds	r1, r2, r3
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	1d1a      	adds	r2, r3, #4
 800e208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fa fd49 	bl	8008ca4 <mbedtls_mpi_inv_mod>
 800e212:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e216:	2b00      	cmp	r3, #0
 800e218:	f040 80be 	bne.w	800e398 <ecp_normalize_jac_many+0x294>

    for( i = T_size - 1; ; i-- )
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3b01      	subs	r3, #1
 800e220:	63bb      	str	r3, [r7, #56]	; 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10c      	bne.n	800e242 <ecp_normalize_jac_many+0x13e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800e228:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e22c:	f107 031c 	add.w	r3, r7, #28
 800e230:	4611      	mov	r1, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7f7 f8d2 	bl	80053dc <mbedtls_mpi_copy>
 800e238:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d026      	beq.n	800e28e <ecp_normalize_jac_many+0x18a>
 800e240:	e0bd      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &Zi, &u, &c[i-1]  ) );
 800e242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e244:	4613      	mov	r3, r2
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	4413      	add	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	3b0c      	subs	r3, #12
 800e24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e250:	4413      	add	r3, r2
 800e252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e256:	f107 011c 	add.w	r1, r7, #28
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f7ff fe0e 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e260:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e264:	2b00      	cmp	r3, #0
 800e266:	f040 8099 	bne.w	800e39c <ecp_normalize_jac_many+0x298>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &u,  &u, &T[i]->Z ) );
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	4413      	add	r3, r2
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3318      	adds	r3, #24
 800e276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e27a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7ff fdfc 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e284:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f040 8089 	bne.w	800e3a0 <ecp_normalize_jac_many+0x29c>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ZZi,     &Zi,      &Zi  ) );
 800e28e:	f107 031c 	add.w	r3, r7, #28
 800e292:	f107 021c 	add.w	r2, r7, #28
 800e296:	f107 0110 	add.w	r1, r7, #16
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7ff fdee 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e2a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d17d      	bne.n	800e3a4 <ecp_normalize_jac_many+0x2a0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->X, &T[i]->X, &ZZi ) );
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	f107 0310 	add.w	r3, r7, #16
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f7ff fdd9 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e2ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d16a      	bne.n	800e3a8 <ecp_normalize_jac_many+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->Y, &T[i]->Y, &ZZi ) );
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	4413      	add	r3, r2
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f103 010c 	add.w	r1, r3, #12
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f103 020c 	add.w	r2, r3, #12
 800e2ee:	f107 0310 	add.w	r3, r7, #16
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff fdc2 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e2f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d155      	bne.n	800e3ac <ecp_normalize_jac_many+0x2a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->Y, &T[i]->Y, &Zi  ) );
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	4413      	add	r3, r2
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f103 010c 	add.w	r1, r3, #12
 800e30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	4413      	add	r3, r2
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f103 020c 	add.w	r2, r3, #12
 800e31c:	f107 031c 	add.w	r3, r7, #28
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff fdab 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e326:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d140      	bne.n	800e3b0 <ecp_normalize_jac_many+0x2ac>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	4413      	add	r3, r2
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	461a      	mov	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7f6 ffba 	bl	80052ba <mbedtls_mpi_shrink>
 800e346:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d132      	bne.n	800e3b4 <ecp_normalize_jac_many+0x2b0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	4413      	add	r3, r2
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f103 020c 	add.w	r2, r3, #12
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f7f6 ffa9 	bl	80052ba <mbedtls_mpi_shrink>
 800e368:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d123      	bne.n	800e3b8 <ecp_normalize_jac_many+0x2b4>
        mbedtls_mpi_free( &T[i]->Z );
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	4413      	add	r3, r2
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3318      	adds	r3, #24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f6 ff33 	bl	80051e8 <mbedtls_mpi_free>

        if( i == 0 )
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	2b00      	cmp	r3, #0
 800e386:	d019      	beq.n	800e3bc <ecp_normalize_jac_many+0x2b8>
    for( i = T_size - 1; ; i-- )
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	3b01      	subs	r3, #1
 800e38c:	63bb      	str	r3, [r7, #56]	; 0x38
        if( i == 0 ) {
 800e38e:	e748      	b.n	800e222 <ecp_normalize_jac_many+0x11e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800e390:	bf00      	nop
 800e392:	e014      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &c[i], &c[i-1], &T[i]->Z ) );
 800e394:	bf00      	nop
 800e396:	e012      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800e398:	bf00      	nop
 800e39a:	e010      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &Zi, &u, &c[i-1]  ) );
 800e39c:	bf00      	nop
 800e39e:	e00e      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &u,  &u, &T[i]->Z ) );
 800e3a0:	bf00      	nop
 800e3a2:	e00c      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ZZi,     &Zi,      &Zi  ) );
 800e3a4:	bf00      	nop
 800e3a6:	e00a      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->X, &T[i]->X, &ZZi ) );
 800e3a8:	bf00      	nop
 800e3aa:	e008      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->Y, &T[i]->Y, &ZZi ) );
 800e3ac:	bf00      	nop
 800e3ae:	e006      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T[i]->Y, &T[i]->Y, &Zi  ) );
 800e3b0:	bf00      	nop
 800e3b2:	e004      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800e3b4:	bf00      	nop
 800e3b6:	e002      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800e3b8:	bf00      	nop
 800e3ba:	e000      	b.n	800e3be <ecp_normalize_jac_many+0x2ba>
            break;
 800e3bc:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e3be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7f6 ff10 	bl	80051e8 <mbedtls_mpi_free>
 800e3c8:	f107 031c 	add.w	r3, r7, #28
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f6 ff0b 	bl	80051e8 <mbedtls_mpi_free>
 800e3d2:	f107 0310 	add.w	r3, r7, #16
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7f6 ff06 	bl	80051e8 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e3dc:	2300      	movs	r3, #0
 800e3de:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3e0:	e00d      	b.n	800e3fe <ecp_normalize_jac_many+0x2fa>
        mbedtls_mpi_free( &c[i] );
 800e3e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f0:	4413      	add	r3, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f6 fef8 	bl	80051e8 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	429a      	cmp	r2, r3
 800e404:	d3ed      	bcc.n	800e3e2 <ecp_normalize_jac_many+0x2de>
    mbedtls_free( c );
 800e406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e408:	f006 f8de 	bl	80145c8 <free>

    return( ret );
 800e40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT) */
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3740      	adds	r7, #64	; 0x40
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	ffffb280 	.word	0xffffb280

0800e41c <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b08a      	sub	sp, #40	; 0x28
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	4613      	mov	r3, r2
 800e428:	71fb      	strb	r3, [r7, #7]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e42a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e42e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800e430:	f107 0314 	add.w	r3, r7, #20
 800e434:	4618      	mov	r0, r3
 800e436:	f7f6 fec4 	bl	80051c2 <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	1d19      	adds	r1, r3, #4
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	f103 020c 	add.w	r2, r3, #12
 800e444:	f107 0314 	add.w	r3, r7, #20
 800e448:	4618      	mov	r0, r3
 800e44a:	f7f8 f8f2 	bl	8006632 <mbedtls_mpi_sub_mpi>
 800e44e:	6278      	str	r0, [r7, #36]	; 0x24
 800e450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e452:	2b00      	cmp	r3, #0
 800e454:	d11e      	bne.n	800e494 <ecp_safe_invert_jac+0x78>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	330c      	adds	r3, #12
 800e45a:	2100      	movs	r1, #0
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f7 fedb 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	bf14      	ite	ne
 800e468:	2301      	movne	r3, #1
 800e46a:	2300      	moveq	r3, #0
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f103 000c 	add.w	r0, r3, #12
 800e478:	79fa      	ldrb	r2, [r7, #7]
 800e47a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e47e:	4013      	ands	r3, r2
 800e480:	b2da      	uxtb	r2, r3
 800e482:	f107 0314 	add.w	r3, r7, #20
 800e486:	4619      	mov	r1, r3
 800e488:	f7f7 f863 	bl	8005552 <mbedtls_mpi_safe_cond_assign>
 800e48c:	6278      	str	r0, [r7, #36]	; 0x24
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	2b00      	cmp	r3, #0

cleanup:
 800e492:	e000      	b.n	800e496 <ecp_safe_invert_jac+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e494:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800e496:	f107 0314 	add.w	r3, r7, #20
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7f6 fea4 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3728      	adds	r7, #40	; 0x28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b092      	sub	sp, #72	; 0x48
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
#if defined(MBEDTLS_SELF_TEST)
    dbl_count++;
 800e4b8:	4b4c      	ldr	r3, [pc, #304]	; (800e5ec <ecp_double_jac+0x140>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	4a4b      	ldr	r2, [pc, #300]	; (800e5ec <ecp_double_jac+0x140>)
 800e4c0:	6013      	str	r3, [r2, #0]
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e4c2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e4c6:	647b      	str	r3, [r7, #68]	; 0x44
    mbedtls_mpi M, S, T, U;

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e4c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7f6 fe78 	bl	80051c2 <mbedtls_mpi_init>
 800e4d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7f6 fe73 	bl	80051c2 <mbedtls_mpi_init>
 800e4dc:	f107 0320 	add.w	r3, r7, #32
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f6 fe6e 	bl	80051c2 <mbedtls_mpi_init>
 800e4e6:	f107 0314 	add.w	r3, r7, #20
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f6 fe69 	bl	80051c2 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	699b      	ldr	r3, [r3, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d15e      	bne.n	800e5b6 <ecp_double_jac+0x10a>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->Z,  &P->Z   ) );
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f103 0218 	add.w	r2, r3, #24
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	3318      	adds	r3, #24
 800e502:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7ff fcb8 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e50c:	6478      	str	r0, [r7, #68]	; 0x44
 800e50e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e510:	2b00      	cmp	r3, #0
 800e512:	f040 81a4 	bne.w	800e85e <ecp_double_jac+0x3b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &T,  &P->X,  &S      ) );
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e51c:	f107 0120 	add.w	r1, r7, #32
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f7ff fd0c 	bl	800df3e <mbedtls_mpi_add_mod>
 800e526:	6478      	str	r0, [r7, #68]	; 0x44
 800e528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f040 8199 	bne.w	800e862 <ecp_double_jac+0x3b6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &U,  &P->X,  &S      ) );
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e536:	f107 0114 	add.w	r1, r7, #20
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fcca 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800e540:	6478      	str	r0, [r7, #68]	; 0x44
 800e542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e544:	2b00      	cmp	r3, #0
 800e546:	f040 818e 	bne.w	800e866 <ecp_double_jac+0x3ba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &T,     &U      ) );
 800e54a:	f107 0314 	add.w	r3, r7, #20
 800e54e:	f107 0220 	add.w	r2, r7, #32
 800e552:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f7ff fc90 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e55c:	6478      	str	r0, [r7, #68]	; 0x44
 800e55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e560:	2b00      	cmp	r3, #0
 800e562:	f040 8182 	bne.w	800e86a <ecp_double_jac+0x3be>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800e566:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e56a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e56e:	2203      	movs	r2, #3
 800e570:	4618      	mov	r0, r3
 800e572:	f7f9 fd62 	bl	800803a <mbedtls_mpi_mul_int>
 800e576:	6478      	str	r0, [r7, #68]	; 0x44
 800e578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f040 8177 	bne.w	800e86e <ecp_double_jac+0x3c2>
 800e580:	e00d      	b.n	800e59e <ecp_double_jac+0xf2>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	1d1a      	adds	r2, r3, #4
 800e586:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e58a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e58e:	4618      	mov	r0, r3
 800e590:	f7f7 ff64 	bl	800645c <mbedtls_mpi_sub_abs>
 800e594:	6478      	str	r0, [r7, #68]	; 0x44
 800e596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f040 816a 	bne.w	800e872 <ecp_double_jac+0x3c6>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	1d1a      	adds	r2, r3, #4
 800e5a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7f7 fcf7 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dae6      	bge.n	800e582 <ecp_double_jac+0xd6>
 800e5b4:	e077      	b.n	800e6a6 <ecp_double_jac+0x1fa>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->X,  &P->X   ) );
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f7ff fc5c 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e5c4:	6478      	str	r0, [r7, #68]	; 0x44
 800e5c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f040 8154 	bne.w	800e876 <ecp_double_jac+0x3ca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800e5ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e5d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7f9 fd2e 	bl	800803a <mbedtls_mpi_mul_int>
 800e5de:	6478      	str	r0, [r7, #68]	; 0x44
 800e5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 8149 	bne.w	800e87a <ecp_double_jac+0x3ce>
 800e5e8:	e010      	b.n	800e60c <ecp_double_jac+0x160>
 800e5ea:	bf00      	nop
 800e5ec:	200022e4 	.word	0x200022e4
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	1d1a      	adds	r2, r3, #4
 800e5f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e5f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f7 ff2d 	bl	800645c <mbedtls_mpi_sub_abs>
 800e602:	6478      	str	r0, [r7, #68]	; 0x44
 800e604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e606:	2b00      	cmp	r3, #0
 800e608:	f040 8139 	bne.w	800e87e <ecp_double_jac+0x3d2>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	1d1a      	adds	r2, r3, #4
 800e610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e614:	4611      	mov	r1, r2
 800e616:	4618      	mov	r0, r3
 800e618:	f7f7 fcc0 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dae6      	bge.n	800e5f0 <ecp_double_jac+0x144>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3310      	adds	r3, #16
 800e626:	2100      	movs	r1, #0
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f7 fdf5 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d038      	beq.n	800e6a6 <ecp_double_jac+0x1fa>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->Z,  &P->Z   ) );
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f103 0218 	add.w	r2, r3, #24
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3318      	adds	r3, #24
 800e63e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff fc1a 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e648:	6478      	str	r0, [r7, #68]	; 0x44
 800e64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f040 8118 	bne.w	800e882 <ecp_double_jac+0x3d6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &S,     &S      ) );
 800e652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e656:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e65a:	f107 0120 	add.w	r1, r7, #32
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7ff fc0c 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e664:	6478      	str	r0, [r7, #68]	; 0x44
 800e666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f040 810c 	bne.w	800e886 <ecp_double_jac+0x3da>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &T,     &grp->A ) );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3310      	adds	r3, #16
 800e672:	f107 0220 	add.w	r2, r7, #32
 800e676:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f7ff fbfe 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e680:	6478      	str	r0, [r7, #68]	; 0x44
 800e682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e684:	2b00      	cmp	r3, #0
 800e686:	f040 8100 	bne.w	800e88a <ecp_double_jac+0x3de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &M,  &M,     &S      ) );
 800e68a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e68e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7ff fc51 	bl	800df3e <mbedtls_mpi_add_mod>
 800e69c:	6478      	str	r0, [r7, #68]	; 0x44
 800e69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f040 80f4 	bne.w	800e88e <ecp_double_jac+0x3e2>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &P->Y,  &P->Y   ) );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f103 020c 	add.w	r2, r3, #12
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	330c      	adds	r3, #12
 800e6b0:	f107 0120 	add.w	r1, r7, #32
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f7ff fbe1 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e6ba:	6478      	str	r0, [r7, #68]	; 0x44
 800e6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f040 80e7 	bne.w	800e892 <ecp_double_jac+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &T,  1               ) );
 800e6c4:	f107 0320 	add.w	r3, r7, #32
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f7ff fc67 	bl	800dfa0 <mbedtls_mpi_shift_l_mod>
 800e6d2:	6478      	str	r0, [r7, #68]	; 0x44
 800e6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f040 80dd 	bne.w	800e896 <ecp_double_jac+0x3ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->X,  &T      ) );
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	f107 0320 	add.w	r3, r7, #32
 800e6e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7ff fbc8 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e6ec:	6478      	str	r0, [r7, #68]	; 0x44
 800e6ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f040 80d2 	bne.w	800e89a <ecp_double_jac+0x3ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &S,  1               ) );
 800e6f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f7ff fc4e 	bl	800dfa0 <mbedtls_mpi_shift_l_mod>
 800e704:	6478      	str	r0, [r7, #68]	; 0x44
 800e706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f040 80c8 	bne.w	800e89e <ecp_double_jac+0x3f2>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &U,  &T,     &T      ) );
 800e70e:	f107 0320 	add.w	r3, r7, #32
 800e712:	f107 0220 	add.w	r2, r7, #32
 800e716:	f107 0114 	add.w	r1, r7, #20
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7ff fbae 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e720:	6478      	str	r0, [r7, #68]	; 0x44
 800e722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e724:	2b00      	cmp	r3, #0
 800e726:	f040 80bc 	bne.w	800e8a2 <ecp_double_jac+0x3f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &U,  1               ) );
 800e72a:	f107 0314 	add.w	r3, r7, #20
 800e72e:	2201      	movs	r2, #1
 800e730:	4619      	mov	r1, r3
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7ff fc34 	bl	800dfa0 <mbedtls_mpi_shift_l_mod>
 800e738:	6478      	str	r0, [r7, #68]	; 0x44
 800e73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 80b2 	bne.w	800e8a6 <ecp_double_jac+0x3fa>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &M,     &M      ) );
 800e742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e746:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e74a:	f107 0120 	add.w	r1, r7, #32
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff fb94 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e754:	6478      	str	r0, [r7, #68]	; 0x44
 800e756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f040 80a6 	bne.w	800e8aa <ecp_double_jac+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T,  &T,     &S      ) );
 800e75e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e762:	f107 0220 	add.w	r2, r7, #32
 800e766:	f107 0120 	add.w	r1, r7, #32
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff fbb2 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800e770:	6478      	str	r0, [r7, #68]	; 0x44
 800e772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e774:	2b00      	cmp	r3, #0
 800e776:	f040 809a 	bne.w	800e8ae <ecp_double_jac+0x402>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T,  &T,     &S      ) );
 800e77a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e77e:	f107 0220 	add.w	r2, r7, #32
 800e782:	f107 0120 	add.w	r1, r7, #32
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7ff fba4 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800e78c:	6478      	str	r0, [r7, #68]	; 0x44
 800e78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 808e 	bne.w	800e8b2 <ecp_double_jac+0x406>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S,  &S,     &T      ) );
 800e796:	f107 0320 	add.w	r3, r7, #32
 800e79a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e79e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff fb96 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800e7a8:	6478      	str	r0, [r7, #68]	; 0x44
 800e7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f040 8082 	bne.w	800e8b6 <ecp_double_jac+0x40a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &S,     &M      ) );
 800e7b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e7ba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff fb5c 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e7c4:	6478      	str	r0, [r7, #68]	; 0x44
 800e7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d176      	bne.n	800e8ba <ecp_double_jac+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S,  &S,     &U      ) );
 800e7cc:	f107 0314 	add.w	r3, r7, #20
 800e7d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e7d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7ff fb7b 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800e7de:	6478      	str	r0, [r7, #68]	; 0x44
 800e7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d16b      	bne.n	800e8be <ecp_double_jac+0x412>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &U,  &P->Y,  &P->Z   ) );
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f103 020c 	add.w	r2, r3, #12
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3318      	adds	r3, #24
 800e7f0:	f107 0114 	add.w	r1, r7, #20
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7ff fb41 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e7fa:	6478      	str	r0, [r7, #68]	; 0x44
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d15f      	bne.n	800e8c2 <ecp_double_jac+0x416>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &U,  1               ) );
 800e802:	f107 0314 	add.w	r3, r7, #20
 800e806:	2201      	movs	r2, #1
 800e808:	4619      	mov	r1, r3
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f7ff fbc8 	bl	800dfa0 <mbedtls_mpi_shift_l_mod>
 800e810:	6478      	str	r0, [r7, #68]	; 0x44
 800e812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e814:	2b00      	cmp	r3, #0
 800e816:	d156      	bne.n	800e8c6 <ecp_double_jac+0x41a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	f107 0220 	add.w	r2, r7, #32
 800e81e:	4611      	mov	r1, r2
 800e820:	4618      	mov	r0, r3
 800e822:	f7f6 fddb 	bl	80053dc <mbedtls_mpi_copy>
 800e826:	6478      	str	r0, [r7, #68]	; 0x44
 800e828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d14d      	bne.n	800e8ca <ecp_double_jac+0x41e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	330c      	adds	r3, #12
 800e832:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e836:	4611      	mov	r1, r2
 800e838:	4618      	mov	r0, r3
 800e83a:	f7f6 fdcf 	bl	80053dc <mbedtls_mpi_copy>
 800e83e:	6478      	str	r0, [r7, #68]	; 0x44
 800e840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e842:	2b00      	cmp	r3, #0
 800e844:	d143      	bne.n	800e8ce <ecp_double_jac+0x422>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	3318      	adds	r3, #24
 800e84a:	f107 0214 	add.w	r2, r7, #20
 800e84e:	4611      	mov	r1, r2
 800e850:	4618      	mov	r0, r3
 800e852:	f7f6 fdc3 	bl	80053dc <mbedtls_mpi_copy>
 800e856:	6478      	str	r0, [r7, #68]	; 0x44
 800e858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e85a:	2b00      	cmp	r3, #0

cleanup:
 800e85c:	e038      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->Z,  &P->Z   ) );
 800e85e:	bf00      	nop
 800e860:	e036      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &T,  &P->X,  &S      ) );
 800e862:	bf00      	nop
 800e864:	e034      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &U,  &P->X,  &S      ) );
 800e866:	bf00      	nop
 800e868:	e032      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &T,     &U      ) );
 800e86a:	bf00      	nop
 800e86c:	e030      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800e86e:	bf00      	nop
 800e870:	e02e      	b.n	800e8d0 <ecp_double_jac+0x424>
 800e872:	bf00      	nop
 800e874:	e02c      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->X,  &P->X   ) );
 800e876:	bf00      	nop
 800e878:	e02a      	b.n	800e8d0 <ecp_double_jac+0x424>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800e87a:	bf00      	nop
 800e87c:	e028      	b.n	800e8d0 <ecp_double_jac+0x424>
 800e87e:	bf00      	nop
 800e880:	e026      	b.n	800e8d0 <ecp_double_jac+0x424>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->Z,  &P->Z   ) );
 800e882:	bf00      	nop
 800e884:	e024      	b.n	800e8d0 <ecp_double_jac+0x424>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &S,     &S      ) );
 800e886:	bf00      	nop
 800e888:	e022      	b.n	800e8d0 <ecp_double_jac+0x424>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &T,     &grp->A ) );
 800e88a:	bf00      	nop
 800e88c:	e020      	b.n	800e8d0 <ecp_double_jac+0x424>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &M,  &M,     &S      ) );
 800e88e:	bf00      	nop
 800e890:	e01e      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &P->Y,  &P->Y   ) );
 800e892:	bf00      	nop
 800e894:	e01c      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &T,  1               ) );
 800e896:	bf00      	nop
 800e898:	e01a      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &P->X,  &T      ) );
 800e89a:	bf00      	nop
 800e89c:	e018      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &S,  1               ) );
 800e89e:	bf00      	nop
 800e8a0:	e016      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &U,  &T,     &T      ) );
 800e8a2:	bf00      	nop
 800e8a4:	e014      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &U,  1               ) );
 800e8a6:	bf00      	nop
 800e8a8:	e012      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T,  &M,     &M      ) );
 800e8aa:	bf00      	nop
 800e8ac:	e010      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T,  &T,     &S      ) );
 800e8ae:	bf00      	nop
 800e8b0:	e00e      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T,  &T,     &S      ) );
 800e8b2:	bf00      	nop
 800e8b4:	e00c      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S,  &S,     &T      ) );
 800e8b6:	bf00      	nop
 800e8b8:	e00a      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S,  &S,     &M      ) );
 800e8ba:	bf00      	nop
 800e8bc:	e008      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S,  &S,     &U      ) );
 800e8be:	bf00      	nop
 800e8c0:	e006      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &U,  &P->Y,  &P->Z   ) );
 800e8c2:	bf00      	nop
 800e8c4:	e004      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &U,  1               ) );
 800e8c6:	bf00      	nop
 800e8c8:	e002      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800e8ca:	bf00      	nop
 800e8cc:	e000      	b.n	800e8d0 <ecp_double_jac+0x424>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800e8ce:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800e8d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f6 fc87 	bl	80051e8 <mbedtls_mpi_free>
 800e8da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7f6 fc82 	bl	80051e8 <mbedtls_mpi_free>
 800e8e4:	f107 0320 	add.w	r3, r7, #32
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f6 fc7d 	bl	80051e8 <mbedtls_mpi_free>
 800e8ee:	f107 0314 	add.w	r3, r7, #20
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f6 fc78 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800e8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_DOUBLE_JAC_ALT) */
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3748      	adds	r7, #72	; 0x48
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop

0800e904 <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b09a      	sub	sp, #104	; 0x68
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_SELF_TEST)
    add_count++;
 800e912:	4b66      	ldr	r3, [pc, #408]	; (800eaac <ecp_add_mixed+0x1a8>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3301      	adds	r3, #1
 800e918:	4a64      	ldr	r2, [pc, #400]	; (800eaac <ecp_add_mixed+0x1a8>)
 800e91a:	6013      	str	r3, [r2, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_ADD_MIXED_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e91c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e920:	667b      	str	r3, [r7, #100]	; 0x64
    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3318      	adds	r3, #24
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f7f7 fc75 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d105      	bne.n	800e940 <ecp_add_mixed+0x3c>
        return( mbedtls_ecp_copy( R, Q ) );
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	68b8      	ldr	r0, [r7, #8]
 800e938:	f7ff f8fd 	bl	800db36 <mbedtls_ecp_copy>
 800e93c:	4603      	mov	r3, r0
 800e93e:	e1d6      	b.n	800ecee <ecp_add_mixed+0x3ea>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	6a1b      	ldr	r3, [r3, #32]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00e      	beq.n	800e966 <ecp_add_mixed+0x62>
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	3318      	adds	r3, #24
 800e94c:	2100      	movs	r1, #0
 800e94e:	4618      	mov	r0, r3
 800e950:	f7f7 fc62 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d105      	bne.n	800e966 <ecp_add_mixed+0x62>
        return( mbedtls_ecp_copy( R, P ) );
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	68b8      	ldr	r0, [r7, #8]
 800e95e:	f7ff f8ea 	bl	800db36 <mbedtls_ecp_copy>
 800e962:	4603      	mov	r3, r0
 800e964:	e1c3      	b.n	800ecee <ecp_add_mixed+0x3ea>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00a      	beq.n	800e984 <ecp_add_mixed+0x80>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	3318      	adds	r3, #24
 800e972:	2101      	movs	r1, #1
 800e974:	4618      	mov	r0, r3
 800e976:	f7f7 fc4f 	bl	8006218 <mbedtls_mpi_cmp_int>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <ecp_add_mixed+0x80>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e980:	4b4b      	ldr	r3, [pc, #300]	; (800eab0 <ecp_add_mixed+0x1ac>)
 800e982:	e1b4      	b.n	800ecee <ecp_add_mixed+0x3ea>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800e984:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e988:	4618      	mov	r0, r3
 800e98a:	f7f6 fc1a 	bl	80051c2 <mbedtls_mpi_init>
 800e98e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e992:	4618      	mov	r0, r3
 800e994:	f7f6 fc15 	bl	80051c2 <mbedtls_mpi_init>
 800e998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7f6 fc10 	bl	80051c2 <mbedtls_mpi_init>
 800e9a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7f6 fc0b 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800e9ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7f6 fc06 	bl	80051c2 <mbedtls_mpi_init>
 800e9b6:	f107 031c 	add.w	r3, r7, #28
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7f6 fc01 	bl	80051c2 <mbedtls_mpi_init>
 800e9c0:	f107 0310 	add.w	r3, r7, #16
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f6 fbfc 	bl	80051c2 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T1,  &P->Z,  &P->Z ) );
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f103 0218 	add.w	r2, r3, #24
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	3318      	adds	r3, #24
 800e9d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff fa4f 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e9de:	6678      	str	r0, [r7, #100]	; 0x64
 800e9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 8136 	bne.w	800ec54 <ecp_add_mixed+0x350>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T2,  &T1,    &P->Z ) );
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3318      	adds	r3, #24
 800e9ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e9f0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff fa41 	bl	800de7c <mbedtls_mpi_mul_mod>
 800e9fa:	6678      	str	r0, [r7, #100]	; 0x64
 800e9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f040 812a 	bne.w	800ec58 <ecp_add_mixed+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T1,  &T1,    &Q->X ) );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea0a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7ff fa34 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ea14:	6678      	str	r0, [r7, #100]	; 0x64
 800ea16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f040 811f 	bne.w	800ec5c <ecp_add_mixed+0x358>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T2,  &T2,    &Q->Y ) );
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	330c      	adds	r3, #12
 800ea22:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ea26:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f7ff fa26 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ea30:	6678      	str	r0, [r7, #100]	; 0x64
 800ea32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f040 8113 	bne.w	800ec60 <ecp_add_mixed+0x35c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T1,  &T1,    &P->X ) );
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ea40:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f7ff fa45 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800ea4a:	6678      	str	r0, [r7, #100]	; 0x64
 800ea4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f040 8108 	bne.w	800ec64 <ecp_add_mixed+0x360>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T2,  &T2,    &P->Y ) );
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	330c      	adds	r3, #12
 800ea58:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ea5c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff fa37 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800ea66:	6678      	str	r0, [r7, #100]	; 0x64
 800ea68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f040 80fc 	bne.w	800ec68 <ecp_add_mixed+0x364>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800ea70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f7 fbce 	bl	8006218 <mbedtls_mpi_cmp_int>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d118      	bne.n	800eab4 <ecp_add_mixed+0x1b0>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800ea82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ea86:	2100      	movs	r1, #0
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7f7 fbc5 	bl	8006218 <mbedtls_mpi_cmp_int>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <ecp_add_mixed+0x19e>
        {
            ret = ecp_double_jac( grp, R, P );
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	68b9      	ldr	r1, [r7, #8]
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff fd07 	bl	800e4ac <ecp_double_jac>
 800ea9e:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800eaa0:	e101      	b.n	800eca6 <ecp_add_mixed+0x3a2>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800eaa2:	68b8      	ldr	r0, [r7, #8]
 800eaa4:	f7ff f87b 	bl	800db9e <mbedtls_ecp_set_zero>
 800eaa8:	6678      	str	r0, [r7, #100]	; 0x64
            goto cleanup;
 800eaaa:	e0fc      	b.n	800eca6 <ecp_add_mixed+0x3a2>
 800eaac:	200022e0 	.word	0x200022e0
 800eab0:	ffffb080 	.word	0xffffb080
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &Z,   &P->Z,  &T1   ) );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f103 0218 	add.w	r2, r3, #24
 800eaba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eabe:	f107 0110 	add.w	r1, r7, #16
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7ff f9da 	bl	800de7c <mbedtls_mpi_mul_mod>
 800eac8:	6678      	str	r0, [r7, #100]	; 0x64
 800eaca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f040 80cd 	bne.w	800ec6c <ecp_add_mixed+0x368>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T1,    &T1   ) );
 800ead2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ead6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eada:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f7ff f9cc 	bl	800de7c <mbedtls_mpi_mul_mod>
 800eae4:	6678      	str	r0, [r7, #100]	; 0x64
 800eae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f040 80c1 	bne.w	800ec70 <ecp_add_mixed+0x36c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T4,  &T3,    &T1   ) );
 800eaee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eaf2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eaf6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f7ff f9be 	bl	800de7c <mbedtls_mpi_mul_mod>
 800eb00:	6678      	str	r0, [r7, #100]	; 0x64
 800eb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f040 80b5 	bne.w	800ec74 <ecp_add_mixed+0x370>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T3,    &P->X ) );
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eb10:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7ff f9b1 	bl	800de7c <mbedtls_mpi_mul_mod>
 800eb1a:	6678      	str	r0, [r7, #100]	; 0x64
 800eb1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f040 80aa 	bne.w	800ec78 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &T3 ) );
 800eb24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800eb28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb2c:	4611      	mov	r1, r2
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f6 fc54 	bl	80053dc <mbedtls_mpi_copy>
 800eb34:	6678      	str	r0, [r7, #100]	; 0x64
 800eb36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	f040 809f 	bne.w	800ec7c <ecp_add_mixed+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &T1,  1     ) );
 800eb3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb42:	2201      	movs	r2, #1
 800eb44:	4619      	mov	r1, r3
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f7ff fa2a 	bl	800dfa0 <mbedtls_mpi_shift_l_mod>
 800eb4c:	6678      	str	r0, [r7, #100]	; 0x64
 800eb4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f040 8095 	bne.w	800ec80 <ecp_add_mixed+0x37c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &X,   &T2,    &T2   ) );
 800eb56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eb5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800eb5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f7ff f98a 	bl	800de7c <mbedtls_mpi_mul_mod>
 800eb68:	6678      	str	r0, [r7, #100]	; 0x64
 800eb6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 8089 	bne.w	800ec84 <ecp_add_mixed+0x380>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &X,   &X,     &T1   ) );
 800eb72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f7ff f9a8 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800eb84:	6678      	str	r0, [r7, #100]	; 0x64
 800eb86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d17d      	bne.n	800ec88 <ecp_add_mixed+0x384>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &X,   &X,     &T4   ) );
 800eb8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f7ff f99b 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800eb9e:	6678      	str	r0, [r7, #100]	; 0x64
 800eba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d172      	bne.n	800ec8c <ecp_add_mixed+0x388>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T3,  &T3,    &X    ) );
 800eba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebaa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ebae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7ff f98e 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800ebb8:	6678      	str	r0, [r7, #100]	; 0x64
 800ebba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d167      	bne.n	800ec90 <ecp_add_mixed+0x38c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T3,    &T2   ) );
 800ebc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ebc4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ebc8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ebcc:	68f8      	ldr	r0, [r7, #12]
 800ebce:	f7ff f955 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ebd2:	6678      	str	r0, [r7, #100]	; 0x64
 800ebd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d15c      	bne.n	800ec94 <ecp_add_mixed+0x390>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T4,  &T4,    &P->Y ) );
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	330c      	adds	r3, #12
 800ebde:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ebe2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7ff f948 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ebec:	6678      	str	r0, [r7, #100]	; 0x64
 800ebee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d151      	bne.n	800ec98 <ecp_add_mixed+0x394>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &Y,   &T3,    &T4   ) );
 800ebf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ebfc:	f107 011c 	add.w	r1, r7, #28
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7ff f967 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800ec06:	6678      	str	r0, [r7, #100]	; 0x64
 800ec08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d146      	bne.n	800ec9c <ecp_add_mixed+0x398>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec14:	4611      	mov	r1, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f6 fbe0 	bl	80053dc <mbedtls_mpi_copy>
 800ec1c:	6678      	str	r0, [r7, #100]	; 0x64
 800ec1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d13d      	bne.n	800eca0 <ecp_add_mixed+0x39c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	330c      	adds	r3, #12
 800ec28:	f107 021c 	add.w	r2, r7, #28
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f6 fbd4 	bl	80053dc <mbedtls_mpi_copy>
 800ec34:	6678      	str	r0, [r7, #100]	; 0x64
 800ec36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d133      	bne.n	800eca4 <ecp_add_mixed+0x3a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	3318      	adds	r3, #24
 800ec40:	f107 0210 	add.w	r2, r7, #16
 800ec44:	4611      	mov	r1, r2
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f6 fbc8 	bl	80053dc <mbedtls_mpi_copy>
 800ec4c:	6678      	str	r0, [r7, #100]	; 0x64
 800ec4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec50:	2b00      	cmp	r3, #0

cleanup:
 800ec52:	e028      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T1,  &P->Z,  &P->Z ) );
 800ec54:	bf00      	nop
 800ec56:	e026      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T2,  &T1,    &P->Z ) );
 800ec58:	bf00      	nop
 800ec5a:	e024      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T1,  &T1,    &Q->X ) );
 800ec5c:	bf00      	nop
 800ec5e:	e022      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T2,  &T2,    &Q->Y ) );
 800ec60:	bf00      	nop
 800ec62:	e020      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T1,  &T1,    &P->X ) );
 800ec64:	bf00      	nop
 800ec66:	e01e      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T2,  &T2,    &P->Y ) );
 800ec68:	bf00      	nop
 800ec6a:	e01c      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &Z,   &P->Z,  &T1   ) );
 800ec6c:	bf00      	nop
 800ec6e:	e01a      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T1,    &T1   ) );
 800ec70:	bf00      	nop
 800ec72:	e018      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T4,  &T3,    &T1   ) );
 800ec74:	bf00      	nop
 800ec76:	e016      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T3,    &P->X ) );
 800ec78:	bf00      	nop
 800ec7a:	e014      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &T3 ) );
 800ec7c:	bf00      	nop
 800ec7e:	e012      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l_mod( grp, &T1,  1     ) );
 800ec80:	bf00      	nop
 800ec82:	e010      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &X,   &T2,    &T2   ) );
 800ec84:	bf00      	nop
 800ec86:	e00e      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &X,   &X,     &T1   ) );
 800ec88:	bf00      	nop
 800ec8a:	e00c      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &X,   &X,     &T4   ) );
 800ec8c:	bf00      	nop
 800ec8e:	e00a      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &T3,  &T3,    &X    ) );
 800ec90:	bf00      	nop
 800ec92:	e008      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T3,  &T3,    &T2   ) );
 800ec94:	bf00      	nop
 800ec96:	e006      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &T4,  &T4,    &P->Y ) );
 800ec98:	bf00      	nop
 800ec9a:	e004      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &Y,   &T3,    &T4   ) );
 800ec9c:	bf00      	nop
 800ec9e:	e002      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800eca0:	bf00      	nop
 800eca2:	e000      	b.n	800eca6 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800eca4:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800eca6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7f6 fa9c 	bl	80051e8 <mbedtls_mpi_free>
 800ecb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7f6 fa97 	bl	80051e8 <mbedtls_mpi_free>
 800ecba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f6 fa92 	bl	80051e8 <mbedtls_mpi_free>
 800ecc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7f6 fa8d 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800ecce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7f6 fa88 	bl	80051e8 <mbedtls_mpi_free>
 800ecd8:	f107 031c 	add.w	r3, r7, #28
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7f6 fa83 	bl	80051e8 <mbedtls_mpi_free>
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f6 fa7e 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800ecec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_ADD_MIXED_ALT) */
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3768      	adds	r7, #104	; 0x68
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop

0800ecf8 <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08e      	sub	sp, #56	; 0x38
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
 800ed04:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800ed06:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ed0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi l, ll;

    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800ed0c:	f107 0320 	add.w	r3, r7, #32
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7f6 fa56 	bl	80051c2 <mbedtls_mpi_init>
 800ed16:	f107 0314 	add.w	r3, r7, #20
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f6 fa51 	bl	80051c2 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    MBEDTLS_MPI_CHK( mbedtls_mpi_random( &l, 2, &grp->P, f_rng, p_rng ) );
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	1d1a      	adds	r2, r3, #4
 800ed24:	f107 0020 	add.w	r0, r7, #32
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	9300      	str	r3, [sp, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2102      	movs	r1, #2
 800ed30:	f7f9 ff11 	bl	8008b56 <mbedtls_mpi_random>
 800ed34:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d142      	bne.n	800edc2 <ecp_randomize_jac+0xca>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Z,   &pt->Z,     &l  ) );
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	f103 0118 	add.w	r1, r3, #24
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	f103 0218 	add.w	r2, r3, #24
 800ed48:	f107 0320 	add.w	r3, r7, #32
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff f895 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ed52:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d135      	bne.n	800edc6 <ecp_randomize_jac+0xce>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ll,      &l,         &l  ) );
 800ed5a:	f107 0320 	add.w	r3, r7, #32
 800ed5e:	f107 0220 	add.w	r2, r7, #32
 800ed62:	f107 0114 	add.w	r1, r7, #20
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7ff f888 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ed6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d12a      	bne.n	800edca <ecp_randomize_jac+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->X,   &pt->X,     &ll ) );
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f7ff f87d 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ed82:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d121      	bne.n	800edce <ecp_randomize_jac+0xd6>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ll,      &ll,        &l  ) );
 800ed8a:	f107 0320 	add.w	r3, r7, #32
 800ed8e:	f107 0214 	add.w	r2, r7, #20
 800ed92:	f107 0114 	add.w	r1, r7, #20
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff f870 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ed9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d116      	bne.n	800edd2 <ecp_randomize_jac+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Y,   &pt->Y,     &ll ) );
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f103 010c 	add.w	r1, r3, #12
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f103 020c 	add.w	r2, r3, #12
 800edb0:	f107 0314 	add.w	r3, r7, #20
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f7ff f861 	bl	800de7c <mbedtls_mpi_mul_mod>
 800edba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	2b00      	cmp	r3, #0

cleanup:
 800edc0:	e008      	b.n	800edd4 <ecp_randomize_jac+0xdc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_random( &l, 2, &grp->P, f_rng, p_rng ) );
 800edc2:	bf00      	nop
 800edc4:	e006      	b.n	800edd4 <ecp_randomize_jac+0xdc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->Z,   &pt->Z,     &l  ) );
 800edc6:	bf00      	nop
 800edc8:	e004      	b.n	800edd4 <ecp_randomize_jac+0xdc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ll,      &l,         &l  ) );
 800edca:	bf00      	nop
 800edcc:	e002      	b.n	800edd4 <ecp_randomize_jac+0xdc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &pt->X,   &pt->X,     &ll ) );
 800edce:	bf00      	nop
 800edd0:	e000      	b.n	800edd4 <ecp_randomize_jac+0xdc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &ll,      &ll,        &l  ) );
 800edd2:	bf00      	nop
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800edd4:	f107 0320 	add.w	r3, r7, #32
 800edd8:	4618      	mov	r0, r3
 800edda:	f7f6 fa05 	bl	80051e8 <mbedtls_mpi_free>
 800edde:	f107 0314 	add.w	r3, r7, #20
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7f6 fa00 	bl	80051e8 <mbedtls_mpi_free>

    if( ret == MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 800ede8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edea:	f113 0f0e 	cmn.w	r3, #14
 800edee:	d101      	bne.n	800edf4 <ecp_randomize_jac+0xfc>
        ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 800edf0:	4b03      	ldr	r3, [pc, #12]	; (800ee00 <ecp_randomize_jac+0x108>)
 800edf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return( ret );
 800edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT) */
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3730      	adds	r7, #48	; 0x30
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	ffffb300 	.word	0xffffb300

0800ee04 <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	603b      	str	r3, [r7, #0]
 800ee10:	4613      	mov	r3, r2
 800ee12:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	3301      	adds	r3, #1
 800ee18:	461a      	mov	r2, r3
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f005 fbe9 	bl	80145f4 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800ee22:	2300      	movs	r3, #0
 800ee24:	61fb      	str	r3, [r7, #28]
 800ee26:	e027      	b.n	800ee78 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800ee28:	2300      	movs	r3, #0
 800ee2a:	61bb      	str	r3, [r7, #24]
 800ee2c:	e01d      	b.n	800ee6a <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	69ba      	ldr	r2, [r7, #24]
 800ee32:	fb02 f203 	mul.w	r2, r2, r3
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	4413      	add	r3, r2
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	6838      	ldr	r0, [r7, #0]
 800ee3e:	f7f6 fc99 	bl	8005774 <mbedtls_mpi_get_bit>
 800ee42:	4602      	mov	r2, r0
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	fa02 f103 	lsl.w	r1, r2, r3
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	4413      	add	r3, r2
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b25a      	sxtb	r2, r3
 800ee54:	b24b      	sxtb	r3, r1
 800ee56:	4313      	orrs	r3, r2
 800ee58:	b259      	sxtb	r1, r3
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	4413      	add	r3, r2
 800ee60:	b2ca      	uxtb	r2, r1
 800ee62:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	3301      	adds	r3, #1
 800ee68:	61bb      	str	r3, [r7, #24]
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	69ba      	ldr	r2, [r7, #24]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d3dd      	bcc.n	800ee2e <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	3301      	adds	r3, #1
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	69fa      	ldr	r2, [r7, #28]
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d3d3      	bcc.n	800ee28 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800ee84:	2301      	movs	r3, #1
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e05f      	b.n	800ef4a <ecp_comb_recode_core+0x146>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800ee8a:	68fa      	ldr	r2, [r7, #12]
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	4413      	add	r3, r2
 800ee90:	781a      	ldrb	r2, [r3, #0]
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	4013      	ands	r3, r2
 800ee96:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	7819      	ldrb	r1, [r3, #0]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	4413      	add	r3, r2
 800eea6:	7dfa      	ldrb	r2, [r7, #23]
 800eea8:	404a      	eors	r2, r1
 800eeaa:	b2d2      	uxtb	r2, r2
 800eeac:	701a      	strb	r2, [r3, #0]
        c = cc;
 800eeae:	7dbb      	ldrb	r3, [r7, #22]
 800eeb0:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	f003 0301 	and.w	r3, r3, #1
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	bf0c      	ite	eq
 800eec2:	2301      	moveq	r3, #1
 800eec4:	2300      	movne	r3, #0
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	4413      	add	r3, r2
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	b25a      	sxtb	r2, r3
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	68f9      	ldr	r1, [r7, #12]
 800eeda:	440b      	add	r3, r1
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	7d79      	ldrb	r1, [r7, #21]
 800eee0:	fb11 f303 	smulbb	r3, r1, r3
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	b25b      	sxtb	r3, r3
 800eee8:	4013      	ands	r3, r2
 800eeea:	b25a      	sxtb	r2, r3
 800eeec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	b25b      	sxtb	r3, r3
 800eef4:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	4413      	add	r3, r2
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	b25a      	sxtb	r2, r3
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	3b01      	subs	r3, #1
 800ef04:	68f9      	ldr	r1, [r7, #12]
 800ef06:	440b      	add	r3, r1
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	7d79      	ldrb	r1, [r7, #21]
 800ef0c:	fb11 f303 	smulbb	r3, r1, r3
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	b25b      	sxtb	r3, r3
 800ef14:	4053      	eors	r3, r2
 800ef16:	b259      	sxtb	r1, r3
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	b2ca      	uxtb	r2, r1
 800ef20:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	b25a      	sxtb	r2, r3
 800ef2e:	7d7b      	ldrb	r3, [r7, #21]
 800ef30:	01db      	lsls	r3, r3, #7
 800ef32:	b25b      	sxtb	r3, r3
 800ef34:	4313      	orrs	r3, r2
 800ef36:	b259      	sxtb	r1, r3
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	4413      	add	r3, r2
 800ef40:	b2ca      	uxtb	r2, r1
 800ef42:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	3301      	adds	r3, #1
 800ef48:	61fb      	str	r3, [r7, #28]
 800ef4a:	69fa      	ldr	r2, [r7, #28]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d99b      	bls.n	800ee8a <ecp_comb_recode_core+0x86>
    }
}
 800ef52:	bf00      	nop
 800ef54:	bf00      	nop
 800ef56:	3720      	adds	r7, #32
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b090      	sub	sp, #64	; 0x40
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
 800ef68:	70fb      	strb	r3, [r7, #3]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800ef6a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    unsigned char i;
    size_t j = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	637b      	str	r3, [r7, #52]	; 0x34
    const unsigned char T_size = 1U << ( w - 1 );
 800ef74:	78fb      	ldrb	r3, [r7, #3]
 800ef76:	3b01      	subs	r3, #1
 800ef78:	2201      	movs	r2, #1
 800ef7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800ef82:	6879      	ldr	r1, [r7, #4]
 800ef84:	68b8      	ldr	r0, [r7, #8]
 800ef86:	f7fe fdd6 	bl	800db36 <mbedtls_ecp_copy>
 800ef8a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ef8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 80dc 	bne.w	800f14c <ecp_precompute_comb+0x1f0>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	637b      	str	r3, [r7, #52]	; 0x34

    for( ; j < d * ( w - 1 ); j++ )
 800ef98:	e03e      	b.n	800f018 <ecp_precompute_comb+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800ef9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa2:	2201      	movs	r2, #1
 800efa4:	fa02 f303 	lsl.w	r3, r2, r3
 800efa8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cur = T + i;
 800efac:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800efb0:	4613      	mov	r3, r2
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	4413      	add	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	461a      	mov	r2, r3
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	4413      	add	r3, r2
 800efbe:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( j % d == 0 )
 800efc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efc4:	fbb3 f2f2 	udiv	r2, r3, r2
 800efc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800efca:	fb01 f202 	mul.w	r2, r1, r2
 800efce:	1a9b      	subs	r3, r3, r2
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d114      	bne.n	800effe <ecp_precompute_comb+0xa2>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800efd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800efd8:	085b      	lsrs	r3, r3, #1
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	4613      	mov	r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	4413      	add	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	461a      	mov	r2, r3
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	4413      	add	r3, r2
 800efec:	4619      	mov	r1, r3
 800efee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff0:	f7fe fda1 	bl	800db36 <mbedtls_ecp_copy>
 800eff4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800eff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f040 80a9 	bne.w	800f150 <ecp_precompute_comb+0x1f4>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800effe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7ff fa52 	bl	800e4ac <ecp_double_jac>
 800f008:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f040 80a1 	bne.w	800f154 <ecp_precompute_comb+0x1f8>
    for( ; j < d * ( w - 1 ); j++ )
 800f012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f014:	3301      	adds	r3, #1
 800f016:	637b      	str	r3, [r7, #52]	; 0x34
 800f018:	78fb      	ldrb	r3, [r7, #3]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	461a      	mov	r2, r3
 800f01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f020:	fb03 f302 	mul.w	r3, r3, r2
 800f024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f026:	429a      	cmp	r2, r3
 800f028:	d3b7      	bcc.n	800ef9a <ecp_precompute_comb+0x3e>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	637b      	str	r3, [r7, #52]	; 0x34
    for( i = 1; i < T_size; i <<= 1 )
 800f02e:	2301      	movs	r3, #1
 800f030:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f034:	e016      	b.n	800f064 <ecp_precompute_comb+0x108>
        TT[j++] = T + i;
 800f036:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f03a:	4613      	mov	r3, r2
 800f03c:	00db      	lsls	r3, r3, #3
 800f03e:	4413      	add	r3, r2
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	4619      	mov	r1, r3
 800f044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	637a      	str	r2, [r7, #52]	; 0x34
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	440a      	add	r2, r1
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f054:	440b      	add	r3, r1
 800f056:	f843 2c30 	str.w	r2, [r3, #-48]
    for( i = 1; i < T_size; i <<= 1 )
 800f05a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f05e:	005b      	lsls	r3, r3, #1
 800f060:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f064:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d3e2      	bcc.n	800f036 <ecp_precompute_comb+0xda>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800f070:	f107 0310 	add.w	r3, r7, #16
 800f074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f076:	4619      	mov	r1, r3
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7ff f843 	bl	800e104 <ecp_normalize_jac_many>
 800f07e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f082:	2b00      	cmp	r3, #0
 800f084:	d168      	bne.n	800f158 <ecp_precompute_comb+0x1fc>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800f086:	2301      	movs	r3, #1
 800f088:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f08c:	e031      	b.n	800f0f2 <ecp_precompute_comb+0x196>
    {
        j = i;
 800f08e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f092:	637b      	str	r3, [r7, #52]	; 0x34
        while( j-- )
 800f094:	e023      	b.n	800f0de <ecp_precompute_comb+0x182>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800f096:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09c:	441a      	add	r2, r3
 800f09e:	4613      	mov	r3, r2
 800f0a0:	00db      	lsls	r3, r3, #3
 800f0a2:	4413      	add	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	1899      	adds	r1, r3, r2
 800f0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	00db      	lsls	r3, r3, #3
 800f0b2:	4413      	add	r3, r2
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	1898      	adds	r0, r3, r2
 800f0bc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	4413      	add	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f7ff fc17 	bl	800e904 <ecp_add_mixed>
 800f0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d13e      	bne.n	800f15c <ecp_precompute_comb+0x200>
        while( j-- )
 800f0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e0:	1e5a      	subs	r2, r3, #1
 800f0e2:	637a      	str	r2, [r7, #52]	; 0x34
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1d6      	bne.n	800f096 <ecp_precompute_comb+0x13a>
    for( i = 1; i < T_size; i <<= 1 )
 800f0e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f0f2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f0f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d3c7      	bcc.n	800f08e <ecp_precompute_comb+0x132>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800f0fe:	2300      	movs	r3, #0
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
 800f102:	e012      	b.n	800f12a <ecp_precompute_comb+0x1ce>
        TT[j] = T + j + 1;
 800f104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f106:	1c5a      	adds	r2, r3, #1
 800f108:	4613      	mov	r3, r2
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	4413      	add	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	461a      	mov	r2, r3
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	441a      	add	r2, r3
 800f116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f11e:	440b      	add	r3, r1
 800f120:	f843 2c30 	str.w	r2, [r3, #-48]
    for( j = 0; j + 1 < T_size; j++ )
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	3301      	adds	r3, #1
 800f128:	637b      	str	r3, [r7, #52]	; 0x34
 800f12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12c:	1c5a      	adds	r2, r3, #1
 800f12e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f132:	429a      	cmp	r2, r3
 800f134:	d3e6      	bcc.n	800f104 <ecp_precompute_comb+0x1a8>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800f136:	f107 0310 	add.w	r3, r7, #16
 800f13a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f13c:	4619      	mov	r1, r3
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f7fe ffe0 	bl	800e104 <ecp_normalize_jac_many>
 800f144:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f148:	2b00      	cmp	r3, #0

cleanup:
 800f14a:	e008      	b.n	800f15e <ecp_precompute_comb+0x202>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800f14c:	bf00      	nop
 800f14e:	e006      	b.n	800f15e <ecp_precompute_comb+0x202>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800f150:	bf00      	nop
 800f152:	e004      	b.n	800f15e <ecp_precompute_comb+0x202>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800f154:	bf00      	nop
 800f156:	e002      	b.n	800f15e <ecp_precompute_comb+0x202>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800f158:	bf00      	nop
 800f15a:	e000      	b.n	800f15e <ecp_precompute_comb+0x202>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800f15c:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800f15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f160:	4618      	mov	r0, r3
 800f162:	3740      	adds	r7, #64	; 0x40
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
 800f174:	70fb      	strb	r3, [r7, #3]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f176:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f17a:	617b      	str	r3, [r7, #20]
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800f17c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f180:	085b      	lsrs	r3, r3, #1
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f188:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800f18a:	2300      	movs	r3, #0
 800f18c:	74fb      	strb	r3, [r7, #19]
 800f18e:	e035      	b.n	800f1fc <ecp_select_comb+0x94>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800f190:	68b8      	ldr	r0, [r7, #8]
 800f192:	7cfa      	ldrb	r2, [r7, #19]
 800f194:	4613      	mov	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	4413      	add	r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	461a      	mov	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	7cfa      	ldrb	r2, [r7, #19]
 800f1a6:	7cbb      	ldrb	r3, [r7, #18]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	bf0c      	ite	eq
 800f1ac:	2301      	moveq	r3, #1
 800f1ae:	2300      	movne	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f7f6 f9cd 	bl	8005552 <mbedtls_mpi_safe_cond_assign>
 800f1b8:	6178      	str	r0, [r7, #20]
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d12e      	bne.n	800f21e <ecp_select_comb+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f103 000c 	add.w	r0, r3, #12
 800f1c6:	7cfa      	ldrb	r2, [r7, #19]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	00db      	lsls	r3, r3, #3
 800f1cc:	4413      	add	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f103 010c 	add.w	r1, r3, #12
 800f1da:	7cfa      	ldrb	r2, [r7, #19]
 800f1dc:	7cbb      	ldrb	r3, [r7, #18]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	bf0c      	ite	eq
 800f1e2:	2301      	moveq	r3, #1
 800f1e4:	2300      	movne	r3, #0
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	f7f6 f9b2 	bl	8005552 <mbedtls_mpi_safe_cond_assign>
 800f1ee:	6178      	str	r0, [r7, #20]
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d115      	bne.n	800f222 <ecp_select_comb+0xba>
    for( j = 0; j < T_size; j++ )
 800f1f6:	7cfb      	ldrb	r3, [r7, #19]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	74fb      	strb	r3, [r7, #19]
 800f1fc:	7cfa      	ldrb	r2, [r7, #19]
 800f1fe:	78fb      	ldrb	r3, [r7, #3]
 800f200:	429a      	cmp	r2, r3
 800f202:	d3c5      	bcc.n	800f190 <ecp_select_comb+0x28>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800f204:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f208:	09db      	lsrs	r3, r3, #7
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	461a      	mov	r2, r3
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7ff f903 	bl	800e41c <ecp_safe_invert_jac>
 800f216:	6178      	str	r0, [r7, #20]
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	2b00      	cmp	r3, #0

cleanup:
 800f21c:	e002      	b.n	800f224 <ecp_select_comb+0xbc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800f21e:	bf00      	nop
 800f220:	e000      	b.n	800f224 <ecp_select_comb+0xbc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800f222:	bf00      	nop
    return( ret );
 800f224:	697b      	ldr	r3, [r7, #20]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b092      	sub	sp, #72	; 0x48
 800f232:	af02      	add	r7, sp, #8
 800f234:	60f8      	str	r0, [r7, #12]
 800f236:	60b9      	str	r1, [r7, #8]
 800f238:	607a      	str	r2, [r7, #4]
 800f23a:	70fb      	strb	r3, [r7, #3]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f23c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f240:	63fb      	str	r3, [r7, #60]	; 0x3c
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800f242:	f107 0314 	add.w	r3, r7, #20
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fb9f 	bl	800d98a <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800f24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f24e:	63bb      	str	r3, [r7, #56]	; 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800f250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	78fa      	ldrb	r2, [r7, #3]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	4613      	mov	r3, r2
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	68b9      	ldr	r1, [r7, #8]
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f7ff ff80 	bl	800f168 <ecp_select_comb>
 800f268:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d143      	bne.n	800f2f8 <ecp_mul_comb_core+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	3318      	adds	r3, #24
 800f274:	2101      	movs	r1, #1
 800f276:	4618      	mov	r0, r3
 800f278:	f7f6 fa4b 	bl	8005712 <mbedtls_mpi_lset>
 800f27c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f280:	2b00      	cmp	r3, #0
 800f282:	d13b      	bne.n	800f2fc <ecp_mul_comb_core+0xce>
        if( f_rng != 0 )
 800f284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f286:	2b00      	cmp	r3, #0
 800f288:	d032      	beq.n	800f2f0 <ecp_mul_comb_core+0xc2>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800f28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f28c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f28e:	68b9      	ldr	r1, [r7, #8]
 800f290:	68f8      	ldr	r0, [r7, #12]
 800f292:	f7ff fd31 	bl	800ecf8 <ecp_randomize_jac>
 800f296:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d130      	bne.n	800f300 <ecp_mul_comb_core+0xd2>
    }

    while( i != 0 )
 800f29e:	e027      	b.n	800f2f0 <ecp_mul_comb_core+0xc2>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800f2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	63bb      	str	r3, [r7, #56]	; 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	68b9      	ldr	r1, [r7, #8]
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff f8fe 	bl	800e4ac <ecp_double_jac>
 800f2b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d125      	bne.n	800f304 <ecp_mul_comb_core+0xd6>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800f2b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2bc:	4413      	add	r3, r2
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	78fa      	ldrb	r2, [r7, #3]
 800f2c2:	f107 0114 	add.w	r1, r7, #20
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7ff ff4b 	bl	800f168 <ecp_select_comb>
 800f2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d116      	bne.n	800f308 <ecp_mul_comb_core+0xda>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800f2da:	f107 0314 	add.w	r3, r7, #20
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	68b9      	ldr	r1, [r7, #8]
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7ff fb0e 	bl	800e904 <ecp_add_mixed>
 800f2e8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10d      	bne.n	800f30c <ecp_mul_comb_core+0xde>
    while( i != 0 )
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1d4      	bne.n	800f2a0 <ecp_mul_comb_core+0x72>
    }

cleanup:
 800f2f6:	e00a      	b.n	800f30e <ecp_mul_comb_core+0xe0>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800f2f8:	bf00      	nop
 800f2fa:	e008      	b.n	800f30e <ecp_mul_comb_core+0xe0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800f2fc:	bf00      	nop
 800f2fe:	e006      	b.n	800f30e <ecp_mul_comb_core+0xe0>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800f300:	bf00      	nop
 800f302:	e004      	b.n	800f30e <ecp_mul_comb_core+0xe0>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800f304:	bf00      	nop
 800f306:	e002      	b.n	800f30e <ecp_mul_comb_core+0xe0>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800f308:	bf00      	nop
 800f30a:	e000      	b.n	800f30e <ecp_mul_comb_core+0xe0>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800f30c:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800f30e:	f107 0314 	add.w	r3, r7, #20
 800f312:	4618      	mov	r0, r3
 800f314:	f7fe fb8e 	bl	800da34 <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800f318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3740      	adds	r7, #64	; 0x40
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08c      	sub	sp, #48	; 0x30
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f332:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f336:	62fb      	str	r3, [r7, #44]	; 0x2c
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800f338:	f107 0320 	add.w	r3, r7, #32
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7f5 ff40 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4618      	mov	r0, r3
 800f348:	f7f5 ff3b 	bl	80051c2 <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	334c      	adds	r3, #76	; 0x4c
 800f350:	2100      	movs	r1, #0
 800f352:	4618      	mov	r0, r3
 800f354:	f7f6 fa0e 	bl	8005774 <mbedtls_mpi_get_bit>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d001      	beq.n	800f362 <ecp_comb_recode_scalar+0x3e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f35e:	4b28      	ldr	r3, [pc, #160]	; (800f400 <ecp_comb_recode_scalar+0xdc>)
 800f360:	e049      	b.n	800f3f6 <ecp_comb_recode_scalar+0xd2>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800f362:	2100      	movs	r1, #0
 800f364:	68b8      	ldr	r0, [r7, #8]
 800f366:	f7f6 fa05 	bl	8005774 <mbedtls_mpi_get_bit>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	bf0c      	ite	eq
 800f370:	2301      	moveq	r3, #1
 800f372:	2300      	movne	r3, #0
 800f374:	b2db      	uxtb	r3, r3
 800f376:	461a      	mov	r2, r3
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800f37c:	f107 0320 	add.w	r3, r7, #32
 800f380:	68b9      	ldr	r1, [r7, #8]
 800f382:	4618      	mov	r0, r3
 800f384:	f7f6 f82a 	bl	80053dc <mbedtls_mpi_copy>
 800f388:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d122      	bne.n	800f3d6 <ecp_comb_recode_scalar+0xb2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800f396:	f107 0314 	add.w	r3, r7, #20
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f7 f948 	bl	8006632 <mbedtls_mpi_sub_mpi>
 800f3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d117      	bne.n	800f3da <ecp_comb_recode_scalar+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800f3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ac:	781a      	ldrb	r2, [r3, #0]
 800f3ae:	f107 0114 	add.w	r1, r7, #20
 800f3b2:	f107 0320 	add.w	r3, r7, #32
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7f6 f8cb 	bl	8005552 <mbedtls_mpi_safe_cond_assign>
 800f3bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10c      	bne.n	800f3de <ecp_comb_recode_scalar+0xba>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800f3c4:	f107 0320 	add.w	r3, r7, #32
 800f3c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f3cc:	6839      	ldr	r1, [r7, #0]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fd18 	bl	800ee04 <ecp_comb_recode_core>
 800f3d4:	e004      	b.n	800f3e0 <ecp_comb_recode_scalar+0xbc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800f3d6:	bf00      	nop
 800f3d8:	e002      	b.n	800f3e0 <ecp_comb_recode_scalar+0xbc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800f3da:	bf00      	nop
 800f3dc:	e000      	b.n	800f3e0 <ecp_comb_recode_scalar+0xbc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800f3de:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &mm );
 800f3e0:	f107 0314 	add.w	r3, r7, #20
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7f5 feff 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800f3ea:	f107 0320 	add.w	r3, r7, #32
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7f5 fefa 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3730      	adds	r7, #48	; 0x30
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	ffffb080 	.word	0xffffb080

0800f404 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800f404:	b590      	push	{r4, r7, lr}
 800f406:	b0cf      	sub	sp, #316	; 0x13c
 800f408:	af06      	add	r7, sp, #24
 800f40a:	f107 040c 	add.w	r4, r7, #12
 800f40e:	6020      	str	r0, [r4, #0]
 800f410:	f107 0008 	add.w	r0, r7, #8
 800f414:	6001      	str	r1, [r0, #0]
 800f416:	1d39      	adds	r1, r7, #4
 800f418:	600a      	str	r2, [r1, #0]
 800f41a:	463a      	mov	r2, r7
 800f41c:	6013      	str	r3, [r2, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f41e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800f426:	f107 0308 	add.w	r3, r7, #8
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800f430:	f107 0210 	add.w	r2, r7, #16
 800f434:	1d39      	adds	r1, r7, #4
 800f436:	f107 000c 	add.w	r0, r7, #12
 800f43a:	f207 1317 	addw	r3, r7, #279	; 0x117
 800f43e:	9301      	str	r3, [sp, #4]
 800f440:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f44a:	6809      	ldr	r1, [r1, #0]
 800f44c:	6800      	ldr	r0, [r0, #0]
 800f44e:	f7ff ff69 	bl	800f324 <ecp_comb_recode_scalar>
 800f452:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800f456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d151      	bne.n	800f502 <ecp_mul_comb_after_precomp+0xfe>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800f45e:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
 800f462:	463a      	mov	r2, r7
 800f464:	f107 000c 	add.w	r0, r7, #12
 800f468:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f46c:	9304      	str	r3, [sp, #16]
 800f46e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f472:	9303      	str	r3, [sp, #12]
 800f474:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800f478:	9302      	str	r3, [sp, #8]
 800f47a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	f107 0310 	add.w	r3, r7, #16
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	460b      	mov	r3, r1
 800f488:	6812      	ldr	r2, [r2, #0]
 800f48a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f48e:	6800      	ldr	r0, [r0, #0]
 800f490:	f7ff fecd 	bl	800f22e <ecp_mul_comb_core>
 800f494:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800f498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d132      	bne.n	800f506 <ecp_mul_comb_after_precomp+0x102>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800f4a0:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800f4a4:	f107 030c 	add.w	r3, r7, #12
 800f4a8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	f7fe ffb5 	bl	800e41c <ecp_safe_invert_jac>
 800f4b2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800f4b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d125      	bne.n	800f50a <ecp_mul_comb_after_precomp+0x106>
     * [1] https://eprint.iacr.org/2003/191
     * [2] https://eprint.iacr.org/2020/055
     *
     * Avoid the leak by randomizing coordinates before we normalize them.
     */
    if( f_rng != 0 )
 800f4be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d010      	beq.n	800f4e8 <ecp_mul_comb_after_precomp+0xe4>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, RR, f_rng, p_rng ) );
 800f4c6:	f107 000c 	add.w	r0, r7, #12
 800f4ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f4ce:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800f4d2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f4d6:	6800      	ldr	r0, [r0, #0]
 800f4d8:	f7ff fc0e 	bl	800ecf8 <ecp_randomize_jac>
 800f4dc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800f4e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d112      	bne.n	800f50e <ecp_mul_comb_after_precomp+0x10a>

    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800f4e8:	f107 030c 	add.w	r3, r7, #12
 800f4ec:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	f7fe fd84 	bl	800dffe <ecp_normalize_jac>
 800f4f6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800f4fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f4fe:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800f500:	e006      	b.n	800f510 <ecp_mul_comb_after_precomp+0x10c>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800f502:	bf00      	nop
 800f504:	e004      	b.n	800f510 <ecp_mul_comb_after_precomp+0x10c>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800f506:	bf00      	nop
 800f508:	e002      	b.n	800f510 <ecp_mul_comb_after_precomp+0x10c>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800f50a:	bf00      	nop
 800f50c:	e000      	b.n	800f510 <ecp_mul_comb_after_precomp+0x10c>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, RR, f_rng, p_rng ) );
 800f50e:	bf00      	nop
    return( ret );
 800f510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800f514:	4618      	mov	r0, r3
 800f516:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd90      	pop	{r4, r7, pc}

0800f51e <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	460b      	mov	r3, r1
 800f528:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f52e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800f532:	d301      	bcc.n	800f538 <ecp_pick_window_size+0x1a>
 800f534:	2305      	movs	r3, #5
 800f536:	e000      	b.n	800f53a <ecp_pick_window_size+0x1c>
 800f538:	2304      	movs	r3, #4
 800f53a:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800f53c:	78fb      	ldrb	r3, [r7, #3]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <ecp_pick_window_size+0x2a>
        w++;
 800f542:	7bfb      	ldrb	r3, [r7, #15]
 800f544:	3301      	adds	r3, #1
 800f546:	73fb      	strb	r3, [r7, #15]
     * The user reduces MBEDTLS_ECP_WINDOW_SIZE does not changes the size of
     * static comb table, because the size of static comb table is fixed when
     * it is generated.
     */
#if( MBEDTLS_ECP_WINDOW_SIZE < 6 )
    if( (!p_eq_g || !ecp_group_is_static_comb_table(grp)) && w > MBEDTLS_ECP_WINDOW_SIZE )
 800f548:	78fb      	ldrb	r3, [r7, #3]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d005      	beq.n	800f55a <ecp_pick_window_size+0x3c>
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7fe fa8a 	bl	800da68 <ecp_group_is_static_comb_table>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d104      	bne.n	800f564 <ecp_pick_window_size+0x46>
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	d901      	bls.n	800f564 <ecp_pick_window_size+0x46>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 800f560:	2304      	movs	r3, #4
 800f562:	73fb      	strb	r3, [r7, #15]
#endif
    if( w >= grp->nbits )
 800f564:	7bfa      	ldrb	r2, [r7, #15]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d301      	bcc.n	800f572 <ecp_pick_window_size+0x54>
        w = 2;
 800f56e:	2302      	movs	r3, #2
 800f570:	73fb      	strb	r3, [r7, #15]

    return( w );
 800f572:	7bfb      	ldrb	r3, [r7, #15]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b090      	sub	sp, #64	; 0x40
 800f580:	af06      	add	r7, sp, #24
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
 800f588:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f58a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f58e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned char w, p_eq_g, i;
    size_t d;
    unsigned char T_size = 0, T_ok = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	76fb      	strb	r3, [r7, #27]
 800f594:	2300      	movs	r3, #0
 800f596:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    mbedtls_ecp_point *T = NULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	61fb      	str	r3, [r7, #28]

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	f103 020c 	add.w	r2, r3, #12
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3334      	adds	r3, #52	; 0x34
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	f7f6 fcf6 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10b      	bne.n	800f5ce <ecp_mul_comb+0x52>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3328      	adds	r3, #40	; 0x28
 800f5bc:	4619      	mov	r1, r3
 800f5be:	4610      	mov	r0, r2
 800f5c0:	f7f6 fcec 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800f5c4:	4603      	mov	r3, r0
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d101      	bne.n	800f5ce <ecp_mul_comb+0x52>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e000      	b.n	800f5d0 <ecp_mul_comb+0x54>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	76bb      	strb	r3, [r7, #26]
#else
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 800f5d2:	7ebb      	ldrb	r3, [r7, #26]
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f7ff ffa1 	bl	800f51e <ecp_pick_window_size>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	767b      	strb	r3, [r7, #25]
    T_size = 1U << ( w - 1 );
 800f5e0:	7e7b      	ldrb	r3, [r7, #25]
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ea:	76fb      	strb	r3, [r7, #27]
    d = ( grp->nbits + w - 1 ) / w;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5f0:	7e7b      	ldrb	r3, [r7, #25]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	1e5a      	subs	r2, r3, #1
 800f5f6:	7e7b      	ldrb	r3, [r7, #25]
 800f5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5fc:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 800f5fe:	7ebb      	ldrb	r3, [r7, #26]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00a      	beq.n	800f61a <ecp_mul_comb+0x9e>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d006      	beq.n	800f61a <ecp_mul_comb+0x9e>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f610:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 800f612:	2301      	movs	r3, #1
 800f614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f618:	e029      	b.n	800f66e <ecp_mul_comb+0xf2>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 800f61a:	7efb      	ldrb	r3, [r7, #27]
 800f61c:	2124      	movs	r1, #36	; 0x24
 800f61e:	4618      	mov	r0, r3
 800f620:	f004 fda4 	bl	801416c <calloc>
 800f624:	4603      	mov	r3, r0
 800f626:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d102      	bne.n	800f634 <ecp_mul_comb+0xb8>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 800f62e:	4b42      	ldr	r3, [pc, #264]	; (800f738 <ecp_mul_comb+0x1bc>)
 800f630:	627b      	str	r3, [r7, #36]	; 0x24
            goto cleanup;
 800f632:	e04f      	b.n	800f6d4 <ecp_mul_comb+0x158>
        }

        for( i = 0; i < T_size; i++ )
 800f634:	2300      	movs	r3, #0
 800f636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f63a:	e010      	b.n	800f65e <ecp_mul_comb+0xe2>
            mbedtls_ecp_point_init( &T[i] );
 800f63c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f640:	4613      	mov	r3, r2
 800f642:	00db      	lsls	r3, r3, #3
 800f644:	4413      	add	r3, r2
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	461a      	mov	r2, r3
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	4413      	add	r3, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fe f99b 	bl	800d98a <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 800f654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f658:	3301      	adds	r3, #1
 800f65a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f65e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f662:	7efb      	ldrb	r3, [r7, #27]
 800f664:	429a      	cmp	r2, r3
 800f666:	d3e9      	bcc.n	800f63c <ecp_mul_comb+0xc0>

        T_ok = 0;
 800f668:	2300      	movs	r3, #0
 800f66a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 800f66e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f672:	2b00      	cmp	r3, #0
 800f674:	d117      	bne.n	800f6a6 <ecp_mul_comb+0x12a>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800f676:	7e7a      	ldrb	r2, [r7, #25]
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	9301      	str	r3, [sp, #4]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	4613      	mov	r3, r2
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	69f9      	ldr	r1, [r7, #28]
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f7ff fc68 	bl	800ef5c <ecp_precompute_comb>
 800f68c:	6278      	str	r0, [r7, #36]	; 0x24
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	2b00      	cmp	r3, #0
 800f692:	d11e      	bne.n	800f6d2 <ecp_mul_comb+0x156>

        if( p_eq_g )
 800f694:	7ebb      	ldrb	r3, [r7, #26]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d005      	beq.n	800f6a6 <ecp_mul_comb+0x12a>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	69fa      	ldr	r2, [r7, #28]
 800f69e:	675a      	str	r2, [r3, #116]	; 0x74
            grp->T_size = T_size;
 800f6a0:	7efa      	ldrb	r2, [r7, #27]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	679a      	str	r2, [r3, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a8:	9305      	str	r3, [sp, #20]
 800f6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ac:	9304      	str	r3, [sp, #16]
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	9303      	str	r3, [sp, #12]
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	9302      	str	r3, [sp, #8]
 800f6b6:	7e7b      	ldrb	r3, [r7, #25]
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	7efb      	ldrb	r3, [r7, #27]
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	68b9      	ldr	r1, [r7, #8]
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7ff fe9d 	bl	800f404 <ecp_mul_comb_after_precomp>
 800f6ca:	6278      	str	r0, [r7, #36]	; 0x24
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 800f6d0:	e000      	b.n	800f6d4 <ecp_mul_comb+0x158>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800f6d2:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6d8:	69fa      	ldr	r2, [r7, #28]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d101      	bne.n	800f6e2 <ecp_mul_comb+0x166>
        T = NULL;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d01c      	beq.n	800f722 <ecp_mul_comb+0x1a6>
    {
        for( i = 0; i < T_size; i++ )
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f6ee:	e010      	b.n	800f712 <ecp_mul_comb+0x196>
            mbedtls_ecp_point_free( &T[i] );
 800f6f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	00db      	lsls	r3, r3, #3
 800f6f8:	4413      	add	r3, r2
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	4413      	add	r3, r2
 800f702:	4618      	mov	r0, r3
 800f704:	f7fe f996 	bl	800da34 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 800f708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f70c:	3301      	adds	r3, #1
 800f70e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f712:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f716:	7efb      	ldrb	r3, [r7, #27]
 800f718:	429a      	cmp	r2, r3
 800f71a:	d3e9      	bcc.n	800f6f0 <ecp_mul_comb+0x174>
        mbedtls_free( T );
 800f71c:	69f8      	ldr	r0, [r7, #28]
 800f71e:	f004 ff53 	bl	80145c8 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 800f722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <ecp_mul_comb+0x1b2>
        mbedtls_ecp_point_free( R );
 800f728:	68b8      	ldr	r0, [r7, #8]
 800f72a:	f7fe f983 	bl	800da34 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 800f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f730:	4618      	mov	r0, r3
 800f732:	3728      	adds	r7, #40	; 0x28
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	ffffb280 	.word	0xffffb280

0800f73c <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f746:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f74a:	60fb      	str	r3, [r7, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	f103 0018 	add.w	r0, r3, #24
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	f103 0118 	add.w	r1, r3, #24
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3304      	adds	r3, #4
 800f75c:	461a      	mov	r2, r3
 800f75e:	f7f9 faa1 	bl	8008ca4 <mbedtls_mpi_inv_mod>
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d114      	bne.n	800f794 <ecp_normalize_mxz+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &P->X, &P->X, &P->Z ) );
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	3318      	adds	r3, #24
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7fe fb82 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f778:	60f8      	str	r0, [r7, #12]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10b      	bne.n	800f798 <ecp_normalize_mxz+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	3318      	adds	r3, #24
 800f784:	2101      	movs	r1, #1
 800f786:	4618      	mov	r0, r3
 800f788:	f7f5 ffc3 	bl	8005712 <mbedtls_mpi_lset>
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b00      	cmp	r3, #0

cleanup:
 800f792:	e002      	b.n	800f79a <ecp_normalize_mxz+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 800f794:	bf00      	nop
 800f796:	e000      	b.n	800f79a <ecp_normalize_mxz+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &P->X, &P->X, &P->Z ) );
 800f798:	bf00      	nop
    return( ret );
 800f79a:	68fb      	ldr	r3, [r7, #12]
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT) */
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08a      	sub	sp, #40	; 0x28
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f7b2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f7b6:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi l;
    mbedtls_mpi_init( &l );
 800f7b8:	f107 0310 	add.w	r3, r7, #16
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7f5 fd00 	bl	80051c2 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    MBEDTLS_MPI_CHK( mbedtls_mpi_random( &l, 2, &grp->P, f_rng, p_rng ) );
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	1d1a      	adds	r2, r3, #4
 800f7c6:	f107 0010 	add.w	r0, r7, #16
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2102      	movs	r1, #2
 800f7d2:	f7f9 f9c0 	bl	8008b56 <mbedtls_mpi_random>
 800f7d6:	61f8      	str	r0, [r7, #28]
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d119      	bne.n	800f812 <ecp_randomize_mxz+0x6e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &P->X, &P->X, &l ) );
 800f7de:	68b9      	ldr	r1, [r7, #8]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	f107 0310 	add.w	r3, r7, #16
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f7fe fb48 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f7ec:	61f8      	str	r0, [r7, #28]
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d110      	bne.n	800f816 <ecp_randomize_mxz+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &P->Z, &P->Z, &l ) );
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f103 0118 	add.w	r1, r3, #24
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	f103 0218 	add.w	r2, r3, #24
 800f800:	f107 0310 	add.w	r3, r7, #16
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f7fe fb39 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f80a:	61f8      	str	r0, [r7, #28]
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	2b00      	cmp	r3, #0

cleanup:
 800f810:	e002      	b.n	800f818 <ecp_randomize_mxz+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_random( &l, 2, &grp->P, f_rng, p_rng ) );
 800f812:	bf00      	nop
 800f814:	e000      	b.n	800f818 <ecp_randomize_mxz+0x74>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &P->X, &P->X, &l ) );
 800f816:	bf00      	nop
    mbedtls_mpi_free( &l );
 800f818:	f107 0310 	add.w	r3, r7, #16
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7f5 fce3 	bl	80051e8 <mbedtls_mpi_free>

    if( ret == MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	f113 0f0e 	cmn.w	r3, #14
 800f828:	d101      	bne.n	800f82e <ecp_randomize_mxz+0x8a>
        ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 800f82a:	4b03      	ldr	r3, [pc, #12]	; (800f838 <ecp_randomize_mxz+0x94>)
 800f82c:	61fb      	str	r3, [r7, #28]
    return( ret );
 800f82e:	69fb      	ldr	r3, [r7, #28]
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT) */
}
 800f830:	4618      	mov	r0, r3
 800f832:	3720      	adds	r7, #32
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	ffffb300 	.word	0xffffb300

0800f83c <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b0a0      	sub	sp, #128	; 0x80
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
 800f848:	603b      	str	r3, [r7, #0]
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

#if defined(MBEDTLS_ECP_NO_FALLBACK) && defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
#else
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800f84a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800f84e:	67fb      	str	r3, [r7, #124]	; 0x7c
    mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 800f850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f854:	4618      	mov	r0, r3
 800f856:	f7f5 fcb4 	bl	80051c2 <mbedtls_mpi_init>
 800f85a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f5 fcaf 	bl	80051c2 <mbedtls_mpi_init>
 800f864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f5 fcaa 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 800f86e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f872:	4618      	mov	r0, r3
 800f874:	f7f5 fca5 	bl	80051c2 <mbedtls_mpi_init>
 800f878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f5 fca0 	bl	80051c2 <mbedtls_mpi_init>
 800f882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f886:	4618      	mov	r0, r3
 800f888:	f7f5 fc9b 	bl	80051c2 <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 800f88c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f890:	4618      	mov	r0, r3
 800f892:	f7f5 fc96 	bl	80051c2 <mbedtls_mpi_init>
 800f896:	f107 031c 	add.w	r3, r7, #28
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f5 fc91 	bl	80051c2 <mbedtls_mpi_init>
 800f8a0:	f107 0310 	add.w	r3, r7, #16
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7f5 fc8c 	bl	80051c2 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &A,    &P->X,   &P->Z ) );
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	3318      	adds	r3, #24
 800f8b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7fe fb42 	bl	800df3e <mbedtls_mpi_add_mod>
 800f8ba:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f8bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f040 80e9 	bne.w	800fa96 <ecp_double_add_mxz+0x25a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &AA,   &A,      &A    ) );
 800f8c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f8c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800f8cc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7fe fad3 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f8d6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f8d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f040 80dd 	bne.w	800fa9a <ecp_double_add_mxz+0x25e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &B,    &P->X,   &P->Z ) );
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	3318      	adds	r3, #24
 800f8e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7fe faf2 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800f8f0:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f8f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f040 80d2 	bne.w	800fa9e <ecp_double_add_mxz+0x262>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &BB,   &B,      &B    ) );
 800f8fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f8fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f902:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f7fe fab8 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f90c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f90e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f910:	2b00      	cmp	r3, #0
 800f912:	f040 80c6 	bne.w	800faa2 <ecp_double_add_mxz+0x266>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &E,    &AA,     &BB   ) );
 800f916:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f91a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f91e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f7fe fad6 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800f928:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f92a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f040 80ba 	bne.w	800faa6 <ecp_double_add_mxz+0x26a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &C,    &Q->X,   &Q->Z ) );
 800f932:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f93a:	3318      	adds	r3, #24
 800f93c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7fe fafc 	bl	800df3e <mbedtls_mpi_add_mod>
 800f946:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f040 80ad 	bne.w	800faaa <ecp_double_add_mxz+0x26e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &D,    &Q->X,   &Q->Z ) );
 800f950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f958:	3318      	adds	r3, #24
 800f95a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f7fe fab8 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800f964:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f040 80a0 	bne.w	800faae <ecp_double_add_mxz+0x272>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &DA,   &D,      &A    ) );
 800f96e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f976:	f107 011c 	add.w	r1, r7, #28
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7fe fa7e 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f980:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f984:	2b00      	cmp	r3, #0
 800f986:	f040 8094 	bne.w	800fab2 <ecp_double_add_mxz+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &CB,   &C,      &B    ) );
 800f98a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f98e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f992:	f107 0110 	add.w	r1, r7, #16
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f7fe fa70 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f99c:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f99e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f040 8088 	bne.w	800fab6 <ecp_double_add_mxz+0x27a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &S->X, &DA,     &CB   ) );
 800f9a6:	6879      	ldr	r1, [r7, #4]
 800f9a8:	f107 0310 	add.w	r3, r7, #16
 800f9ac:	f107 021c 	add.w	r2, r7, #28
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7fe fac4 	bl	800df3e <mbedtls_mpi_add_mod>
 800f9b6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f9b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d17d      	bne.n	800faba <ecp_double_add_mxz+0x27e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->X, &S->X,   &S->X ) );
 800f9be:	6879      	ldr	r1, [r7, #4]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7fe fa59 	bl	800de7c <mbedtls_mpi_mul_mod>
 800f9ca:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f9cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d175      	bne.n	800fabe <ecp_double_add_mxz+0x282>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S->Z, &DA,     &CB   ) );
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f103 0118 	add.w	r1, r3, #24
 800f9d8:	f107 0310 	add.w	r3, r7, #16
 800f9dc:	f107 021c 	add.w	r2, r7, #28
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f7fe fa77 	bl	800ded4 <mbedtls_mpi_sub_mod>
 800f9e6:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f9e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d169      	bne.n	800fac2 <ecp_double_add_mxz+0x286>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->Z, &S->Z,   &S->Z ) );
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f103 0118 	add.w	r1, r3, #24
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f103 0218 	add.w	r2, r3, #24
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3318      	adds	r3, #24
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f7fe fa3c 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fa04:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d15c      	bne.n	800fac6 <ecp_double_add_mxz+0x28a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->Z, d,       &S->Z ) );
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f103 0118 	add.w	r1, r3, #24
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	3318      	adds	r3, #24
 800fa16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7fe fa2e 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fa20:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d150      	bne.n	800faca <ecp_double_add_mxz+0x28e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &R->X, &AA,     &BB   ) );
 800fa28:	68b9      	ldr	r1, [r7, #8]
 800fa2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fa2e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f7fe fa22 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fa38:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d146      	bne.n	800face <ecp_double_add_mxz+0x292>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &R->Z, &grp->A, &E    ) );
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	f103 0118 	add.w	r1, r3, #24
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f103 0210 	add.w	r2, r3, #16
 800fa4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f7fe fa13 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fa56:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d139      	bne.n	800fad2 <ecp_double_add_mxz+0x296>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &R->Z, &BB,     &R->Z ) );
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	f103 0118 	add.w	r1, r3, #24
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	3318      	adds	r3, #24
 800fa68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7fe fa66 	bl	800df3e <mbedtls_mpi_add_mod>
 800fa72:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d12d      	bne.n	800fad6 <ecp_double_add_mxz+0x29a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &R->Z, &E,      &R->Z ) );
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	f103 0118 	add.w	r1, r3, #24
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	3318      	adds	r3, #24
 800fa84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f7fe f9f7 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fa8e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800fa90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa92:	2b00      	cmp	r3, #0

cleanup:
 800fa94:	e020      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &A,    &P->X,   &P->Z ) );
 800fa96:	bf00      	nop
 800fa98:	e01e      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &AA,   &A,      &A    ) );
 800fa9a:	bf00      	nop
 800fa9c:	e01c      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &B,    &P->X,   &P->Z ) );
 800fa9e:	bf00      	nop
 800faa0:	e01a      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &BB,   &B,      &B    ) );
 800faa2:	bf00      	nop
 800faa4:	e018      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &E,    &AA,     &BB   ) );
 800faa6:	bf00      	nop
 800faa8:	e016      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &C,    &Q->X,   &Q->Z ) );
 800faaa:	bf00      	nop
 800faac:	e014      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &D,    &Q->X,   &Q->Z ) );
 800faae:	bf00      	nop
 800fab0:	e012      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &DA,   &D,      &A    ) );
 800fab2:	bf00      	nop
 800fab4:	e010      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &CB,   &C,      &B    ) );
 800fab6:	bf00      	nop
 800fab8:	e00e      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &S->X, &DA,     &CB   ) );
 800faba:	bf00      	nop
 800fabc:	e00c      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->X, &S->X,   &S->X ) );
 800fabe:	bf00      	nop
 800fac0:	e00a      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mod( grp, &S->Z, &DA,     &CB   ) );
 800fac2:	bf00      	nop
 800fac4:	e008      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->Z, &S->Z,   &S->Z ) );
 800fac6:	bf00      	nop
 800fac8:	e006      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &S->Z, d,       &S->Z ) );
 800faca:	bf00      	nop
 800facc:	e004      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &R->X, &AA,     &BB   ) );
 800face:	bf00      	nop
 800fad0:	e002      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &R->Z, &grp->A, &E    ) );
 800fad2:	bf00      	nop
 800fad4:	e000      	b.n	800fad8 <ecp_double_add_mxz+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &R->Z, &BB,     &R->Z ) );
 800fad6:	bf00      	nop
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 800fad8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f5 fb83 	bl	80051e8 <mbedtls_mpi_free>
 800fae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f5 fb7e 	bl	80051e8 <mbedtls_mpi_free>
 800faec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7f5 fb79 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 800faf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f5 fb74 	bl	80051e8 <mbedtls_mpi_free>
 800fb00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7f5 fb6f 	bl	80051e8 <mbedtls_mpi_free>
 800fb0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7f5 fb6a 	bl	80051e8 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 800fb14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7f5 fb65 	bl	80051e8 <mbedtls_mpi_free>
 800fb1e:	f107 031c 	add.w	r3, r7, #28
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f5 fb60 	bl	80051e8 <mbedtls_mpi_free>
 800fb28:	f107 0310 	add.w	r3, r7, #16
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7f5 fb5b 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800fb32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
#endif /* !defined(MBEDTLS_ECP_NO_FALLBACK) || !defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT) */
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3780      	adds	r7, #128	; 0x80
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b096      	sub	sp, #88	; 0x58
 800fb40:	af02      	add	r7, sp, #8
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800fb4a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800fb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;
    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 800fb50:	f107 0320 	add.w	r3, r7, #32
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fd ff18 	bl	800d98a <mbedtls_ecp_point_init>
 800fb5a:	f107 0314 	add.w	r3, r7, #20
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7f5 fb2f 	bl	80051c2 <mbedtls_mpi_init>

    if( f_rng == NULL )
 800fb64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <ecp_mul_mxz+0x32>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fb6a:	4b74      	ldr	r3, [pc, #464]	; (800fd3c <ecp_mul_mxz+0x200>)
 800fb6c:	e0e1      	b.n	800fd32 <ecp_mul_mxz+0x1f6>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800fb6e:	683a      	ldr	r2, [r7, #0]
 800fb70:	f107 0314 	add.w	r3, r7, #20
 800fb74:	4611      	mov	r1, r2
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f5 fc30 	bl	80053dc <mbedtls_mpi_copy>
 800fb7c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fb7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	f040 80b4 	bne.w	800fcee <ecp_mul_mxz+0x1b2>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800fb86:	f107 0320 	add.w	r3, r7, #32
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fd ffd2 	bl	800db36 <mbedtls_ecp_copy>
 800fb92:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f040 80ab 	bne.w	800fcf2 <ecp_mul_mxz+0x1b6>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	2101      	movs	r1, #1
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f5 fdb6 	bl	8005712 <mbedtls_mpi_lset>
 800fba6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f040 80a3 	bne.w	800fcf6 <ecp_mul_mxz+0x1ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	3318      	adds	r3, #24
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7f5 fdab 	bl	8005712 <mbedtls_mpi_lset>
 800fbbc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f040 809a 	bne.w	800fcfa <ecp_mul_mxz+0x1be>
    mbedtls_mpi_free( &R->Y );
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	330c      	adds	r3, #12
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7f5 fb0c 	bl	80051e8 <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 800fbd0:	e00d      	b.n	800fbee <ecp_mul_mxz+0xb2>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	1d1a      	adds	r2, r3, #4
 800fbd6:	f107 0120 	add.w	r1, r7, #32
 800fbda:	f107 0320 	add.w	r3, r7, #32
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7f6 fc3c 	bl	800645c <mbedtls_mpi_sub_abs>
 800fbe4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f040 8088 	bne.w	800fcfe <ecp_mul_mxz+0x1c2>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	1d1a      	adds	r2, r3, #4
 800fbf2:	f107 0320 	add.w	r3, r7, #32
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f6 f9cf 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dae6      	bge.n	800fbd2 <ecp_mul_mxz+0x96>

    /* Randomize coordinates of the starting point */
    MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800fc04:	f107 0120 	add.w	r1, r7, #32
 800fc08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f7ff fdc9 	bl	800f7a4 <ecp_randomize_mxz>
 800fc12:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d173      	bne.n	800fd02 <ecp_mul_mxz+0x1c6>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7f5 fe76 	bl	800590c <mbedtls_mpi_bitlen>
 800fc20:	64b8      	str	r0, [r7, #72]	; 0x48
    while( i-- > 0 )
 800fc22:	e04d      	b.n	800fcc0 <ecp_mul_mxz+0x184>
    {
        b = mbedtls_mpi_get_bit( m, i );
 800fc24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7f5 fda4 	bl	8005774 <mbedtls_mpi_get_bit>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fc38:	f107 0120 	add.w	r1, r7, #32
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f5 fcdc 	bl	80055fa <mbedtls_mpi_safe_cond_swap>
 800fc42:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d15d      	bne.n	800fd06 <ecp_mul_mxz+0x1ca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	f103 0018 	add.w	r0, r3, #24
 800fc50:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fc54:	f107 0320 	add.w	r3, r7, #32
 800fc58:	3318      	adds	r3, #24
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	f7f5 fccd 	bl	80055fa <mbedtls_mpi_safe_cond_swap>
 800fc60:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d150      	bne.n	800fd0a <ecp_mul_mxz+0x1ce>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800fc68:	f107 0220 	add.w	r2, r7, #32
 800fc6c:	f107 0314 	add.w	r3, r7, #20
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	f107 0320 	add.w	r3, r7, #32
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	68b9      	ldr	r1, [r7, #8]
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f7ff fddd 	bl	800f83c <ecp_double_add_mxz>
 800fc82:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d141      	bne.n	800fd0e <ecp_mul_mxz+0x1d2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fc90:	f107 0120 	add.w	r1, r7, #32
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7f5 fcb0 	bl	80055fa <mbedtls_mpi_safe_cond_swap>
 800fc9a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d137      	bne.n	800fd12 <ecp_mul_mxz+0x1d6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	f103 0018 	add.w	r0, r3, #24
 800fca8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fcac:	f107 0320 	add.w	r3, r7, #32
 800fcb0:	3318      	adds	r3, #24
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	f7f5 fca1 	bl	80055fa <mbedtls_mpi_safe_cond_swap>
 800fcb8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d12a      	bne.n	800fd16 <ecp_mul_mxz+0x1da>
    while( i-- > 0 )
 800fcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc2:	1e5a      	subs	r2, r3, #1
 800fcc4:	64ba      	str	r2, [r7, #72]	; 0x48
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1ac      	bne.n	800fc24 <ecp_mul_mxz+0xe8>
     * [1] https://eprint.iacr.org/2003/191
     * [2] https://eprint.iacr.org/2020/055
     *
     * Avoid the leak by randomizing coordinates before we normalize them.
     */
    MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, R, f_rng, p_rng ) );
 800fcca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcce:	68b9      	ldr	r1, [r7, #8]
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f7ff fd67 	bl	800f7a4 <ecp_randomize_mxz>
 800fcd6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d11d      	bne.n	800fd1a <ecp_mul_mxz+0x1de>
    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 800fcde:	68b9      	ldr	r1, [r7, #8]
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff fd2b 	bl	800f73c <ecp_normalize_mxz>
 800fce6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcea:	2b00      	cmp	r3, #0

cleanup:
 800fcec:	e016      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 800fcee:	bf00      	nop
 800fcf0:	e014      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 800fcf2:	bf00      	nop
 800fcf4:	e012      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 800fcf6:	bf00      	nop
 800fcf8:	e010      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 800fcfa:	bf00      	nop
 800fcfc:	e00e      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MOD_ADD( RP.X );
 800fcfe:	bf00      	nop
 800fd00:	e00c      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 800fd02:	bf00      	nop
 800fd04:	e00a      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800fd06:	bf00      	nop
 800fd08:	e008      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800fd0a:	bf00      	nop
 800fd0c:	e006      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 800fd0e:	bf00      	nop
 800fd10:	e004      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 800fd12:	bf00      	nop
 800fd14:	e002      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 800fd16:	bf00      	nop
 800fd18:	e000      	b.n	800fd1c <ecp_mul_mxz+0x1e0>
    MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, R, f_rng, p_rng ) );
 800fd1a:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 800fd1c:	f107 0320 	add.w	r3, r7, #32
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd fe87 	bl	800da34 <mbedtls_ecp_point_free>
 800fd26:	f107 0314 	add.w	r3, r7, #20
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7f5 fa5c 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800fd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3750      	adds	r7, #80	; 0x50
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	ffffb080 	.word	0xffffb080

0800fd40 <ecp_mul_restartable_internal>:
 */
static int ecp_mul_restartable_internal( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af04      	add	r7, sp, #16
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800fd4e:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <ecp_mul_restartable_internal+0xa4>)
 800fd50:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800fd52:	6879      	ldr	r1, [r7, #4]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f000 fa1d 	bl	8010194 <mbedtls_ecp_check_privkey>
 800fd5a:	6178      	str	r0, [r7, #20]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d133      	bne.n	800fdca <ecp_mul_restartable_internal+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800fd62:	6839      	ldr	r1, [r7, #0]
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f000 f9e3 	bl	8010130 <mbedtls_ecp_check_pubkey>
 800fd6a:	6178      	str	r0, [r7, #20]
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d12d      	bne.n	800fdce <ecp_mul_restartable_internal+0x8e>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800fd72:	4b1c      	ldr	r3, [pc, #112]	; (800fde4 <ecp_mul_restartable_internal+0xa4>)
 800fd74:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_ECP_MONTGOMERY_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f7fd fdf0 	bl	800d95c <mbedtls_ecp_get_type>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b02      	cmp	r3, #2
 800fd80:	d10d      	bne.n	800fd9e <ecp_mul_restartable_internal+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	68b9      	ldr	r1, [r7, #8]
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f7ff fed3 	bl	800fb3c <ecp_mul_mxz>
 800fd96:	6178      	str	r0, [r7, #20]
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d119      	bne.n	800fdd2 <ecp_mul_restartable_internal+0x92>
#endif
#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f7fd fddc 	bl	800d95c <mbedtls_ecp_get_type>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d115      	bne.n	800fdd6 <ecp_mul_restartable_internal+0x96>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 800fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdac:	9302      	str	r3, [sp, #8]
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	68b9      	ldr	r1, [r7, #8]
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7ff fbdd 	bl	800f57c <ecp_mul_comb>
 800fdc2:	6178      	str	r0, [r7, #20]
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	2b00      	cmp	r3, #0
#endif

cleanup:
 800fdc8:	e005      	b.n	800fdd6 <ecp_mul_restartable_internal+0x96>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800fdca:	bf00      	nop
 800fdcc:	e004      	b.n	800fdd8 <ecp_mul_restartable_internal+0x98>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800fdce:	bf00      	nop
 800fdd0:	e002      	b.n	800fdd8 <ecp_mul_restartable_internal+0x98>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 800fdd2:	bf00      	nop
 800fdd4:	e000      	b.n	800fdd8 <ecp_mul_restartable_internal+0x98>
cleanup:
 800fdd6:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 800fdd8:	697b      	ldr	r3, [r7, #20]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3718      	adds	r7, #24
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	ffffb080 	.word	0xffffb080

0800fde8 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af04      	add	r7, sp, #16
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );

    if( f_rng == NULL )
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <mbedtls_ecp_mul_restartable+0x18>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fdfc:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <mbedtls_ecp_mul_restartable+0x3c>)
 800fdfe:	e00c      	b.n	800fe1a <mbedtls_ecp_mul_restartable+0x32>

    return( ecp_mul_restartable_internal( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 800fe00:	6a3b      	ldr	r3, [r7, #32]
 800fe02:	9302      	str	r3, [sp, #8]
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	9301      	str	r3, [sp, #4]
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	68b9      	ldr	r1, [r7, #8]
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7ff ff94 	bl	800fd40 <ecp_mul_restartable_internal>
 800fe18:	4603      	mov	r3, r0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	ffffb080 	.word	0xffffb080

0800fe28 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08a      	sub	sp, #40	; 0x28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800fe32:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f6 f9eb 	bl	8006218 <mbedtls_mpi_cmp_int>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	db1e      	blt.n	800fe86 <ecp_check_pubkey_sw+0x5e>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	330c      	adds	r3, #12
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f6 f9e2 	bl	8006218 <mbedtls_mpi_cmp_int>
 800fe54:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	db15      	blt.n	800fe86 <ecp_check_pubkey_sw+0x5e>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4619      	mov	r1, r3
 800fe62:	4610      	mov	r0, r2
 800fe64:	f7f6 f89a 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800fe68:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	da0b      	bge.n	800fe86 <ecp_check_pubkey_sw+0x5e>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	f103 020c 	add.w	r2, r3, #12
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	3304      	adds	r3, #4
 800fe78:	4619      	mov	r1, r3
 800fe7a:	4610      	mov	r0, r2
 800fe7c:	f7f6 f88e 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800fe80:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	db01      	blt.n	800fe8a <ecp_check_pubkey_sw+0x62>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800fe86:	4b51      	ldr	r3, [pc, #324]	; (800ffcc <ecp_check_pubkey_sw+0x1a4>)
 800fe88:	e09b      	b.n	800ffc2 <ecp_check_pubkey_sw+0x19a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 800fe8a:	f107 0318 	add.w	r3, r7, #24
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f5 f997 	bl	80051c2 <mbedtls_mpi_init>
 800fe94:	f107 030c 	add.w	r3, r7, #12
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f5 f992 	bl	80051c2 <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &YY,  &pt->Y,   &pt->Y  ) );
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	f103 020c 	add.w	r2, r3, #12
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	330c      	adds	r3, #12
 800fea8:	f107 0118 	add.w	r1, r7, #24
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7fd ffe5 	bl	800de7c <mbedtls_mpi_mul_mod>
 800feb2:	6278      	str	r0, [r7, #36]	; 0x24
 800feb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d169      	bne.n	800ff8e <ecp_check_pubkey_sw+0x166>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &RHS, &pt->X,   &pt->X  ) );
 800feba:	683a      	ldr	r2, [r7, #0]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	f107 010c 	add.w	r1, r7, #12
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7fd ffda 	bl	800de7c <mbedtls_mpi_mul_mod>
 800fec8:	6278      	str	r0, [r7, #36]	; 0x24
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d160      	bne.n	800ff92 <ecp_check_pubkey_sw+0x16a>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d126      	bne.n	800ff26 <ecp_check_pubkey_sw+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800fed8:	f107 010c 	add.w	r1, r7, #12
 800fedc:	f107 030c 	add.w	r3, r7, #12
 800fee0:	2203      	movs	r2, #3
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f6 fc13 	bl	800670e <mbedtls_mpi_sub_int>
 800fee8:	6278      	str	r0, [r7, #36]	; 0x24
 800feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feec:	2b00      	cmp	r3, #0
 800feee:	d152      	bne.n	800ff96 <ecp_check_pubkey_sw+0x16e>
 800fef0:	e00c      	b.n	800ff0c <ecp_check_pubkey_sw+0xe4>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	1d1a      	adds	r2, r3, #4
 800fef6:	f107 010c 	add.w	r1, r7, #12
 800fefa:	f107 030c 	add.w	r3, r7, #12
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7f6 fb4d 	bl	800659e <mbedtls_mpi_add_mpi>
 800ff04:	6278      	str	r0, [r7, #36]	; 0x24
 800ff06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d146      	bne.n	800ff9a <ecp_check_pubkey_sw+0x172>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	da16      	bge.n	800ff40 <ecp_check_pubkey_sw+0x118>
 800ff12:	f107 030c 	add.w	r3, r7, #12
 800ff16:	2100      	movs	r1, #0
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7f6 f97d 	bl	8006218 <mbedtls_mpi_cmp_int>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1e6      	bne.n	800fef2 <ecp_check_pubkey_sw+0xca>
 800ff24:	e00c      	b.n	800ff40 <ecp_check_pubkey_sw+0x118>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &RHS, &RHS, &grp->A ) );
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3310      	adds	r3, #16
 800ff2a:	f107 020c 	add.w	r2, r7, #12
 800ff2e:	f107 010c 	add.w	r1, r7, #12
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7fe f803 	bl	800df3e <mbedtls_mpi_add_mod>
 800ff38:	6278      	str	r0, [r7, #36]	; 0x24
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d12e      	bne.n	800ff9e <ecp_check_pubkey_sw+0x176>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &RHS, &RHS,     &pt->X  ) );
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	f107 020c 	add.w	r2, r7, #12
 800ff46:	f107 010c 	add.w	r1, r7, #12
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7fd ff96 	bl	800de7c <mbedtls_mpi_mul_mod>
 800ff50:	6278      	str	r0, [r7, #36]	; 0x24
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d124      	bne.n	800ffa2 <ecp_check_pubkey_sw+0x17a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &RHS, &RHS,     &grp->B ) );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	331c      	adds	r3, #28
 800ff5c:	f107 020c 	add.w	r2, r7, #12
 800ff60:	f107 010c 	add.w	r1, r7, #12
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fd ffea 	bl	800df3e <mbedtls_mpi_add_mod>
 800ff6a:	6278      	str	r0, [r7, #36]	; 0x24
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d119      	bne.n	800ffa6 <ecp_check_pubkey_sw+0x17e>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 800ff72:	f107 020c 	add.w	r2, r7, #12
 800ff76:	f107 0318 	add.w	r3, r7, #24
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7f6 f80d 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d010      	beq.n	800ffaa <ecp_check_pubkey_sw+0x182>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 800ff88:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <ecp_check_pubkey_sw+0x1a4>)
 800ff8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ff8c:	e00e      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &YY,  &pt->Y,   &pt->Y  ) );
 800ff8e:	bf00      	nop
 800ff90:	e00c      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &RHS, &pt->X,   &pt->X  ) );
 800ff92:	bf00      	nop
 800ff94:	e00a      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800ff96:	bf00      	nop
 800ff98:	e008      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
 800ff9a:	bf00      	nop
 800ff9c:	e006      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &RHS, &RHS, &grp->A ) );
 800ff9e:	bf00      	nop
 800ffa0:	e004      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mod( grp, &RHS, &RHS,     &pt->X  ) );
 800ffa2:	bf00      	nop
 800ffa4:	e002      	b.n	800ffac <ecp_check_pubkey_sw+0x184>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mod( grp, &RHS, &RHS,     &grp->B ) );
 800ffa6:	bf00      	nop
 800ffa8:	e000      	b.n	800ffac <ecp_check_pubkey_sw+0x184>

cleanup:
 800ffaa:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 800ffac:	f107 0318 	add.w	r3, r7, #24
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7f5 f919 	bl	80051e8 <mbedtls_mpi_free>
 800ffb6:	f107 030c 	add.w	r3, r7, #12
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7f5 f914 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3728      	adds	r7, #40	; 0x28
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	ffffb380 	.word	0xffffb380

0800ffd0 <ecp_check_bad_points_mx>:
 * https://eprint.iacr.org/2017/806.pdf
 * Those points are never sent by an honest peer.
 */
static int ecp_check_bad_points_mx( const mbedtls_mpi *X, const mbedtls_mpi *P,
                                    const mbedtls_ecp_group_id grp_id )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b088      	sub	sp, #32
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	71fb      	strb	r3, [r7, #7]
    int ret;
    mbedtls_mpi XmP;

    mbedtls_mpi_init( &XmP );
 800ffde:	f107 0310 	add.w	r3, r7, #16
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7f5 f8ed 	bl	80051c2 <mbedtls_mpi_init>

    /* Reduce X mod P so that we only need to check values less than P.
     * We know X < 2^256 so we can proceed by subtraction. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &XmP, X ) );
 800ffe8:	f107 0310 	add.w	r3, r7, #16
 800ffec:	68f9      	ldr	r1, [r7, #12]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7f5 f9f4 	bl	80053dc <mbedtls_mpi_copy>
 800fff4:	61f8      	str	r0, [r7, #28]
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d157      	bne.n	80100ac <ecp_check_bad_points_mx+0xdc>
    while( mbedtls_mpi_cmp_mpi( &XmP, P ) >= 0 )
 800fffc:	e00b      	b.n	8010016 <ecp_check_bad_points_mx+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &XmP, &XmP, P ) );
 800fffe:	f107 0110 	add.w	r1, r7, #16
 8010002:	f107 0310 	add.w	r3, r7, #16
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	4618      	mov	r0, r3
 801000a:	f7f6 fb12 	bl	8006632 <mbedtls_mpi_sub_mpi>
 801000e:	61f8      	str	r0, [r7, #28]
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d14c      	bne.n	80100b0 <ecp_check_bad_points_mx+0xe0>
    while( mbedtls_mpi_cmp_mpi( &XmP, P ) >= 0 )
 8010016:	f107 0310 	add.w	r3, r7, #16
 801001a:	68b9      	ldr	r1, [r7, #8]
 801001c:	4618      	mov	r0, r3
 801001e:	f7f5 ffbd 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8010022:	4603      	mov	r3, r0
 8010024:	2b00      	cmp	r3, #0
 8010026:	daea      	bge.n	800fffe <ecp_check_bad_points_mx+0x2e>

    /* Check against the known bad values that are less than P. For Curve448
     * these are 0, 1 and -1. For Curve25519 we check the values less than P
     * from the following list: https://cr.yp.to/ecdh.html#validate */
    if( mbedtls_mpi_cmp_int( &XmP, 1 ) <= 0 ) /* takes care of 0 and 1 */
 8010028:	f107 0310 	add.w	r3, r7, #16
 801002c:	2101      	movs	r1, #1
 801002e:	4618      	mov	r0, r3
 8010030:	f7f6 f8f2 	bl	8006218 <mbedtls_mpi_cmp_int>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	dc02      	bgt.n	8010040 <ecp_check_bad_points_mx+0x70>
    {
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 801003a:	4b24      	ldr	r3, [pc, #144]	; (80100cc <ecp_check_bad_points_mx+0xfc>)
 801003c:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 801003e:	e03a      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
    }

#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    if( grp_id == MBEDTLS_ECP_DP_CURVE25519 )
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b09      	cmp	r3, #9
 8010044:	d117      	bne.n	8010076 <ecp_check_bad_points_mx+0xa6>
    {
        if( mbedtls_mpi_cmp_mpi( &XmP, &ecp_x25519_bad_point_1 ) == 0 )
 8010046:	f107 0310 	add.w	r3, r7, #16
 801004a:	4921      	ldr	r1, [pc, #132]	; (80100d0 <ecp_check_bad_points_mx+0x100>)
 801004c:	4618      	mov	r0, r3
 801004e:	f7f5 ffa5 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d102      	bne.n	801005e <ecp_check_bad_points_mx+0x8e>
        {
            ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8010058:	4b1c      	ldr	r3, [pc, #112]	; (80100cc <ecp_check_bad_points_mx+0xfc>)
 801005a:	61fb      	str	r3, [r7, #28]
            goto cleanup;
 801005c:	e02b      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
        }

        if( mbedtls_mpi_cmp_mpi( &XmP, &ecp_x25519_bad_point_2 ) == 0 )
 801005e:	f107 0310 	add.w	r3, r7, #16
 8010062:	491c      	ldr	r1, [pc, #112]	; (80100d4 <ecp_check_bad_points_mx+0x104>)
 8010064:	4618      	mov	r0, r3
 8010066:	f7f5 ff99 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d102      	bne.n	8010076 <ecp_check_bad_points_mx+0xa6>
        {
            ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8010070:	4b16      	ldr	r3, [pc, #88]	; (80100cc <ecp_check_bad_points_mx+0xfc>)
 8010072:	61fb      	str	r3, [r7, #28]
            goto cleanup;
 8010074:	e01f      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
#else
    (void) grp_id;
#endif

    /* Final check: check if XmP + 1 is P (final because it changes XmP!) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &XmP, &XmP, 1 ) );
 8010076:	f107 0110 	add.w	r1, r7, #16
 801007a:	f107 0310 	add.w	r3, r7, #16
 801007e:	2201      	movs	r2, #1
 8010080:	4618      	mov	r0, r3
 8010082:	f7f6 fb20 	bl	80066c6 <mbedtls_mpi_add_int>
 8010086:	61f8      	str	r0, [r7, #28]
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d112      	bne.n	80100b4 <ecp_check_bad_points_mx+0xe4>
    if( mbedtls_mpi_cmp_mpi( &XmP, P ) == 0 )
 801008e:	f107 0310 	add.w	r3, r7, #16
 8010092:	68b9      	ldr	r1, [r7, #8]
 8010094:	4618      	mov	r0, r3
 8010096:	f7f5 ff81 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d102      	bne.n	80100a6 <ecp_check_bad_points_mx+0xd6>
    {
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 80100a0:	4b0a      	ldr	r3, [pc, #40]	; (80100cc <ecp_check_bad_points_mx+0xfc>)
 80100a2:	61fb      	str	r3, [r7, #28]
        goto cleanup;
 80100a4:	e007      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
    }

    ret = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	61fb      	str	r3, [r7, #28]
 80100aa:	e004      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &XmP, X ) );
 80100ac:	bf00      	nop
 80100ae:	e002      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &XmP, &XmP, P ) );
 80100b0:	bf00      	nop
 80100b2:	e000      	b.n	80100b6 <ecp_check_bad_points_mx+0xe6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &XmP, &XmP, 1 ) );
 80100b4:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &XmP );
 80100b6:	f107 0310 	add.w	r3, r7, #16
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7f5 f894 	bl	80051e8 <mbedtls_mpi_free>

    return( ret );
 80100c0:	69fb      	ldr	r3, [r7, #28]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3720      	adds	r7, #32
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	ffffb380 	.word	0xffffb380
 80100d0:	0801724c 	.word	0x0801724c
 80100d4:	08017258 	.word	0x08017258

080100d8 <ecp_check_pubkey_mx>:

/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7f5 fc45 	bl	8005974 <mbedtls_mpi_size>
 80100ea:	4602      	mov	r2, r0
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100f0:	3307      	adds	r3, #7
 80100f2:	08db      	lsrs	r3, r3, #3
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d901      	bls.n	80100fc <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80100f8:	4b0c      	ldr	r3, [pc, #48]	; (801012c <ecp_check_pubkey_mx+0x54>)
 80100fa:	e012      	b.n	8010122 <ecp_check_pubkey_mx+0x4a>

    /* Implicit in all standards (as they don't consider negative numbers):
     * X must be non-negative. This is normally ensured by the way it's
     * encoded for transmission, but let's be extra sure. */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 )
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2100      	movs	r1, #0
 8010100:	4618      	mov	r0, r3
 8010102:	f7f6 f889 	bl	8006218 <mbedtls_mpi_cmp_int>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	da01      	bge.n	8010110 <ecp_check_pubkey_mx+0x38>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 801010c:	4b07      	ldr	r3, [pc, #28]	; (801012c <ecp_check_pubkey_mx+0x54>)
 801010e:	e008      	b.n	8010122 <ecp_check_pubkey_mx+0x4a>

    return( ecp_check_bad_points_mx( &pt->X, &grp->P, grp->id ) );
 8010110:	6838      	ldr	r0, [r7, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	1d19      	adds	r1, r3, #4
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	461a      	mov	r2, r3
 801011c:	f7ff ff58 	bl	800ffd0 <ecp_check_bad_points_mx>
 8010120:	4603      	mov	r3, r0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	ffffb380 	.word	0xffffb380

08010130 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	3318      	adds	r3, #24
 801013e:	2101      	movs	r1, #1
 8010140:	4618      	mov	r0, r3
 8010142:	f7f6 f869 	bl	8006218 <mbedtls_mpi_cmp_int>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 801014c:	4b0f      	ldr	r3, [pc, #60]	; (801018c <mbedtls_ecp_check_pubkey+0x5c>)
 801014e:	e018      	b.n	8010182 <mbedtls_ecp_check_pubkey+0x52>

#if defined(MBEDTLS_ECP_MONTGOMERY_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fd fc03 	bl	800d95c <mbedtls_ecp_get_type>
 8010156:	4603      	mov	r3, r0
 8010158:	2b02      	cmp	r3, #2
 801015a:	d105      	bne.n	8010168 <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 801015c:	6839      	ldr	r1, [r7, #0]
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7ff ffba 	bl	80100d8 <ecp_check_pubkey_mx>
 8010164:	4603      	mov	r3, r0
 8010166:	e00c      	b.n	8010182 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7fd fbf7 	bl	800d95c <mbedtls_ecp_get_type>
 801016e:	4603      	mov	r3, r0
 8010170:	2b01      	cmp	r3, #1
 8010172:	d105      	bne.n	8010180 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7ff fe56 	bl	800fe28 <ecp_check_pubkey_sw>
 801017c:	4603      	mov	r3, r0
 801017e:	e000      	b.n	8010182 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010180:	4b03      	ldr	r3, [pc, #12]	; (8010190 <mbedtls_ecp_check_pubkey+0x60>)
}
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	ffffb380 	.word	0xffffb380
 8010190:	ffffb080 	.word	0xffffb080

08010194 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(MBEDTLS_ECP_MONTGOMERY_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7fd fbdc 	bl	800d95c <mbedtls_ecp_get_type>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d127      	bne.n	80101fa <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 80101aa:	2100      	movs	r1, #0
 80101ac:	6838      	ldr	r0, [r7, #0]
 80101ae:	f7f5 fae1 	bl	8005774 <mbedtls_mpi_get_bit>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10f      	bne.n	80101d8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 80101b8:	2101      	movs	r1, #1
 80101ba:	6838      	ldr	r0, [r7, #0]
 80101bc:	f7f5 fada 	bl	8005774 <mbedtls_mpi_get_bit>
 80101c0:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d108      	bne.n	80101d8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 80101c6:	6838      	ldr	r0, [r7, #0]
 80101c8:	f7f5 fba0 	bl	800590c <mbedtls_mpi_bitlen>
 80101cc:	4603      	mov	r3, r0
 80101ce:	1e5a      	subs	r2, r3, #1
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d001      	beq.n	80101dc <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80101d8:	4b17      	ldr	r3, [pc, #92]	; (8010238 <mbedtls_ecp_check_privkey+0xa4>)
 80101da:	e029      	b.n	8010230 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101e0:	2bfe      	cmp	r3, #254	; 0xfe
 80101e2:	d108      	bne.n	80101f6 <mbedtls_ecp_check_privkey+0x62>
 80101e4:	2102      	movs	r1, #2
 80101e6:	6838      	ldr	r0, [r7, #0]
 80101e8:	f7f5 fac4 	bl	8005774 <mbedtls_mpi_get_bit>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80101f2:	4b11      	ldr	r3, [pc, #68]	; (8010238 <mbedtls_ecp_check_privkey+0xa4>)
 80101f4:	e01c      	b.n	8010230 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 80101f6:	2300      	movs	r3, #0
 80101f8:	e01a      	b.n	8010230 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* MBEDTLS_ECP_MONTGOMERY_ENABLED */
#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fd fbae 	bl	800d95c <mbedtls_ecp_get_type>
 8010200:	4603      	mov	r3, r0
 8010202:	2b01      	cmp	r3, #1
 8010204:	d113      	bne.n	801022e <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010206:	2101      	movs	r1, #1
 8010208:	6838      	ldr	r0, [r7, #0]
 801020a:	f7f6 f805 	bl	8006218 <mbedtls_mpi_cmp_int>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	db08      	blt.n	8010226 <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	334c      	adds	r3, #76	; 0x4c
 8010218:	4619      	mov	r1, r3
 801021a:	6838      	ldr	r0, [r7, #0]
 801021c:	f7f5 febe 	bl	8005f9c <mbedtls_mpi_cmp_mpi>
 8010220:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010222:	2b00      	cmp	r3, #0
 8010224:	db01      	blt.n	801022a <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010226:	4b04      	ldr	r3, [pc, #16]	; (8010238 <mbedtls_ecp_check_privkey+0xa4>)
 8010228:	e002      	b.n	8010230 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 801022a:	2300      	movs	r3, #0
 801022c:	e000      	b.n	8010230 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801022e:	4b03      	ldr	r3, [pc, #12]	; (801023c <mbedtls_ecp_check_privkey+0xa8>)
}
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	ffffb380 	.word	0xffffb380
 801023c:	ffffb080 	.word	0xffffb080

08010240 <mbedtls_ecp_gen_privkey_mx>:
MBEDTLS_STATIC_TESTABLE
int mbedtls_ecp_gen_privkey_mx( size_t high_bit,
                                mbedtls_mpi *d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
 801024c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 801024e:	4b2a      	ldr	r3, [pc, #168]	; (80102f8 <mbedtls_ecp_gen_privkey_mx+0xb8>)
 8010250:	617b      	str	r3, [r7, #20]
    size_t n_random_bytes = high_bit / 8 + 1;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	08db      	lsrs	r3, r3, #3
 8010256:	3301      	adds	r3, #1
 8010258:	613b      	str	r3, [r7, #16]

    /* [Curve25519] page 5 */
    /* Generate a (high_bit+1)-bit random number by generating just enough
     * random bytes, then shifting out extra bits from the top (necessary
     * when (high_bit+1) is not a multiple of 8). */
    MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_random_bytes,
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	6939      	ldr	r1, [r7, #16]
 8010260:	68b8      	ldr	r0, [r7, #8]
 8010262:	f7f8 fc47 	bl	8008af4 <mbedtls_mpi_fill_random>
 8010266:	6178      	str	r0, [r7, #20]
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d133      	bne.n	80102d6 <mbedtls_ecp_gen_privkey_mx+0x96>
                                              f_rng, p_rng ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_random_bytes - high_bit - 1 ) );
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	00da      	lsls	r2, r3, #3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	3b01      	subs	r3, #1
 8010278:	4619      	mov	r1, r3
 801027a:	68b8      	ldr	r0, [r7, #8]
 801027c:	f7f5 fd71 	bl	8005d62 <mbedtls_mpi_shift_r>
 8010280:	6178      	str	r0, [r7, #20]
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d128      	bne.n	80102da <mbedtls_ecp_gen_privkey_mx+0x9a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, high_bit, 1 ) );
 8010288:	2201      	movs	r2, #1
 801028a:	68f9      	ldr	r1, [r7, #12]
 801028c:	68b8      	ldr	r0, [r7, #8]
 801028e:	f7f5 fa92 	bl	80057b6 <mbedtls_mpi_set_bit>
 8010292:	6178      	str	r0, [r7, #20]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d121      	bne.n	80102de <mbedtls_ecp_gen_privkey_mx+0x9e>

    /* Make sure the last two bits are unset for Curve448, three bits for
       Curve25519 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 801029a:	2200      	movs	r2, #0
 801029c:	2100      	movs	r1, #0
 801029e:	68b8      	ldr	r0, [r7, #8]
 80102a0:	f7f5 fa89 	bl	80057b6 <mbedtls_mpi_set_bit>
 80102a4:	6178      	str	r0, [r7, #20]
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d11a      	bne.n	80102e2 <mbedtls_ecp_gen_privkey_mx+0xa2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 80102ac:	2200      	movs	r2, #0
 80102ae:	2101      	movs	r1, #1
 80102b0:	68b8      	ldr	r0, [r7, #8]
 80102b2:	f7f5 fa80 	bl	80057b6 <mbedtls_mpi_set_bit>
 80102b6:	6178      	str	r0, [r7, #20]
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d113      	bne.n	80102e6 <mbedtls_ecp_gen_privkey_mx+0xa6>
    if( high_bit == 254 )
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2bfe      	cmp	r3, #254	; 0xfe
 80102c2:	d112      	bne.n	80102ea <mbedtls_ecp_gen_privkey_mx+0xaa>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
 80102c4:	2200      	movs	r2, #0
 80102c6:	2102      	movs	r1, #2
 80102c8:	68b8      	ldr	r0, [r7, #8]
 80102ca:	f7f5 fa74 	bl	80057b6 <mbedtls_mpi_set_bit>
 80102ce:	6178      	str	r0, [r7, #20]
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2b00      	cmp	r3, #0
    }

cleanup:
 80102d4:	e009      	b.n	80102ea <mbedtls_ecp_gen_privkey_mx+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_random_bytes,
 80102d6:	bf00      	nop
 80102d8:	e008      	b.n	80102ec <mbedtls_ecp_gen_privkey_mx+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_random_bytes - high_bit - 1 ) );
 80102da:	bf00      	nop
 80102dc:	e006      	b.n	80102ec <mbedtls_ecp_gen_privkey_mx+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, high_bit, 1 ) );
 80102de:	bf00      	nop
 80102e0:	e004      	b.n	80102ec <mbedtls_ecp_gen_privkey_mx+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
 80102e2:	bf00      	nop
 80102e4:	e002      	b.n	80102ec <mbedtls_ecp_gen_privkey_mx+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
 80102e6:	bf00      	nop
 80102e8:	e000      	b.n	80102ec <mbedtls_ecp_gen_privkey_mx+0xac>
cleanup:
 80102ea:	bf00      	nop
    return( ret );
 80102ec:	697b      	ldr	r3, [r7, #20]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	ffffb080 	.word	0xffffb080

080102fc <mbedtls_ecp_gen_privkey_sw>:

#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
static int mbedtls_ecp_gen_privkey_sw(
    const mbedtls_mpi *N, mbedtls_mpi *d,
    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b088      	sub	sp, #32
 8010300:	af02      	add	r7, sp, #8
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
    int ret = mbedtls_mpi_random( d, 1, N, f_rng, p_rng );
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	2101      	movs	r1, #1
 8010314:	68b8      	ldr	r0, [r7, #8]
 8010316:	f7f8 fc1e 	bl	8008b56 <mbedtls_mpi_random>
 801031a:	6178      	str	r0, [r7, #20]
    switch( ret )
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f113 0f0e 	cmn.w	r3, #14
 8010322:	d101      	bne.n	8010328 <mbedtls_ecp_gen_privkey_sw+0x2c>
    {
        case MBEDTLS_ERR_MPI_NOT_ACCEPTABLE:
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8010324:	4b03      	ldr	r3, [pc, #12]	; (8010334 <mbedtls_ecp_gen_privkey_sw+0x38>)
 8010326:	e000      	b.n	801032a <mbedtls_ecp_gen_privkey_sw+0x2e>
        default:
            return( ret );
 8010328:	697b      	ldr	r3, [r7, #20]
    }
}
 801032a:	4618      	mov	r0, r3
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	ffffb300 	.word	0xffffb300

08010338 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
 8010344:	603b      	str	r3, [r7, #0]
    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

#if defined(MBEDTLS_ECP_MONTGOMERY_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7fd fb08 	bl	800d95c <mbedtls_ecp_get_type>
 801034c:	4603      	mov	r3, r0
 801034e:	2b02      	cmp	r3, #2
 8010350:	d108      	bne.n	8010364 <mbedtls_ecp_gen_privkey+0x2c>
        return( mbedtls_ecp_gen_privkey_mx( grp->nbits, d, f_rng, p_rng ) );
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	68b9      	ldr	r1, [r7, #8]
 801035c:	f7ff ff70 	bl	8010240 <mbedtls_ecp_gen_privkey_mx>
 8010360:	4603      	mov	r3, r0
 8010362:	e010      	b.n	8010386 <mbedtls_ecp_gen_privkey+0x4e>
#endif /* MBEDTLS_ECP_MONTGOMERY_ENABLED */

#if defined(MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f7fd faf9 	bl	800d95c <mbedtls_ecp_get_type>
 801036a:	4603      	mov	r3, r0
 801036c:	2b01      	cmp	r3, #1
 801036e:	d109      	bne.n	8010384 <mbedtls_ecp_gen_privkey+0x4c>
        return( mbedtls_ecp_gen_privkey_sw( &grp->N, d, f_rng, p_rng ) );
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	68b9      	ldr	r1, [r7, #8]
 801037c:	f7ff ffbe 	bl	80102fc <mbedtls_ecp_gen_privkey_sw>
 8010380:	4603      	mov	r3, r0
 8010382:	e000      	b.n	8010386 <mbedtls_ecp_gen_privkey+0x4e>
#endif /* MBEDTLS_ECP_SHORT_WEIERSTRASS_ENABLED */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010384:	4b02      	ldr	r3, [pc, #8]	; (8010390 <mbedtls_ecp_gen_privkey+0x58>)
}
 8010386:	4618      	mov	r0, r3
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	ffffb080 	.word	0xffffb080

08010394 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
    X->s = 1;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2201      	movs	r2, #1
 80103a4:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	089a      	lsrs	r2, r3, #2
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	609a      	str	r2, [r3, #8]
}
 80103b4:	bf00      	nop
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    X->s = 1;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2201      	movs	r2, #1
 80103cc:	601a      	str	r2, [r3, #0]
    X->n = 1;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2201      	movs	r2, #1
 80103d2:	605a      	str	r2, [r3, #4]
    X->p = mpi_one;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a04      	ldr	r2, [pc, #16]	; (80103e8 <ecp_mpi_set1+0x28>)
 80103d8:	609a      	str	r2, [r3, #8]
}
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	2000000c 	.word	0x2000000c

080103ec <ecp_group_load>:
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen,
                           const mbedtls_ecp_point *T)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3304      	adds	r3, #4
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	68b9      	ldr	r1, [r7, #8]
 8010402:	4618      	mov	r0, r3
 8010404:	f7ff ffc6 	bl	8010394 <ecp_mpi_load>
    if( a != NULL )
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d006      	beq.n	801041c <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	3310      	adds	r3, #16
 8010412:	69ba      	ldr	r2, [r7, #24]
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff ffbc 	bl	8010394 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	331c      	adds	r3, #28
 8010420:	6a3a      	ldr	r2, [r7, #32]
 8010422:	69f9      	ldr	r1, [r7, #28]
 8010424:	4618      	mov	r0, r3
 8010426:	f7ff ffb5 	bl	8010394 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	334c      	adds	r3, #76	; 0x4c
 801042e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010430:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff ffae 	bl	8010394 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	3328      	adds	r3, #40	; 0x28
 801043c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801043e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff ffa7 	bl	8010394 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	3334      	adds	r3, #52	; 0x34
 801044a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801044c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff ffa0 	bl	8010394 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	3340      	adds	r3, #64	; 0x40
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff ffb1 	bl	80103c0 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3304      	adds	r3, #4
 8010462:	4618      	mov	r0, r3
 8010464:	f7f5 fa52 	bl	800590c <mbedtls_mpi_bitlen>
 8010468:	4602      	mov	r2, r0
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	334c      	adds	r3, #76	; 0x4c
 8010472:	4618      	mov	r0, r3
 8010474:	f7f5 fa4a 	bl	800590c <mbedtls_mpi_bitlen>
 8010478:	4602      	mov	r2, r0
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	65da      	str	r2, [r3, #92]	; 0x5c

    grp->h = 1;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2201      	movs	r2, #1
 8010482:	661a      	str	r2, [r3, #96]	; 0x60

    grp->T = (mbedtls_ecp_point *) T;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010488:	675a      	str	r2, [r3, #116]	; 0x74
    /*
     * Set T_size to 0 to prevent T free by mbedtls_ecp_group_free.
     */
    grp->T_size = 0;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	679a      	str	r2, [r3, #120]	; 0x78

    return( 0 );
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
	...

0801049c <ecp_use_curve25519>:

/*
 * Specialized function for creating the Curve25519 group
 */
static int ecp_use_curve25519( mbedtls_ecp_group *grp )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80104a4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80104a8:	60fb      	str	r3, [r7, #12]

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->A, curve25519_a24 ) );
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	3310      	adds	r3, #16
 80104ae:	4a3f      	ldr	r2, [pc, #252]	; (80105ac <ecp_use_curve25519+0x110>)
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f5 f92d 	bl	8005712 <mbedtls_mpi_lset>
 80104b8:	60f8      	str	r0, [r7, #12]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d15a      	bne.n	8010576 <ecp_use_curve25519+0xda>

    /* P = 2^255 - 19 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3304      	adds	r3, #4
 80104c4:	2101      	movs	r1, #1
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7f5 f923 	bl	8005712 <mbedtls_mpi_lset>
 80104cc:	60f8      	str	r0, [r7, #12]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d152      	bne.n	801057a <ecp_use_curve25519+0xde>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	3304      	adds	r3, #4
 80104d8:	21ff      	movs	r1, #255	; 0xff
 80104da:	4618      	mov	r0, r3
 80104dc:	f7f5 fb99 	bl	8005c12 <mbedtls_mpi_shift_l>
 80104e0:	60f8      	str	r0, [r7, #12]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d14a      	bne.n	801057e <ecp_use_curve25519+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	1d18      	adds	r0, r3, #4
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3304      	adds	r3, #4
 80104f0:	2213      	movs	r2, #19
 80104f2:	4619      	mov	r1, r3
 80104f4:	f7f6 f90b 	bl	800670e <mbedtls_mpi_sub_int>
 80104f8:	60f8      	str	r0, [r7, #12]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d140      	bne.n	8010582 <ecp_use_curve25519+0xe6>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	3304      	adds	r3, #4
 8010504:	4618      	mov	r0, r3
 8010506:	f7f5 fa01 	bl	800590c <mbedtls_mpi_bitlen>
 801050a:	4602      	mov	r2, r0
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	659a      	str	r2, [r3, #88]	; 0x58

    /* N = 2^252 + 27742317777372353535851937790883648493 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &grp->N,
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	334c      	adds	r3, #76	; 0x4c
 8010514:	2210      	movs	r2, #16
 8010516:	4926      	ldr	r1, [pc, #152]	; (80105b0 <ecp_use_curve25519+0x114>)
 8010518:	4618      	mov	r0, r3
 801051a:	f7f5 fa78 	bl	8005a0e <mbedtls_mpi_read_binary>
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d12f      	bne.n	8010586 <ecp_use_curve25519+0xea>
                     curve25519_part_of_n, sizeof( curve25519_part_of_n ) ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	334c      	adds	r3, #76	; 0x4c
 801052a:	2201      	movs	r2, #1
 801052c:	21fc      	movs	r1, #252	; 0xfc
 801052e:	4618      	mov	r0, r3
 8010530:	f7f5 f941 	bl	80057b6 <mbedtls_mpi_set_bit>
 8010534:	60f8      	str	r0, [r7, #12]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d126      	bne.n	801058a <ecp_use_curve25519+0xee>

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3328      	adds	r3, #40	; 0x28
 8010540:	2109      	movs	r1, #9
 8010542:	4618      	mov	r0, r3
 8010544:	f7f5 f8e5 	bl	8005712 <mbedtls_mpi_lset>
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d11e      	bne.n	801058e <ecp_use_curve25519+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3340      	adds	r3, #64	; 0x40
 8010554:	2101      	movs	r1, #1
 8010556:	4618      	mov	r0, r3
 8010558:	f7f5 f8db 	bl	8005712 <mbedtls_mpi_lset>
 801055c:	60f8      	str	r0, [r7, #12]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d116      	bne.n	8010592 <ecp_use_curve25519+0xf6>
    mbedtls_mpi_free( &grp->G.Y );
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3334      	adds	r3, #52	; 0x34
 8010568:	4618      	mov	r0, r3
 801056a:	f7f4 fe3d 	bl	80051e8 <mbedtls_mpi_free>

    /* Actually, the required msb for private keys */
    grp->nbits = 254;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	22fe      	movs	r2, #254	; 0xfe
 8010572:	65da      	str	r2, [r3, #92]	; 0x5c
 8010574:	e00e      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->A, curve25519_a24 ) );
 8010576:	bf00      	nop
 8010578:	e00c      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 801057a:	bf00      	nop
 801057c:	e00a      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 801057e:	bf00      	nop
 8010580:	e008      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 8010582:	bf00      	nop
 8010584:	e006      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &grp->N,
 8010586:	bf00      	nop
 8010588:	e004      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 801058a:	bf00      	nop
 801058c:	e002      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 801058e:	bf00      	nop
 8010590:	e000      	b.n	8010594 <ecp_use_curve25519+0xf8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8010592:	bf00      	nop

cleanup:
    if( ret != 0 )
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <ecp_use_curve25519+0x104>
        mbedtls_ecp_group_free( grp );
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7fd fa79 	bl	800da92 <mbedtls_ecp_group_free>

    return( ret );
 80105a0:	68fb      	ldr	r3, [r7, #12]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	0001db42 	.word	0x0001db42
 80105b0:	0801f0dc 	.word	0x0801f0dc

080105b4 <ecp_use_curve448>:

/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b086      	sub	sp, #24
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80105bc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80105c0:	617b      	str	r3, [r7, #20]

    mbedtls_mpi_init( &Ns );
 80105c2:	f107 0308 	add.w	r3, r7, #8
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7f4 fdfb 	bl	80051c2 <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->A, curve448_a24 ) );
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3310      	adds	r3, #16
 80105d0:	f649 02aa 	movw	r2, #39082	; 0x98aa
 80105d4:	4611      	mov	r1, r2
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7f5 f89b 	bl	8005712 <mbedtls_mpi_lset>
 80105dc:	6178      	str	r0, [r7, #20]
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f040 8081 	bne.w	80106e8 <ecp_use_curve448+0x134>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	3304      	adds	r3, #4
 80105ea:	2101      	movs	r1, #1
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f5 f890 	bl	8005712 <mbedtls_mpi_lset>
 80105f2:	6178      	str	r0, [r7, #20]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d178      	bne.n	80106ec <ecp_use_curve448+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	3304      	adds	r3, #4
 80105fe:	21e0      	movs	r1, #224	; 0xe0
 8010600:	4618      	mov	r0, r3
 8010602:	f7f5 fb06 	bl	8005c12 <mbedtls_mpi_shift_l>
 8010606:	6178      	str	r0, [r7, #20]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d170      	bne.n	80106f0 <ecp_use_curve448+0x13c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	1d18      	adds	r0, r3, #4
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3304      	adds	r3, #4
 8010616:	2201      	movs	r2, #1
 8010618:	4619      	mov	r1, r3
 801061a:	f7f6 f878 	bl	800670e <mbedtls_mpi_sub_int>
 801061e:	6178      	str	r0, [r7, #20]
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d166      	bne.n	80106f4 <ecp_use_curve448+0x140>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	3304      	adds	r3, #4
 801062a:	21e0      	movs	r1, #224	; 0xe0
 801062c:	4618      	mov	r0, r3
 801062e:	f7f5 faf0 	bl	8005c12 <mbedtls_mpi_shift_l>
 8010632:	6178      	str	r0, [r7, #20]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d15e      	bne.n	80106f8 <ecp_use_curve448+0x144>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	1d18      	adds	r0, r3, #4
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	3304      	adds	r3, #4
 8010642:	2201      	movs	r2, #1
 8010644:	4619      	mov	r1, r3
 8010646:	f7f6 f862 	bl	800670e <mbedtls_mpi_sub_int>
 801064a:	6178      	str	r0, [r7, #20]
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d154      	bne.n	80106fc <ecp_use_curve448+0x148>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	3304      	adds	r3, #4
 8010656:	4618      	mov	r0, r3
 8010658:	f7f5 f958 	bl	800590c <mbedtls_mpi_bitlen>
 801065c:	4602      	mov	r2, r0
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	659a      	str	r2, [r3, #88]	; 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	3328      	adds	r3, #40	; 0x28
 8010666:	2105      	movs	r1, #5
 8010668:	4618      	mov	r0, r3
 801066a:	f7f5 f852 	bl	8005712 <mbedtls_mpi_lset>
 801066e:	6178      	str	r0, [r7, #20]
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d144      	bne.n	8010700 <ecp_use_curve448+0x14c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	3340      	adds	r3, #64	; 0x40
 801067a:	2101      	movs	r1, #1
 801067c:	4618      	mov	r0, r3
 801067e:	f7f5 f848 	bl	8005712 <mbedtls_mpi_lset>
 8010682:	6178      	str	r0, [r7, #20]
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d13c      	bne.n	8010704 <ecp_use_curve448+0x150>
    mbedtls_mpi_free( &grp->G.Y );
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	3334      	adds	r3, #52	; 0x34
 801068e:	4618      	mov	r0, r3
 8010690:	f7f4 fdaa 	bl	80051e8 <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	334c      	adds	r3, #76	; 0x4c
 8010698:	2201      	movs	r2, #1
 801069a:	f44f 71df 	mov.w	r1, #446	; 0x1be
 801069e:	4618      	mov	r0, r3
 80106a0:	f7f5 f889 	bl	80057b6 <mbedtls_mpi_set_bit>
 80106a4:	6178      	str	r0, [r7, #20]
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d12d      	bne.n	8010708 <ecp_use_curve448+0x154>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &Ns,
 80106ac:	f107 0308 	add.w	r3, r7, #8
 80106b0:	221c      	movs	r2, #28
 80106b2:	4920      	ldr	r1, [pc, #128]	; (8010734 <ecp_use_curve448+0x180>)
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f5 f9aa 	bl	8005a0e <mbedtls_mpi_read_binary>
 80106ba:	6178      	str	r0, [r7, #20]
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d124      	bne.n	801070c <ecp_use_curve448+0x158>
                        curve448_part_of_n, sizeof( curve448_part_of_n ) ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	334c      	adds	r3, #76	; 0x4c
 80106cc:	f107 0208 	add.w	r2, r7, #8
 80106d0:	4619      	mov	r1, r3
 80106d2:	f7f5 ffae 	bl	8006632 <mbedtls_mpi_sub_mpi>
 80106d6:	6178      	str	r0, [r7, #20]
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d118      	bne.n	8010710 <ecp_use_curve448+0x15c>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f240 12bf 	movw	r2, #447	; 0x1bf
 80106e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80106e6:	e014      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->A, curve448_a24 ) );
 80106e8:	bf00      	nop
 80106ea:	e012      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 80106ec:	bf00      	nop
 80106ee:	e010      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 80106f0:	bf00      	nop
 80106f2:	e00e      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 80106f4:	bf00      	nop
 80106f6:	e00c      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 80106f8:	bf00      	nop
 80106fa:	e00a      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 80106fc:	bf00      	nop
 80106fe:	e008      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 8010700:	bf00      	nop
 8010702:	e006      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8010704:	bf00      	nop
 8010706:	e004      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 8010708:	bf00      	nop
 801070a:	e002      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &Ns,
 801070c:	bf00      	nop
 801070e:	e000      	b.n	8010712 <ecp_use_curve448+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 8010710:	bf00      	nop

cleanup:
    mbedtls_mpi_free( &Ns );
 8010712:	f107 0308 	add.w	r3, r7, #8
 8010716:	4618      	mov	r0, r3
 8010718:	f7f4 fd66 	bl	80051e8 <mbedtls_mpi_free>
    if( ret != 0 )
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <ecp_use_curve448+0x174>
        mbedtls_ecp_group_free( grp );
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7fd f9b5 	bl	800da92 <mbedtls_ecp_group_free>

    return( ret );
 8010728:	697b      	ldr	r3, [r7, #20]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	0801f0ec 	.word	0x0801f0ec

08010738 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08c      	sub	sp, #48	; 0x30
 801073c:	af0a      	add	r7, sp, #40	; 0x28
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	460b      	mov	r3, r1
 8010742:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f7fd f9a4 	bl	800da92 <mbedtls_ecp_group_free>

    grp->id = id;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	78fa      	ldrb	r2, [r7, #3]
 801074e:	701a      	strb	r2, [r3, #0]

    switch( id )
 8010750:	78fb      	ldrb	r3, [r7, #3]
 8010752:	3b01      	subs	r3, #1
 8010754:	2b0c      	cmp	r3, #12
 8010756:	f200 81fd 	bhi.w	8010b54 <mbedtls_ecp_group_load+0x41c>
 801075a:	a201      	add	r2, pc, #4	; (adr r2, 8010760 <mbedtls_ecp_group_load+0x28>)
 801075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010760:	08010795 	.word	0x08010795
 8010764:	080107d3 	.word	0x080107d3
 8010768:	08010811 	.word	0x08010811
 801076c:	0801084f 	.word	0x0801084f
 8010770:	0801088d 	.word	0x0801088d
 8010774:	08010985 	.word	0x08010985
 8010778:	08010ac5 	.word	0x08010ac5
 801077c:	08010afd 	.word	0x08010afd
 8010780:	08010b35 	.word	0x08010b35
 8010784:	080108cb 	.word	0x080108cb
 8010788:	08010909 	.word	0x08010909
 801078c:	08010947 	.word	0x08010947
 8010790:	08010b45 	.word	0x08010b45
    {
#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192R1:
            NIST_MODP( p192 );
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a89      	ldr	r2, [pc, #548]	; (80109bc <mbedtls_ecp_group_load+0x284>)
 8010798:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp192r1 ) );
 801079a:	4b89      	ldr	r3, [pc, #548]	; (80109c0 <mbedtls_ecp_group_load+0x288>)
 801079c:	9309      	str	r3, [sp, #36]	; 0x24
 801079e:	2318      	movs	r3, #24
 80107a0:	9308      	str	r3, [sp, #32]
 80107a2:	4b88      	ldr	r3, [pc, #544]	; (80109c4 <mbedtls_ecp_group_load+0x28c>)
 80107a4:	9307      	str	r3, [sp, #28]
 80107a6:	2318      	movs	r3, #24
 80107a8:	9306      	str	r3, [sp, #24]
 80107aa:	4b87      	ldr	r3, [pc, #540]	; (80109c8 <mbedtls_ecp_group_load+0x290>)
 80107ac:	9305      	str	r3, [sp, #20]
 80107ae:	2318      	movs	r3, #24
 80107b0:	9304      	str	r3, [sp, #16]
 80107b2:	4b86      	ldr	r3, [pc, #536]	; (80109cc <mbedtls_ecp_group_load+0x294>)
 80107b4:	9303      	str	r3, [sp, #12]
 80107b6:	2318      	movs	r3, #24
 80107b8:	9302      	str	r3, [sp, #8]
 80107ba:	4b85      	ldr	r3, [pc, #532]	; (80109d0 <mbedtls_ecp_group_load+0x298>)
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	2300      	movs	r3, #0
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	2218      	movs	r2, #24
 80107c6:	4983      	ldr	r1, [pc, #524]	; (80109d4 <mbedtls_ecp_group_load+0x29c>)
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7ff fe0f 	bl	80103ec <ecp_group_load>
 80107ce:	4603      	mov	r3, r0
 80107d0:	e1c4      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224R1:
            NIST_MODP( p224 );
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4a80      	ldr	r2, [pc, #512]	; (80109d8 <mbedtls_ecp_group_load+0x2a0>)
 80107d6:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp224r1 ) );
 80107d8:	4b80      	ldr	r3, [pc, #512]	; (80109dc <mbedtls_ecp_group_load+0x2a4>)
 80107da:	9309      	str	r3, [sp, #36]	; 0x24
 80107dc:	231c      	movs	r3, #28
 80107de:	9308      	str	r3, [sp, #32]
 80107e0:	4b7f      	ldr	r3, [pc, #508]	; (80109e0 <mbedtls_ecp_group_load+0x2a8>)
 80107e2:	9307      	str	r3, [sp, #28]
 80107e4:	231c      	movs	r3, #28
 80107e6:	9306      	str	r3, [sp, #24]
 80107e8:	4b7e      	ldr	r3, [pc, #504]	; (80109e4 <mbedtls_ecp_group_load+0x2ac>)
 80107ea:	9305      	str	r3, [sp, #20]
 80107ec:	231c      	movs	r3, #28
 80107ee:	9304      	str	r3, [sp, #16]
 80107f0:	4b7d      	ldr	r3, [pc, #500]	; (80109e8 <mbedtls_ecp_group_load+0x2b0>)
 80107f2:	9303      	str	r3, [sp, #12]
 80107f4:	231c      	movs	r3, #28
 80107f6:	9302      	str	r3, [sp, #8]
 80107f8:	4b7c      	ldr	r3, [pc, #496]	; (80109ec <mbedtls_ecp_group_load+0x2b4>)
 80107fa:	9301      	str	r3, [sp, #4]
 80107fc:	2300      	movs	r3, #0
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	2300      	movs	r3, #0
 8010802:	2220      	movs	r2, #32
 8010804:	497a      	ldr	r1, [pc, #488]	; (80109f0 <mbedtls_ecp_group_load+0x2b8>)
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff fdf0 	bl	80103ec <ecp_group_load>
 801080c:	4603      	mov	r3, r0
 801080e:	e1a5      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a78      	ldr	r2, [pc, #480]	; (80109f4 <mbedtls_ecp_group_load+0x2bc>)
 8010814:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp256r1 ) );
 8010816:	4b78      	ldr	r3, [pc, #480]	; (80109f8 <mbedtls_ecp_group_load+0x2c0>)
 8010818:	9309      	str	r3, [sp, #36]	; 0x24
 801081a:	2320      	movs	r3, #32
 801081c:	9308      	str	r3, [sp, #32]
 801081e:	4b77      	ldr	r3, [pc, #476]	; (80109fc <mbedtls_ecp_group_load+0x2c4>)
 8010820:	9307      	str	r3, [sp, #28]
 8010822:	2320      	movs	r3, #32
 8010824:	9306      	str	r3, [sp, #24]
 8010826:	4b76      	ldr	r3, [pc, #472]	; (8010a00 <mbedtls_ecp_group_load+0x2c8>)
 8010828:	9305      	str	r3, [sp, #20]
 801082a:	2320      	movs	r3, #32
 801082c:	9304      	str	r3, [sp, #16]
 801082e:	4b75      	ldr	r3, [pc, #468]	; (8010a04 <mbedtls_ecp_group_load+0x2cc>)
 8010830:	9303      	str	r3, [sp, #12]
 8010832:	2320      	movs	r3, #32
 8010834:	9302      	str	r3, [sp, #8]
 8010836:	4b74      	ldr	r3, [pc, #464]	; (8010a08 <mbedtls_ecp_group_load+0x2d0>)
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	2300      	movs	r3, #0
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	2300      	movs	r3, #0
 8010840:	2220      	movs	r2, #32
 8010842:	4972      	ldr	r1, [pc, #456]	; (8010a0c <mbedtls_ecp_group_load+0x2d4>)
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f7ff fdd1 	bl	80103ec <ecp_group_load>
 801084a:	4603      	mov	r3, r0
 801084c:	e186      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4a6f      	ldr	r2, [pc, #444]	; (8010a10 <mbedtls_ecp_group_load+0x2d8>)
 8010852:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp384r1 ) );
 8010854:	4b6f      	ldr	r3, [pc, #444]	; (8010a14 <mbedtls_ecp_group_load+0x2dc>)
 8010856:	9309      	str	r3, [sp, #36]	; 0x24
 8010858:	2330      	movs	r3, #48	; 0x30
 801085a:	9308      	str	r3, [sp, #32]
 801085c:	4b6e      	ldr	r3, [pc, #440]	; (8010a18 <mbedtls_ecp_group_load+0x2e0>)
 801085e:	9307      	str	r3, [sp, #28]
 8010860:	2330      	movs	r3, #48	; 0x30
 8010862:	9306      	str	r3, [sp, #24]
 8010864:	4b6d      	ldr	r3, [pc, #436]	; (8010a1c <mbedtls_ecp_group_load+0x2e4>)
 8010866:	9305      	str	r3, [sp, #20]
 8010868:	2330      	movs	r3, #48	; 0x30
 801086a:	9304      	str	r3, [sp, #16]
 801086c:	4b6c      	ldr	r3, [pc, #432]	; (8010a20 <mbedtls_ecp_group_load+0x2e8>)
 801086e:	9303      	str	r3, [sp, #12]
 8010870:	2330      	movs	r3, #48	; 0x30
 8010872:	9302      	str	r3, [sp, #8]
 8010874:	4b6b      	ldr	r3, [pc, #428]	; (8010a24 <mbedtls_ecp_group_load+0x2ec>)
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	2300      	movs	r3, #0
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	2300      	movs	r3, #0
 801087e:	2230      	movs	r2, #48	; 0x30
 8010880:	4969      	ldr	r1, [pc, #420]	; (8010a28 <mbedtls_ecp_group_load+0x2f0>)
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7ff fdb2 	bl	80103ec <ecp_group_load>
 8010888:	4603      	mov	r3, r0
 801088a:	e167      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP521R1:
            NIST_MODP( p521 );
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4a67      	ldr	r2, [pc, #412]	; (8010a2c <mbedtls_ecp_group_load+0x2f4>)
 8010890:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP( secp521r1 ) );
 8010892:	4b67      	ldr	r3, [pc, #412]	; (8010a30 <mbedtls_ecp_group_load+0x2f8>)
 8010894:	9309      	str	r3, [sp, #36]	; 0x24
 8010896:	2344      	movs	r3, #68	; 0x44
 8010898:	9308      	str	r3, [sp, #32]
 801089a:	4b66      	ldr	r3, [pc, #408]	; (8010a34 <mbedtls_ecp_group_load+0x2fc>)
 801089c:	9307      	str	r3, [sp, #28]
 801089e:	2344      	movs	r3, #68	; 0x44
 80108a0:	9306      	str	r3, [sp, #24]
 80108a2:	4b65      	ldr	r3, [pc, #404]	; (8010a38 <mbedtls_ecp_group_load+0x300>)
 80108a4:	9305      	str	r3, [sp, #20]
 80108a6:	2344      	movs	r3, #68	; 0x44
 80108a8:	9304      	str	r3, [sp, #16]
 80108aa:	4b64      	ldr	r3, [pc, #400]	; (8010a3c <mbedtls_ecp_group_load+0x304>)
 80108ac:	9303      	str	r3, [sp, #12]
 80108ae:	2344      	movs	r3, #68	; 0x44
 80108b0:	9302      	str	r3, [sp, #8]
 80108b2:	4b63      	ldr	r3, [pc, #396]	; (8010a40 <mbedtls_ecp_group_load+0x308>)
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	2300      	movs	r3, #0
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	2300      	movs	r3, #0
 80108bc:	2244      	movs	r2, #68	; 0x44
 80108be:	4961      	ldr	r1, [pc, #388]	; (8010a44 <mbedtls_ecp_group_load+0x30c>)
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff fd93 	bl	80103ec <ecp_group_load>
 80108c6:	4603      	mov	r3, r0
 80108c8:	e148      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192K1:
            grp->modp = ecp_mod_p192k1;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4a5e      	ldr	r2, [pc, #376]	; (8010a48 <mbedtls_ecp_group_load+0x310>)
 80108ce:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP_A( secp192k1 ) );
 80108d0:	4b5e      	ldr	r3, [pc, #376]	; (8010a4c <mbedtls_ecp_group_load+0x314>)
 80108d2:	9309      	str	r3, [sp, #36]	; 0x24
 80108d4:	2318      	movs	r3, #24
 80108d6:	9308      	str	r3, [sp, #32]
 80108d8:	4b5d      	ldr	r3, [pc, #372]	; (8010a50 <mbedtls_ecp_group_load+0x318>)
 80108da:	9307      	str	r3, [sp, #28]
 80108dc:	2318      	movs	r3, #24
 80108de:	9306      	str	r3, [sp, #24]
 80108e0:	4b5c      	ldr	r3, [pc, #368]	; (8010a54 <mbedtls_ecp_group_load+0x31c>)
 80108e2:	9305      	str	r3, [sp, #20]
 80108e4:	2318      	movs	r3, #24
 80108e6:	9304      	str	r3, [sp, #16]
 80108e8:	4b5b      	ldr	r3, [pc, #364]	; (8010a58 <mbedtls_ecp_group_load+0x320>)
 80108ea:	9303      	str	r3, [sp, #12]
 80108ec:	2304      	movs	r3, #4
 80108ee:	9302      	str	r3, [sp, #8]
 80108f0:	4b5a      	ldr	r3, [pc, #360]	; (8010a5c <mbedtls_ecp_group_load+0x324>)
 80108f2:	9301      	str	r3, [sp, #4]
 80108f4:	2304      	movs	r3, #4
 80108f6:	9300      	str	r3, [sp, #0]
 80108f8:	4b59      	ldr	r3, [pc, #356]	; (8010a60 <mbedtls_ecp_group_load+0x328>)
 80108fa:	2218      	movs	r2, #24
 80108fc:	4959      	ldr	r1, [pc, #356]	; (8010a64 <mbedtls_ecp_group_load+0x32c>)
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7ff fd74 	bl	80103ec <ecp_group_load>
 8010904:	4603      	mov	r3, r0
 8010906:	e129      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224K1:
            grp->modp = ecp_mod_p224k1;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a57      	ldr	r2, [pc, #348]	; (8010a68 <mbedtls_ecp_group_load+0x330>)
 801090c:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP_A( secp224k1 ) );
 801090e:	4b57      	ldr	r3, [pc, #348]	; (8010a6c <mbedtls_ecp_group_load+0x334>)
 8010910:	9309      	str	r3, [sp, #36]	; 0x24
 8010912:	2320      	movs	r3, #32
 8010914:	9308      	str	r3, [sp, #32]
 8010916:	4b56      	ldr	r3, [pc, #344]	; (8010a70 <mbedtls_ecp_group_load+0x338>)
 8010918:	9307      	str	r3, [sp, #28]
 801091a:	231c      	movs	r3, #28
 801091c:	9306      	str	r3, [sp, #24]
 801091e:	4b55      	ldr	r3, [pc, #340]	; (8010a74 <mbedtls_ecp_group_load+0x33c>)
 8010920:	9305      	str	r3, [sp, #20]
 8010922:	231c      	movs	r3, #28
 8010924:	9304      	str	r3, [sp, #16]
 8010926:	4b54      	ldr	r3, [pc, #336]	; (8010a78 <mbedtls_ecp_group_load+0x340>)
 8010928:	9303      	str	r3, [sp, #12]
 801092a:	2304      	movs	r3, #4
 801092c:	9302      	str	r3, [sp, #8]
 801092e:	4b53      	ldr	r3, [pc, #332]	; (8010a7c <mbedtls_ecp_group_load+0x344>)
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	2304      	movs	r3, #4
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	4b52      	ldr	r3, [pc, #328]	; (8010a80 <mbedtls_ecp_group_load+0x348>)
 8010938:	221c      	movs	r2, #28
 801093a:	4952      	ldr	r1, [pc, #328]	; (8010a84 <mbedtls_ecp_group_load+0x34c>)
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f7ff fd55 	bl	80103ec <ecp_group_load>
 8010942:	4603      	mov	r3, r0
 8010944:	e10a      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256K1:
            grp->modp = ecp_mod_p256k1;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4a4f      	ldr	r2, [pc, #316]	; (8010a88 <mbedtls_ecp_group_load+0x350>)
 801094a:	665a      	str	r2, [r3, #100]	; 0x64
            return( LOAD_GROUP_A( secp256k1 ) );
 801094c:	4b4f      	ldr	r3, [pc, #316]	; (8010a8c <mbedtls_ecp_group_load+0x354>)
 801094e:	9309      	str	r3, [sp, #36]	; 0x24
 8010950:	2320      	movs	r3, #32
 8010952:	9308      	str	r3, [sp, #32]
 8010954:	4b4e      	ldr	r3, [pc, #312]	; (8010a90 <mbedtls_ecp_group_load+0x358>)
 8010956:	9307      	str	r3, [sp, #28]
 8010958:	2320      	movs	r3, #32
 801095a:	9306      	str	r3, [sp, #24]
 801095c:	4b4d      	ldr	r3, [pc, #308]	; (8010a94 <mbedtls_ecp_group_load+0x35c>)
 801095e:	9305      	str	r3, [sp, #20]
 8010960:	2320      	movs	r3, #32
 8010962:	9304      	str	r3, [sp, #16]
 8010964:	4b4c      	ldr	r3, [pc, #304]	; (8010a98 <mbedtls_ecp_group_load+0x360>)
 8010966:	9303      	str	r3, [sp, #12]
 8010968:	2304      	movs	r3, #4
 801096a:	9302      	str	r3, [sp, #8]
 801096c:	4b4b      	ldr	r3, [pc, #300]	; (8010a9c <mbedtls_ecp_group_load+0x364>)
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	2304      	movs	r3, #4
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	4b4a      	ldr	r3, [pc, #296]	; (8010aa0 <mbedtls_ecp_group_load+0x368>)
 8010976:	2220      	movs	r2, #32
 8010978:	494a      	ldr	r1, [pc, #296]	; (8010aa4 <mbedtls_ecp_group_load+0x36c>)
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7ff fd36 	bl	80103ec <ecp_group_load>
 8010980:	4603      	mov	r3, r0
 8010982:	e0eb      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
        case MBEDTLS_ECP_DP_BP256R1:
            return( LOAD_GROUP_A( brainpoolP256r1 ) );
 8010984:	4b48      	ldr	r3, [pc, #288]	; (8010aa8 <mbedtls_ecp_group_load+0x370>)
 8010986:	9309      	str	r3, [sp, #36]	; 0x24
 8010988:	2320      	movs	r3, #32
 801098a:	9308      	str	r3, [sp, #32]
 801098c:	4b47      	ldr	r3, [pc, #284]	; (8010aac <mbedtls_ecp_group_load+0x374>)
 801098e:	9307      	str	r3, [sp, #28]
 8010990:	2320      	movs	r3, #32
 8010992:	9306      	str	r3, [sp, #24]
 8010994:	4b46      	ldr	r3, [pc, #280]	; (8010ab0 <mbedtls_ecp_group_load+0x378>)
 8010996:	9305      	str	r3, [sp, #20]
 8010998:	2320      	movs	r3, #32
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	4b45      	ldr	r3, [pc, #276]	; (8010ab4 <mbedtls_ecp_group_load+0x37c>)
 801099e:	9303      	str	r3, [sp, #12]
 80109a0:	2320      	movs	r3, #32
 80109a2:	9302      	str	r3, [sp, #8]
 80109a4:	4b44      	ldr	r3, [pc, #272]	; (8010ab8 <mbedtls_ecp_group_load+0x380>)
 80109a6:	9301      	str	r3, [sp, #4]
 80109a8:	2320      	movs	r3, #32
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	4b43      	ldr	r3, [pc, #268]	; (8010abc <mbedtls_ecp_group_load+0x384>)
 80109ae:	2220      	movs	r2, #32
 80109b0:	4943      	ldr	r1, [pc, #268]	; (8010ac0 <mbedtls_ecp_group_load+0x388>)
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff fd1a 	bl	80103ec <ecp_group_load>
 80109b8:	4603      	mov	r3, r0
 80109ba:	e0cf      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
 80109bc:	08010c8b 	.word	0x08010c8b
 80109c0:	080175dc 	.word	0x080175dc
 80109c4:	080172c4 	.word	0x080172c4
 80109c8:	080172ac 	.word	0x080172ac
 80109cc:	08017294 	.word	0x08017294
 80109d0:	0801727c 	.word	0x0801727c
 80109d4:	08017264 	.word	0x08017264
 80109d8:	08010ec9 	.word	0x08010ec9
 80109dc:	08017cac 	.word	0x08017cac
 80109e0:	08017890 	.word	0x08017890
 80109e4:	08017874 	.word	0x08017874
 80109e8:	08017858 	.word	0x08017858
 80109ec:	0801783c 	.word	0x0801783c
 80109f0:	0801781c 	.word	0x0801781c
 80109f4:	0801131b 	.word	0x0801131b
 80109f8:	0801838c 	.word	0x0801838c
 80109fc:	08017f6c 	.word	0x08017f6c
 8010a00:	08017f4c 	.word	0x08017f4c
 8010a04:	08017f2c 	.word	0x08017f2c
 8010a08:	08017f0c 	.word	0x08017f0c
 8010a0c:	08017eec 	.word	0x08017eec
 8010a10:	08011b0f 	.word	0x08011b0f
 8010a14:	080192bc 	.word	0x080192bc
 8010a18:	0801868c 	.word	0x0801868c
 8010a1c:	0801865c 	.word	0x0801865c
 8010a20:	0801862c 	.word	0x0801862c
 8010a24:	080185fc 	.word	0x080185fc
 8010a28:	080185cc 	.word	0x080185cc
 8010a2c:	08012565 	.word	0x08012565
 8010a30:	0801aa90 	.word	0x0801aa90
 8010a34:	0801984c 	.word	0x0801984c
 8010a38:	08019808 	.word	0x08019808
 8010a3c:	080197c4 	.word	0x080197c4
 8010a40:	08019780 	.word	0x08019780
 8010a44:	0801973c 	.word	0x0801973c
 8010a48:	08012b05 	.word	0x08012b05
 8010a4c:	0801b278 	.word	0x0801b278
 8010a50:	0801af60 	.word	0x0801af60
 8010a54:	0801af48 	.word	0x0801af48
 8010a58:	0801af30 	.word	0x0801af30
 8010a5c:	0801af2c 	.word	0x0801af2c
 8010a60:	0801af28 	.word	0x0801af28
 8010a64:	0801af10 	.word	0x0801af10
 8010a68:	08012b31 	.word	0x08012b31
 8010a6c:	0801b934 	.word	0x0801b934
 8010a70:	0801b514 	.word	0x0801b514
 8010a74:	0801b4f8 	.word	0x0801b4f8
 8010a78:	0801b4dc 	.word	0x0801b4dc
 8010a7c:	0801b4d8 	.word	0x0801b4d8
 8010a80:	0801b4d4 	.word	0x0801b4d4
 8010a84:	0801b4b8 	.word	0x0801b4b8
 8010a88:	08012b5d 	.word	0x08012b5d
 8010a8c:	0801bffc 	.word	0x0801bffc
 8010a90:	0801bbdc 	.word	0x0801bbdc
 8010a94:	0801bbbc 	.word	0x0801bbbc
 8010a98:	0801bb9c 	.word	0x0801bb9c
 8010a9c:	0801bb98 	.word	0x0801bb98
 8010aa0:	0801bb94 	.word	0x0801bb94
 8010aa4:	0801bb74 	.word	0x0801bb74
 8010aa8:	0801c6fc 	.word	0x0801c6fc
 8010aac:	0801c2dc 	.word	0x0801c2dc
 8010ab0:	0801c2bc 	.word	0x0801c2bc
 8010ab4:	0801c29c 	.word	0x0801c29c
 8010ab8:	0801c27c 	.word	0x0801c27c
 8010abc:	0801c25c 	.word	0x0801c25c
 8010ac0:	0801c23c 	.word	0x0801c23c
#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
        case MBEDTLS_ECP_DP_BP384R1:
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8010ac4:	4b27      	ldr	r3, [pc, #156]	; (8010b64 <mbedtls_ecp_group_load+0x42c>)
 8010ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ac8:	2330      	movs	r3, #48	; 0x30
 8010aca:	9308      	str	r3, [sp, #32]
 8010acc:	4b26      	ldr	r3, [pc, #152]	; (8010b68 <mbedtls_ecp_group_load+0x430>)
 8010ace:	9307      	str	r3, [sp, #28]
 8010ad0:	2330      	movs	r3, #48	; 0x30
 8010ad2:	9306      	str	r3, [sp, #24]
 8010ad4:	4b25      	ldr	r3, [pc, #148]	; (8010b6c <mbedtls_ecp_group_load+0x434>)
 8010ad6:	9305      	str	r3, [sp, #20]
 8010ad8:	2330      	movs	r3, #48	; 0x30
 8010ada:	9304      	str	r3, [sp, #16]
 8010adc:	4b24      	ldr	r3, [pc, #144]	; (8010b70 <mbedtls_ecp_group_load+0x438>)
 8010ade:	9303      	str	r3, [sp, #12]
 8010ae0:	2330      	movs	r3, #48	; 0x30
 8010ae2:	9302      	str	r3, [sp, #8]
 8010ae4:	4b23      	ldr	r3, [pc, #140]	; (8010b74 <mbedtls_ecp_group_load+0x43c>)
 8010ae6:	9301      	str	r3, [sp, #4]
 8010ae8:	2330      	movs	r3, #48	; 0x30
 8010aea:	9300      	str	r3, [sp, #0]
 8010aec:	4b22      	ldr	r3, [pc, #136]	; (8010b78 <mbedtls_ecp_group_load+0x440>)
 8010aee:	2230      	movs	r2, #48	; 0x30
 8010af0:	4922      	ldr	r1, [pc, #136]	; (8010b7c <mbedtls_ecp_group_load+0x444>)
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fc7a 	bl	80103ec <ecp_group_load>
 8010af8:	4603      	mov	r3, r0
 8010afa:	e02f      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
        case MBEDTLS_ECP_DP_BP512R1:
            return( LOAD_GROUP_A( brainpoolP512r1 ) );
 8010afc:	4b20      	ldr	r3, [pc, #128]	; (8010b80 <mbedtls_ecp_group_load+0x448>)
 8010afe:	9309      	str	r3, [sp, #36]	; 0x24
 8010b00:	2340      	movs	r3, #64	; 0x40
 8010b02:	9308      	str	r3, [sp, #32]
 8010b04:	4b1f      	ldr	r3, [pc, #124]	; (8010b84 <mbedtls_ecp_group_load+0x44c>)
 8010b06:	9307      	str	r3, [sp, #28]
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	9306      	str	r3, [sp, #24]
 8010b0c:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <mbedtls_ecp_group_load+0x450>)
 8010b0e:	9305      	str	r3, [sp, #20]
 8010b10:	2340      	movs	r3, #64	; 0x40
 8010b12:	9304      	str	r3, [sp, #16]
 8010b14:	4b1d      	ldr	r3, [pc, #116]	; (8010b8c <mbedtls_ecp_group_load+0x454>)
 8010b16:	9303      	str	r3, [sp, #12]
 8010b18:	2340      	movs	r3, #64	; 0x40
 8010b1a:	9302      	str	r3, [sp, #8]
 8010b1c:	4b1c      	ldr	r3, [pc, #112]	; (8010b90 <mbedtls_ecp_group_load+0x458>)
 8010b1e:	9301      	str	r3, [sp, #4]
 8010b20:	2340      	movs	r3, #64	; 0x40
 8010b22:	9300      	str	r3, [sp, #0]
 8010b24:	4b1b      	ldr	r3, [pc, #108]	; (8010b94 <mbedtls_ecp_group_load+0x45c>)
 8010b26:	2240      	movs	r2, #64	; 0x40
 8010b28:	491b      	ldr	r1, [pc, #108]	; (8010b98 <mbedtls_ecp_group_load+0x460>)
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff fc5e 	bl	80103ec <ecp_group_load>
 8010b30:	4603      	mov	r3, r0
 8010b32:	e013      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
        case MBEDTLS_ECP_DP_CURVE25519:
            grp->modp = ecp_mod_p255;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4a19      	ldr	r2, [pc, #100]	; (8010b9c <mbedtls_ecp_group_load+0x464>)
 8010b38:	665a      	str	r2, [r3, #100]	; 0x64
            return( ecp_use_curve25519( grp ) );
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7ff fcae 	bl	801049c <ecp_use_curve25519>
 8010b40:	4603      	mov	r3, r0
 8010b42:	e00b      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4a16      	ldr	r2, [pc, #88]	; (8010ba0 <mbedtls_ecp_group_load+0x468>)
 8010b48:	665a      	str	r2, [r3, #100]	; 0x64
            return( ecp_use_curve448( grp ) );
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7ff fd32 	bl	80105b4 <ecp_use_curve448>
 8010b50:	4603      	mov	r3, r0
 8010b52:	e003      	b.n	8010b5c <mbedtls_ecp_group_load+0x424>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            grp->id = MBEDTLS_ECP_DP_NONE;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	701a      	strb	r2, [r3, #0]
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8010b5a:	4b12      	ldr	r3, [pc, #72]	; (8010ba4 <mbedtls_ecp_group_load+0x46c>)
    }
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	0801d65c 	.word	0x0801d65c
 8010b68:	0801ca2c 	.word	0x0801ca2c
 8010b6c:	0801c9fc 	.word	0x0801c9fc
 8010b70:	0801c9cc 	.word	0x0801c9cc
 8010b74:	0801c99c 	.word	0x0801c99c
 8010b78:	0801c96c 	.word	0x0801c96c
 8010b7c:	0801c93c 	.word	0x0801c93c
 8010b80:	0801ec5c 	.word	0x0801ec5c
 8010b84:	0801dc1c 	.word	0x0801dc1c
 8010b88:	0801dbdc 	.word	0x0801dbdc
 8010b8c:	0801db9c 	.word	0x0801db9c
 8010b90:	0801db5c 	.word	0x0801db5c
 8010b94:	0801db1c 	.word	0x0801db1c
 8010b98:	0801dadc 	.word	0x0801dadc
 8010b9c:	08012621 	.word	0x08012621
 8010ba0:	08012711 	.word	0x08012711
 8010ba4:	ffffb180 	.word	0xffffb180

08010ba8 <add64>:
 * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
 */

/* Add 64-bit chunks (dst += src) and update carry */
static inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b087      	sub	sp, #28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    mbedtls_mpi_uint c = 0;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 8010bb8:	2300      	movs	r3, #0
 8010bba:	75fb      	strb	r3, [r7, #23]
 8010bbc:	e02b      	b.n	8010c16 <add64+0x6e>
    {
        *dst += c;      c  = ( *dst < c );
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	441a      	add	r2, r3
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	601a      	str	r2, [r3, #0]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	693a      	ldr	r2, [r7, #16]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	bf8c      	ite	hi
 8010bd4:	2301      	movhi	r3, #1
 8010bd6:	2300      	movls	r3, #0
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	613b      	str	r3, [r7, #16]
        *dst += *src;   c += ( *dst < *src );
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	441a      	add	r2, r3
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	bf34      	ite	cc
 8010bf6:	2301      	movcc	r3, #1
 8010bf8:	2300      	movcs	r3, #0
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	4413      	add	r3, r2
 8010c02:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 8010c04:	7dfb      	ldrb	r3, [r7, #23]
 8010c06:	3301      	adds	r3, #1
 8010c08:	75fb      	strb	r3, [r7, #23]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	60fb      	str	r3, [r7, #12]
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	3304      	adds	r3, #4
 8010c14:	60bb      	str	r3, [r7, #8]
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d9d0      	bls.n	8010bbe <add64+0x16>
    }
    *carry += c;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	441a      	add	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	601a      	str	r2, [r3, #0]
}
 8010c28:	bf00      	nop
 8010c2a:	371c      	adds	r7, #28
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <carry64>:

/* Add carry to a 64-bit chunk and update carry */
static inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
    unsigned char i;
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 8010c3e:	2300      	movs	r3, #0
 8010c40:	73fb      	strb	r3, [r7, #15]
 8010c42:	e018      	b.n	8010c76 <carry64+0x42>
    {
        *dst += *carry;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	441a      	add	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	601a      	str	r2, [r3, #0]
        *carry  = ( *dst < *carry );
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	bf34      	ite	cc
 8010c5e:	2301      	movcc	r3, #1
 8010c60:	2300      	movcs	r3, #0
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 8010c6a:	7bfb      	ldrb	r3, [r7, #15]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	73fb      	strb	r3, [r7, #15]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	3304      	adds	r3, #4
 8010c74:	607b      	str	r3, [r7, #4]
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d9e3      	bls.n	8010c44 <carry64+0x10>
    }
}
 8010c7c:	bf00      	nop
 8010c7e:	bf00      	nop
 8010c80:	3714      	adds	r7, #20
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <ecp_mod_p192>:

/*
 * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
 */
static int ecp_mod_p192( mbedtls_mpi *N )
{
 8010c8a:	b580      	push	{r7, lr}
 8010c8c:	b086      	sub	sp, #24
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8010c92:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8010c96:	613b      	str	r3, [r7, #16]
    mbedtls_mpi_uint c = 0;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	60bb      	str	r3, [r7, #8]
    mbedtls_mpi_uint *p, *end;

    /* Make sure we have enough blocks so that A(5) is legal */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
 8010c9c:	210c      	movs	r1, #12
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7f4 fac8 	bl	8005234 <mbedtls_mpi_grow>
 8010ca4:	6138      	str	r0, [r7, #16]
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d16b      	bne.n	8010d84 <ecp_mod_p192+0xfa>

    p = N->p;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	689b      	ldr	r3, [r3, #8]
 8010cb0:	617b      	str	r3, [r7, #20]
    end = p + N->n;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	697a      	ldr	r2, [r7, #20]
 8010cba:	4413      	add	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]

    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	3318      	adds	r3, #24
 8010cc4:	f107 0208 	add.w	r2, r7, #8
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6978      	ldr	r0, [r7, #20]
 8010ccc:	f7ff ff6c 	bl	8010ba8 <add64>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	3328      	adds	r3, #40	; 0x28
 8010cd6:	f107 0208 	add.w	r2, r7, #8
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6978      	ldr	r0, [r7, #20]
 8010cde:	f7ff ff63 	bl	8010ba8 <add64>
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	617b      	str	r3, [r7, #20]
 8010ce8:	f107 0308 	add.w	r3, r7, #8
 8010cec:	4619      	mov	r1, r3
 8010cee:	6978      	ldr	r0, [r7, #20]
 8010cf0:	f7ff ffa0 	bl	8010c34 <carry64>
    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	3318      	adds	r3, #24
 8010cfa:	f107 0208 	add.w	r2, r7, #8
 8010cfe:	4619      	mov	r1, r3
 8010d00:	6978      	ldr	r0, [r7, #20]
 8010d02:	f7ff ff51 	bl	8010ba8 <add64>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	3320      	adds	r3, #32
 8010d0c:	f107 0208 	add.w	r2, r7, #8
 8010d10:	4619      	mov	r1, r3
 8010d12:	6978      	ldr	r0, [r7, #20]
 8010d14:	f7ff ff48 	bl	8010ba8 <add64>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	689b      	ldr	r3, [r3, #8]
 8010d1c:	3328      	adds	r3, #40	; 0x28
 8010d1e:	f107 0208 	add.w	r2, r7, #8
 8010d22:	4619      	mov	r1, r3
 8010d24:	6978      	ldr	r0, [r7, #20]
 8010d26:	f7ff ff3f 	bl	8010ba8 <add64>
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	3308      	adds	r3, #8
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	f107 0308 	add.w	r3, r7, #8
 8010d34:	4619      	mov	r1, r3
 8010d36:	6978      	ldr	r0, [r7, #20]
 8010d38:	f7ff ff7c 	bl	8010c34 <carry64>
    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	3320      	adds	r3, #32
 8010d42:	f107 0208 	add.w	r2, r7, #8
 8010d46:	4619      	mov	r1, r3
 8010d48:	6978      	ldr	r0, [r7, #20]
 8010d4a:	f7ff ff2d 	bl	8010ba8 <add64>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	3328      	adds	r3, #40	; 0x28
 8010d54:	f107 0208 	add.w	r2, r7, #8
 8010d58:	4619      	mov	r1, r3
 8010d5a:	6978      	ldr	r0, [r7, #20]
 8010d5c:	f7ff ff24 	bl	8010ba8 <add64>
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	3308      	adds	r3, #8
 8010d64:	617b      	str	r3, [r7, #20]
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	e002      	b.n	8010d74 <ecp_mod_p192+0xea>
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	3304      	adds	r3, #4
 8010d78:	617b      	str	r3, [r7, #20]
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d3f5      	bcc.n	8010d6e <ecp_mod_p192+0xe4>

cleanup:
 8010d82:	e000      	b.n	8010d86 <ecp_mod_p192+0xfc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
 8010d84:	bf00      	nop
    return( ret );
 8010d86:	693b      	ldr	r3, [r7, #16]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
    *dst += src;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	441a      	add	r2, r3
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f993 3000 	ldrsb.w	r3, [r3]
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	68fa      	ldr	r2, [r7, #12]
 8010db2:	6812      	ldr	r2, [r2, #0]
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	4291      	cmp	r1, r2
 8010db8:	bf8c      	ite	hi
 8010dba:	2201      	movhi	r2, #1
 8010dbc:	2200      	movls	r2, #0
 8010dbe:	b2d2      	uxtb	r2, r2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	b25a      	sxtb	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	701a      	strb	r2, [r3, #0]
}
 8010dca:	bf00      	nop
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr

08010dd6 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8010dd6:	b480      	push	{r7}
 8010dd8:	b085      	sub	sp, #20
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	60f8      	str	r0, [r7, #12]
 8010dde:	60b9      	str	r1, [r7, #8]
 8010de0:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f993 3000 	ldrsb.w	r3, [r3]
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	6812      	ldr	r2, [r2, #0]
 8010dee:	68b9      	ldr	r1, [r7, #8]
 8010df0:	4291      	cmp	r1, r2
 8010df2:	bf8c      	ite	hi
 8010df4:	2201      	movhi	r2, #1
 8010df6:	2200      	movls	r2, #0
 8010df8:	b2d2      	uxtb	r2, r2
 8010dfa:	1a9b      	subs	r3, r3, r2
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	b25a      	sxtb	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	1ad2      	subs	r2, r2, r3
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	601a      	str	r2, [r3, #0]
}
 8010e10:	bf00      	nop
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <mbedtls_ecp_fix_negative>:
 * If the result is negative, we get it in the form
 * c * 2^bits + N, with c negative and N positive shorter than 'bits'
 */
MBEDTLS_STATIC_TESTABLE
void mbedtls_ecp_fix_negative( mbedtls_mpi *N, signed char c, size_t bits )
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b087      	sub	sp, #28
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	460b      	mov	r3, r1
 8010e26:	607a      	str	r2, [r7, #4]
 8010e28:	72fb      	strb	r3, [r7, #11]
    size_t i;

    /* Set N := 2^bits - 1 - N. We know that 0 <= N < 2^bits, so
     * set the absolute value to 0xfff...fff - N. There is no carry
     * since we're subtracting from all-bits-one.  */
    for( i = 0; i <= bits / 8 / sizeof( mbedtls_mpi_uint ); i++ )
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	e00f      	b.n	8010e50 <mbedtls_ecp_fix_negative+0x34>
    {
        N->p[i] = ~(mbedtls_mpi_uint)0 - N->p[i];
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	689a      	ldr	r2, [r3, #8]
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6899      	ldr	r1, [r3, #8]
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	440b      	add	r3, r1
 8010e46:	43d2      	mvns	r2, r2
 8010e48:	601a      	str	r2, [r3, #0]
    for( i = 0; i <= bits / 8 / sizeof( mbedtls_mpi_uint ); i++ )
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	617b      	str	r3, [r7, #20]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	095b      	lsrs	r3, r3, #5
 8010e54:	697a      	ldr	r2, [r7, #20]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d9ea      	bls.n	8010e30 <mbedtls_ecp_fix_negative+0x14>
    }
    /* Add 1, taking care of the carry. */
    i = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	617b      	str	r3, [r7, #20]
    do
        ++N->p[i];
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	689a      	ldr	r2, [r3, #8]
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	4413      	add	r3, r2
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	3201      	adds	r2, #1
 8010e6c:	601a      	str	r2, [r3, #0]
    while( N->p[i++] == 0 && i <= bits / 8 / sizeof( mbedtls_mpi_uint ) );
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	689a      	ldr	r2, [r3, #8]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	1c59      	adds	r1, r3, #1
 8010e76:	6179      	str	r1, [r7, #20]
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	4413      	add	r3, r2
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d104      	bne.n	8010e8c <mbedtls_ecp_fix_negative+0x70>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	095b      	lsrs	r3, r3, #5
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d9e8      	bls.n	8010e5e <mbedtls_ecp_fix_negative+0x42>
    /* Invert the sign.
     * Now N = N0 - 2^bits where N0 is the initial value of N. */
    N->s = -1;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e92:	601a      	str	r2, [r3, #0]

    /* Add |c| * 2^bits to the absolute value. Since c and N are
    * negative, this adds c * 2^bits. */
    mbedtls_mpi_uint msw = (mbedtls_mpi_uint) -c;
 8010e94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e98:	425b      	negs	r3, r3
 8010e9a:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_HAVE_INT64)
    if( bits == 224 )
        msw <<= 32;
#endif
    N->p[bits / 8 / sizeof( mbedtls_mpi_uint)] += msw;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6899      	ldr	r1, [r3, #8]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	08db      	lsrs	r3, r3, #3
 8010ea4:	f023 0203 	bic.w	r2, r3, #3
 8010ea8:	440a      	add	r2, r1
 8010eaa:	6811      	ldr	r1, [r2, #0]
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	6892      	ldr	r2, [r2, #8]
 8010eb0:	f023 0303 	bic.w	r3, r3, #3
 8010eb4:	4413      	add	r3, r2
 8010eb6:	693a      	ldr	r2, [r7, #16]
 8010eb8:	440a      	add	r2, r1
 8010eba:	601a      	str	r2, [r3, #0]
}
 8010ebc:	bf00      	nop
 8010ebe:	371c      	adds	r7, #28
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <ecp_mod_p224>:
#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
/*
 * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
 */
static int ecp_mod_p224( mbedtls_mpi *N )
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b088      	sub	sp, #32
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
    INIT( 224 );
 8010ed0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8010ed4:	61bb      	str	r3, [r7, #24]
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	74bb      	strb	r3, [r7, #18]
 8010eda:	2300      	movs	r3, #0
 8010edc:	61fb      	str	r3, [r7, #28]
 8010ede:	23e0      	movs	r3, #224	; 0xe0
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	210f      	movs	r1, #15
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7f4 f9a5 	bl	8005234 <mbedtls_mpi_grow>
 8010eea:	61b8      	str	r0, [r7, #24]
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f040 820b 	bne.w	801130a <ecp_mod_p224+0x442>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	689a      	ldr	r2, [r3, #8]
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	4413      	add	r3, r2
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	60fb      	str	r3, [r7, #12]

    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	331c      	adds	r3, #28
 8010f08:	6819      	ldr	r1, [r3, #0]
 8010f0a:	f107 0212 	add.w	r2, r7, #18
 8010f0e:	f107 030c 	add.w	r3, r7, #12
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff ff5f 	bl	8010dd6 <sub32>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	689b      	ldr	r3, [r3, #8]
 8010f1c:	332c      	adds	r3, #44	; 0x2c
 8010f1e:	6819      	ldr	r1, [r3, #0]
 8010f20:	f107 0212 	add.w	r2, r7, #18
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7ff ff54 	bl	8010dd6 <sub32>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	689a      	ldr	r2, [r3, #8]
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	4413      	add	r3, r2
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	601a      	str	r2, [r3, #0]
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	61fb      	str	r3, [r7, #28]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	689a      	ldr	r2, [r3, #8]
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	4413      	add	r3, r2
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	60fb      	str	r3, [r7, #12]
 8010f50:	7cbb      	ldrb	r3, [r7, #18]
 8010f52:	74fb      	strb	r3, [r7, #19]
 8010f54:	2300      	movs	r3, #0
 8010f56:	74bb      	strb	r3, [r7, #18]
 8010f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	da0b      	bge.n	8010f78 <ecp_mod_p224+0xb0>
 8010f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f64:	425b      	negs	r3, r3
 8010f66:	4619      	mov	r1, r3
 8010f68:	f107 0212 	add.w	r2, r7, #18
 8010f6c:	f107 030c 	add.w	r3, r7, #12
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff ff30 	bl	8010dd6 <sub32>
 8010f76:	e008      	b.n	8010f8a <ecp_mod_p224+0xc2>
 8010f78:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8010f7c:	f107 0212 	add.w	r2, r7, #18
 8010f80:	f107 030c 	add.w	r3, r7, #12
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff ff03 	bl	8010d90 <add32>
    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	3320      	adds	r3, #32
 8010f90:	6819      	ldr	r1, [r3, #0]
 8010f92:	f107 0212 	add.w	r2, r7, #18
 8010f96:	f107 030c 	add.w	r3, r7, #12
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7ff ff1b 	bl	8010dd6 <sub32>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	3330      	adds	r3, #48	; 0x30
 8010fa6:	6819      	ldr	r1, [r3, #0]
 8010fa8:	f107 0212 	add.w	r2, r7, #18
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff ff10 	bl	8010dd6 <sub32>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	689a      	ldr	r2, [r3, #8]
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	4413      	add	r3, r2
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	61fb      	str	r3, [r7, #28]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	689a      	ldr	r2, [r3, #8]
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	4413      	add	r3, r2
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]
 8010fd8:	7cbb      	ldrb	r3, [r7, #18]
 8010fda:	74fb      	strb	r3, [r7, #19]
 8010fdc:	2300      	movs	r3, #0
 8010fde:	74bb      	strb	r3, [r7, #18]
 8010fe0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	da0b      	bge.n	8011000 <ecp_mod_p224+0x138>
 8010fe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fec:	425b      	negs	r3, r3
 8010fee:	4619      	mov	r1, r3
 8010ff0:	f107 0212 	add.w	r2, r7, #18
 8010ff4:	f107 030c 	add.w	r3, r7, #12
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7ff feec 	bl	8010dd6 <sub32>
 8010ffe:	e008      	b.n	8011012 <ecp_mod_p224+0x14a>
 8011000:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011004:	f107 0212 	add.w	r2, r7, #18
 8011008:	f107 030c 	add.w	r3, r7, #12
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff febf 	bl	8010d90 <add32>
    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	3324      	adds	r3, #36	; 0x24
 8011018:	6819      	ldr	r1, [r3, #0]
 801101a:	f107 0212 	add.w	r2, r7, #18
 801101e:	f107 030c 	add.w	r3, r7, #12
 8011022:	4618      	mov	r0, r3
 8011024:	f7ff fed7 	bl	8010dd6 <sub32>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	3334      	adds	r3, #52	; 0x34
 801102e:	6819      	ldr	r1, [r3, #0]
 8011030:	f107 0212 	add.w	r2, r7, #18
 8011034:	f107 030c 	add.w	r3, r7, #12
 8011038:	4618      	mov	r0, r3
 801103a:	f7ff fecc 	bl	8010dd6 <sub32>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	689a      	ldr	r2, [r3, #8]
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	601a      	str	r2, [r3, #0]
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	3301      	adds	r3, #1
 8011050:	61fb      	str	r3, [r7, #28]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	689a      	ldr	r2, [r3, #8]
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	4413      	add	r3, r2
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	60fb      	str	r3, [r7, #12]
 8011060:	7cbb      	ldrb	r3, [r7, #18]
 8011062:	74fb      	strb	r3, [r7, #19]
 8011064:	2300      	movs	r3, #0
 8011066:	74bb      	strb	r3, [r7, #18]
 8011068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801106c:	2b00      	cmp	r3, #0
 801106e:	da0b      	bge.n	8011088 <ecp_mod_p224+0x1c0>
 8011070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011074:	425b      	negs	r3, r3
 8011076:	4619      	mov	r1, r3
 8011078:	f107 0212 	add.w	r2, r7, #18
 801107c:	f107 030c 	add.w	r3, r7, #12
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff fea8 	bl	8010dd6 <sub32>
 8011086:	e008      	b.n	801109a <ecp_mod_p224+0x1d2>
 8011088:	f997 1013 	ldrsb.w	r1, [r7, #19]
 801108c:	f107 0212 	add.w	r2, r7, #18
 8011090:	f107 030c 	add.w	r3, r7, #12
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fe7b 	bl	8010d90 <add32>
    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	689b      	ldr	r3, [r3, #8]
 801109e:	3328      	adds	r3, #40	; 0x28
 80110a0:	6819      	ldr	r1, [r3, #0]
 80110a2:	f107 0212 	add.w	r2, r7, #18
 80110a6:	f107 030c 	add.w	r3, r7, #12
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff fe93 	bl	8010dd6 <sub32>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	331c      	adds	r3, #28
 80110b6:	6819      	ldr	r1, [r3, #0]
 80110b8:	f107 0212 	add.w	r2, r7, #18
 80110bc:	f107 030c 	add.w	r3, r7, #12
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff fe65 	bl	8010d90 <add32>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	332c      	adds	r3, #44	; 0x2c
 80110cc:	6819      	ldr	r1, [r3, #0]
 80110ce:	f107 0212 	add.w	r2, r7, #18
 80110d2:	f107 030c 	add.w	r3, r7, #12
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7ff fe5a 	bl	8010d90 <add32>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	689a      	ldr	r2, [r3, #8]
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	4413      	add	r3, r2
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	601a      	str	r2, [r3, #0]
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	3301      	adds	r3, #1
 80110ee:	61fb      	str	r3, [r7, #28]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689a      	ldr	r2, [r3, #8]
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	4413      	add	r3, r2
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	60fb      	str	r3, [r7, #12]
 80110fe:	7cbb      	ldrb	r3, [r7, #18]
 8011100:	74fb      	strb	r3, [r7, #19]
 8011102:	2300      	movs	r3, #0
 8011104:	74bb      	strb	r3, [r7, #18]
 8011106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801110a:	2b00      	cmp	r3, #0
 801110c:	da0b      	bge.n	8011126 <ecp_mod_p224+0x25e>
 801110e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011112:	425b      	negs	r3, r3
 8011114:	4619      	mov	r1, r3
 8011116:	f107 0212 	add.w	r2, r7, #18
 801111a:	f107 030c 	add.w	r3, r7, #12
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff fe59 	bl	8010dd6 <sub32>
 8011124:	e008      	b.n	8011138 <ecp_mod_p224+0x270>
 8011126:	f997 1013 	ldrsb.w	r1, [r7, #19]
 801112a:	f107 0212 	add.w	r2, r7, #18
 801112e:	f107 030c 	add.w	r3, r7, #12
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff fe2c 	bl	8010d90 <add32>
    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	689b      	ldr	r3, [r3, #8]
 801113c:	332c      	adds	r3, #44	; 0x2c
 801113e:	6819      	ldr	r1, [r3, #0]
 8011140:	f107 0212 	add.w	r2, r7, #18
 8011144:	f107 030c 	add.w	r3, r7, #12
 8011148:	4618      	mov	r0, r3
 801114a:	f7ff fe44 	bl	8010dd6 <sub32>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	3320      	adds	r3, #32
 8011154:	6819      	ldr	r1, [r3, #0]
 8011156:	f107 0212 	add.w	r2, r7, #18
 801115a:	f107 030c 	add.w	r3, r7, #12
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff fe16 	bl	8010d90 <add32>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	689b      	ldr	r3, [r3, #8]
 8011168:	3330      	adds	r3, #48	; 0x30
 801116a:	6819      	ldr	r1, [r3, #0]
 801116c:	f107 0212 	add.w	r2, r7, #18
 8011170:	f107 030c 	add.w	r3, r7, #12
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff fe0b 	bl	8010d90 <add32>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	689a      	ldr	r2, [r3, #8]
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4413      	add	r3, r2
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	601a      	str	r2, [r3, #0]
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	3301      	adds	r3, #1
 801118c:	61fb      	str	r3, [r7, #28]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	4413      	add	r3, r2
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	60fb      	str	r3, [r7, #12]
 801119c:	7cbb      	ldrb	r3, [r7, #18]
 801119e:	74fb      	strb	r3, [r7, #19]
 80111a0:	2300      	movs	r3, #0
 80111a2:	74bb      	strb	r3, [r7, #18]
 80111a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	da0b      	bge.n	80111c4 <ecp_mod_p224+0x2fc>
 80111ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111b0:	425b      	negs	r3, r3
 80111b2:	4619      	mov	r1, r3
 80111b4:	f107 0212 	add.w	r2, r7, #18
 80111b8:	f107 030c 	add.w	r3, r7, #12
 80111bc:	4618      	mov	r0, r3
 80111be:	f7ff fe0a 	bl	8010dd6 <sub32>
 80111c2:	e008      	b.n	80111d6 <ecp_mod_p224+0x30e>
 80111c4:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80111c8:	f107 0212 	add.w	r2, r7, #18
 80111cc:	f107 030c 	add.w	r3, r7, #12
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7ff fddd 	bl	8010d90 <add32>
    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	3330      	adds	r3, #48	; 0x30
 80111dc:	6819      	ldr	r1, [r3, #0]
 80111de:	f107 0212 	add.w	r2, r7, #18
 80111e2:	f107 030c 	add.w	r3, r7, #12
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff fdf5 	bl	8010dd6 <sub32>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	3324      	adds	r3, #36	; 0x24
 80111f2:	6819      	ldr	r1, [r3, #0]
 80111f4:	f107 0212 	add.w	r2, r7, #18
 80111f8:	f107 030c 	add.w	r3, r7, #12
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ff fdc7 	bl	8010d90 <add32>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	3334      	adds	r3, #52	; 0x34
 8011208:	6819      	ldr	r1, [r3, #0]
 801120a:	f107 0212 	add.w	r2, r7, #18
 801120e:	f107 030c 	add.w	r3, r7, #12
 8011212:	4618      	mov	r0, r3
 8011214:	f7ff fdbc 	bl	8010d90 <add32>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	689a      	ldr	r2, [r3, #8]
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	3301      	adds	r3, #1
 801122a:	61fb      	str	r3, [r7, #28]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	689a      	ldr	r2, [r3, #8]
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	4413      	add	r3, r2
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	7cbb      	ldrb	r3, [r7, #18]
 801123c:	74fb      	strb	r3, [r7, #19]
 801123e:	2300      	movs	r3, #0
 8011240:	74bb      	strb	r3, [r7, #18]
 8011242:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011246:	2b00      	cmp	r3, #0
 8011248:	da0b      	bge.n	8011262 <ecp_mod_p224+0x39a>
 801124a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801124e:	425b      	negs	r3, r3
 8011250:	4619      	mov	r1, r3
 8011252:	f107 0212 	add.w	r2, r7, #18
 8011256:	f107 030c 	add.w	r3, r7, #12
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fdbb 	bl	8010dd6 <sub32>
 8011260:	e008      	b.n	8011274 <ecp_mod_p224+0x3ac>
 8011262:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011266:	f107 0212 	add.w	r2, r7, #18
 801126a:	f107 030c 	add.w	r3, r7, #12
 801126e:	4618      	mov	r0, r3
 8011270:	f7ff fd8e 	bl	8010d90 <add32>
    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	3334      	adds	r3, #52	; 0x34
 801127a:	6819      	ldr	r1, [r3, #0]
 801127c:	f107 0212 	add.w	r2, r7, #18
 8011280:	f107 030c 	add.w	r3, r7, #12
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fda6 	bl	8010dd6 <sub32>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	3328      	adds	r3, #40	; 0x28
 8011290:	6819      	ldr	r1, [r3, #0]
 8011292:	f107 0212 	add.w	r2, r7, #18
 8011296:	f107 030c 	add.w	r3, r7, #12
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff fd78 	bl	8010d90 <add32>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	689a      	ldr	r2, [r3, #8]
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	4413      	add	r3, r2
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	601a      	str	r2, [r3, #0]
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	3301      	adds	r3, #1
 80112b2:	61fb      	str	r3, [r7, #28]
 80112b4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80112b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80112bc:	b25b      	sxtb	r3, r3
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	689a      	ldr	r2, [r3, #8]
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	009b      	lsls	r3, r3, #2
 80112c8:	4413      	add	r3, r2
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	601a      	str	r2, [r3, #0]
 80112ce:	2300      	movs	r3, #0
 80112d0:	60fb      	str	r3, [r7, #12]
 80112d2:	e006      	b.n	80112e2 <ecp_mod_p224+0x41a>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	689a      	ldr	r2, [r3, #8]
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	68fa      	ldr	r2, [r7, #12]
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	3301      	adds	r3, #1
 80112e6:	61fb      	str	r3, [r7, #28]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	69fa      	ldr	r2, [r7, #28]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d3f0      	bcc.n	80112d4 <ecp_mod_p224+0x40c>
 80112f2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	da09      	bge.n	801130e <ecp_mod_p224+0x446>
 80112fa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80112fe:	697a      	ldr	r2, [r7, #20]
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fd8a 	bl	8010e1c <mbedtls_ecp_fix_negative>
 8011308:	e002      	b.n	8011310 <ecp_mod_p224+0x448>
    INIT( 224 );
 801130a:	bf00      	nop
 801130c:	e000      	b.n	8011310 <ecp_mod_p224+0x448>

cleanup:
 801130e:	bf00      	nop
    return( ret );
 8011310:	69bb      	ldr	r3, [r7, #24]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b088      	sub	sp, #32
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 8011322:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8011326:	61bb      	str	r3, [r7, #24]
 8011328:	2300      	movs	r3, #0
 801132a:	74bb      	strb	r3, [r7, #18]
 801132c:	2300      	movs	r3, #0
 801132e:	61fb      	str	r3, [r7, #28]
 8011330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011334:	617b      	str	r3, [r7, #20]
 8011336:	2111      	movs	r1, #17
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7f3 ff7b 	bl	8005234 <mbedtls_mpi_grow>
 801133e:	61b8      	str	r0, [r7, #24]
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	2b00      	cmp	r3, #0
 8011344:	f040 83db 	bne.w	8011afe <ecp_mod_p256+0x7e4>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	689a      	ldr	r2, [r3, #8]
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	60fb      	str	r3, [r7, #12]

    ADD(  8 ); ADD(  9 );
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	3320      	adds	r3, #32
 801135c:	6819      	ldr	r1, [r3, #0]
 801135e:	f107 0212 	add.w	r2, r7, #18
 8011362:	f107 030c 	add.w	r3, r7, #12
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fd12 	bl	8010d90 <add32>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	689b      	ldr	r3, [r3, #8]
 8011370:	3324      	adds	r3, #36	; 0x24
 8011372:	6819      	ldr	r1, [r3, #0]
 8011374:	f107 0212 	add.w	r2, r7, #18
 8011378:	f107 030c 	add.w	r3, r7, #12
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fd07 	bl	8010d90 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	689b      	ldr	r3, [r3, #8]
 8011386:	332c      	adds	r3, #44	; 0x2c
 8011388:	6819      	ldr	r1, [r3, #0]
 801138a:	f107 0212 	add.w	r2, r7, #18
 801138e:	f107 030c 	add.w	r3, r7, #12
 8011392:	4618      	mov	r0, r3
 8011394:	f7ff fd1f 	bl	8010dd6 <sub32>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	3330      	adds	r3, #48	; 0x30
 801139e:	6819      	ldr	r1, [r3, #0]
 80113a0:	f107 0212 	add.w	r2, r7, #18
 80113a4:	f107 030c 	add.w	r3, r7, #12
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff fd14 	bl	8010dd6 <sub32>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	689b      	ldr	r3, [r3, #8]
 80113b2:	3334      	adds	r3, #52	; 0x34
 80113b4:	6819      	ldr	r1, [r3, #0]
 80113b6:	f107 0212 	add.w	r2, r7, #18
 80113ba:	f107 030c 	add.w	r3, r7, #12
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fd09 	bl	8010dd6 <sub32>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	3338      	adds	r3, #56	; 0x38
 80113ca:	6819      	ldr	r1, [r3, #0]
 80113cc:	f107 0212 	add.w	r2, r7, #18
 80113d0:	f107 030c 	add.w	r3, r7, #12
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff fcfe 	bl	8010dd6 <sub32>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	689a      	ldr	r2, [r3, #8]
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4413      	add	r3, r2
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	601a      	str	r2, [r3, #0]
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	3301      	adds	r3, #1
 80113ec:	61fb      	str	r3, [r7, #28]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	689a      	ldr	r2, [r3, #8]
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	4413      	add	r3, r2
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	60fb      	str	r3, [r7, #12]
 80113fc:	7cbb      	ldrb	r3, [r7, #18]
 80113fe:	74fb      	strb	r3, [r7, #19]
 8011400:	2300      	movs	r3, #0
 8011402:	74bb      	strb	r3, [r7, #18]
 8011404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011408:	2b00      	cmp	r3, #0
 801140a:	da0b      	bge.n	8011424 <ecp_mod_p256+0x10a>
 801140c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011410:	425b      	negs	r3, r3
 8011412:	4619      	mov	r1, r3
 8011414:	f107 0212 	add.w	r2, r7, #18
 8011418:	f107 030c 	add.w	r3, r7, #12
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff fcda 	bl	8010dd6 <sub32>
 8011422:	e008      	b.n	8011436 <ecp_mod_p256+0x11c>
 8011424:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011428:	f107 0212 	add.w	r2, r7, #18
 801142c:	f107 030c 	add.w	r3, r7, #12
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fcad 	bl	8010d90 <add32>

    ADD(  9 ); ADD( 10 );
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	689b      	ldr	r3, [r3, #8]
 801143a:	3324      	adds	r3, #36	; 0x24
 801143c:	6819      	ldr	r1, [r3, #0]
 801143e:	f107 0212 	add.w	r2, r7, #18
 8011442:	f107 030c 	add.w	r3, r7, #12
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff fca2 	bl	8010d90 <add32>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	3328      	adds	r3, #40	; 0x28
 8011452:	6819      	ldr	r1, [r3, #0]
 8011454:	f107 0212 	add.w	r2, r7, #18
 8011458:	f107 030c 	add.w	r3, r7, #12
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff fc97 	bl	8010d90 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	689b      	ldr	r3, [r3, #8]
 8011466:	3330      	adds	r3, #48	; 0x30
 8011468:	6819      	ldr	r1, [r3, #0]
 801146a:	f107 0212 	add.w	r2, r7, #18
 801146e:	f107 030c 	add.w	r3, r7, #12
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff fcaf 	bl	8010dd6 <sub32>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	3334      	adds	r3, #52	; 0x34
 801147e:	6819      	ldr	r1, [r3, #0]
 8011480:	f107 0212 	add.w	r2, r7, #18
 8011484:	f107 030c 	add.w	r3, r7, #12
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff fca4 	bl	8010dd6 <sub32>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	689b      	ldr	r3, [r3, #8]
 8011492:	3338      	adds	r3, #56	; 0x38
 8011494:	6819      	ldr	r1, [r3, #0]
 8011496:	f107 0212 	add.w	r2, r7, #18
 801149a:	f107 030c 	add.w	r3, r7, #12
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff fc99 	bl	8010dd6 <sub32>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	333c      	adds	r3, #60	; 0x3c
 80114aa:	6819      	ldr	r1, [r3, #0]
 80114ac:	f107 0212 	add.w	r2, r7, #18
 80114b0:	f107 030c 	add.w	r3, r7, #12
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff fc8e 	bl	8010dd6 <sub32>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	689a      	ldr	r2, [r3, #8]
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4413      	add	r3, r2
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	601a      	str	r2, [r3, #0]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	3301      	adds	r3, #1
 80114cc:	61fb      	str	r3, [r7, #28]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	4413      	add	r3, r2
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	60fb      	str	r3, [r7, #12]
 80114dc:	7cbb      	ldrb	r3, [r7, #18]
 80114de:	74fb      	strb	r3, [r7, #19]
 80114e0:	2300      	movs	r3, #0
 80114e2:	74bb      	strb	r3, [r7, #18]
 80114e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	da0b      	bge.n	8011504 <ecp_mod_p256+0x1ea>
 80114ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114f0:	425b      	negs	r3, r3
 80114f2:	4619      	mov	r1, r3
 80114f4:	f107 0212 	add.w	r2, r7, #18
 80114f8:	f107 030c 	add.w	r3, r7, #12
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7ff fc6a 	bl	8010dd6 <sub32>
 8011502:	e008      	b.n	8011516 <ecp_mod_p256+0x1fc>
 8011504:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011508:	f107 0212 	add.w	r2, r7, #18
 801150c:	f107 030c 	add.w	r3, r7, #12
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff fc3d 	bl	8010d90 <add32>

    ADD( 10 ); ADD( 11 );
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	3328      	adds	r3, #40	; 0x28
 801151c:	6819      	ldr	r1, [r3, #0]
 801151e:	f107 0212 	add.w	r2, r7, #18
 8011522:	f107 030c 	add.w	r3, r7, #12
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fc32 	bl	8010d90 <add32>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	689b      	ldr	r3, [r3, #8]
 8011530:	332c      	adds	r3, #44	; 0x2c
 8011532:	6819      	ldr	r1, [r3, #0]
 8011534:	f107 0212 	add.w	r2, r7, #18
 8011538:	f107 030c 	add.w	r3, r7, #12
 801153c:	4618      	mov	r0, r3
 801153e:	f7ff fc27 	bl	8010d90 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	3334      	adds	r3, #52	; 0x34
 8011548:	6819      	ldr	r1, [r3, #0]
 801154a:	f107 0212 	add.w	r2, r7, #18
 801154e:	f107 030c 	add.w	r3, r7, #12
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fc3f 	bl	8010dd6 <sub32>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	3338      	adds	r3, #56	; 0x38
 801155e:	6819      	ldr	r1, [r3, #0]
 8011560:	f107 0212 	add.w	r2, r7, #18
 8011564:	f107 030c 	add.w	r3, r7, #12
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff fc34 	bl	8010dd6 <sub32>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	333c      	adds	r3, #60	; 0x3c
 8011574:	6819      	ldr	r1, [r3, #0]
 8011576:	f107 0212 	add.w	r2, r7, #18
 801157a:	f107 030c 	add.w	r3, r7, #12
 801157e:	4618      	mov	r0, r3
 8011580:	f7ff fc29 	bl	8010dd6 <sub32>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	689a      	ldr	r2, [r3, #8]
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	68fa      	ldr	r2, [r7, #12]
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	3301      	adds	r3, #1
 8011596:	61fb      	str	r3, [r7, #28]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	689a      	ldr	r2, [r3, #8]
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	009b      	lsls	r3, r3, #2
 80115a0:	4413      	add	r3, r2
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	60fb      	str	r3, [r7, #12]
 80115a6:	7cbb      	ldrb	r3, [r7, #18]
 80115a8:	74fb      	strb	r3, [r7, #19]
 80115aa:	2300      	movs	r3, #0
 80115ac:	74bb      	strb	r3, [r7, #18]
 80115ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	da0b      	bge.n	80115ce <ecp_mod_p256+0x2b4>
 80115b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115ba:	425b      	negs	r3, r3
 80115bc:	4619      	mov	r1, r3
 80115be:	f107 0212 	add.w	r2, r7, #18
 80115c2:	f107 030c 	add.w	r3, r7, #12
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff fc05 	bl	8010dd6 <sub32>
 80115cc:	e008      	b.n	80115e0 <ecp_mod_p256+0x2c6>
 80115ce:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80115d2:	f107 0212 	add.w	r2, r7, #18
 80115d6:	f107 030c 	add.w	r3, r7, #12
 80115da:	4618      	mov	r0, r3
 80115dc:	f7ff fbd8 	bl	8010d90 <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	332c      	adds	r3, #44	; 0x2c
 80115e6:	6819      	ldr	r1, [r3, #0]
 80115e8:	f107 0212 	add.w	r2, r7, #18
 80115ec:	f107 030c 	add.w	r3, r7, #12
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7ff fbcd 	bl	8010d90 <add32>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	332c      	adds	r3, #44	; 0x2c
 80115fc:	6819      	ldr	r1, [r3, #0]
 80115fe:	f107 0212 	add.w	r2, r7, #18
 8011602:	f107 030c 	add.w	r3, r7, #12
 8011606:	4618      	mov	r0, r3
 8011608:	f7ff fbc2 	bl	8010d90 <add32>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	689b      	ldr	r3, [r3, #8]
 8011610:	3330      	adds	r3, #48	; 0x30
 8011612:	6819      	ldr	r1, [r3, #0]
 8011614:	f107 0212 	add.w	r2, r7, #18
 8011618:	f107 030c 	add.w	r3, r7, #12
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fbb7 	bl	8010d90 <add32>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	3330      	adds	r3, #48	; 0x30
 8011628:	6819      	ldr	r1, [r3, #0]
 801162a:	f107 0212 	add.w	r2, r7, #18
 801162e:	f107 030c 	add.w	r3, r7, #12
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff fbac 	bl	8010d90 <add32>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	3334      	adds	r3, #52	; 0x34
 801163e:	6819      	ldr	r1, [r3, #0]
 8011640:	f107 0212 	add.w	r2, r7, #18
 8011644:	f107 030c 	add.w	r3, r7, #12
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fba1 	bl	8010d90 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	333c      	adds	r3, #60	; 0x3c
 8011654:	6819      	ldr	r1, [r3, #0]
 8011656:	f107 0212 	add.w	r2, r7, #18
 801165a:	f107 030c 	add.w	r3, r7, #12
 801165e:	4618      	mov	r0, r3
 8011660:	f7ff fbb9 	bl	8010dd6 <sub32>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	3320      	adds	r3, #32
 801166a:	6819      	ldr	r1, [r3, #0]
 801166c:	f107 0212 	add.w	r2, r7, #18
 8011670:	f107 030c 	add.w	r3, r7, #12
 8011674:	4618      	mov	r0, r3
 8011676:	f7ff fbae 	bl	8010dd6 <sub32>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	689b      	ldr	r3, [r3, #8]
 801167e:	3324      	adds	r3, #36	; 0x24
 8011680:	6819      	ldr	r1, [r3, #0]
 8011682:	f107 0212 	add.w	r2, r7, #18
 8011686:	f107 030c 	add.w	r3, r7, #12
 801168a:	4618      	mov	r0, r3
 801168c:	f7ff fba3 	bl	8010dd6 <sub32>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689a      	ldr	r2, [r3, #8]
 8011694:	69fb      	ldr	r3, [r7, #28]
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4413      	add	r3, r2
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	3301      	adds	r3, #1
 80116a2:	61fb      	str	r3, [r7, #28]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	689a      	ldr	r2, [r3, #8]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	7cbb      	ldrb	r3, [r7, #18]
 80116b4:	74fb      	strb	r3, [r7, #19]
 80116b6:	2300      	movs	r3, #0
 80116b8:	74bb      	strb	r3, [r7, #18]
 80116ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	da0b      	bge.n	80116da <ecp_mod_p256+0x3c0>
 80116c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116c6:	425b      	negs	r3, r3
 80116c8:	4619      	mov	r1, r3
 80116ca:	f107 0212 	add.w	r2, r7, #18
 80116ce:	f107 030c 	add.w	r3, r7, #12
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7ff fb7f 	bl	8010dd6 <sub32>
 80116d8:	e008      	b.n	80116ec <ecp_mod_p256+0x3d2>
 80116da:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80116de:	f107 0212 	add.w	r2, r7, #18
 80116e2:	f107 030c 	add.w	r3, r7, #12
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7ff fb52 	bl	8010d90 <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	3330      	adds	r3, #48	; 0x30
 80116f2:	6819      	ldr	r1, [r3, #0]
 80116f4:	f107 0212 	add.w	r2, r7, #18
 80116f8:	f107 030c 	add.w	r3, r7, #12
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff fb47 	bl	8010d90 <add32>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	3330      	adds	r3, #48	; 0x30
 8011708:	6819      	ldr	r1, [r3, #0]
 801170a:	f107 0212 	add.w	r2, r7, #18
 801170e:	f107 030c 	add.w	r3, r7, #12
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff fb3c 	bl	8010d90 <add32>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	3334      	adds	r3, #52	; 0x34
 801171e:	6819      	ldr	r1, [r3, #0]
 8011720:	f107 0212 	add.w	r2, r7, #18
 8011724:	f107 030c 	add.w	r3, r7, #12
 8011728:	4618      	mov	r0, r3
 801172a:	f7ff fb31 	bl	8010d90 <add32>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	3334      	adds	r3, #52	; 0x34
 8011734:	6819      	ldr	r1, [r3, #0]
 8011736:	f107 0212 	add.w	r2, r7, #18
 801173a:	f107 030c 	add.w	r3, r7, #12
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff fb26 	bl	8010d90 <add32>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	3338      	adds	r3, #56	; 0x38
 801174a:	6819      	ldr	r1, [r3, #0]
 801174c:	f107 0212 	add.w	r2, r7, #18
 8011750:	f107 030c 	add.w	r3, r7, #12
 8011754:	4618      	mov	r0, r3
 8011756:	f7ff fb1b 	bl	8010d90 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	689b      	ldr	r3, [r3, #8]
 801175e:	3324      	adds	r3, #36	; 0x24
 8011760:	6819      	ldr	r1, [r3, #0]
 8011762:	f107 0212 	add.w	r2, r7, #18
 8011766:	f107 030c 	add.w	r3, r7, #12
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff fb33 	bl	8010dd6 <sub32>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	3328      	adds	r3, #40	; 0x28
 8011776:	6819      	ldr	r1, [r3, #0]
 8011778:	f107 0212 	add.w	r2, r7, #18
 801177c:	f107 030c 	add.w	r3, r7, #12
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff fb28 	bl	8010dd6 <sub32>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	689a      	ldr	r2, [r3, #8]
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	4413      	add	r3, r2
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	601a      	str	r2, [r3, #0]
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	3301      	adds	r3, #1
 8011798:	61fb      	str	r3, [r7, #28]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	689a      	ldr	r2, [r3, #8]
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4413      	add	r3, r2
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	60fb      	str	r3, [r7, #12]
 80117a8:	7cbb      	ldrb	r3, [r7, #18]
 80117aa:	74fb      	strb	r3, [r7, #19]
 80117ac:	2300      	movs	r3, #0
 80117ae:	74bb      	strb	r3, [r7, #18]
 80117b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	da0b      	bge.n	80117d0 <ecp_mod_p256+0x4b6>
 80117b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117bc:	425b      	negs	r3, r3
 80117be:	4619      	mov	r1, r3
 80117c0:	f107 0212 	add.w	r2, r7, #18
 80117c4:	f107 030c 	add.w	r3, r7, #12
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7ff fb04 	bl	8010dd6 <sub32>
 80117ce:	e008      	b.n	80117e2 <ecp_mod_p256+0x4c8>
 80117d0:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80117d4:	f107 0212 	add.w	r2, r7, #18
 80117d8:	f107 030c 	add.w	r3, r7, #12
 80117dc:	4618      	mov	r0, r3
 80117de:	f7ff fad7 	bl	8010d90 <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	3334      	adds	r3, #52	; 0x34
 80117e8:	6819      	ldr	r1, [r3, #0]
 80117ea:	f107 0212 	add.w	r2, r7, #18
 80117ee:	f107 030c 	add.w	r3, r7, #12
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ff facc 	bl	8010d90 <add32>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	3334      	adds	r3, #52	; 0x34
 80117fe:	6819      	ldr	r1, [r3, #0]
 8011800:	f107 0212 	add.w	r2, r7, #18
 8011804:	f107 030c 	add.w	r3, r7, #12
 8011808:	4618      	mov	r0, r3
 801180a:	f7ff fac1 	bl	8010d90 <add32>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	689b      	ldr	r3, [r3, #8]
 8011812:	3338      	adds	r3, #56	; 0x38
 8011814:	6819      	ldr	r1, [r3, #0]
 8011816:	f107 0212 	add.w	r2, r7, #18
 801181a:	f107 030c 	add.w	r3, r7, #12
 801181e:	4618      	mov	r0, r3
 8011820:	f7ff fab6 	bl	8010d90 <add32>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	3338      	adds	r3, #56	; 0x38
 801182a:	6819      	ldr	r1, [r3, #0]
 801182c:	f107 0212 	add.w	r2, r7, #18
 8011830:	f107 030c 	add.w	r3, r7, #12
 8011834:	4618      	mov	r0, r3
 8011836:	f7ff faab 	bl	8010d90 <add32>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	333c      	adds	r3, #60	; 0x3c
 8011840:	6819      	ldr	r1, [r3, #0]
 8011842:	f107 0212 	add.w	r2, r7, #18
 8011846:	f107 030c 	add.w	r3, r7, #12
 801184a:	4618      	mov	r0, r3
 801184c:	f7ff faa0 	bl	8010d90 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	3328      	adds	r3, #40	; 0x28
 8011856:	6819      	ldr	r1, [r3, #0]
 8011858:	f107 0212 	add.w	r2, r7, #18
 801185c:	f107 030c 	add.w	r3, r7, #12
 8011860:	4618      	mov	r0, r3
 8011862:	f7ff fab8 	bl	8010dd6 <sub32>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	332c      	adds	r3, #44	; 0x2c
 801186c:	6819      	ldr	r1, [r3, #0]
 801186e:	f107 0212 	add.w	r2, r7, #18
 8011872:	f107 030c 	add.w	r3, r7, #12
 8011876:	4618      	mov	r0, r3
 8011878:	f7ff faad 	bl	8010dd6 <sub32>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	689a      	ldr	r2, [r3, #8]
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	4413      	add	r3, r2
 8011886:	68fa      	ldr	r2, [r7, #12]
 8011888:	601a      	str	r2, [r3, #0]
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	3301      	adds	r3, #1
 801188e:	61fb      	str	r3, [r7, #28]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	689a      	ldr	r2, [r3, #8]
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	7cbb      	ldrb	r3, [r7, #18]
 80118a0:	74fb      	strb	r3, [r7, #19]
 80118a2:	2300      	movs	r3, #0
 80118a4:	74bb      	strb	r3, [r7, #18]
 80118a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	da0b      	bge.n	80118c6 <ecp_mod_p256+0x5ac>
 80118ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118b2:	425b      	negs	r3, r3
 80118b4:	4619      	mov	r1, r3
 80118b6:	f107 0212 	add.w	r2, r7, #18
 80118ba:	f107 030c 	add.w	r3, r7, #12
 80118be:	4618      	mov	r0, r3
 80118c0:	f7ff fa89 	bl	8010dd6 <sub32>
 80118c4:	e008      	b.n	80118d8 <ecp_mod_p256+0x5be>
 80118c6:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80118ca:	f107 0212 	add.w	r2, r7, #18
 80118ce:	f107 030c 	add.w	r3, r7, #12
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7ff fa5c 	bl	8010d90 <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	3338      	adds	r3, #56	; 0x38
 80118de:	6819      	ldr	r1, [r3, #0]
 80118e0:	f107 0212 	add.w	r2, r7, #18
 80118e4:	f107 030c 	add.w	r3, r7, #12
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7ff fa51 	bl	8010d90 <add32>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	689b      	ldr	r3, [r3, #8]
 80118f2:	3338      	adds	r3, #56	; 0x38
 80118f4:	6819      	ldr	r1, [r3, #0]
 80118f6:	f107 0212 	add.w	r2, r7, #18
 80118fa:	f107 030c 	add.w	r3, r7, #12
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff fa46 	bl	8010d90 <add32>
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	333c      	adds	r3, #60	; 0x3c
 801190a:	6819      	ldr	r1, [r3, #0]
 801190c:	f107 0212 	add.w	r2, r7, #18
 8011910:	f107 030c 	add.w	r3, r7, #12
 8011914:	4618      	mov	r0, r3
 8011916:	f7ff fa3b 	bl	8010d90 <add32>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	689b      	ldr	r3, [r3, #8]
 801191e:	333c      	adds	r3, #60	; 0x3c
 8011920:	6819      	ldr	r1, [r3, #0]
 8011922:	f107 0212 	add.w	r2, r7, #18
 8011926:	f107 030c 	add.w	r3, r7, #12
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff fa30 	bl	8010d90 <add32>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	3338      	adds	r3, #56	; 0x38
 8011936:	6819      	ldr	r1, [r3, #0]
 8011938:	f107 0212 	add.w	r2, r7, #18
 801193c:	f107 030c 	add.w	r3, r7, #12
 8011940:	4618      	mov	r0, r3
 8011942:	f7ff fa25 	bl	8010d90 <add32>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	3334      	adds	r3, #52	; 0x34
 801194c:	6819      	ldr	r1, [r3, #0]
 801194e:	f107 0212 	add.w	r2, r7, #18
 8011952:	f107 030c 	add.w	r3, r7, #12
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fa1a 	bl	8010d90 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	3320      	adds	r3, #32
 8011962:	6819      	ldr	r1, [r3, #0]
 8011964:	f107 0212 	add.w	r2, r7, #18
 8011968:	f107 030c 	add.w	r3, r7, #12
 801196c:	4618      	mov	r0, r3
 801196e:	f7ff fa32 	bl	8010dd6 <sub32>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	3324      	adds	r3, #36	; 0x24
 8011978:	6819      	ldr	r1, [r3, #0]
 801197a:	f107 0212 	add.w	r2, r7, #18
 801197e:	f107 030c 	add.w	r3, r7, #12
 8011982:	4618      	mov	r0, r3
 8011984:	f7ff fa27 	bl	8010dd6 <sub32>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	689a      	ldr	r2, [r3, #8]
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4413      	add	r3, r2
 8011992:	68fa      	ldr	r2, [r7, #12]
 8011994:	601a      	str	r2, [r3, #0]
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	3301      	adds	r3, #1
 801199a:	61fb      	str	r3, [r7, #28]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	689a      	ldr	r2, [r3, #8]
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	60fb      	str	r3, [r7, #12]
 80119aa:	7cbb      	ldrb	r3, [r7, #18]
 80119ac:	74fb      	strb	r3, [r7, #19]
 80119ae:	2300      	movs	r3, #0
 80119b0:	74bb      	strb	r3, [r7, #18]
 80119b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	da0b      	bge.n	80119d2 <ecp_mod_p256+0x6b8>
 80119ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119be:	425b      	negs	r3, r3
 80119c0:	4619      	mov	r1, r3
 80119c2:	f107 0212 	add.w	r2, r7, #18
 80119c6:	f107 030c 	add.w	r3, r7, #12
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7ff fa03 	bl	8010dd6 <sub32>
 80119d0:	e008      	b.n	80119e4 <ecp_mod_p256+0x6ca>
 80119d2:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80119d6:	f107 0212 	add.w	r2, r7, #18
 80119da:	f107 030c 	add.w	r3, r7, #12
 80119de:	4618      	mov	r0, r3
 80119e0:	f7ff f9d6 	bl	8010d90 <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	689b      	ldr	r3, [r3, #8]
 80119e8:	333c      	adds	r3, #60	; 0x3c
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	f107 0212 	add.w	r2, r7, #18
 80119f0:	f107 030c 	add.w	r3, r7, #12
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff f9cb 	bl	8010d90 <add32>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	689b      	ldr	r3, [r3, #8]
 80119fe:	333c      	adds	r3, #60	; 0x3c
 8011a00:	6819      	ldr	r1, [r3, #0]
 8011a02:	f107 0212 	add.w	r2, r7, #18
 8011a06:	f107 030c 	add.w	r3, r7, #12
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff f9c0 	bl	8010d90 <add32>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	333c      	adds	r3, #60	; 0x3c
 8011a16:	6819      	ldr	r1, [r3, #0]
 8011a18:	f107 0212 	add.w	r2, r7, #18
 8011a1c:	f107 030c 	add.w	r3, r7, #12
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7ff f9b5 	bl	8010d90 <add32>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	3320      	adds	r3, #32
 8011a2c:	6819      	ldr	r1, [r3, #0]
 8011a2e:	f107 0212 	add.w	r2, r7, #18
 8011a32:	f107 030c 	add.w	r3, r7, #12
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7ff f9aa 	bl	8010d90 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	3328      	adds	r3, #40	; 0x28
 8011a42:	6819      	ldr	r1, [r3, #0]
 8011a44:	f107 0212 	add.w	r2, r7, #18
 8011a48:	f107 030c 	add.w	r3, r7, #12
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f7ff f9c2 	bl	8010dd6 <sub32>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	332c      	adds	r3, #44	; 0x2c
 8011a58:	6819      	ldr	r1, [r3, #0]
 8011a5a:	f107 0212 	add.w	r2, r7, #18
 8011a5e:	f107 030c 	add.w	r3, r7, #12
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7ff f9b7 	bl	8010dd6 <sub32>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	3330      	adds	r3, #48	; 0x30
 8011a6e:	6819      	ldr	r1, [r3, #0]
 8011a70:	f107 0212 	add.w	r2, r7, #18
 8011a74:	f107 030c 	add.w	r3, r7, #12
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7ff f9ac 	bl	8010dd6 <sub32>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	3334      	adds	r3, #52	; 0x34
 8011a84:	6819      	ldr	r1, [r3, #0]
 8011a86:	f107 0212 	add.w	r2, r7, #18
 8011a8a:	f107 030c 	add.w	r3, r7, #12
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff f9a1 	bl	8010dd6 <sub32>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	689a      	ldr	r2, [r3, #8]
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4413      	add	r3, r2
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	601a      	str	r2, [r3, #0]
 8011aa2:	69fb      	ldr	r3, [r7, #28]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	61fb      	str	r3, [r7, #28]
 8011aa8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8011aac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ab0:	b25b      	sxtb	r3, r3
 8011ab2:	60fb      	str	r3, [r7, #12]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	689a      	ldr	r2, [r3, #8]
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4413      	add	r3, r2
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	601a      	str	r2, [r3, #0]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	60fb      	str	r3, [r7, #12]
 8011ac6:	e006      	b.n	8011ad6 <ecp_mod_p256+0x7bc>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	689a      	ldr	r2, [r3, #8]
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	601a      	str	r2, [r3, #0]
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	61fb      	str	r3, [r7, #28]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	69fa      	ldr	r2, [r7, #28]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d3f0      	bcc.n	8011ac8 <ecp_mod_p256+0x7ae>
 8011ae6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	da09      	bge.n	8011b02 <ecp_mod_p256+0x7e8>
 8011aee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8011af2:	697a      	ldr	r2, [r7, #20]
 8011af4:	4619      	mov	r1, r3
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7ff f990 	bl	8010e1c <mbedtls_ecp_fix_negative>
 8011afc:	e002      	b.n	8011b04 <ecp_mod_p256+0x7ea>
    INIT( 256 );
 8011afe:	bf00      	nop
 8011b00:	e000      	b.n	8011b04 <ecp_mod_p256+0x7ea>

cleanup:
 8011b02:	bf00      	nop
    return( ret );
 8011b04:	69bb      	ldr	r3, [r7, #24]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3720      	adds	r7, #32
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b088      	sub	sp, #32
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 8011b16:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8011b1a:	61bb      	str	r3, [r7, #24]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	74bb      	strb	r3, [r7, #18]
 8011b20:	2300      	movs	r3, #0
 8011b22:	61fb      	str	r3, [r7, #28]
 8011b24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8011b28:	617b      	str	r3, [r7, #20]
 8011b2a:	2119      	movs	r1, #25
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7f3 fb81 	bl	8005234 <mbedtls_mpi_grow>
 8011b32:	61b8      	str	r0, [r7, #24]
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f040 850c 	bne.w	8012554 <ecp_mod_p384+0xa46>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	689a      	ldr	r2, [r3, #8]
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	60fb      	str	r3, [r7, #12]

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	689b      	ldr	r3, [r3, #8]
 8011b4e:	3330      	adds	r3, #48	; 0x30
 8011b50:	6819      	ldr	r1, [r3, #0]
 8011b52:	f107 0212 	add.w	r2, r7, #18
 8011b56:	f107 030c 	add.w	r3, r7, #12
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7ff f918 	bl	8010d90 <add32>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	689b      	ldr	r3, [r3, #8]
 8011b64:	3354      	adds	r3, #84	; 0x54
 8011b66:	6819      	ldr	r1, [r3, #0]
 8011b68:	f107 0212 	add.w	r2, r7, #18
 8011b6c:	f107 030c 	add.w	r3, r7, #12
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff f90d 	bl	8010d90 <add32>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	3350      	adds	r3, #80	; 0x50
 8011b7c:	6819      	ldr	r1, [r3, #0]
 8011b7e:	f107 0212 	add.w	r2, r7, #18
 8011b82:	f107 030c 	add.w	r3, r7, #12
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7ff f902 	bl	8010d90 <add32>
    SUB( 23 );                                              NEXT; // A0
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	335c      	adds	r3, #92	; 0x5c
 8011b92:	6819      	ldr	r1, [r3, #0]
 8011b94:	f107 0212 	add.w	r2, r7, #18
 8011b98:	f107 030c 	add.w	r3, r7, #12
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7ff f91a 	bl	8010dd6 <sub32>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	689a      	ldr	r2, [r3, #8]
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	009b      	lsls	r3, r3, #2
 8011baa:	4413      	add	r3, r2
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	61fb      	str	r3, [r7, #28]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	689a      	ldr	r2, [r3, #8]
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	7cbb      	ldrb	r3, [r7, #18]
 8011bc6:	74fb      	strb	r3, [r7, #19]
 8011bc8:	2300      	movs	r3, #0
 8011bca:	74bb      	strb	r3, [r7, #18]
 8011bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	da0b      	bge.n	8011bec <ecp_mod_p384+0xde>
 8011bd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bd8:	425b      	negs	r3, r3
 8011bda:	4619      	mov	r1, r3
 8011bdc:	f107 0212 	add.w	r2, r7, #18
 8011be0:	f107 030c 	add.w	r3, r7, #12
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7ff f8f6 	bl	8010dd6 <sub32>
 8011bea:	e008      	b.n	8011bfe <ecp_mod_p384+0xf0>
 8011bec:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011bf0:	f107 0212 	add.w	r2, r7, #18
 8011bf4:	f107 030c 	add.w	r3, r7, #12
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7ff f8c9 	bl	8010d90 <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	689b      	ldr	r3, [r3, #8]
 8011c02:	3334      	adds	r3, #52	; 0x34
 8011c04:	6819      	ldr	r1, [r3, #0]
 8011c06:	f107 0212 	add.w	r2, r7, #18
 8011c0a:	f107 030c 	add.w	r3, r7, #12
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7ff f8be 	bl	8010d90 <add32>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	3358      	adds	r3, #88	; 0x58
 8011c1a:	6819      	ldr	r1, [r3, #0]
 8011c1c:	f107 0212 	add.w	r2, r7, #18
 8011c20:	f107 030c 	add.w	r3, r7, #12
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ff f8b3 	bl	8010d90 <add32>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	689b      	ldr	r3, [r3, #8]
 8011c2e:	335c      	adds	r3, #92	; 0x5c
 8011c30:	6819      	ldr	r1, [r3, #0]
 8011c32:	f107 0212 	add.w	r2, r7, #18
 8011c36:	f107 030c 	add.w	r3, r7, #12
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7ff f8a8 	bl	8010d90 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	3330      	adds	r3, #48	; 0x30
 8011c46:	6819      	ldr	r1, [r3, #0]
 8011c48:	f107 0212 	add.w	r2, r7, #18
 8011c4c:	f107 030c 	add.w	r3, r7, #12
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7ff f8c0 	bl	8010dd6 <sub32>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	689b      	ldr	r3, [r3, #8]
 8011c5a:	3350      	adds	r3, #80	; 0x50
 8011c5c:	6819      	ldr	r1, [r3, #0]
 8011c5e:	f107 0212 	add.w	r2, r7, #18
 8011c62:	f107 030c 	add.w	r3, r7, #12
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ff f8b5 	bl	8010dd6 <sub32>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	689a      	ldr	r2, [r3, #8]
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4413      	add	r3, r2
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	69fb      	ldr	r3, [r7, #28]
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	61fb      	str	r3, [r7, #28]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	689a      	ldr	r2, [r3, #8]
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	4413      	add	r3, r2
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	60fb      	str	r3, [r7, #12]
 8011c8e:	7cbb      	ldrb	r3, [r7, #18]
 8011c90:	74fb      	strb	r3, [r7, #19]
 8011c92:	2300      	movs	r3, #0
 8011c94:	74bb      	strb	r3, [r7, #18]
 8011c96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	da0b      	bge.n	8011cb6 <ecp_mod_p384+0x1a8>
 8011c9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ca2:	425b      	negs	r3, r3
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	f107 0212 	add.w	r2, r7, #18
 8011caa:	f107 030c 	add.w	r3, r7, #12
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ff f891 	bl	8010dd6 <sub32>
 8011cb4:	e008      	b.n	8011cc8 <ecp_mod_p384+0x1ba>
 8011cb6:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011cba:	f107 0212 	add.w	r2, r7, #18
 8011cbe:	f107 030c 	add.w	r3, r7, #12
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7ff f864 	bl	8010d90 <add32>

    ADD( 14 ); ADD( 23 );
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	689b      	ldr	r3, [r3, #8]
 8011ccc:	3338      	adds	r3, #56	; 0x38
 8011cce:	6819      	ldr	r1, [r3, #0]
 8011cd0:	f107 0212 	add.w	r2, r7, #18
 8011cd4:	f107 030c 	add.w	r3, r7, #12
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff f859 	bl	8010d90 <add32>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	689b      	ldr	r3, [r3, #8]
 8011ce2:	335c      	adds	r3, #92	; 0x5c
 8011ce4:	6819      	ldr	r1, [r3, #0]
 8011ce6:	f107 0212 	add.w	r2, r7, #18
 8011cea:	f107 030c 	add.w	r3, r7, #12
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff f84e 	bl	8010d90 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	3334      	adds	r3, #52	; 0x34
 8011cfa:	6819      	ldr	r1, [r3, #0]
 8011cfc:	f107 0212 	add.w	r2, r7, #18
 8011d00:	f107 030c 	add.w	r3, r7, #12
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff f866 	bl	8010dd6 <sub32>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	3354      	adds	r3, #84	; 0x54
 8011d10:	6819      	ldr	r1, [r3, #0]
 8011d12:	f107 0212 	add.w	r2, r7, #18
 8011d16:	f107 030c 	add.w	r3, r7, #12
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7ff f85b 	bl	8010dd6 <sub32>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	689a      	ldr	r2, [r3, #8]
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	601a      	str	r2, [r3, #0]
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	3301      	adds	r3, #1
 8011d32:	61fb      	str	r3, [r7, #28]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689a      	ldr	r2, [r3, #8]
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	4413      	add	r3, r2
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	60fb      	str	r3, [r7, #12]
 8011d42:	7cbb      	ldrb	r3, [r7, #18]
 8011d44:	74fb      	strb	r3, [r7, #19]
 8011d46:	2300      	movs	r3, #0
 8011d48:	74bb      	strb	r3, [r7, #18]
 8011d4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	da0b      	bge.n	8011d6a <ecp_mod_p384+0x25c>
 8011d52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d56:	425b      	negs	r3, r3
 8011d58:	4619      	mov	r1, r3
 8011d5a:	f107 0212 	add.w	r2, r7, #18
 8011d5e:	f107 030c 	add.w	r3, r7, #12
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff f837 	bl	8010dd6 <sub32>
 8011d68:	e008      	b.n	8011d7c <ecp_mod_p384+0x26e>
 8011d6a:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011d6e:	f107 0212 	add.w	r2, r7, #18
 8011d72:	f107 030c 	add.w	r3, r7, #12
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7ff f80a 	bl	8010d90 <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	689b      	ldr	r3, [r3, #8]
 8011d80:	333c      	adds	r3, #60	; 0x3c
 8011d82:	6819      	ldr	r1, [r3, #0]
 8011d84:	f107 0212 	add.w	r2, r7, #18
 8011d88:	f107 030c 	add.w	r3, r7, #12
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe ffff 	bl	8010d90 <add32>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	3330      	adds	r3, #48	; 0x30
 8011d98:	6819      	ldr	r1, [r3, #0]
 8011d9a:	f107 0212 	add.w	r2, r7, #18
 8011d9e:	f107 030c 	add.w	r3, r7, #12
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe fff4 	bl	8010d90 <add32>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	3350      	adds	r3, #80	; 0x50
 8011dae:	6819      	ldr	r1, [r3, #0]
 8011db0:	f107 0212 	add.w	r2, r7, #18
 8011db4:	f107 030c 	add.w	r3, r7, #12
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fe ffe9 	bl	8010d90 <add32>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	3354      	adds	r3, #84	; 0x54
 8011dc4:	6819      	ldr	r1, [r3, #0]
 8011dc6:	f107 0212 	add.w	r2, r7, #18
 8011dca:	f107 030c 	add.w	r3, r7, #12
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe ffde 	bl	8010d90 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	689b      	ldr	r3, [r3, #8]
 8011dd8:	3338      	adds	r3, #56	; 0x38
 8011dda:	6819      	ldr	r1, [r3, #0]
 8011ddc:	f107 0212 	add.w	r2, r7, #18
 8011de0:	f107 030c 	add.w	r3, r7, #12
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7fe fff6 	bl	8010dd6 <sub32>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	3358      	adds	r3, #88	; 0x58
 8011df0:	6819      	ldr	r1, [r3, #0]
 8011df2:	f107 0212 	add.w	r2, r7, #18
 8011df6:	f107 030c 	add.w	r3, r7, #12
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe ffeb 	bl	8010dd6 <sub32>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	335c      	adds	r3, #92	; 0x5c
 8011e06:	6819      	ldr	r1, [r3, #0]
 8011e08:	f107 0212 	add.w	r2, r7, #18
 8011e0c:	f107 030c 	add.w	r3, r7, #12
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fe ffe0 	bl	8010dd6 <sub32>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	689a      	ldr	r2, [r3, #8]
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4413      	add	r3, r2
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	3301      	adds	r3, #1
 8011e28:	61fb      	str	r3, [r7, #28]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	689a      	ldr	r2, [r3, #8]
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	4413      	add	r3, r2
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	60fb      	str	r3, [r7, #12]
 8011e38:	7cbb      	ldrb	r3, [r7, #18]
 8011e3a:	74fb      	strb	r3, [r7, #19]
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	74bb      	strb	r3, [r7, #18]
 8011e40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	da0b      	bge.n	8011e60 <ecp_mod_p384+0x352>
 8011e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e4c:	425b      	negs	r3, r3
 8011e4e:	4619      	mov	r1, r3
 8011e50:	f107 0212 	add.w	r2, r7, #18
 8011e54:	f107 030c 	add.w	r3, r7, #12
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fe ffbc 	bl	8010dd6 <sub32>
 8011e5e:	e008      	b.n	8011e72 <ecp_mod_p384+0x364>
 8011e60:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011e64:	f107 0212 	add.w	r2, r7, #18
 8011e68:	f107 030c 	add.w	r3, r7, #12
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fe ff8f 	bl	8010d90 <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	689b      	ldr	r3, [r3, #8]
 8011e76:	3354      	adds	r3, #84	; 0x54
 8011e78:	6819      	ldr	r1, [r3, #0]
 8011e7a:	f107 0212 	add.w	r2, r7, #18
 8011e7e:	f107 030c 	add.w	r3, r7, #12
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fe ff84 	bl	8010d90 <add32>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	3354      	adds	r3, #84	; 0x54
 8011e8e:	6819      	ldr	r1, [r3, #0]
 8011e90:	f107 0212 	add.w	r2, r7, #18
 8011e94:	f107 030c 	add.w	r3, r7, #12
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe ff79 	bl	8010d90 <add32>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	689b      	ldr	r3, [r3, #8]
 8011ea2:	3340      	adds	r3, #64	; 0x40
 8011ea4:	6819      	ldr	r1, [r3, #0]
 8011ea6:	f107 0212 	add.w	r2, r7, #18
 8011eaa:	f107 030c 	add.w	r3, r7, #12
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fe ff6e 	bl	8010d90 <add32>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	3334      	adds	r3, #52	; 0x34
 8011eba:	6819      	ldr	r1, [r3, #0]
 8011ebc:	f107 0212 	add.w	r2, r7, #18
 8011ec0:	f107 030c 	add.w	r3, r7, #12
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7fe ff63 	bl	8010d90 <add32>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	3330      	adds	r3, #48	; 0x30
 8011ed0:	6819      	ldr	r1, [r3, #0]
 8011ed2:	f107 0212 	add.w	r2, r7, #18
 8011ed6:	f107 030c 	add.w	r3, r7, #12
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fe ff58 	bl	8010d90 <add32>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	3350      	adds	r3, #80	; 0x50
 8011ee6:	6819      	ldr	r1, [r3, #0]
 8011ee8:	f107 0212 	add.w	r2, r7, #18
 8011eec:	f107 030c 	add.w	r3, r7, #12
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe ff4d 	bl	8010d90 <add32>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	689b      	ldr	r3, [r3, #8]
 8011efa:	3358      	adds	r3, #88	; 0x58
 8011efc:	6819      	ldr	r1, [r3, #0]
 8011efe:	f107 0212 	add.w	r2, r7, #18
 8011f02:	f107 030c 	add.w	r3, r7, #12
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe ff42 	bl	8010d90 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	333c      	adds	r3, #60	; 0x3c
 8011f12:	6819      	ldr	r1, [r3, #0]
 8011f14:	f107 0212 	add.w	r2, r7, #18
 8011f18:	f107 030c 	add.w	r3, r7, #12
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fe ff5a 	bl	8010dd6 <sub32>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	335c      	adds	r3, #92	; 0x5c
 8011f28:	6819      	ldr	r1, [r3, #0]
 8011f2a:	f107 0212 	add.w	r2, r7, #18
 8011f2e:	f107 030c 	add.w	r3, r7, #12
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe ff4f 	bl	8010dd6 <sub32>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	335c      	adds	r3, #92	; 0x5c
 8011f3e:	6819      	ldr	r1, [r3, #0]
 8011f40:	f107 0212 	add.w	r2, r7, #18
 8011f44:	f107 030c 	add.w	r3, r7, #12
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fe ff44 	bl	8010dd6 <sub32>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	689a      	ldr	r2, [r3, #8]
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	009b      	lsls	r3, r3, #2
 8011f56:	4413      	add	r3, r2
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	61fb      	str	r3, [r7, #28]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	689a      	ldr	r2, [r3, #8]
 8011f66:	69fb      	ldr	r3, [r7, #28]
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	4413      	add	r3, r2
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	60fb      	str	r3, [r7, #12]
 8011f70:	7cbb      	ldrb	r3, [r7, #18]
 8011f72:	74fb      	strb	r3, [r7, #19]
 8011f74:	2300      	movs	r3, #0
 8011f76:	74bb      	strb	r3, [r7, #18]
 8011f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	da0b      	bge.n	8011f98 <ecp_mod_p384+0x48a>
 8011f80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f84:	425b      	negs	r3, r3
 8011f86:	4619      	mov	r1, r3
 8011f88:	f107 0212 	add.w	r2, r7, #18
 8011f8c:	f107 030c 	add.w	r3, r7, #12
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe ff20 	bl	8010dd6 <sub32>
 8011f96:	e008      	b.n	8011faa <ecp_mod_p384+0x49c>
 8011f98:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8011f9c:	f107 0212 	add.w	r2, r7, #18
 8011fa0:	f107 030c 	add.w	r3, r7, #12
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fe fef3 	bl	8010d90 <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	689b      	ldr	r3, [r3, #8]
 8011fae:	3358      	adds	r3, #88	; 0x58
 8011fb0:	6819      	ldr	r1, [r3, #0]
 8011fb2:	f107 0212 	add.w	r2, r7, #18
 8011fb6:	f107 030c 	add.w	r3, r7, #12
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe fee8 	bl	8010d90 <add32>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	3358      	adds	r3, #88	; 0x58
 8011fc6:	6819      	ldr	r1, [r3, #0]
 8011fc8:	f107 0212 	add.w	r2, r7, #18
 8011fcc:	f107 030c 	add.w	r3, r7, #12
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fe fedd 	bl	8010d90 <add32>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	3344      	adds	r3, #68	; 0x44
 8011fdc:	6819      	ldr	r1, [r3, #0]
 8011fde:	f107 0212 	add.w	r2, r7, #18
 8011fe2:	f107 030c 	add.w	r3, r7, #12
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fe fed2 	bl	8010d90 <add32>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	689b      	ldr	r3, [r3, #8]
 8011ff0:	3338      	adds	r3, #56	; 0x38
 8011ff2:	6819      	ldr	r1, [r3, #0]
 8011ff4:	f107 0212 	add.w	r2, r7, #18
 8011ff8:	f107 030c 	add.w	r3, r7, #12
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fe fec7 	bl	8010d90 <add32>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	3334      	adds	r3, #52	; 0x34
 8012008:	6819      	ldr	r1, [r3, #0]
 801200a:	f107 0212 	add.w	r2, r7, #18
 801200e:	f107 030c 	add.w	r3, r7, #12
 8012012:	4618      	mov	r0, r3
 8012014:	f7fe febc 	bl	8010d90 <add32>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	689b      	ldr	r3, [r3, #8]
 801201c:	3354      	adds	r3, #84	; 0x54
 801201e:	6819      	ldr	r1, [r3, #0]
 8012020:	f107 0212 	add.w	r2, r7, #18
 8012024:	f107 030c 	add.w	r3, r7, #12
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe feb1 	bl	8010d90 <add32>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	335c      	adds	r3, #92	; 0x5c
 8012034:	6819      	ldr	r1, [r3, #0]
 8012036:	f107 0212 	add.w	r2, r7, #18
 801203a:	f107 030c 	add.w	r3, r7, #12
 801203e:	4618      	mov	r0, r3
 8012040:	f7fe fea6 	bl	8010d90 <add32>
    SUB( 16 );                                              NEXT; // A5
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	689b      	ldr	r3, [r3, #8]
 8012048:	3340      	adds	r3, #64	; 0x40
 801204a:	6819      	ldr	r1, [r3, #0]
 801204c:	f107 0212 	add.w	r2, r7, #18
 8012050:	f107 030c 	add.w	r3, r7, #12
 8012054:	4618      	mov	r0, r3
 8012056:	f7fe febe 	bl	8010dd6 <sub32>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	689a      	ldr	r2, [r3, #8]
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	4413      	add	r3, r2
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	601a      	str	r2, [r3, #0]
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	3301      	adds	r3, #1
 801206c:	61fb      	str	r3, [r7, #28]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	689a      	ldr	r2, [r3, #8]
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4413      	add	r3, r2
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	60fb      	str	r3, [r7, #12]
 801207c:	7cbb      	ldrb	r3, [r7, #18]
 801207e:	74fb      	strb	r3, [r7, #19]
 8012080:	2300      	movs	r3, #0
 8012082:	74bb      	strb	r3, [r7, #18]
 8012084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012088:	2b00      	cmp	r3, #0
 801208a:	da0b      	bge.n	80120a4 <ecp_mod_p384+0x596>
 801208c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012090:	425b      	negs	r3, r3
 8012092:	4619      	mov	r1, r3
 8012094:	f107 0212 	add.w	r2, r7, #18
 8012098:	f107 030c 	add.w	r3, r7, #12
 801209c:	4618      	mov	r0, r3
 801209e:	f7fe fe9a 	bl	8010dd6 <sub32>
 80120a2:	e008      	b.n	80120b6 <ecp_mod_p384+0x5a8>
 80120a4:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80120a8:	f107 0212 	add.w	r2, r7, #18
 80120ac:	f107 030c 	add.w	r3, r7, #12
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fe fe6d 	bl	8010d90 <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	689b      	ldr	r3, [r3, #8]
 80120ba:	335c      	adds	r3, #92	; 0x5c
 80120bc:	6819      	ldr	r1, [r3, #0]
 80120be:	f107 0212 	add.w	r2, r7, #18
 80120c2:	f107 030c 	add.w	r3, r7, #12
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fe fe62 	bl	8010d90 <add32>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	335c      	adds	r3, #92	; 0x5c
 80120d2:	6819      	ldr	r1, [r3, #0]
 80120d4:	f107 0212 	add.w	r2, r7, #18
 80120d8:	f107 030c 	add.w	r3, r7, #12
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fe fe57 	bl	8010d90 <add32>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	3348      	adds	r3, #72	; 0x48
 80120e8:	6819      	ldr	r1, [r3, #0]
 80120ea:	f107 0212 	add.w	r2, r7, #18
 80120ee:	f107 030c 	add.w	r3, r7, #12
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe fe4c 	bl	8010d90 <add32>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	333c      	adds	r3, #60	; 0x3c
 80120fe:	6819      	ldr	r1, [r3, #0]
 8012100:	f107 0212 	add.w	r2, r7, #18
 8012104:	f107 030c 	add.w	r3, r7, #12
 8012108:	4618      	mov	r0, r3
 801210a:	f7fe fe41 	bl	8010d90 <add32>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	3338      	adds	r3, #56	; 0x38
 8012114:	6819      	ldr	r1, [r3, #0]
 8012116:	f107 0212 	add.w	r2, r7, #18
 801211a:	f107 030c 	add.w	r3, r7, #12
 801211e:	4618      	mov	r0, r3
 8012120:	f7fe fe36 	bl	8010d90 <add32>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	689b      	ldr	r3, [r3, #8]
 8012128:	3358      	adds	r3, #88	; 0x58
 801212a:	6819      	ldr	r1, [r3, #0]
 801212c:	f107 0212 	add.w	r2, r7, #18
 8012130:	f107 030c 	add.w	r3, r7, #12
 8012134:	4618      	mov	r0, r3
 8012136:	f7fe fe2b 	bl	8010d90 <add32>
    SUB( 17 );                                              NEXT; // A6
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	3344      	adds	r3, #68	; 0x44
 8012140:	6819      	ldr	r1, [r3, #0]
 8012142:	f107 0212 	add.w	r2, r7, #18
 8012146:	f107 030c 	add.w	r3, r7, #12
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fe43 	bl	8010dd6 <sub32>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	689a      	ldr	r2, [r3, #8]
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4413      	add	r3, r2
 801215a:	68fa      	ldr	r2, [r7, #12]
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	69fb      	ldr	r3, [r7, #28]
 8012160:	3301      	adds	r3, #1
 8012162:	61fb      	str	r3, [r7, #28]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	689a      	ldr	r2, [r3, #8]
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	4413      	add	r3, r2
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	60fb      	str	r3, [r7, #12]
 8012172:	7cbb      	ldrb	r3, [r7, #18]
 8012174:	74fb      	strb	r3, [r7, #19]
 8012176:	2300      	movs	r3, #0
 8012178:	74bb      	strb	r3, [r7, #18]
 801217a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801217e:	2b00      	cmp	r3, #0
 8012180:	da0b      	bge.n	801219a <ecp_mod_p384+0x68c>
 8012182:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012186:	425b      	negs	r3, r3
 8012188:	4619      	mov	r1, r3
 801218a:	f107 0212 	add.w	r2, r7, #18
 801218e:	f107 030c 	add.w	r3, r7, #12
 8012192:	4618      	mov	r0, r3
 8012194:	f7fe fe1f 	bl	8010dd6 <sub32>
 8012198:	e008      	b.n	80121ac <ecp_mod_p384+0x69e>
 801219a:	f997 1013 	ldrsb.w	r1, [r7, #19]
 801219e:	f107 0212 	add.w	r2, r7, #18
 80121a2:	f107 030c 	add.w	r3, r7, #12
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fdf2 	bl	8010d90 <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	689b      	ldr	r3, [r3, #8]
 80121b0:	334c      	adds	r3, #76	; 0x4c
 80121b2:	6819      	ldr	r1, [r3, #0]
 80121b4:	f107 0212 	add.w	r2, r7, #18
 80121b8:	f107 030c 	add.w	r3, r7, #12
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fde7 	bl	8010d90 <add32>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	689b      	ldr	r3, [r3, #8]
 80121c6:	3340      	adds	r3, #64	; 0x40
 80121c8:	6819      	ldr	r1, [r3, #0]
 80121ca:	f107 0212 	add.w	r2, r7, #18
 80121ce:	f107 030c 	add.w	r3, r7, #12
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fe fddc 	bl	8010d90 <add32>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	689b      	ldr	r3, [r3, #8]
 80121dc:	333c      	adds	r3, #60	; 0x3c
 80121de:	6819      	ldr	r1, [r3, #0]
 80121e0:	f107 0212 	add.w	r2, r7, #18
 80121e4:	f107 030c 	add.w	r3, r7, #12
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7fe fdd1 	bl	8010d90 <add32>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	689b      	ldr	r3, [r3, #8]
 80121f2:	335c      	adds	r3, #92	; 0x5c
 80121f4:	6819      	ldr	r1, [r3, #0]
 80121f6:	f107 0212 	add.w	r2, r7, #18
 80121fa:	f107 030c 	add.w	r3, r7, #12
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fe fdc6 	bl	8010d90 <add32>
    SUB( 18 );                                              NEXT; // A7
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	3348      	adds	r3, #72	; 0x48
 801220a:	6819      	ldr	r1, [r3, #0]
 801220c:	f107 0212 	add.w	r2, r7, #18
 8012210:	f107 030c 	add.w	r3, r7, #12
 8012214:	4618      	mov	r0, r3
 8012216:	f7fe fdde 	bl	8010dd6 <sub32>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	689a      	ldr	r2, [r3, #8]
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	4413      	add	r3, r2
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	3301      	adds	r3, #1
 801222c:	61fb      	str	r3, [r7, #28]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	689a      	ldr	r2, [r3, #8]
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4413      	add	r3, r2
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	60fb      	str	r3, [r7, #12]
 801223c:	7cbb      	ldrb	r3, [r7, #18]
 801223e:	74fb      	strb	r3, [r7, #19]
 8012240:	2300      	movs	r3, #0
 8012242:	74bb      	strb	r3, [r7, #18]
 8012244:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012248:	2b00      	cmp	r3, #0
 801224a:	da0b      	bge.n	8012264 <ecp_mod_p384+0x756>
 801224c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012250:	425b      	negs	r3, r3
 8012252:	4619      	mov	r1, r3
 8012254:	f107 0212 	add.w	r2, r7, #18
 8012258:	f107 030c 	add.w	r3, r7, #12
 801225c:	4618      	mov	r0, r3
 801225e:	f7fe fdba 	bl	8010dd6 <sub32>
 8012262:	e008      	b.n	8012276 <ecp_mod_p384+0x768>
 8012264:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8012268:	f107 0212 	add.w	r2, r7, #18
 801226c:	f107 030c 	add.w	r3, r7, #12
 8012270:	4618      	mov	r0, r3
 8012272:	f7fe fd8d 	bl	8010d90 <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	3350      	adds	r3, #80	; 0x50
 801227c:	6819      	ldr	r1, [r3, #0]
 801227e:	f107 0212 	add.w	r2, r7, #18
 8012282:	f107 030c 	add.w	r3, r7, #12
 8012286:	4618      	mov	r0, r3
 8012288:	f7fe fd82 	bl	8010d90 <add32>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	3344      	adds	r3, #68	; 0x44
 8012292:	6819      	ldr	r1, [r3, #0]
 8012294:	f107 0212 	add.w	r2, r7, #18
 8012298:	f107 030c 	add.w	r3, r7, #12
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fd77 	bl	8010d90 <add32>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	3340      	adds	r3, #64	; 0x40
 80122a8:	6819      	ldr	r1, [r3, #0]
 80122aa:	f107 0212 	add.w	r2, r7, #18
 80122ae:	f107 030c 	add.w	r3, r7, #12
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fe fd6c 	bl	8010d90 <add32>
    SUB( 19 );                                              NEXT; // A8
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	689b      	ldr	r3, [r3, #8]
 80122bc:	334c      	adds	r3, #76	; 0x4c
 80122be:	6819      	ldr	r1, [r3, #0]
 80122c0:	f107 0212 	add.w	r2, r7, #18
 80122c4:	f107 030c 	add.w	r3, r7, #12
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fe fd84 	bl	8010dd6 <sub32>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	689a      	ldr	r2, [r3, #8]
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	009b      	lsls	r3, r3, #2
 80122d6:	4413      	add	r3, r2
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	601a      	str	r2, [r3, #0]
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	3301      	adds	r3, #1
 80122e0:	61fb      	str	r3, [r7, #28]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	689a      	ldr	r2, [r3, #8]
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	009b      	lsls	r3, r3, #2
 80122ea:	4413      	add	r3, r2
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	60fb      	str	r3, [r7, #12]
 80122f0:	7cbb      	ldrb	r3, [r7, #18]
 80122f2:	74fb      	strb	r3, [r7, #19]
 80122f4:	2300      	movs	r3, #0
 80122f6:	74bb      	strb	r3, [r7, #18]
 80122f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	da0b      	bge.n	8012318 <ecp_mod_p384+0x80a>
 8012300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012304:	425b      	negs	r3, r3
 8012306:	4619      	mov	r1, r3
 8012308:	f107 0212 	add.w	r2, r7, #18
 801230c:	f107 030c 	add.w	r3, r7, #12
 8012310:	4618      	mov	r0, r3
 8012312:	f7fe fd60 	bl	8010dd6 <sub32>
 8012316:	e008      	b.n	801232a <ecp_mod_p384+0x81c>
 8012318:	f997 1013 	ldrsb.w	r1, [r7, #19]
 801231c:	f107 0212 	add.w	r2, r7, #18
 8012320:	f107 030c 	add.w	r3, r7, #12
 8012324:	4618      	mov	r0, r3
 8012326:	f7fe fd33 	bl	8010d90 <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	3354      	adds	r3, #84	; 0x54
 8012330:	6819      	ldr	r1, [r3, #0]
 8012332:	f107 0212 	add.w	r2, r7, #18
 8012336:	f107 030c 	add.w	r3, r7, #12
 801233a:	4618      	mov	r0, r3
 801233c:	f7fe fd28 	bl	8010d90 <add32>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	3348      	adds	r3, #72	; 0x48
 8012346:	6819      	ldr	r1, [r3, #0]
 8012348:	f107 0212 	add.w	r2, r7, #18
 801234c:	f107 030c 	add.w	r3, r7, #12
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fd1d 	bl	8010d90 <add32>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	3344      	adds	r3, #68	; 0x44
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	f107 0212 	add.w	r2, r7, #18
 8012362:	f107 030c 	add.w	r3, r7, #12
 8012366:	4618      	mov	r0, r3
 8012368:	f7fe fd12 	bl	8010d90 <add32>
    SUB( 20 );                                              NEXT; // A9
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	3350      	adds	r3, #80	; 0x50
 8012372:	6819      	ldr	r1, [r3, #0]
 8012374:	f107 0212 	add.w	r2, r7, #18
 8012378:	f107 030c 	add.w	r3, r7, #12
 801237c:	4618      	mov	r0, r3
 801237e:	f7fe fd2a 	bl	8010dd6 <sub32>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	689a      	ldr	r2, [r3, #8]
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4413      	add	r3, r2
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	601a      	str	r2, [r3, #0]
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	3301      	adds	r3, #1
 8012394:	61fb      	str	r3, [r7, #28]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	689a      	ldr	r2, [r3, #8]
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	60fb      	str	r3, [r7, #12]
 80123a4:	7cbb      	ldrb	r3, [r7, #18]
 80123a6:	74fb      	strb	r3, [r7, #19]
 80123a8:	2300      	movs	r3, #0
 80123aa:	74bb      	strb	r3, [r7, #18]
 80123ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	da0b      	bge.n	80123cc <ecp_mod_p384+0x8be>
 80123b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b8:	425b      	negs	r3, r3
 80123ba:	4619      	mov	r1, r3
 80123bc:	f107 0212 	add.w	r2, r7, #18
 80123c0:	f107 030c 	add.w	r3, r7, #12
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fe fd06 	bl	8010dd6 <sub32>
 80123ca:	e008      	b.n	80123de <ecp_mod_p384+0x8d0>
 80123cc:	f997 1013 	ldrsb.w	r1, [r7, #19]
 80123d0:	f107 0212 	add.w	r2, r7, #18
 80123d4:	f107 030c 	add.w	r3, r7, #12
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fe fcd9 	bl	8010d90 <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	689b      	ldr	r3, [r3, #8]
 80123e2:	3358      	adds	r3, #88	; 0x58
 80123e4:	6819      	ldr	r1, [r3, #0]
 80123e6:	f107 0212 	add.w	r2, r7, #18
 80123ea:	f107 030c 	add.w	r3, r7, #12
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe fcce 	bl	8010d90 <add32>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	334c      	adds	r3, #76	; 0x4c
 80123fa:	6819      	ldr	r1, [r3, #0]
 80123fc:	f107 0212 	add.w	r2, r7, #18
 8012400:	f107 030c 	add.w	r3, r7, #12
 8012404:	4618      	mov	r0, r3
 8012406:	f7fe fcc3 	bl	8010d90 <add32>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	689b      	ldr	r3, [r3, #8]
 801240e:	3348      	adds	r3, #72	; 0x48
 8012410:	6819      	ldr	r1, [r3, #0]
 8012412:	f107 0212 	add.w	r2, r7, #18
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	4618      	mov	r0, r3
 801241c:	f7fe fcb8 	bl	8010d90 <add32>
    SUB( 21 );                                              NEXT; // A10
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	3354      	adds	r3, #84	; 0x54
 8012426:	6819      	ldr	r1, [r3, #0]
 8012428:	f107 0212 	add.w	r2, r7, #18
 801242c:	f107 030c 	add.w	r3, r7, #12
 8012430:	4618      	mov	r0, r3
 8012432:	f7fe fcd0 	bl	8010dd6 <sub32>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	689a      	ldr	r2, [r3, #8]
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	4413      	add	r3, r2
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	601a      	str	r2, [r3, #0]
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	3301      	adds	r3, #1
 8012448:	61fb      	str	r3, [r7, #28]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	689a      	ldr	r2, [r3, #8]
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	4413      	add	r3, r2
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]
 8012458:	7cbb      	ldrb	r3, [r7, #18]
 801245a:	74fb      	strb	r3, [r7, #19]
 801245c:	2300      	movs	r3, #0
 801245e:	74bb      	strb	r3, [r7, #18]
 8012460:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012464:	2b00      	cmp	r3, #0
 8012466:	da0b      	bge.n	8012480 <ecp_mod_p384+0x972>
 8012468:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801246c:	425b      	negs	r3, r3
 801246e:	4619      	mov	r1, r3
 8012470:	f107 0212 	add.w	r2, r7, #18
 8012474:	f107 030c 	add.w	r3, r7, #12
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe fcac 	bl	8010dd6 <sub32>
 801247e:	e008      	b.n	8012492 <ecp_mod_p384+0x984>
 8012480:	f997 1013 	ldrsb.w	r1, [r7, #19]
 8012484:	f107 0212 	add.w	r2, r7, #18
 8012488:	f107 030c 	add.w	r3, r7, #12
 801248c:	4618      	mov	r0, r3
 801248e:	f7fe fc7f 	bl	8010d90 <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	689b      	ldr	r3, [r3, #8]
 8012496:	335c      	adds	r3, #92	; 0x5c
 8012498:	6819      	ldr	r1, [r3, #0]
 801249a:	f107 0212 	add.w	r2, r7, #18
 801249e:	f107 030c 	add.w	r3, r7, #12
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fe fc74 	bl	8010d90 <add32>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	3350      	adds	r3, #80	; 0x50
 80124ae:	6819      	ldr	r1, [r3, #0]
 80124b0:	f107 0212 	add.w	r2, r7, #18
 80124b4:	f107 030c 	add.w	r3, r7, #12
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fe fc69 	bl	8010d90 <add32>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	334c      	adds	r3, #76	; 0x4c
 80124c4:	6819      	ldr	r1, [r3, #0]
 80124c6:	f107 0212 	add.w	r2, r7, #18
 80124ca:	f107 030c 	add.w	r3, r7, #12
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fe fc5e 	bl	8010d90 <add32>
    SUB( 22 );                                              LAST; // A11
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	3358      	adds	r3, #88	; 0x58
 80124da:	6819      	ldr	r1, [r3, #0]
 80124dc:	f107 0212 	add.w	r2, r7, #18
 80124e0:	f107 030c 	add.w	r3, r7, #12
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fe fc76 	bl	8010dd6 <sub32>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	689a      	ldr	r2, [r3, #8]
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4413      	add	r3, r2
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	3301      	adds	r3, #1
 80124fc:	61fb      	str	r3, [r7, #28]
 80124fe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012506:	b25b      	sxtb	r3, r3
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	689a      	ldr	r2, [r3, #8]
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	009b      	lsls	r3, r3, #2
 8012512:	4413      	add	r3, r2
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	2300      	movs	r3, #0
 801251a:	60fb      	str	r3, [r7, #12]
 801251c:	e006      	b.n	801252c <ecp_mod_p384+0xa1e>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	689a      	ldr	r2, [r3, #8]
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	4413      	add	r3, r2
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	3301      	adds	r3, #1
 8012530:	61fb      	str	r3, [r7, #28]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	69fa      	ldr	r2, [r7, #28]
 8012538:	429a      	cmp	r2, r3
 801253a:	d3f0      	bcc.n	801251e <ecp_mod_p384+0xa10>
 801253c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012540:	2b00      	cmp	r3, #0
 8012542:	da09      	bge.n	8012558 <ecp_mod_p384+0xa4a>
 8012544:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	4619      	mov	r1, r3
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7fe fc65 	bl	8010e1c <mbedtls_ecp_fix_negative>
 8012552:	e002      	b.n	801255a <ecp_mod_p384+0xa4c>
    INIT( 384 );
 8012554:	bf00      	nop
 8012556:	e000      	b.n	801255a <ecp_mod_p384+0xa4c>

cleanup:
 8012558:	bf00      	nop
    return( ret );
 801255a:	69bb      	ldr	r3, [r7, #24]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3720      	adds	r7, #32
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <ecp_mod_p521>:
/*
 * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
 * Write N as A1 + 2^521 A0, return A0 + A1
 */
static int ecp_mod_p521( mbedtls_mpi *N )
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b09a      	sub	sp, #104	; 0x68
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 801256c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8012570:	667b      	str	r3, [r7, #100]	; 0x64
    mbedtls_mpi_uint Mp[P521_WIDTH + 1];
    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
     * we need to hold bits 513 to 1056, which is 34 limbs, that is
     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */

    if( N->n < P521_WIDTH )
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	2b10      	cmp	r3, #16
 8012578:	d801      	bhi.n	801257e <ecp_mod_p521+0x1a>
        return( 0 );
 801257a:	2300      	movs	r3, #0
 801257c:	e04b      	b.n	8012616 <ecp_mod_p521+0xb2>

    /* M = A1 */
    M.s = 1;
 801257e:	2301      	movs	r3, #1
 8012580:	657b      	str	r3, [r7, #84]	; 0x54
    M.n = N->n - ( P521_WIDTH - 1 );
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	3b10      	subs	r3, #16
 8012588:	65bb      	str	r3, [r7, #88]	; 0x58
    if( M.n > P521_WIDTH + 1 )
 801258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801258c:	2b12      	cmp	r3, #18
 801258e:	d901      	bls.n	8012594 <ecp_mod_p521+0x30>
        M.n = P521_WIDTH + 1;
 8012590:	2312      	movs	r3, #18
 8012592:	65bb      	str	r3, [r7, #88]	; 0x58
    M.p = Mp;
 8012594:	f107 030c 	add.w	r3, r7, #12
 8012598:	65fb      	str	r3, [r7, #92]	; 0x5c
    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80125a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80125a4:	009a      	lsls	r2, r3, #2
 80125a6:	f107 030c 	add.w	r3, r7, #12
 80125aa:	4618      	mov	r0, r3
 80125ac:	f002 f814 	bl	80145d8 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 80125b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80125b4:	2109      	movs	r1, #9
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7f3 fbd3 	bl	8005d62 <mbedtls_mpi_shift_r>
 80125bc:	6678      	str	r0, [r7, #100]	; 0x64
 80125be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d126      	bne.n	8012612 <ecp_mod_p521+0xae>

    /* N = A0 */
    N->p[P521_WIDTH - 1] &= P521_MASK;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	3340      	adds	r3, #64	; 0x40
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	689b      	ldr	r3, [r3, #8]
 80125d0:	3340      	adds	r3, #64	; 0x40
 80125d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80125d6:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 80125d8:	2311      	movs	r3, #17
 80125da:	663b      	str	r3, [r7, #96]	; 0x60
 80125dc:	e009      	b.n	80125f2 <ecp_mod_p521+0x8e>
        N->p[i] = 0;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	689a      	ldr	r2, [r3, #8]
 80125e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	2200      	movs	r2, #0
 80125ea:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 80125ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125ee:	3301      	adds	r3, #1
 80125f0:	663b      	str	r3, [r7, #96]	; 0x60
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d3f0      	bcc.n	80125de <ecp_mod_p521+0x7a>

    /* N = A0 + A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80125fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012600:	461a      	mov	r2, r3
 8012602:	6879      	ldr	r1, [r7, #4]
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7f3 fe29 	bl	800625c <mbedtls_mpi_add_abs>
 801260a:	6678      	str	r0, [r7, #100]	; 0x64
 801260c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801260e:	2b00      	cmp	r3, #0

cleanup:
 8012610:	e000      	b.n	8012614 <ecp_mod_p521+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 8012612:	bf00      	nop
    return( ret );
 8012614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8012616:	4618      	mov	r0, r3
 8012618:	3768      	adds	r7, #104	; 0x68
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
	...

08012620 <ecp_mod_p255>:
/*
 * Fast quasi-reduction modulo p255 = 2^255 - 19
 * Write N as A0 + 2^255 A1, return A0 + 19 * A1
 */
static int ecp_mod_p255( mbedtls_mpi *N )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b092      	sub	sp, #72	; 0x48
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8012628:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801262c:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i;
    mbedtls_mpi M;
    mbedtls_mpi_uint Mp[P255_WIDTH + 2];

    if( N->n < P255_WIDTH )
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	2b07      	cmp	r3, #7
 8012634:	d801      	bhi.n	801263a <ecp_mod_p255+0x1a>
        return( 0 );
 8012636:	2300      	movs	r3, #0
 8012638:	e064      	b.n	8012704 <ecp_mod_p255+0xe4>

    /* M = A1 */
    M.s = 1;
 801263a:	2301      	movs	r3, #1
 801263c:	637b      	str	r3, [r7, #52]	; 0x34
    M.n = N->n - ( P255_WIDTH - 1 );
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	3b07      	subs	r3, #7
 8012644:	63bb      	str	r3, [r7, #56]	; 0x38
    if( M.n > P255_WIDTH + 1 )
 8012646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012648:	2b09      	cmp	r3, #9
 801264a:	d901      	bls.n	8012650 <ecp_mod_p255+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801264c:	4b2f      	ldr	r3, [pc, #188]	; (801270c <ecp_mod_p255+0xec>)
 801264e:	e059      	b.n	8012704 <ecp_mod_p255+0xe4>
    M.p = Mp;
 8012650:	f107 030c 	add.w	r3, r7, #12
 8012654:	63fb      	str	r3, [r7, #60]	; 0x3c
    memset( Mp, 0, sizeof Mp );
 8012656:	f107 030c 	add.w	r3, r7, #12
 801265a:	2228      	movs	r2, #40	; 0x28
 801265c:	2100      	movs	r1, #0
 801265e:	4618      	mov	r0, r3
 8012660:	f001 ffc8 	bl	80145f4 <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	f103 011c 	add.w	r1, r3, #28
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	009a      	lsls	r2, r3, #2
 8012670:	f107 030c 	add.w	r3, r7, #12
 8012674:	4618      	mov	r0, r3
 8012676:	f001 ffaf 	bl	80145d8 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 801267a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801267e:	211f      	movs	r1, #31
 8012680:	4618      	mov	r0, r3
 8012682:	f7f3 fb6e 	bl	8005d62 <mbedtls_mpi_shift_r>
 8012686:	6478      	str	r0, [r7, #68]	; 0x44
 8012688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801268a:	2b00      	cmp	r3, #0
 801268c:	d134      	bne.n	80126f8 <ecp_mod_p255+0xd8>
    M.n++; /* Make room for multiplication by 19 */
 801268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012690:	3301      	adds	r3, #1
 8012692:	63bb      	str	r3, [r7, #56]	; 0x38

    /* N = A0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 8012694:	2200      	movs	r2, #0
 8012696:	21ff      	movs	r1, #255	; 0xff
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7f3 f88c 	bl	80057b6 <mbedtls_mpi_set_bit>
 801269e:	6478      	str	r0, [r7, #68]	; 0x44
 80126a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d12a      	bne.n	80126fc <ecp_mod_p255+0xdc>
    for( i = P255_WIDTH; i < N->n; i++ )
 80126a6:	2308      	movs	r3, #8
 80126a8:	643b      	str	r3, [r7, #64]	; 0x40
 80126aa:	e009      	b.n	80126c0 <ecp_mod_p255+0xa0>
        N->p[i] = 0;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	4413      	add	r3, r2
 80126b6:	2200      	movs	r2, #0
 80126b8:	601a      	str	r2, [r3, #0]
    for( i = P255_WIDTH; i < N->n; i++ )
 80126ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126bc:	3301      	adds	r3, #1
 80126be:	643b      	str	r3, [r7, #64]	; 0x40
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d3f0      	bcc.n	80126ac <ecp_mod_p255+0x8c>

    /* N = A0 + 19 * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 80126ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80126ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80126d2:	2213      	movs	r2, #19
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f5 fcb0 	bl	800803a <mbedtls_mpi_mul_int>
 80126da:	6478      	str	r0, [r7, #68]	; 0x44
 80126dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d10e      	bne.n	8012700 <ecp_mod_p255+0xe0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80126e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80126e6:	461a      	mov	r2, r3
 80126e8:	6879      	ldr	r1, [r7, #4]
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7f3 fdb6 	bl	800625c <mbedtls_mpi_add_abs>
 80126f0:	6478      	str	r0, [r7, #68]	; 0x44
 80126f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126f4:	2b00      	cmp	r3, #0

cleanup:
 80126f6:	e004      	b.n	8012702 <ecp_mod_p255+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 80126f8:	bf00      	nop
 80126fa:	e002      	b.n	8012702 <ecp_mod_p255+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 80126fc:	bf00      	nop
 80126fe:	e000      	b.n	8012702 <ecp_mod_p255+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 8012700:	bf00      	nop
    return( ret );
 8012702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012704:	4618      	mov	r0, r3
 8012706:	3748      	adds	r7, #72	; 0x48
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	ffffb080 	.word	0xffffb080

08012710 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 8012710:	b5b0      	push	{r4, r5, r7, lr}
 8012712:	b0a8      	sub	sp, #160	; 0xa0
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8012718:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 801271c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	2b0e      	cmp	r3, #14
 8012726:	d801      	bhi.n	801272c <ecp_mod_p448+0x1c>
        return( 0 );
 8012728:	2300      	movs	r3, #0
 801272a:	e0c8      	b.n	80128be <ecp_mod_p448+0x1ae>

    /* M = A1 */
    M.s = 1;
 801272c:	2301      	movs	r3, #1
 801272e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    M.n = N->n - ( P448_WIDTH );
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	3b0e      	subs	r3, #14
 8012738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( M.n > P448_WIDTH )
 801273c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012740:	2b0e      	cmp	r3, #14
 8012742:	d901      	bls.n	8012748 <ecp_mod_p448+0x38>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012744:	4b60      	ldr	r3, [pc, #384]	; (80128c8 <ecp_mod_p448+0x1b8>)
 8012746:	e0ba      	b.n	80128be <ecp_mod_p448+0x1ae>
    M.p = Mp;
 8012748:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801274c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memset( Mp, 0, sizeof( Mp ) );
 8012750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012754:	223c      	movs	r2, #60	; 0x3c
 8012756:	2100      	movs	r1, #0
 8012758:	4618      	mov	r0, r3
 801275a:	f001 ff4b 	bl	80145f4 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801276a:	009a      	lsls	r2, r3, #2
 801276c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012770:	4618      	mov	r0, r3
 8012772:	f001 ff31 	bl	80145d8 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 8012776:	230e      	movs	r3, #14
 8012778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801277c:	e00c      	b.n	8012798 <ecp_mod_p448+0x88>
        N->p[i] = 0;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	689a      	ldr	r2, [r3, #8]
 8012782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	4413      	add	r3, r2
 801278a:	2200      	movs	r2, #0
 801278c:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 801278e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012792:	3301      	adds	r3, #1
 8012794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d3ec      	bcc.n	801277e <ecp_mod_p448+0x6e>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 80127a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80127a8:	461a      	mov	r2, r3
 80127aa:	6879      	ldr	r1, [r7, #4]
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7f3 fef6 	bl	800659e <mbedtls_mpi_add_mpi>
 80127b2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80127b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d174      	bne.n	80128a8 <ecp_mod_p448+0x198>

    /* Q = B1, N += B1 */
    Q = M;
 80127be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80127c2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80127c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80127c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 80127cc:	f107 030c 	add.w	r3, r7, #12
 80127d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 80127d4:	f107 040c 	add.w	r4, r7, #12
 80127d8:	f107 0544 	add.w	r5, r7, #68	; 0x44
 80127dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80127ec:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 80127f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80127f4:	21e0      	movs	r1, #224	; 0xe0
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7f3 fab3 	bl	8005d62 <mbedtls_mpi_shift_r>
 80127fc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8012800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012804:	2b00      	cmp	r3, #0
 8012806:	d151      	bne.n	80128ac <ecp_mod_p448+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 8012808:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801280c:	461a      	mov	r2, r3
 801280e:	6879      	ldr	r1, [r7, #4]
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7f3 fec4 	bl	800659e <mbedtls_mpi_add_mpi>
 8012816:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 801281a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801281e:	2b00      	cmp	r3, #0
 8012820:	d146      	bne.n	80128b0 <ecp_mod_p448+0x1a0>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 8012822:	2307      	movs	r3, #7
 8012824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012828:	e00d      	b.n	8012846 <ecp_mod_p448+0x136>
        Mp[i] = 0;
 801282a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801282e:	009b      	lsls	r3, r3, #2
 8012830:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8012834:	4413      	add	r3, r2
 8012836:	2200      	movs	r2, #0
 8012838:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 801283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012840:	3301      	adds	r3, #1
 8012842:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801284a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801284e:	429a      	cmp	r2, r3
 8012850:	d3eb      	bcc.n	801282a <ecp_mod_p448+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 8012852:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8012856:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801285a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801285e:	4618      	mov	r0, r3
 8012860:	f7f3 fe9d 	bl	800659e <mbedtls_mpi_add_mpi>
 8012864:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8012868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801286c:	2b00      	cmp	r3, #0
 801286e:	d121      	bne.n	80128b4 <ecp_mod_p448+0x1a4>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 8012870:	230f      	movs	r3, #15
 8012872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 8012876:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801287a:	21e0      	movs	r1, #224	; 0xe0
 801287c:	4618      	mov	r0, r3
 801287e:	f7f3 f9c8 	bl	8005c12 <mbedtls_mpi_shift_l>
 8012882:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8012886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801288a:	2b00      	cmp	r3, #0
 801288c:	d114      	bne.n	80128b8 <ecp_mod_p448+0x1a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 801288e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012892:	461a      	mov	r2, r3
 8012894:	6879      	ldr	r1, [r7, #4]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7f3 fe81 	bl	800659e <mbedtls_mpi_add_mpi>
 801289c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80128a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128a4:	2b00      	cmp	r3, #0

cleanup:
 80128a6:	e008      	b.n	80128ba <ecp_mod_p448+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 80128a8:	bf00      	nop
 80128aa:	e006      	b.n	80128ba <ecp_mod_p448+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 80128ac:	bf00      	nop
 80128ae:	e004      	b.n	80128ba <ecp_mod_p448+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 80128b0:	bf00      	nop
 80128b2:	e002      	b.n	80128ba <ecp_mod_p448+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 80128b4:	bf00      	nop
 80128b6:	e000      	b.n	80128ba <ecp_mod_p448+0x1aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 80128b8:	bf00      	nop
    return( ret );
 80128ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80128be:	4618      	mov	r0, r3
 80128c0:	37a0      	adds	r7, #160	; 0xa0
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bdb0      	pop	{r4, r5, r7, pc}
 80128c6:	bf00      	nop
 80128c8:	ffffb080 	.word	0xffffb080

080128cc <ecp_mod_koblitz>:
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b098      	sub	sp, #96	; 0x60
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
 80128d8:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80128da:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80128de:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d901      	bls.n	80128ee <ecp_mod_koblitz+0x22>
        return( 0 );
 80128ea:	2300      	movs	r3, #0
 80128ec:	e106      	b.n	8012afc <ecp_mod_koblitz+0x230>

    /* Init R */
    R.s = 1;
 80128ee:	2301      	movs	r3, #1
 80128f0:	643b      	str	r3, [r7, #64]	; 0x40
    R.p = Rp;
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	64bb      	str	r3, [r7, #72]	; 0x48
    R.n = P_KOBLITZ_R;
 80128f6:	2302      	movs	r3, #2
 80128f8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Common setup for M */
    M.s = 1;
 80128fa:	2301      	movs	r3, #1
 80128fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    M.p = Mp;
 80128fe:	f107 0314 	add.w	r3, r7, #20
 8012902:	657b      	str	r3, [r7, #84]	; 0x54

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	6839      	ldr	r1, [r7, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	1acb      	subs	r3, r1, r3
 801290e:	4413      	add	r3, r2
 8012910:	653b      	str	r3, [r7, #80]	; 0x50
    if( M.n > p_limbs + adjust )
 8012912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012914:	6879      	ldr	r1, [r7, #4]
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	440b      	add	r3, r1
 801291a:	429a      	cmp	r2, r3
 801291c:	d903      	bls.n	8012926 <ecp_mod_koblitz+0x5a>
        M.n = p_limbs + adjust;
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	4413      	add	r3, r2
 8012924:	653b      	str	r3, [r7, #80]	; 0x50
    memset( Mp, 0, sizeof Mp );
 8012926:	f107 0314 	add.w	r3, r7, #20
 801292a:	222c      	movs	r2, #44	; 0x2c
 801292c:	2100      	movs	r1, #0
 801292e:	4618      	mov	r0, r3
 8012930:	f001 fe60 	bl	80145f4 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	689a      	ldr	r2, [r3, #8]
 8012938:	6879      	ldr	r1, [r7, #4]
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	1acb      	subs	r3, r1, r3
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	18d1      	adds	r1, r2, r3
 8012942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012944:	009a      	lsls	r2, r3, #2
 8012946:	f107 0314 	add.w	r3, r7, #20
 801294a:	4618      	mov	r0, r3
 801294c:	f001 fe44 	bl	80145d8 <memcpy>
    if( shift != 0 )
 8012950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00a      	beq.n	801296c <ecp_mod_koblitz+0xa0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8012956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801295a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801295c:	4618      	mov	r0, r3
 801295e:	f7f3 fa00 	bl	8005d62 <mbedtls_mpi_shift_r>
 8012962:	65f8      	str	r0, [r7, #92]	; 0x5c
 8012964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012966:	2b00      	cmp	r3, #0
 8012968:	f040 80be 	bne.w	8012ae8 <ecp_mod_koblitz+0x21c>
    M.n += R.n; /* Make room for multiplication by R */
 801296c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801296e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012970:	4413      	add	r3, r2
 8012972:	653b      	str	r3, [r7, #80]	; 0x50

    /* N = A0 */
    if( mask != 0 )
 8012974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012976:	2b00      	cmp	r3, #0
 8012978:	d013      	beq.n	80129a2 <ecp_mod_koblitz+0xd6>
        N->p[p_limbs - 1] &= mask;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	689a      	ldr	r2, [r3, #8]
 801297e:	6879      	ldr	r1, [r7, #4]
 8012980:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012984:	440b      	add	r3, r1
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	6819      	ldr	r1, [r3, #0]
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	689a      	ldr	r2, [r3, #8]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012996:	4403      	add	r3, r0
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	4413      	add	r3, r2
 801299c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801299e:	400a      	ands	r2, r1
 80129a0:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80129a6:	e009      	b.n	80129bc <ecp_mod_koblitz+0xf0>
        N->p[i] = 0;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	689a      	ldr	r2, [r3, #8]
 80129ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	4413      	add	r3, r2
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80129b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129b8:	3301      	adds	r3, #1
 80129ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d3f0      	bcc.n	80129a8 <ecp_mod_koblitz+0xdc>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 80129c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80129ca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80129ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7f5 fa69 	bl	8007eaa <mbedtls_mpi_mul_mpi>
 80129d8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80129da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f040 8085 	bne.w	8012aec <ecp_mod_koblitz+0x220>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80129e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80129e6:	461a      	mov	r2, r3
 80129e8:	68f9      	ldr	r1, [r7, #12]
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f7f3 fc36 	bl	800625c <mbedtls_mpi_add_abs>
 80129f0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80129f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d17b      	bne.n	8012af0 <ecp_mod_koblitz+0x224>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	685a      	ldr	r2, [r3, #4]
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	1acb      	subs	r3, r1, r3
 8012a02:	4413      	add	r3, r2
 8012a04:	653b      	str	r3, [r7, #80]	; 0x50
    if( M.n > p_limbs + adjust )
 8012a06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a08:	6879      	ldr	r1, [r7, #4]
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	440b      	add	r3, r1
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d903      	bls.n	8012a1a <ecp_mod_koblitz+0x14e>
        M.n = p_limbs + adjust;
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	4413      	add	r3, r2
 8012a18:	653b      	str	r3, [r7, #80]	; 0x50
    memset( Mp, 0, sizeof Mp );
 8012a1a:	f107 0314 	add.w	r3, r7, #20
 8012a1e:	222c      	movs	r2, #44	; 0x2c
 8012a20:	2100      	movs	r1, #0
 8012a22:	4618      	mov	r0, r3
 8012a24:	f001 fde6 	bl	80145f4 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	689a      	ldr	r2, [r3, #8]
 8012a2c:	6879      	ldr	r1, [r7, #4]
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	1acb      	subs	r3, r1, r3
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	18d1      	adds	r1, r2, r3
 8012a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a38:	009a      	lsls	r2, r3, #2
 8012a3a:	f107 0314 	add.w	r3, r7, #20
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f001 fdca 	bl	80145d8 <memcpy>
    if( shift != 0 )
 8012a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d009      	beq.n	8012a5e <ecp_mod_koblitz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8012a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7f3 f986 	bl	8005d62 <mbedtls_mpi_shift_r>
 8012a56:	65f8      	str	r0, [r7, #92]	; 0x5c
 8012a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d14a      	bne.n	8012af4 <ecp_mod_koblitz+0x228>
    M.n += R.n; /* Make room for multiplication by R */
 8012a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a62:	4413      	add	r3, r2
 8012a64:	653b      	str	r3, [r7, #80]	; 0x50

    /* N = A0 */
    if( mask != 0 )
 8012a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d013      	beq.n	8012a94 <ecp_mod_koblitz+0x1c8>
        N->p[p_limbs - 1] &= mask;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	689a      	ldr	r2, [r3, #8]
 8012a70:	6879      	ldr	r1, [r7, #4]
 8012a72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012a76:	440b      	add	r3, r1
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	4413      	add	r3, r2
 8012a7c:	6819      	ldr	r1, [r3, #0]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	689a      	ldr	r2, [r3, #8]
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012a88:	4403      	add	r3, r0
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a90:	400a      	ands	r2, r1
 8012a92:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8012a98:	e009      	b.n	8012aae <ecp_mod_koblitz+0x1e2>
        N->p[i] = 0;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	689a      	ldr	r2, [r3, #8]
 8012a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	4413      	add	r3, r2
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8012aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012aaa:	3301      	adds	r3, #1
 8012aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d3f0      	bcc.n	8012a9a <ecp_mod_koblitz+0x1ce>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8012ab8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012abc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8012ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f5 f9f0 	bl	8007eaa <mbedtls_mpi_mul_mpi>
 8012aca:	65f8      	str	r0, [r7, #92]	; 0x5c
 8012acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d112      	bne.n	8012af8 <ecp_mod_koblitz+0x22c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8012ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	68f9      	ldr	r1, [r7, #12]
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f7f3 fbbe 	bl	800625c <mbedtls_mpi_add_abs>
 8012ae0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8012ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ae4:	2b00      	cmp	r3, #0

cleanup:
 8012ae6:	e008      	b.n	8012afa <ecp_mod_koblitz+0x22e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8012ae8:	bf00      	nop
 8012aea:	e006      	b.n	8012afa <ecp_mod_koblitz+0x22e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8012aec:	bf00      	nop
 8012aee:	e004      	b.n	8012afa <ecp_mod_koblitz+0x22e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8012af0:	bf00      	nop
 8012af2:	e002      	b.n	8012afa <ecp_mod_koblitz+0x22e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <ecp_mod_koblitz+0x22e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8012af8:	bf00      	nop
    return( ret );
 8012afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3760      	adds	r7, #96	; 0x60
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <ecp_mod_p192k1>:
/*
 * Fast quasi-reduction modulo p192k1 = 2^192 - R,
 * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
 */
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af02      	add	r7, sp, #8
 8012b0a:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        MBEDTLS_BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00,
                                   0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0,
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	9301      	str	r3, [sp, #4]
 8012b10:	2300      	movs	r3, #0
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	2300      	movs	r3, #0
 8012b16:	2206      	movs	r2, #6
 8012b18:	4904      	ldr	r1, [pc, #16]	; (8012b2c <ecp_mod_p192k1+0x28>)
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff fed6 	bl	80128cc <ecp_mod_koblitz>
 8012b20:	4603      	mov	r3, r0
                             0 ) );
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	20000010 	.word	0x20000010

08012b30 <ecp_mod_p224k1>:
/*
 * Fast quasi-reduction modulo p224k1 = 2^224 - R,
 * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
 */
static int ecp_mod_p224k1( mbedtls_mpi *N )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af02      	add	r7, sp, #8
 8012b36:	6078      	str	r0, [r7, #4]
                                   0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0,
 8012b38:	2300      	movs	r3, #0
 8012b3a:	9301      	str	r3, [sp, #4]
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	2300      	movs	r3, #0
 8012b42:	2207      	movs	r2, #7
 8012b44:	4904      	ldr	r1, [pc, #16]	; (8012b58 <ecp_mod_p224k1+0x28>)
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7ff fec0 	bl	80128cc <ecp_mod_koblitz>
 8012b4c:	4603      	mov	r3, r0
                             0 ) );
#endif
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3708      	adds	r7, #8
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	20000018 	.word	0x20000018

08012b5c <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        MBEDTLS_BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00,
                                   0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0,
 8012b64:	2300      	movs	r3, #0
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	2300      	movs	r3, #0
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	2208      	movs	r2, #8
 8012b70:	4904      	ldr	r1, [pc, #16]	; (8012b84 <ecp_mod_p256k1+0x28>)
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f7ff feaa 	bl	80128cc <ecp_mod_koblitz>
 8012b78:	4603      	mov	r3, r0
                             0 ) );
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
 8012b82:	bf00      	nop
 8012b84:	20000020 	.word	0x20000020

08012b88 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8012b90:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8012b94:	2100      	movs	r1, #0
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f001 fd2c 	bl	80145f4 <memset>
}
 8012b9c:	bf00      	nop
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 8012ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ba8:	b09e      	sub	sp, #120	; 0x78
 8012baa:	af02      	add	r7, sp, #8
 8012bac:	61f8      	str	r0, [r7, #28]
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	623b      	str	r3, [r7, #32]

    memset( h, 0, 16 );
 8012bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012bb6:	2210      	movs	r2, #16
 8012bb8:	2100      	movs	r1, #0
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f001 fd1a 	bl	80145f4 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8012bc0:	69f8      	ldr	r0, [r7, #28]
 8012bc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012bc6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012bca:	f107 0320 	add.w	r3, r7, #32
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	2210      	movs	r2, #16
 8012bd4:	f7f8 fb26 	bl	800b224 <mbedtls_cipher_update>
 8012bd8:	6578      	str	r0, [r7, #84]	; 0x54
 8012bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <gcm_gen_table+0x40>
        return( ret );
 8012be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012be2:	e133      	b.n	8012e4c <gcm_gen_table+0x2a8>

    /* pack h as two 64-bits ints, big-endian */
    hi = MBEDTLS_GET_UINT32_BE( h,  0  );
 8012be4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012be8:	061a      	lsls	r2, r3, #24
 8012bea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012bee:	041b      	lsls	r3, r3, #16
 8012bf0:	431a      	orrs	r2, r3
 8012bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012bf6:	021b      	lsls	r3, r3, #8
 8012bf8:	431a      	orrs	r2, r3
 8012bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	461a      	mov	r2, r3
 8012c02:	f04f 0300 	mov.w	r3, #0
 8012c06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    lo = MBEDTLS_GET_UINT32_BE( h,  4  );
 8012c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c0e:	061a      	lsls	r2, r3, #24
 8012c10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8012c14:	041b      	lsls	r3, r3, #16
 8012c16:	431a      	orrs	r2, r3
 8012c18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012c1c:	021b      	lsls	r3, r3, #8
 8012c1e:	431a      	orrs	r2, r3
 8012c20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c24:	4313      	orrs	r3, r2
 8012c26:	461a      	mov	r2, r3
 8012c28:	f04f 0300 	mov.w	r3, #0
 8012c2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    vh = (uint64_t) hi << 32 | lo;
 8012c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012c34:	f04f 0000 	mov.w	r0, #0
 8012c38:	f04f 0100 	mov.w	r1, #0
 8012c3c:	0011      	movs	r1, r2
 8012c3e:	2000      	movs	r0, #0
 8012c40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012c44:	ea42 0400 	orr.w	r4, r2, r0
 8012c48:	ea43 0501 	orr.w	r5, r3, r1
 8012c4c:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

    hi = MBEDTLS_GET_UINT32_BE( h,  8  );
 8012c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012c54:	061a      	lsls	r2, r3, #24
 8012c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012c5a:	041b      	lsls	r3, r3, #16
 8012c5c:	431a      	orrs	r2, r3
 8012c5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012c62:	021b      	lsls	r3, r3, #8
 8012c64:	4313      	orrs	r3, r2
 8012c66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	f04f 0300 	mov.w	r3, #0
 8012c72:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    lo = MBEDTLS_GET_UINT32_BE( h,  12 );
 8012c76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012c7a:	061a      	lsls	r2, r3, #24
 8012c7c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012c80:	041b      	lsls	r3, r3, #16
 8012c82:	431a      	orrs	r2, r3
 8012c84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8012c88:	021b      	lsls	r3, r3, #8
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8012c90:	4313      	orrs	r3, r2
 8012c92:	461a      	mov	r2, r3
 8012c94:	f04f 0300 	mov.w	r3, #0
 8012c98:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    vl = (uint64_t) hi << 32 | lo;
 8012c9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8012ca0:	f04f 0200 	mov.w	r2, #0
 8012ca4:	f04f 0300 	mov.w	r3, #0
 8012ca8:	0003      	movs	r3, r0
 8012caa:	2200      	movs	r2, #0
 8012cac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8012cb0:	ea40 0802 	orr.w	r8, r0, r2
 8012cb4:	ea41 0903 	orr.w	r9, r1, r3
 8012cb8:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8012cbc:	69f9      	ldr	r1, [r7, #28]
 8012cbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012cc2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    ctx->HH[8] = vh;
 8012cc6:	69f9      	ldr	r1, [r7, #28]
 8012cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012ccc:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8012cd0:	69f9      	ldr	r1, [r7, #28]
 8012cd2:	f04f 0200 	mov.w	r2, #0
 8012cd6:	f04f 0300 	mov.w	r3, #0
 8012cda:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
    ctx->HL[0] = 0;
 8012cde:	69f9      	ldr	r1, [r7, #28]
 8012ce0:	f04f 0200 	mov.w	r2, #0
 8012ce4:	f04f 0300 	mov.w	r3, #0
 8012ce8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    for( i = 4; i > 0; i >>= 1 )
 8012cec:	2304      	movs	r3, #4
 8012cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012cf0:	e054      	b.n	8012d9c <gcm_gen_table+0x1f8>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8012cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012cf4:	f003 0201 	and.w	r2, r3, #1
 8012cf8:	4613      	mov	r3, r2
 8012cfa:	0152      	lsls	r2, r2, #5
 8012cfc:	1a9b      	subs	r3, r3, r2
 8012cfe:	061b      	lsls	r3, r3, #24
 8012d00:	637b      	str	r3, [r7, #52]	; 0x34
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8012d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012d06:	f04f 0000 	mov.w	r0, #0
 8012d0a:	f04f 0100 	mov.w	r1, #0
 8012d0e:	07d1      	lsls	r1, r2, #31
 8012d10:	2000      	movs	r0, #0
 8012d12:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8012d16:	f04f 0200 	mov.w	r2, #0
 8012d1a:	f04f 0300 	mov.w	r3, #0
 8012d1e:	0862      	lsrs	r2, r4, #1
 8012d20:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8012d24:	086b      	lsrs	r3, r5, #1
 8012d26:	ea40 0402 	orr.w	r4, r0, r2
 8012d2a:	60bc      	str	r4, [r7, #8]
 8012d2c:	430b      	orrs	r3, r1
 8012d2e:	60fb      	str	r3, [r7, #12]
 8012d30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012d34:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8012d38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012d3c:	f04f 0200 	mov.w	r2, #0
 8012d40:	f04f 0300 	mov.w	r3, #0
 8012d44:	0842      	lsrs	r2, r0, #1
 8012d46:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8012d4a:	084b      	lsrs	r3, r1, #1
 8012d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d4e:	460c      	mov	r4, r1
 8012d50:	f04f 0500 	mov.w	r5, #0
 8012d54:	f04f 0000 	mov.w	r0, #0
 8012d58:	f04f 0100 	mov.w	r1, #0
 8012d5c:	0021      	movs	r1, r4
 8012d5e:	2000      	movs	r0, #0
 8012d60:	ea82 0400 	eor.w	r4, r2, r0
 8012d64:	603c      	str	r4, [r7, #0]
 8012d66:	404b      	eors	r3, r1
 8012d68:	607b      	str	r3, [r7, #4]
 8012d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012d6e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        ctx->HL[i] = vl;
 8012d72:	69fa      	ldr	r2, [r7, #28]
 8012d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d76:	3308      	adds	r3, #8
 8012d78:	00db      	lsls	r3, r3, #3
 8012d7a:	18d1      	adds	r1, r2, r3
 8012d7c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012d80:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 8012d84:	69fa      	ldr	r2, [r7, #28]
 8012d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d88:	3318      	adds	r3, #24
 8012d8a:	00db      	lsls	r3, r3, #3
 8012d8c:	18d1      	adds	r1, r2, r3
 8012d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012d92:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 8012d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d98:	105b      	asrs	r3, r3, #1
 8012d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	dca7      	bgt.n	8012cf2 <gcm_gen_table+0x14e>
    }

    for( i = 2; i <= 8; i *= 2 )
 8012da2:	2302      	movs	r3, #2
 8012da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012da6:	e04d      	b.n	8012e44 <gcm_gen_table+0x2a0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8012dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012db0:	00db      	lsls	r3, r3, #3
 8012db2:	4413      	add	r3, r2
 8012db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8012dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012dbe:	00db      	lsls	r3, r3, #3
 8012dc0:	4413      	add	r3, r2
 8012dc2:	63bb      	str	r3, [r7, #56]	; 0x38
        vh = *HiH;
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
        vl = *HiL;
 8012dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        for( j = 1; j < i; j++ )
 8012dd8:	2301      	movs	r3, #1
 8012dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8012ddc:	e02b      	b.n	8012e36 <gcm_gen_table+0x292>
        {
            HiH[j] = vh ^ ctx->HH[j];
 8012dde:	69fa      	ldr	r2, [r7, #28]
 8012de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012de2:	3318      	adds	r3, #24
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	4413      	add	r3, r2
 8012de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012df2:	18d4      	adds	r4, r2, r3
 8012df4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012df8:	ea80 0a02 	eor.w	sl, r0, r2
 8012dfc:	ea81 0b03 	eor.w	fp, r1, r3
 8012e00:	e9c4 ab00 	strd	sl, fp, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 8012e04:	69fa      	ldr	r2, [r7, #28]
 8012e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e08:	3308      	adds	r3, #8
 8012e0a:	00db      	lsls	r3, r3, #3
 8012e0c:	4413      	add	r3, r2
 8012e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e14:	00db      	lsls	r3, r3, #3
 8012e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e18:	18d4      	adds	r4, r2, r3
 8012e1a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012e1e:	ea80 0502 	eor.w	r5, r0, r2
 8012e22:	613d      	str	r5, [r7, #16]
 8012e24:	404b      	eors	r3, r1
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012e2c:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 8012e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e32:	3301      	adds	r3, #1
 8012e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	dbcf      	blt.n	8012dde <gcm_gen_table+0x23a>
    for( i = 2; i <= 8; i *= 2 )
 8012e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e40:	005b      	lsls	r3, r3, #1
 8012e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e46:	2b08      	cmp	r3, #8
 8012e48:	ddae      	ble.n	8012da8 <gcm_gen_table+0x204>
        }
    }

    return( 0 );
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3770      	adds	r7, #112	; 0x70
 8012e50:	46bd      	mov	sp, r7
 8012e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012e56 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8012e56:	b580      	push	{r7, lr}
 8012e58:	b086      	sub	sp, #24
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	60f8      	str	r0, [r7, #12]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	603b      	str	r3, [r7, #0]
 8012e62:	460b      	mov	r3, r1
 8012e64:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8012e66:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8012e6a:	617b      	str	r3, [r7, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8012e6c:	6839      	ldr	r1, [r7, #0]
 8012e6e:	7afb      	ldrb	r3, [r7, #11]
 8012e70:	2201      	movs	r2, #1
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7f8 f902 	bl	800b07c <mbedtls_cipher_info_from_values>
 8012e78:	6138      	str	r0, [r7, #16]
                                                   MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d102      	bne.n	8012e86 <mbedtls_gcm_setkey+0x30>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8012e80:	f06f 0313 	mvn.w	r3, #19
 8012e84:	e02b      	b.n	8012ede <mbedtls_gcm_setkey+0x88>

    if( cipher_info->block_size != 16 )
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	695b      	ldr	r3, [r3, #20]
 8012e8a:	2b10      	cmp	r3, #16
 8012e8c:	d002      	beq.n	8012e94 <mbedtls_gcm_setkey+0x3e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8012e8e:	f06f 0313 	mvn.w	r3, #19
 8012e92:	e024      	b.n	8012ede <mbedtls_gcm_setkey+0x88>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7f8 f922 	bl	800b0e0 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6939      	ldr	r1, [r7, #16]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f8 f939 	bl	800b118 <mbedtls_cipher_setup>
 8012ea6:	6178      	str	r0, [r7, #20]
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <mbedtls_gcm_setkey+0x5c>
        return( ret );
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	e015      	b.n	8012ede <mbedtls_gcm_setkey+0x88>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8012eb2:	68f8      	ldr	r0, [r7, #12]
 8012eb4:	683a      	ldr	r2, [r7, #0]
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	f7f8 f959 	bl	800b170 <mbedtls_cipher_setkey>
 8012ebe:	6178      	str	r0, [r7, #20]
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d001      	beq.n	8012eca <mbedtls_gcm_setkey+0x74>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	e009      	b.n	8012ede <mbedtls_gcm_setkey+0x88>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f7ff fe6a 	bl	8012ba4 <gcm_gen_table>
 8012ed0:	6178      	str	r0, [r7, #20]
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d001      	beq.n	8012edc <mbedtls_gcm_setkey+0x86>
        return( ret );
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	e000      	b.n	8012ede <mbedtls_gcm_setkey+0x88>

    return( 0 );
 8012edc:	2300      	movs	r3, #0
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3718      	adds	r7, #24
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
	...

08012ee8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8012ee8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012eec:	b099      	sub	sp, #100	; 0x64
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8012ef4:	637a      	str	r2, [r7, #52]	; 0x34
    int i = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	330f      	adds	r3, #15
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	f003 030f 	and.w	r3, r3, #15
 8012f04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    zh = ctx->HH[lo];
 8012f08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012f0e:	3318      	adds	r3, #24
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	4413      	add	r3, r2
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    zl = ctx->HL[lo];
 8012f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012f22:	3308      	adds	r3, #8
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	4413      	add	r3, r2
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for( i = 15; i >= 0; i-- )
 8012f30:	230f      	movs	r3, #15
 8012f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f34:	e0e6      	b.n	8013104 <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 8012f36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3a:	4413      	add	r3, r2
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	f003 030f 	and.w	r3, r3, #15
 8012f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        hi = ( x[i] >> 4 ) & 0xf;
 8012f46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4a:	4413      	add	r3, r2
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	091b      	lsrs	r3, r3, #4
 8012f50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        if( i != 15 )
 8012f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f56:	2b0f      	cmp	r3, #15
 8012f58:	d068      	beq.n	801302c <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 8012f5a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012f5e:	f003 030f 	and.w	r3, r3, #15
 8012f62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 8012f66:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012f6a:	f04f 0400 	mov.w	r4, #0
 8012f6e:	f04f 0500 	mov.w	r5, #0
 8012f72:	0715      	lsls	r5, r2, #28
 8012f74:	2400      	movs	r4, #0
 8012f76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012f7a:	f04f 0000 	mov.w	r0, #0
 8012f7e:	f04f 0100 	mov.w	r1, #0
 8012f82:	0910      	lsrs	r0, r2, #4
 8012f84:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8012f88:	0919      	lsrs	r1, r3, #4
 8012f8a:	ea44 0300 	orr.w	r3, r4, r0
 8012f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f90:	ea45 0301 	orr.w	r3, r5, r1
 8012f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f96:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8012f9a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
            zh = ( zh >> 4 );
 8012f9e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012fa2:	f04f 0000 	mov.w	r0, #0
 8012fa6:	f04f 0100 	mov.w	r1, #0
 8012faa:	0910      	lsrs	r0, r2, #4
 8012fac:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8012fb0:	0919      	lsrs	r1, r3, #4
 8012fb2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 8012fb6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8012fba:	4ab6      	ldr	r2, [pc, #728]	; (8013294 <gcm_mult+0x3ac>)
 8012fbc:	00db      	lsls	r3, r3, #3
 8012fbe:	4413      	add	r3, r2
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	f04f 0000 	mov.w	r0, #0
 8012fc8:	f04f 0100 	mov.w	r1, #0
 8012fcc:	0411      	lsls	r1, r2, #16
 8012fce:	2000      	movs	r0, #0
 8012fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012fd4:	ea82 0400 	eor.w	r4, r2, r0
 8012fd8:	623c      	str	r4, [r7, #32]
 8012fda:	404b      	eors	r3, r1
 8012fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8012fde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012fe2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zh ^= ctx->HH[lo];
 8012fe6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012fec:	3318      	adds	r3, #24
 8012fee:	00db      	lsls	r3, r3, #3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ff6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012ffa:	ea82 0400 	eor.w	r4, r2, r0
 8012ffe:	61bc      	str	r4, [r7, #24]
 8013000:	404b      	eors	r3, r1
 8013002:	61fb      	str	r3, [r7, #28]
 8013004:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013008:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            zl ^= ctx->HL[lo];
 801300c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013012:	3308      	adds	r3, #8
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	4413      	add	r3, r2
 8013018:	e9d3 0100 	ldrd	r0, r1, [r3]
 801301c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013020:	ea82 0800 	eor.w	r8, r2, r0
 8013024:	ea83 0901 	eor.w	r9, r3, r1
 8013028:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48

        }

        rem = (unsigned char) zl & 0xf;
 801302c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 8013038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801303c:	f04f 0400 	mov.w	r4, #0
 8013040:	f04f 0500 	mov.w	r5, #0
 8013044:	0715      	lsls	r5, r2, #28
 8013046:	2400      	movs	r4, #0
 8013048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801304c:	f04f 0000 	mov.w	r0, #0
 8013050:	f04f 0100 	mov.w	r1, #0
 8013054:	0910      	lsrs	r0, r2, #4
 8013056:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 801305a:	0919      	lsrs	r1, r3, #4
 801305c:	ea44 0300 	orr.w	r3, r4, r0
 8013060:	613b      	str	r3, [r7, #16]
 8013062:	ea45 0301 	orr.w	r3, r5, r1
 8013066:	617b      	str	r3, [r7, #20]
 8013068:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801306c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        zh = ( zh >> 4 );
 8013070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8013074:	f04f 0000 	mov.w	r0, #0
 8013078:	f04f 0100 	mov.w	r1, #0
 801307c:	0910      	lsrs	r0, r2, #4
 801307e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8013082:	0919      	lsrs	r1, r3, #4
 8013084:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 8013088:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801308c:	4a81      	ldr	r2, [pc, #516]	; (8013294 <gcm_mult+0x3ac>)
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	4413      	add	r3, r2
 8013092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013096:	f04f 0000 	mov.w	r0, #0
 801309a:	f04f 0100 	mov.w	r1, #0
 801309e:	0411      	lsls	r1, r2, #16
 80130a0:	2000      	movs	r0, #0
 80130a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80130a6:	ea82 0400 	eor.w	r4, r2, r0
 80130aa:	60bc      	str	r4, [r7, #8]
 80130ac:	404b      	eors	r3, r1
 80130ae:	60fb      	str	r3, [r7, #12]
 80130b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80130b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zh ^= ctx->HH[hi];
 80130b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80130bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130be:	3318      	adds	r3, #24
 80130c0:	00db      	lsls	r3, r3, #3
 80130c2:	4413      	add	r3, r2
 80130c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80130c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80130cc:	ea82 0400 	eor.w	r4, r2, r0
 80130d0:	603c      	str	r4, [r7, #0]
 80130d2:	404b      	eors	r3, r1
 80130d4:	607b      	str	r3, [r7, #4]
 80130d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80130da:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        zl ^= ctx->HL[hi];
 80130de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80130e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130e4:	3308      	adds	r3, #8
 80130e6:	00db      	lsls	r3, r3, #3
 80130e8:	4413      	add	r3, r2
 80130ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80130ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80130f2:	ea82 0a00 	eor.w	sl, r2, r0
 80130f6:	ea83 0b01 	eor.w	fp, r3, r1
 80130fa:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
    for( i = 15; i >= 0; i-- )
 80130fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013100:	3b01      	subs	r3, #1
 8013102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013106:	2b00      	cmp	r3, #0
 8013108:	f6bf af15 	bge.w	8012f36 <gcm_mult+0x4e>
    }

    MBEDTLS_PUT_UINT32_BE( zh >> 32, output, 0 );
 801310c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013110:	f04f 0200 	mov.w	r2, #0
 8013114:	f04f 0300 	mov.w	r3, #0
 8013118:	0e0a      	lsrs	r2, r1, #24
 801311a:	2300      	movs	r3, #0
 801311c:	b2d2      	uxtb	r2, r2
 801311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013120:	701a      	strb	r2, [r3, #0]
 8013122:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013126:	f04f 0200 	mov.w	r2, #0
 801312a:	f04f 0300 	mov.w	r3, #0
 801312e:	0c0a      	lsrs	r2, r1, #16
 8013130:	2300      	movs	r3, #0
 8013132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013134:	3101      	adds	r1, #1
 8013136:	b2d3      	uxtb	r3, r2
 8013138:	700b      	strb	r3, [r1, #0]
 801313a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801313e:	f04f 0200 	mov.w	r2, #0
 8013142:	f04f 0300 	mov.w	r3, #0
 8013146:	0a0a      	lsrs	r2, r1, #8
 8013148:	2300      	movs	r3, #0
 801314a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801314c:	3102      	adds	r1, #2
 801314e:	b2d3      	uxtb	r3, r2
 8013150:	700b      	strb	r3, [r1, #0]
 8013152:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013156:	f04f 0200 	mov.w	r2, #0
 801315a:	f04f 0300 	mov.w	r3, #0
 801315e:	000a      	movs	r2, r1
 8013160:	2300      	movs	r3, #0
 8013162:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013164:	3103      	adds	r1, #3
 8013166:	b2d3      	uxtb	r3, r2
 8013168:	700b      	strb	r3, [r1, #0]
    MBEDTLS_PUT_UINT32_BE( zh, output, 4 );
 801316a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801316e:	f04f 0200 	mov.w	r2, #0
 8013172:	f04f 0300 	mov.w	r3, #0
 8013176:	0e02      	lsrs	r2, r0, #24
 8013178:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801317c:	0e0b      	lsrs	r3, r1, #24
 801317e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013180:	3104      	adds	r1, #4
 8013182:	b2d3      	uxtb	r3, r2
 8013184:	700b      	strb	r3, [r1, #0]
 8013186:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801318a:	f04f 0200 	mov.w	r2, #0
 801318e:	f04f 0300 	mov.w	r3, #0
 8013192:	0c02      	lsrs	r2, r0, #16
 8013194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013198:	0c0b      	lsrs	r3, r1, #16
 801319a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801319c:	3105      	adds	r1, #5
 801319e:	b2d3      	uxtb	r3, r2
 80131a0:	700b      	strb	r3, [r1, #0]
 80131a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80131a6:	f04f 0200 	mov.w	r2, #0
 80131aa:	f04f 0300 	mov.w	r3, #0
 80131ae:	0a02      	lsrs	r2, r0, #8
 80131b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80131b4:	0a0b      	lsrs	r3, r1, #8
 80131b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131b8:	3106      	adds	r1, #6
 80131ba:	b2d3      	uxtb	r3, r2
 80131bc:	700b      	strb	r3, [r1, #0]
 80131be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c0:	3307      	adds	r3, #7
 80131c2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80131c6:	701a      	strb	r2, [r3, #0]
    MBEDTLS_PUT_UINT32_BE( zl >> 32, output, 8 );
 80131c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80131cc:	f04f 0200 	mov.w	r2, #0
 80131d0:	f04f 0300 	mov.w	r3, #0
 80131d4:	0e0a      	lsrs	r2, r1, #24
 80131d6:	2300      	movs	r3, #0
 80131d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131da:	3108      	adds	r1, #8
 80131dc:	b2d3      	uxtb	r3, r2
 80131de:	700b      	strb	r3, [r1, #0]
 80131e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80131e4:	f04f 0200 	mov.w	r2, #0
 80131e8:	f04f 0300 	mov.w	r3, #0
 80131ec:	0c0a      	lsrs	r2, r1, #16
 80131ee:	2300      	movs	r3, #0
 80131f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131f2:	3109      	adds	r1, #9
 80131f4:	b2d3      	uxtb	r3, r2
 80131f6:	700b      	strb	r3, [r1, #0]
 80131f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80131fc:	f04f 0200 	mov.w	r2, #0
 8013200:	f04f 0300 	mov.w	r3, #0
 8013204:	0a0a      	lsrs	r2, r1, #8
 8013206:	2300      	movs	r3, #0
 8013208:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801320a:	310a      	adds	r1, #10
 801320c:	b2d3      	uxtb	r3, r2
 801320e:	700b      	strb	r3, [r1, #0]
 8013210:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013214:	f04f 0200 	mov.w	r2, #0
 8013218:	f04f 0300 	mov.w	r3, #0
 801321c:	000a      	movs	r2, r1
 801321e:	2300      	movs	r3, #0
 8013220:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013222:	310b      	adds	r1, #11
 8013224:	b2d3      	uxtb	r3, r2
 8013226:	700b      	strb	r3, [r1, #0]
    MBEDTLS_PUT_UINT32_BE( zl, output, 12 );
 8013228:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801322c:	f04f 0200 	mov.w	r2, #0
 8013230:	f04f 0300 	mov.w	r3, #0
 8013234:	0e02      	lsrs	r2, r0, #24
 8013236:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801323a:	0e0b      	lsrs	r3, r1, #24
 801323c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801323e:	310c      	adds	r1, #12
 8013240:	b2d3      	uxtb	r3, r2
 8013242:	700b      	strb	r3, [r1, #0]
 8013244:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013248:	f04f 0200 	mov.w	r2, #0
 801324c:	f04f 0300 	mov.w	r3, #0
 8013250:	0c02      	lsrs	r2, r0, #16
 8013252:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013256:	0c0b      	lsrs	r3, r1, #16
 8013258:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801325a:	310d      	adds	r1, #13
 801325c:	b2d3      	uxtb	r3, r2
 801325e:	700b      	strb	r3, [r1, #0]
 8013260:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013264:	f04f 0200 	mov.w	r2, #0
 8013268:	f04f 0300 	mov.w	r3, #0
 801326c:	0a02      	lsrs	r2, r0, #8
 801326e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013272:	0a0b      	lsrs	r3, r1, #8
 8013274:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013276:	310e      	adds	r1, #14
 8013278:	b2d3      	uxtb	r3, r2
 801327a:	700b      	strb	r3, [r1, #0]
 801327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801327e:	330f      	adds	r3, #15
 8013280:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8013284:	701a      	strb	r2, [r3, #0]
}
 8013286:	bf00      	nop
 8013288:	3764      	adds	r7, #100	; 0x64
 801328a:	46bd      	mov	sp, r7
 801328c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	0801f108 	.word	0x0801f108

08013298 <mbedtls_gcm_starts>:

int mbedtls_gcm_starts( mbedtls_gcm_context *ctx,
                        int mode,
                        const unsigned char *iv, size_t iv_len )
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b090      	sub	sp, #64	; 0x40
 801329c:	af02      	add	r7, sp, #8
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
 80132a4:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80132a6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80132aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( iv != NULL );

    /* IV is limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 || (uint64_t) iv_len >> 61 != 0 )
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00b      	beq.n	80132ce <mbedtls_gcm_starts+0x36>
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f04f 0100 	mov.w	r1, #0
 80132be:	f04f 0200 	mov.w	r2, #0
 80132c2:	f04f 0300 	mov.w	r3, #0
 80132c6:	0f4a      	lsrs	r2, r1, #29
 80132c8:	2300      	movs	r3, #0
 80132ca:	4313      	orrs	r3, r2
 80132cc:	d002      	beq.n	80132d4 <mbedtls_gcm_starts+0x3c>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80132ce:	f06f 0313 	mvn.w	r3, #19
 80132d2:	e0c6      	b.n	8013462 <mbedtls_gcm_starts+0x1ca>

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80132da:	2210      	movs	r2, #16
 80132dc:	2100      	movs	r1, #0
 80132de:	4618      	mov	r0, r3
 80132e0:	f001 f988 	bl	80145f4 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80132ea:	2210      	movs	r2, #16
 80132ec:	2100      	movs	r1, #0
 80132ee:	4618      	mov	r0, r3
 80132f0:	f001 f980 	bl	80145f4 <memset>

    ctx->mode = mode;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ctx->len = 0;
 80132fc:	68f9      	ldr	r1, [r7, #12]
 80132fe:	f04f 0200 	mov.w	r2, #0
 8013302:	f04f 0300 	mov.w	r3, #0
 8013306:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    ctx->add_len = 0;
 801330a:	68f9      	ldr	r1, [r7, #12]
 801330c:	f04f 0200 	mov.w	r2, #0
 8013310:	f04f 0300 	mov.w	r3, #0
 8013314:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

    if( iv_len == 12 )
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	2b0c      	cmp	r3, #12
 801331c:	d10c      	bne.n	8013338 <mbedtls_gcm_starts+0xa0>
    {
        memcpy( ctx->y, iv, iv_len );
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013324:	683a      	ldr	r2, [r7, #0]
 8013326:	6879      	ldr	r1, [r7, #4]
 8013328:	4618      	mov	r0, r3
 801332a:	f001 f955 	bl	80145d8 <memcpy>
        ctx->y[15] = 1;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2201      	movs	r2, #1
 8013332:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8013336:	e07f      	b.n	8013438 <mbedtls_gcm_starts+0x1a0>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8013338:	f107 0318 	add.w	r3, r7, #24
 801333c:	2210      	movs	r2, #16
 801333e:	2100      	movs	r1, #0
 8013340:	4618      	mov	r0, r3
 8013342:	f001 f957 	bl	80145f4 <memset>
        MBEDTLS_PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	0e1b      	lsrs	r3, r3, #24
 801334c:	b2db      	uxtb	r3, r3
 801334e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	00db      	lsls	r3, r3, #3
 8013356:	0c1b      	lsrs	r3, r3, #16
 8013358:	b2db      	uxtb	r3, r3
 801335a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	00db      	lsls	r3, r3, #3
 8013362:	0a1b      	lsrs	r3, r3, #8
 8013364:	b2db      	uxtb	r3, r3
 8013366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	b2db      	uxtb	r3, r3
 801336e:	00db      	lsls	r3, r3, #3
 8013370:	b2db      	uxtb	r3, r3
 8013372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        p = iv;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 801337a:	e033      	b.n	80133e4 <mbedtls_gcm_starts+0x14c>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	2b10      	cmp	r3, #16
 8013380:	bf28      	it	cs
 8013382:	2310      	movcs	r3, #16
 8013384:	62bb      	str	r3, [r7, #40]	; 0x28

            for( i = 0; i < use_len; i++ )
 8013386:	2300      	movs	r3, #0
 8013388:	637b      	str	r3, [r7, #52]	; 0x34
 801338a:	e015      	b.n	80133b8 <mbedtls_gcm_starts+0x120>
                ctx->y[i] ^= p[i];
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013390:	4413      	add	r3, r2
 8013392:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013396:	781a      	ldrb	r2, [r3, #0]
 8013398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801339c:	440b      	add	r3, r1
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	4053      	eors	r3, r2
 80133a2:	b2d9      	uxtb	r1, r3
 80133a4:	68fa      	ldr	r2, [r7, #12]
 80133a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a8:	4413      	add	r3, r2
 80133aa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80133ae:	460a      	mov	r2, r1
 80133b0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 80133b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b4:	3301      	adds	r3, #1
 80133b6:	637b      	str	r3, [r7, #52]	; 0x34
 80133b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	429a      	cmp	r2, r3
 80133be:	d3e5      	bcc.n	801338c <mbedtls_gcm_starts+0xf4>

            gcm_mult( ctx, ctx->y, ctx->y );
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80133cc:	461a      	mov	r2, r3
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f7ff fd8a 	bl	8012ee8 <gcm_mult>

            iv_len -= use_len;
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d8:	1ad3      	subs	r3, r2, r3
 80133da:	603b      	str	r3, [r7, #0]
            p += use_len;
 80133dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e0:	4413      	add	r3, r2
 80133e2:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d1c8      	bne.n	801337c <mbedtls_gcm_starts+0xe4>
        }

        for( i = 0; i < 16; i++ )
 80133ea:	2300      	movs	r3, #0
 80133ec:	637b      	str	r3, [r7, #52]	; 0x34
 80133ee:	e016      	b.n	801341e <mbedtls_gcm_starts+0x186>
            ctx->y[i] ^= work_buf[i];
 80133f0:	68fa      	ldr	r2, [r7, #12]
 80133f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f4:	4413      	add	r3, r2
 80133f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80133fa:	781a      	ldrb	r2, [r3, #0]
 80133fc:	f107 0118 	add.w	r1, r7, #24
 8013400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013402:	440b      	add	r3, r1
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	4053      	eors	r3, r2
 8013408:	b2d9      	uxtb	r1, r3
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340e:	4413      	add	r3, r2
 8013410:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013414:	460a      	mov	r2, r1
 8013416:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8013418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801341a:	3301      	adds	r3, #1
 801341c:	637b      	str	r3, [r7, #52]	; 0x34
 801341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013420:	2b0f      	cmp	r3, #15
 8013422:	d9e5      	bls.n	80133f0 <mbedtls_gcm_starts+0x158>

        gcm_mult( ctx, ctx->y, ctx->y );
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013430:	461a      	mov	r2, r3
 8013432:	68f8      	ldr	r0, [r7, #12]
 8013434:	f7ff fd58 	bl	8012ee8 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 8013438:	68f8      	ldr	r0, [r7, #12]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	f503 71b0 	add.w	r1, r3, #352	; 0x160
                                       ctx->base_ectr, &olen ) ) != 0 )
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f503 72a8 	add.w	r2, r3, #336	; 0x150
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 8013446:	f107 0314 	add.w	r3, r7, #20
 801344a:	9300      	str	r3, [sp, #0]
 801344c:	4613      	mov	r3, r2
 801344e:	2210      	movs	r2, #16
 8013450:	f7f7 fee8 	bl	800b224 <mbedtls_cipher_update>
 8013454:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013458:	2b00      	cmp	r3, #0
 801345a:	d001      	beq.n	8013460 <mbedtls_gcm_starts+0x1c8>
    {
        return( ret );
 801345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345e:	e000      	b.n	8013462 <mbedtls_gcm_starts+0x1ca>
    }

    return( 0 );
 8013460:	2300      	movs	r3, #0
}
 8013462:	4618      	mov	r0, r3
 8013464:	3738      	adds	r7, #56	; 0x38
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}

0801346a <gcm_incr>:
    return( 0 );
}

/* Increment the counter. */
static void gcm_incr( unsigned char y[16] )
{
 801346a:	b480      	push	{r7}
 801346c:	b085      	sub	sp, #20
 801346e:	af00      	add	r7, sp, #0
 8013470:	6078      	str	r0, [r7, #4]
    size_t i;
    for( i = 16; i > 12; i-- )
 8013472:	2310      	movs	r3, #16
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	e00d      	b.n	8013494 <gcm_incr+0x2a>
        if( ++y[i - 1] != 0 )
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	3b01      	subs	r3, #1
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	4413      	add	r3, r2
 8013480:	781a      	ldrb	r2, [r3, #0]
 8013482:	3201      	adds	r2, #1
 8013484:	b2d2      	uxtb	r2, r2
 8013486:	701a      	strb	r2, [r3, #0]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d106      	bne.n	801349c <gcm_incr+0x32>
    for( i = 16; i > 12; i-- )
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	3b01      	subs	r3, #1
 8013492:	60fb      	str	r3, [r7, #12]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2b0c      	cmp	r3, #12
 8013498:	d8ee      	bhi.n	8013478 <gcm_incr+0xe>
            break;
}
 801349a:	e000      	b.n	801349e <gcm_incr+0x34>
            break;
 801349c:	bf00      	nop
}
 801349e:	bf00      	nop
 80134a0:	3714      	adds	r7, #20
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr

080134aa <gcm_mask>:
static int gcm_mask( mbedtls_gcm_context *ctx,
                     unsigned char ectr[16],
                     size_t offset, size_t use_len,
                     const unsigned char *input,
                     unsigned char *output )
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b08a      	sub	sp, #40	; 0x28
 80134ae:	af02      	add	r7, sp, #8
 80134b0:	60f8      	str	r0, [r7, #12]
 80134b2:	60b9      	str	r1, [r7, #8]
 80134b4:	607a      	str	r2, [r7, #4]
 80134b6:	603b      	str	r3, [r7, #0]
    size_t i;
    size_t olen = 0;
 80134b8:	2300      	movs	r3, #0
 80134ba:	617b      	str	r3, [r7, #20]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80134bc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80134c0:	61bb      	str	r3, [r7, #24]

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 80134ca:	f107 0314 	add.w	r3, r7, #20
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	2210      	movs	r2, #16
 80134d4:	f7f7 fea6 	bl	800b224 <mbedtls_cipher_update>
 80134d8:	61b8      	str	r0, [r7, #24]
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d005      	beq.n	80134ec <gcm_mask+0x42>
                                       &olen ) ) != 0 )
    {
        mbedtls_platform_zeroize( ectr, 16 );
 80134e0:	2110      	movs	r1, #16
 80134e2:	68b8      	ldr	r0, [r7, #8]
 80134e4:	f000 f990 	bl	8013808 <mbedtls_platform_zeroize>
        return( ret );
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	e04e      	b.n	801358a <gcm_mask+0xe0>
    }

    for( i = 0; i < use_len; i++ )
 80134ec:	2300      	movs	r3, #0
 80134ee:	61fb      	str	r3, [r7, #28]
 80134f0:	e046      	b.n	8013580 <gcm_mask+0xd6>
    {
        if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d114      	bne.n	8013526 <gcm_mask+0x7c>
            ctx->buf[offset + i] ^= input[i];
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	4413      	add	r3, r2
 8013502:	68fa      	ldr	r2, [r7, #12]
 8013504:	4413      	add	r3, r2
 8013506:	f893 1170 	ldrb.w	r1, [r3, #368]	; 0x170
 801350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801350c:	69fb      	ldr	r3, [r7, #28]
 801350e:	4413      	add	r3, r2
 8013510:	781a      	ldrb	r2, [r3, #0]
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	69fb      	ldr	r3, [r7, #28]
 8013516:	4403      	add	r3, r0
 8013518:	404a      	eors	r2, r1
 801351a:	b2d1      	uxtb	r1, r2
 801351c:	68fa      	ldr	r2, [r7, #12]
 801351e:	4413      	add	r3, r2
 8013520:	460a      	mov	r2, r1
 8013522:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
        output[i] = ectr[offset + i] ^ input[i];
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	4413      	add	r3, r2
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	4413      	add	r3, r2
 8013530:	7819      	ldrb	r1, [r3, #0]
 8013532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	4413      	add	r3, r2
 8013538:	781a      	ldrb	r2, [r3, #0]
 801353a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	4403      	add	r3, r0
 8013540:	404a      	eors	r2, r1
 8013542:	b2d2      	uxtb	r2, r2
 8013544:	701a      	strb	r2, [r3, #0]
        if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801354c:	2b01      	cmp	r3, #1
 801354e:	d114      	bne.n	801357a <gcm_mask+0xd0>
            ctx->buf[offset + i] ^= output[i];
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	4413      	add	r3, r2
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	4413      	add	r3, r2
 801355a:	f893 1170 	ldrb.w	r1, [r3, #368]	; 0x170
 801355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	4413      	add	r3, r2
 8013564:	781a      	ldrb	r2, [r3, #0]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	4403      	add	r3, r0
 801356c:	404a      	eors	r2, r1
 801356e:	b2d1      	uxtb	r1, r2
 8013570:	68fa      	ldr	r2, [r7, #12]
 8013572:	4413      	add	r3, r2
 8013574:	460a      	mov	r2, r1
 8013576:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
    for( i = 0; i < use_len; i++ )
 801357a:	69fb      	ldr	r3, [r7, #28]
 801357c:	3301      	adds	r3, #1
 801357e:	61fb      	str	r3, [r7, #28]
 8013580:	69fa      	ldr	r2, [r7, #28]
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	429a      	cmp	r2, r3
 8013586:	d3b4      	bcc.n	80134f2 <gcm_mask+0x48>
    }
    return( 0 );
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3720      	adds	r7, #32
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}

08013592 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                        const unsigned char *input, size_t input_length,
                        unsigned char *output, size_t output_size,
                        size_t *output_length )
{
 8013592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013596:	b095      	sub	sp, #84	; 0x54
 8013598:	af02      	add	r7, sp, #8
 801359a:	61f8      	str	r0, [r7, #28]
 801359c:	61b9      	str	r1, [r7, #24]
 801359e:	617a      	str	r2, [r7, #20]
 80135a0:	613b      	str	r3, [r7, #16]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80135a2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80135a6:	63bb      	str	r3, [r7, #56]	; 0x38
    const unsigned char *p = input;
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	647b      	str	r3, [r7, #68]	; 0x44
    unsigned char *out_p = output;
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	643b      	str	r3, [r7, #64]	; 0x40
    size_t offset;
    unsigned char ectr[16];

    if( output_size < input_length )
 80135b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d202      	bcs.n	80135be <mbedtls_gcm_update+0x2c>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80135b8:	f06f 0313 	mvn.w	r3, #19
 80135bc:	e10a      	b.n	80137d4 <mbedtls_gcm_update+0x242>
    GCM_VALIDATE_RET( output_length != NULL );
    *output_length = input_length;
 80135be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135c0:	697a      	ldr	r2, [r7, #20]
 80135c2:	601a      	str	r2, [r3, #0]

    /* Exit early if input_length==0 so that we don't do any pointer arithmetic
     * on a potentially null pointer.
     * Returning early also means that the last partial block of AD remains
     * untouched for mbedtls_gcm_finish */
    if( input_length == 0 )
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d101      	bne.n	80135ce <mbedtls_gcm_update+0x3c>
        return( 0 );
 80135ca:	2300      	movs	r3, #0
 80135cc:	e102      	b.n	80137d4 <mbedtls_gcm_update+0x242>

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( input != NULL );
    GCM_VALIDATE_RET( output != NULL );

    if( output > input && (size_t) ( output - input ) < input_length )
 80135ce:	693a      	ldr	r2, [r7, #16]
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d909      	bls.n	80135ea <mbedtls_gcm_update+0x58>
 80135d6:	693a      	ldr	r2, [r7, #16]
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	461a      	mov	r2, r3
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	4293      	cmp	r3, r2
 80135e2:	d902      	bls.n	80135ea <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80135e4:	f06f 0313 	mvn.w	r3, #19
 80135e8:	e0f4      	b.n	80137d4 <mbedtls_gcm_update+0x242>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + input_length < ctx->len ||
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	461a      	mov	r2, r3
 80135f4:	f04f 0300 	mov.w	r3, #0
 80135f8:	1886      	adds	r6, r0, r2
 80135fa:	60be      	str	r6, [r7, #8]
 80135fc:	eb41 0303 	adc.w	r3, r1, r3
 8013600:	60fb      	str	r3, [r7, #12]
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8013608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801360c:	4299      	cmp	r1, r3
 801360e:	bf08      	it	eq
 8013610:	4290      	cmpeq	r0, r2
 8013612:	d315      	bcc.n	8013640 <mbedtls_gcm_update+0xae>
        (uint64_t) ctx->len + input_length > 0xFFFFFFFE0ull )
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	461a      	mov	r2, r3
 801361e:	f04f 0300 	mov.w	r3, #0
 8013622:	1886      	adds	r6, r0, r2
 8013624:	603e      	str	r6, [r7, #0]
 8013626:	eb41 0303 	adc.w	r3, r1, r3
 801362a:	607b      	str	r3, [r7, #4]
    if( ctx->len + input_length < ctx->len ||
 801362c:	f06f 021f 	mvn.w	r2, #31
 8013630:	f04f 030f 	mov.w	r3, #15
 8013634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013638:	428b      	cmp	r3, r1
 801363a:	bf08      	it	eq
 801363c:	4282      	cmpeq	r2, r0
 801363e:	d202      	bcs.n	8013646 <mbedtls_gcm_update+0xb4>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8013640:	f06f 0313 	mvn.w	r3, #19
 8013644:	e0c6      	b.n	80137d4 <mbedtls_gcm_update+0x242>
    }

    if( ctx->len == 0 && ctx->add_len % 16 != 0 )
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 801364c:	4313      	orrs	r3, r2
 801364e:	d117      	bne.n	8013680 <mbedtls_gcm_update+0xee>
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8013656:	f04f 000f 	mov.w	r0, #15
 801365a:	f04f 0100 	mov.w	r1, #0
 801365e:	ea02 0a00 	and.w	sl, r2, r0
 8013662:	ea03 0b01 	and.w	fp, r3, r1
 8013666:	ea5a 030b 	orrs.w	r3, sl, fp
 801366a:	d009      	beq.n	8013680 <mbedtls_gcm_update+0xee>
    {
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8013678:	461a      	mov	r2, r3
 801367a:	69f8      	ldr	r0, [r7, #28]
 801367c:	f7ff fc34 	bl	8012ee8 <gcm_mult>
    }

    offset = ctx->len % 16;
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	; 0x140
 8013686:	4613      	mov	r3, r2
 8013688:	f003 030f 	and.w	r3, r3, #15
 801368c:	637b      	str	r3, [r7, #52]	; 0x34
    if( offset != 0 )
 801368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013690:	2b00      	cmp	r3, #0
 8013692:	d043      	beq.n	801371c <mbedtls_gcm_update+0x18a>
    {
        size_t use_len = 16 - offset;
 8013694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013696:	f1c3 0310 	rsb	r3, r3, #16
 801369a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if( use_len > input_length )
 801369c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d901      	bls.n	80136a8 <mbedtls_gcm_update+0x116>
            use_len = input_length;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	63fb      	str	r3, [r7, #60]	; 0x3c

        if( ( ret = gcm_mask( ctx, ectr, offset, use_len, p, out_p ) ) != 0 )
 80136a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80136ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136ae:	9301      	str	r3, [sp, #4]
 80136b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136b8:	69f8      	ldr	r0, [r7, #28]
 80136ba:	f7ff fef6 	bl	80134aa <gcm_mask>
 80136be:	63b8      	str	r0, [r7, #56]	; 0x38
 80136c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <mbedtls_gcm_update+0x138>
            return( ret );
 80136c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c8:	e084      	b.n	80137d4 <mbedtls_gcm_update+0x242>

        if( offset + use_len == 16 )
 80136ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ce:	4413      	add	r3, r2
 80136d0:	2b10      	cmp	r3, #16
 80136d2:	d109      	bne.n	80136e8 <mbedtls_gcm_update+0x156>
            gcm_mult( ctx, ctx->buf, ctx->buf );
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80136e0:	461a      	mov	r2, r3
 80136e2:	69f8      	ldr	r0, [r7, #28]
 80136e4:	f7ff fc00 	bl	8012ee8 <gcm_mult>

        ctx->len += use_len;
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80136ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136f0:	461a      	mov	r2, r3
 80136f2:	f04f 0300 	mov.w	r3, #0
 80136f6:	eb10 0802 	adds.w	r8, r0, r2
 80136fa:	eb41 0903 	adc.w	r9, r1, r3
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	e9c3 8950 	strd	r8, r9, [r3, #320]	; 0x140
        input_length -= use_len;
 8013704:	697a      	ldr	r2, [r7, #20]
 8013706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	617b      	str	r3, [r7, #20]
        p += use_len;
 801370c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013710:	4413      	add	r3, r2
 8013712:	647b      	str	r3, [r7, #68]	; 0x44
        out_p += use_len;
 8013714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013718:	4413      	add	r3, r2
 801371a:	643b      	str	r3, [r7, #64]	; 0x40
    }

    ctx->len += input_length;
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	461a      	mov	r2, r3
 8013726:	f04f 0300 	mov.w	r3, #0
 801372a:	1884      	adds	r4, r0, r2
 801372c:	eb41 0503 	adc.w	r5, r1, r3
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	e9c3 4550 	strd	r4, r5, [r3, #320]	; 0x140

    while( input_length >= 16 )
 8013736:	e029      	b.n	801378c <mbedtls_gcm_update+0x1fa>
    {
        gcm_incr( ctx->y );
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801373e:	4618      	mov	r0, r3
 8013740:	f7ff fe93 	bl	801346a <gcm_incr>
        if( ( ret = gcm_mask( ctx, ectr, 0, 16, p, out_p ) ) != 0 )
 8013744:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8013748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	2310      	movs	r3, #16
 8013752:	2200      	movs	r2, #0
 8013754:	69f8      	ldr	r0, [r7, #28]
 8013756:	f7ff fea8 	bl	80134aa <gcm_mask>
 801375a:	63b8      	str	r0, [r7, #56]	; 0x38
 801375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375e:	2b00      	cmp	r3, #0
 8013760:	d001      	beq.n	8013766 <mbedtls_gcm_update+0x1d4>
            return( ret );
 8013762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013764:	e036      	b.n	80137d4 <mbedtls_gcm_update+0x242>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8013772:	461a      	mov	r2, r3
 8013774:	69f8      	ldr	r0, [r7, #28]
 8013776:	f7ff fbb7 	bl	8012ee8 <gcm_mult>

        input_length -= 16;
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	3b10      	subs	r3, #16
 801377e:	617b      	str	r3, [r7, #20]
        p += 16;
 8013780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013782:	3310      	adds	r3, #16
 8013784:	647b      	str	r3, [r7, #68]	; 0x44
        out_p += 16;
 8013786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013788:	3310      	adds	r3, #16
 801378a:	643b      	str	r3, [r7, #64]	; 0x40
    while( input_length >= 16 )
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	2b0f      	cmp	r3, #15
 8013790:	d8d2      	bhi.n	8013738 <mbedtls_gcm_update+0x1a6>
    }

    if( input_length > 0 )
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d016      	beq.n	80137c6 <mbedtls_gcm_update+0x234>
    {
        gcm_incr( ctx->y );
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801379e:	4618      	mov	r0, r3
 80137a0:	f7ff fe63 	bl	801346a <gcm_incr>
        if( ( ret = gcm_mask( ctx, ectr, 0, input_length, p, out_p ) ) != 0 )
 80137a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80137a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137aa:	9301      	str	r3, [sp, #4]
 80137ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	2200      	movs	r2, #0
 80137b4:	69f8      	ldr	r0, [r7, #28]
 80137b6:	f7ff fe78 	bl	80134aa <gcm_mask>
 80137ba:	63b8      	str	r0, [r7, #56]	; 0x38
 80137bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <mbedtls_gcm_update+0x234>
            return( ret );
 80137c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c4:	e006      	b.n	80137d4 <mbedtls_gcm_update+0x242>
    }

    mbedtls_platform_zeroize( ectr, sizeof( ectr ) );
 80137c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137ca:	2110      	movs	r1, #16
 80137cc:	4618      	mov	r0, r3
 80137ce:	f000 f81b 	bl	8013808 <mbedtls_platform_zeroize>
    return( 0 );
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	374c      	adds	r7, #76	; 0x4c
 80137d8:	46bd      	mov	sp, r7
 80137da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137de <mbedtls_gcm_free>:

    return( 0 );
}

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b082      	sub	sp, #8
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d009      	beq.n	8013800 <mbedtls_gcm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7f7 fc76 	bl	800b0e0 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 80137f4:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 f805 	bl	8013808 <mbedtls_platform_zeroize>
 80137fe:	e000      	b.n	8013802 <mbedtls_gcm_free+0x24>
        return;
 8013800:	bf00      	nop
}
 8013802:	3708      	adds	r7, #8
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d005      	beq.n	8013824 <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 8013818:	4b04      	ldr	r3, [pc, #16]	; (801382c <mbedtls_platform_zeroize+0x24>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	683a      	ldr	r2, [r7, #0]
 801381e:	2100      	movs	r1, #0
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	4798      	blx	r3
}
 8013824:	bf00      	nop
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	20000028 	.word	0x20000028

08013830 <mul64>:

    return( lo + ( me << 16 ) + ( (uint64_t) hi << 32 ) );
}
#else
static inline uint64_t mul64( uint32_t a, uint32_t b )
{
 8013830:	b4b0      	push	{r4, r5, r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
    return( (uint64_t) a * b );
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	f04f 0100 	mov.w	r1, #0
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	461a      	mov	r2, r3
 8013846:	f04f 0300 	mov.w	r3, #0
 801384a:	fb02 f501 	mul.w	r5, r2, r1
 801384e:	fb00 f403 	mul.w	r4, r0, r3
 8013852:	442c      	add	r4, r5
 8013854:	fba0 2302 	umull	r2, r3, r0, r2
 8013858:	18e1      	adds	r1, r4, r3
 801385a:	460b      	mov	r3, r1
}
 801385c:	4610      	mov	r0, r2
 801385e:	4619      	mov	r1, r3
 8013860:	370c      	adds	r7, #12
 8013862:	46bd      	mov	sp, r7
 8013864:	bcb0      	pop	{r4, r5, r7}
 8013866:	4770      	bx	lr

08013868 <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 8013868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801386c:	b0d6      	sub	sp, #344	; 0x158
 801386e:	af00      	add	r7, sp, #0
 8013870:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013874:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8013878:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 801387c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 8013880:	2300      	movs	r3, #0
 8013882:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    size_t i;

    r0 = ctx->r[0];
 8013886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    r1 = ctx->r[1];
 8013890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    r2 = ctx->r[2];
 801389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    r3 = ctx->r[3];
 80138a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138a8:	68db      	ldr	r3, [r3, #12]
 80138aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    rs1 = r1 + ( r1 >> 2U );
 80138ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80138b2:	089a      	lsrs	r2, r3, #2
 80138b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80138b8:	4413      	add	r3, r2
 80138ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    rs2 = r2 + ( r2 >> 2U );
 80138be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138c2:	089a      	lsrs	r2, r3, #2
 80138c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138c8:	4413      	add	r3, r2
 80138ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    rs3 = r3 + ( r3 >> 2U );
 80138ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138d2:	089a      	lsrs	r2, r3, #2
 80138d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138d8:	4413      	add	r3, r2
 80138da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    acc0 = ctx->acc[0];
 80138de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138e2:	6a1b      	ldr	r3, [r3, #32]
 80138e4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    acc1 = ctx->acc[1];
 80138e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    acc2 = ctx->acc[2];
 80138f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80138f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    acc3 = ctx->acc[3];
 80138fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013902:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    acc4 = ctx->acc[4];
 8013906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801390c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 8013910:	2300      	movs	r3, #0
 8013912:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8013916:	e36f      	b.n	8013ff8 <poly1305_process+0x790>
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = MBEDTLS_GET_UINT32_LE( input, offset + 0  );
 8013918:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801391c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013920:	4413      	add	r3, r2
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	4619      	mov	r1, r3
 8013926:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013930:	4413      	add	r3, r2
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	021b      	lsls	r3, r3, #8
 8013936:	4319      	orrs	r1, r3
 8013938:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801393c:	1c9a      	adds	r2, r3, #2
 801393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013942:	4413      	add	r3, r2
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	041b      	lsls	r3, r3, #16
 8013948:	4319      	orrs	r1, r3
 801394a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801394e:	1cda      	adds	r2, r3, #3
 8013950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013954:	4413      	add	r3, r2
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	061b      	lsls	r3, r3, #24
 801395a:	430b      	orrs	r3, r1
 801395c:	461a      	mov	r2, r3
 801395e:	f04f 0300 	mov.w	r3, #0
 8013962:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        d1   = MBEDTLS_GET_UINT32_LE( input, offset + 4  );
 8013966:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801396a:	1d1a      	adds	r2, r3, #4
 801396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013970:	4413      	add	r3, r2
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	4619      	mov	r1, r3
 8013976:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801397a:	1d5a      	adds	r2, r3, #5
 801397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013980:	4413      	add	r3, r2
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	021b      	lsls	r3, r3, #8
 8013986:	4319      	orrs	r1, r3
 8013988:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801398c:	1d9a      	adds	r2, r3, #6
 801398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013992:	4413      	add	r3, r2
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	041b      	lsls	r3, r3, #16
 8013998:	4319      	orrs	r1, r3
 801399a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801399e:	1dda      	adds	r2, r3, #7
 80139a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139a4:	4413      	add	r3, r2
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	061b      	lsls	r3, r3, #24
 80139aa:	430b      	orrs	r3, r1
 80139ac:	461a      	mov	r2, r3
 80139ae:	f04f 0300 	mov.w	r3, #0
 80139b2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        d2   = MBEDTLS_GET_UINT32_LE( input, offset + 8  );
 80139b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139ba:	f103 0208 	add.w	r2, r3, #8
 80139be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139c2:	4413      	add	r3, r2
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	4619      	mov	r1, r3
 80139c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139cc:	f103 0209 	add.w	r2, r3, #9
 80139d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139d4:	4413      	add	r3, r2
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	021b      	lsls	r3, r3, #8
 80139da:	4319      	orrs	r1, r3
 80139dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139e0:	f103 020a 	add.w	r2, r3, #10
 80139e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139e8:	4413      	add	r3, r2
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	041b      	lsls	r3, r3, #16
 80139ee:	4319      	orrs	r1, r3
 80139f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139f4:	f103 020b 	add.w	r2, r3, #11
 80139f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80139fc:	4413      	add	r3, r2
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	061b      	lsls	r3, r3, #24
 8013a02:	430b      	orrs	r3, r1
 8013a04:	461a      	mov	r2, r3
 8013a06:	f04f 0300 	mov.w	r3, #0
 8013a0a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
        d3   = MBEDTLS_GET_UINT32_LE( input, offset + 12 );
 8013a0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a12:	f103 020c 	add.w	r2, r3, #12
 8013a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a1a:	4413      	add	r3, r2
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	4619      	mov	r1, r3
 8013a20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a24:	f103 020d 	add.w	r2, r3, #13
 8013a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a2c:	4413      	add	r3, r2
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	021b      	lsls	r3, r3, #8
 8013a32:	4319      	orrs	r1, r3
 8013a34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a38:	f103 020e 	add.w	r2, r3, #14
 8013a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a40:	4413      	add	r3, r2
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	041b      	lsls	r3, r3, #16
 8013a46:	4319      	orrs	r1, r3
 8013a48:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013a4c:	f103 020f 	add.w	r2, r3, #15
 8013a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013a54:	4413      	add	r3, r2
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	061b      	lsls	r3, r3, #24
 8013a5a:	430b      	orrs	r3, r1
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	f04f 0300 	mov.w	r3, #0
 8013a62:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 8013a66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f04f 0100 	mov.w	r1, #0
 8013a70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013a74:	1814      	adds	r4, r2, r0
 8013a76:	67bc      	str	r4, [r7, #120]	; 0x78
 8013a78:	414b      	adcs	r3, r1
 8013a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013a7c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8013a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 8013a84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8013a88:	461c      	mov	r4, r3
 8013a8a:	f04f 0500 	mov.w	r5, #0
 8013a8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013a92:	f04f 0000 	mov.w	r0, #0
 8013a96:	f04f 0100 	mov.w	r1, #0
 8013a9a:	0018      	movs	r0, r3
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	1823      	adds	r3, r4, r0
 8013aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013aa4:	eb45 0301 	adc.w	r3, r5, r1
 8013aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013aac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8013ab0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	1851      	adds	r1, r2, r1
 8013ab8:	6739      	str	r1, [r7, #112]	; 0x70
 8013aba:	4629      	mov	r1, r5
 8013abc:	414b      	adcs	r3, r1
 8013abe:	677b      	str	r3, [r7, #116]	; 0x74
 8013ac0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8013ac4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 8013ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013acc:	461c      	mov	r4, r3
 8013ace:	f04f 0500 	mov.w	r5, #0
 8013ad2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8013ad6:	f04f 0000 	mov.w	r0, #0
 8013ada:	f04f 0100 	mov.w	r1, #0
 8013ade:	0018      	movs	r0, r3
 8013ae0:	2100      	movs	r1, #0
 8013ae2:	1823      	adds	r3, r4, r0
 8013ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013ae8:	eb45 0301 	adc.w	r3, r5, r1
 8013aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013af0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8013af4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8013af8:	4621      	mov	r1, r4
 8013afa:	1851      	adds	r1, r2, r1
 8013afc:	66b9      	str	r1, [r7, #104]	; 0x68
 8013afe:	4629      	mov	r1, r5
 8013b00:	414b      	adcs	r3, r1
 8013b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013b04:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8013b08:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 8013b0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b10:	461c      	mov	r4, r3
 8013b12:	f04f 0500 	mov.w	r5, #0
 8013b16:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8013b1a:	f04f 0000 	mov.w	r0, #0
 8013b1e:	f04f 0100 	mov.w	r1, #0
 8013b22:	0018      	movs	r0, r3
 8013b24:	2100      	movs	r1, #0
 8013b26:	1823      	adds	r3, r4, r0
 8013b28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013b2c:	eb45 0301 	adc.w	r3, r5, r1
 8013b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013b34:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8013b38:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8013b3c:	4621      	mov	r1, r4
 8013b3e:	1851      	adds	r1, r2, r1
 8013b40:	6639      	str	r1, [r7, #96]	; 0x60
 8013b42:	4629      	mov	r1, r5
 8013b44:	414b      	adcs	r3, r1
 8013b46:	667b      	str	r3, [r7, #100]	; 0x64
 8013b48:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8013b4c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
        acc0 = (uint32_t) d0;
 8013b50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013b54:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        acc1 = (uint32_t) d1;
 8013b58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013b5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        acc2 = (uint32_t) d2;
 8013b60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013b64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        acc3 = (uint32_t) d3;
 8013b68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013b6c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 8013b70:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8013b74:	f04f 0000 	mov.w	r0, #0
 8013b78:	f04f 0100 	mov.w	r1, #0
 8013b7c:	0018      	movs	r0, r3
 8013b7e:	2100      	movs	r1, #0
 8013b80:	4602      	mov	r2, r0
 8013b82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013b86:	441a      	add	r2, r3
 8013b88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 8013b92:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8013b96:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8013b9a:	f7ff fe49 	bl	8013830 <mul64>
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	460d      	mov	r5, r1
             mul64( acc1, rs3 ) +
 8013ba2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013ba6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8013baa:	f7ff fe41 	bl	8013830 <mul64>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8013bb2:	18a1      	adds	r1, r4, r2
 8013bb4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8013bb8:	eb45 0303 	adc.w	r3, r5, r3
 8013bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
             mul64( acc2, rs2 ) +
 8013bc0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013bc4:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013bc8:	f7ff fe32 	bl	8013830 <mul64>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	460b      	mov	r3, r1
             mul64( acc1, rs3 ) +
 8013bd0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	1889      	adds	r1, r1, r2
 8013bd8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8013bdc:	4629      	mov	r1, r5
 8013bde:	eb41 0303 	adc.w	r3, r1, r3
 8013be2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
             mul64( acc3, rs1 );
 8013be6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013bea:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013bee:	f7ff fe1f 	bl	8013830 <mul64>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8013bf6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8013bfa:	4621      	mov	r1, r4
 8013bfc:	1889      	adds	r1, r1, r2
 8013bfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8013c00:	4629      	mov	r1, r5
 8013c02:	eb41 0303 	adc.w	r3, r1, r3
 8013c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c08:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8013c0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        d1 = mul64( acc0, r1  ) +
 8013c10:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013c14:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8013c18:	f7ff fe0a 	bl	8013830 <mul64>
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	460d      	mov	r5, r1
             mul64( acc1, r0  ) +
 8013c20:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8013c24:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8013c28:	f7ff fe02 	bl	8013830 <mul64>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8013c30:	18a1      	adds	r1, r4, r2
 8013c32:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8013c36:	eb45 0303 	adc.w	r3, r5, r3
 8013c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
             mul64( acc2, rs3 ) +
 8013c3e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013c42:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013c46:	f7ff fdf3 	bl	8013830 <mul64>
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	460b      	mov	r3, r1
             mul64( acc1, r0  ) +
 8013c4e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013c52:	4621      	mov	r1, r4
 8013c54:	1889      	adds	r1, r1, r2
 8013c56:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	eb41 0303 	adc.w	r3, r1, r3
 8013c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
             mul64( acc3, rs2 ) +
 8013c64:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013c68:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013c6c:	f7ff fde0 	bl	8013830 <mul64>
 8013c70:	4602      	mov	r2, r0
 8013c72:	460b      	mov	r3, r1
             mul64( acc2, rs3 ) +
 8013c74:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8013c78:	4621      	mov	r1, r4
 8013c7a:	1889      	adds	r1, r1, r2
 8013c7c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8013c80:	4629      	mov	r1, r5
 8013c82:	eb41 0303 	adc.w	r3, r1, r3
 8013c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
             mul64( acc4, rs1 );
 8013c8a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013c8e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8013c92:	f7ff fdcd 	bl	8013830 <mul64>
 8013c96:	4602      	mov	r2, r0
 8013c98:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8013c9a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013c9e:	4621      	mov	r1, r4
 8013ca0:	1889      	adds	r1, r1, r2
 8013ca2:	6539      	str	r1, [r7, #80]	; 0x50
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	eb41 0303 	adc.w	r3, r1, r3
 8013caa:	657b      	str	r3, [r7, #84]	; 0x54
 8013cac:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8013cb0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
        d2 = mul64( acc0, r2  ) +
 8013cb4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8013cb8:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8013cbc:	f7ff fdb8 	bl	8013830 <mul64>
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	460d      	mov	r5, r1
             mul64( acc1, r1  ) +
 8013cc4:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013cc8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8013ccc:	f7ff fdb0 	bl	8013830 <mul64>
 8013cd0:	4602      	mov	r2, r0
 8013cd2:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 8013cd4:	18a1      	adds	r1, r4, r2
 8013cd6:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8013cda:	eb45 0303 	adc.w	r3, r5, r3
 8013cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
             mul64( acc2, r0  ) +
 8013ce2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8013ce6:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013cea:	f7ff fda1 	bl	8013830 <mul64>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	460b      	mov	r3, r1
             mul64( acc1, r1  ) +
 8013cf2:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8013cf6:	4621      	mov	r1, r4
 8013cf8:	1889      	adds	r1, r1, r2
 8013cfa:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8013cfe:	4629      	mov	r1, r5
 8013d00:	eb41 0303 	adc.w	r3, r1, r3
 8013d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
             mul64( acc3, rs3 ) +
 8013d08:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013d0c:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013d10:	f7ff fd8e 	bl	8013830 <mul64>
 8013d14:	4602      	mov	r2, r0
 8013d16:	460b      	mov	r3, r1
             mul64( acc2, r0  ) +
 8013d18:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8013d1c:	4621      	mov	r1, r4
 8013d1e:	1889      	adds	r1, r1, r2
 8013d20:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013d24:	4629      	mov	r1, r5
 8013d26:	eb41 0303 	adc.w	r3, r1, r3
 8013d2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
             mul64( acc4, rs2 );
 8013d2e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013d32:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8013d36:	f7ff fd7b 	bl	8013830 <mul64>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 8013d3e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8013d42:	4621      	mov	r1, r4
 8013d44:	1889      	adds	r1, r1, r2
 8013d46:	64b9      	str	r1, [r7, #72]	; 0x48
 8013d48:	4629      	mov	r1, r5
 8013d4a:	eb41 0303 	adc.w	r3, r1, r3
 8013d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d50:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013d54:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
        d3 = mul64( acc0, r3  ) +
 8013d58:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8013d5c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8013d60:	f7ff fd66 	bl	8013830 <mul64>
 8013d64:	4604      	mov	r4, r0
 8013d66:	460d      	mov	r5, r1
             mul64( acc1, r2  ) +
 8013d68:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8013d6c:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8013d70:	f7ff fd5e 	bl	8013830 <mul64>
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 8013d78:	18a1      	adds	r1, r4, r2
 8013d7a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8013d7e:	eb45 0303 	adc.w	r3, r5, r3
 8013d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
             mul64( acc2, r1  ) +
 8013d86:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013d8a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013d8e:	f7ff fd4f 	bl	8013830 <mul64>
 8013d92:	4602      	mov	r2, r0
 8013d94:	460b      	mov	r3, r1
             mul64( acc1, r2  ) +
 8013d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013d9a:	4621      	mov	r1, r4
 8013d9c:	1889      	adds	r1, r1, r2
 8013d9e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8013da2:	4629      	mov	r1, r5
 8013da4:	eb41 0303 	adc.w	r3, r1, r3
 8013da8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
             mul64( acc3, r0  ) +
 8013dac:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8013db0:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013db4:	f7ff fd3c 	bl	8013830 <mul64>
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
             mul64( acc2, r1  ) +
 8013dbc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	1889      	adds	r1, r1, r2
 8013dc4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8013dc8:	4629      	mov	r1, r5
 8013dca:	eb41 0303 	adc.w	r3, r1, r3
 8013dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
             mul64( acc4, rs3 );
 8013dd2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013dd6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8013dda:	f7ff fd29 	bl	8013830 <mul64>
 8013dde:	4602      	mov	r2, r0
 8013de0:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 8013de2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013de6:	4621      	mov	r1, r4
 8013de8:	1889      	adds	r1, r1, r2
 8013dea:	6439      	str	r1, [r7, #64]	; 0x40
 8013dec:	4629      	mov	r1, r5
 8013dee:	eb41 0303 	adc.w	r3, r1, r3
 8013df2:	647b      	str	r3, [r7, #68]	; 0x44
 8013df4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8013df8:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
        acc4 *= r0;
 8013dfc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8013e00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013e04:	fb03 f302 	mul.w	r3, r3, r2
 8013e08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 8013e0c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013e10:	f04f 0000 	mov.w	r0, #0
 8013e14:	f04f 0100 	mov.w	r1, #0
 8013e18:	0018      	movs	r0, r3
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8013e20:	1814      	adds	r4, r2, r0
 8013e22:	63bc      	str	r4, [r7, #56]	; 0x38
 8013e24:	414b      	adcs	r3, r1
 8013e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e28:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8013e2c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
        d2 += ( d1 >> 32 );
 8013e30:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8013e34:	f04f 0000 	mov.w	r0, #0
 8013e38:	f04f 0100 	mov.w	r1, #0
 8013e3c:	0018      	movs	r0, r3
 8013e3e:	2100      	movs	r1, #0
 8013e40:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8013e44:	1814      	adds	r4, r2, r0
 8013e46:	633c      	str	r4, [r7, #48]	; 0x30
 8013e48:	414b      	adcs	r3, r1
 8013e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8013e4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013e50:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
        d3 += ( d2 >> 32 );
 8013e54:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8013e58:	f04f 0000 	mov.w	r0, #0
 8013e5c:	f04f 0100 	mov.w	r1, #0
 8013e60:	0018      	movs	r0, r3
 8013e62:	2100      	movs	r1, #0
 8013e64:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8013e68:	1814      	adds	r4, r2, r0
 8013e6a:	62bc      	str	r4, [r7, #40]	; 0x28
 8013e6c:	414b      	adcs	r3, r1
 8013e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013e74:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
        acc0 = (uint32_t) d0;
 8013e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013e7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        acc1 = (uint32_t) d1;
 8013e80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013e84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        acc2 = (uint32_t) d2;
 8013e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013e8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        acc3 = (uint32_t) d3;
 8013e90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013e94:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 8013e98:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8013e9c:	f04f 0000 	mov.w	r0, #0
 8013ea0:	f04f 0100 	mov.w	r1, #0
 8013ea4:	0018      	movs	r0, r3
 8013ea6:	2100      	movs	r1, #0
 8013ea8:	4602      	mov	r2, r0
 8013eaa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013eae:	4413      	add	r3, r2
 8013eb0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 8013eb4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f04f 0100 	mov.w	r1, #0
 8013ebe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013ec2:	089b      	lsrs	r3, r3, #2
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	f04f 0300 	mov.w	r3, #0
 8013eca:	eb10 0a02 	adds.w	sl, r0, r2
 8013ece:	eb41 0b03 	adc.w	fp, r1, r3
 8013ed2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f04f 0100 	mov.w	r1, #0
 8013edc:	f06f 0203 	mvn.w	r2, #3
 8013ee0:	f04f 0300 	mov.w	r3, #0
 8013ee4:	ea00 0802 	and.w	r8, r0, r2
 8013ee8:	ea01 0903 	and.w	r9, r1, r3
 8013eec:	eb1a 0308 	adds.w	r3, sl, r8
 8013ef0:	623b      	str	r3, [r7, #32]
 8013ef2:	eb4b 0309 	adc.w	r3, fp, r9
 8013ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8013ef8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013efc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        acc4 &= 3U;
 8013f00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013f04:	f003 0303 	and.w	r3, r3, #3
 8013f08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        acc0 = (uint32_t) d0;
 8013f0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013f10:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 8013f14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8013f18:	461c      	mov	r4, r3
 8013f1a:	f04f 0500 	mov.w	r5, #0
 8013f1e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013f22:	f04f 0000 	mov.w	r0, #0
 8013f26:	f04f 0100 	mov.w	r1, #0
 8013f2a:	0018      	movs	r0, r3
 8013f2c:	2100      	movs	r1, #0
 8013f2e:	1823      	adds	r3, r4, r0
 8013f30:	61bb      	str	r3, [r7, #24]
 8013f32:	eb45 0301 	adc.w	r3, r5, r1
 8013f36:	61fb      	str	r3, [r7, #28]
 8013f38:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013f3c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        acc1 = (uint32_t) d0;
 8013f40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013f44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 8013f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013f4c:	461c      	mov	r4, r3
 8013f4e:	f04f 0500 	mov.w	r5, #0
 8013f52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013f56:	f04f 0000 	mov.w	r0, #0
 8013f5a:	f04f 0100 	mov.w	r1, #0
 8013f5e:	0018      	movs	r0, r3
 8013f60:	2100      	movs	r1, #0
 8013f62:	1823      	adds	r3, r4, r0
 8013f64:	613b      	str	r3, [r7, #16]
 8013f66:	eb45 0301 	adc.w	r3, r5, r1
 8013f6a:	617b      	str	r3, [r7, #20]
 8013f6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013f70:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        acc2 = (uint32_t) d0;
 8013f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013f78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 8013f7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013f80:	461c      	mov	r4, r3
 8013f82:	f04f 0500 	mov.w	r5, #0
 8013f86:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013f8a:	f04f 0000 	mov.w	r0, #0
 8013f8e:	f04f 0100 	mov.w	r1, #0
 8013f92:	0018      	movs	r0, r3
 8013f94:	2100      	movs	r1, #0
 8013f96:	1823      	adds	r3, r4, r0
 8013f98:	60bb      	str	r3, [r7, #8]
 8013f9a:	eb45 0301 	adc.w	r3, r5, r1
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013fa4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        acc3 = (uint32_t) d0;
 8013fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013fac:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
 8013fb0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013fb4:	461c      	mov	r4, r3
 8013fb6:	f04f 0500 	mov.w	r5, #0
 8013fba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8013fbe:	f04f 0000 	mov.w	r0, #0
 8013fc2:	f04f 0100 	mov.w	r1, #0
 8013fc6:	0018      	movs	r0, r3
 8013fc8:	2100      	movs	r1, #0
 8013fca:	1823      	adds	r3, r4, r0
 8013fcc:	603b      	str	r3, [r7, #0]
 8013fce:	eb45 0301 	adc.w	r3, r5, r1
 8013fd2:	607b      	str	r3, [r7, #4]
 8013fd4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013fd8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        acc4 = (uint32_t) d0;
 8013fdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013fe0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 8013fe4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013fe8:	3310      	adds	r3, #16
 8013fea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    for( i = 0U; i < nblocks; i++ )
 8013fee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8013ff8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8013ffc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014000:	429a      	cmp	r2, r3
 8014002:	f4ff ac89 	bcc.w	8013918 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 8014006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801400a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801400e:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 8014010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014014:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8014018:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 801401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801401e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8014022:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 8014024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014028:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801402c:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 801402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014032:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8014036:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014038:	bf00      	nop
 801403a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801403e:	46bd      	mov	sp, r7
 8014040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014044 <mbedtls_poly1305_init>:
    MBEDTLS_PUT_UINT32_LE( acc2, mac,  8 );
    MBEDTLS_PUT_UINT32_LE( acc3, mac, 12 );
}

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 801404c:	2148      	movs	r1, #72	; 0x48
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f7ff fbda 	bl	8013808 <mbedtls_platform_zeroize>
}
 8014054:	bf00      	nop
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d004      	beq.n	8014074 <mbedtls_poly1305_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 801406a:	2148      	movs	r1, #72	; 0x48
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f7ff fbcb 	bl	8013808 <mbedtls_platform_zeroize>
 8014072:	e000      	b.n	8014076 <mbedtls_poly1305_free+0x1a>
        return;
 8014074:	bf00      	nop
}
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update( mbedtls_poly1305_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b088      	sub	sp, #32
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 8014088:	2300      	movs	r3, #0
 801408a:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d03e      	beq.n	8014114 <mbedtls_poly1305_update+0x98>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801409a:	2b00      	cmp	r3, #0
 801409c:	d03a      	beq.n	8014114 <mbedtls_poly1305_update+0x98>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140a2:	f1c3 0310 	rsb	r3, r3, #16
 80140a6:	617b      	str	r3, [r7, #20]

        if( ilen < queue_free_len )
 80140a8:	687a      	ldr	r2, [r7, #4]
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d213      	bcs.n	80140d8 <mbedtls_poly1305_update+0x5c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140b4:	3330      	adds	r3, #48	; 0x30
 80140b6:	68fa      	ldr	r2, [r7, #12]
 80140b8:	4413      	add	r3, r2
 80140ba:	3304      	adds	r3, #4
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	68b9      	ldr	r1, [r7, #8]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f000 fa89 	bl	80145d8 <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	441a      	add	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 80140d2:	2300      	movs	r3, #0
 80140d4:	61bb      	str	r3, [r7, #24]
 80140d6:	e01d      	b.n	8014114 <mbedtls_poly1305_update+0x98>
        }
        else
        {
            /* Enough data to produce a complete block */
            memcpy( &ctx->queue[ctx->queue_len],
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140dc:	3330      	adds	r3, #48	; 0x30
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	4413      	add	r3, r2
 80140e2:	3304      	adds	r3, #4
 80140e4:	697a      	ldr	r2, [r7, #20]
 80140e6:	68b9      	ldr	r1, [r7, #8]
 80140e8:	4618      	mov	r0, r3
 80140ea:	f000 fa75 	bl	80145d8 <memcpy>
                    input,
                    queue_free_len );

            ctx->queue_len = 0U;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2200      	movs	r2, #0
 80140f2:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80140fa:	2301      	movs	r3, #1
 80140fc:	2101      	movs	r1, #1
 80140fe:	68f8      	ldr	r0, [r7, #12]
 8014100:	f7ff fbb2 	bl	8013868 <poly1305_process>

            offset    += queue_free_len;
 8014104:	69fa      	ldr	r2, [r7, #28]
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	4413      	add	r3, r2
 801410a:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 801410c:	69ba      	ldr	r2, [r7, #24]
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	1ad3      	subs	r3, r2, r3
 8014112:	61bb      	str	r3, [r7, #24]
        }
    }

    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	2b0f      	cmp	r3, #15
 8014118:	d913      	bls.n	8014142 <mbedtls_poly1305_update+0xc6>
    {
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 801411a:	69bb      	ldr	r3, [r7, #24]
 801411c:	091b      	lsrs	r3, r3, #4
 801411e:	613b      	str	r3, [r7, #16]

        poly1305_process( ctx, nblocks, &input[offset], 1U );
 8014120:	68ba      	ldr	r2, [r7, #8]
 8014122:	69fb      	ldr	r3, [r7, #28]
 8014124:	441a      	add	r2, r3
 8014126:	2301      	movs	r3, #1
 8014128:	6939      	ldr	r1, [r7, #16]
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f7ff fb9c 	bl	8013868 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	011b      	lsls	r3, r3, #4
 8014134:	69fa      	ldr	r2, [r7, #28]
 8014136:	4413      	add	r3, r2
 8014138:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	f003 030f 	and.w	r3, r3, #15
 8014140:	61bb      	str	r3, [r7, #24]
    }

    if( remaining > 0U )
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00c      	beq.n	8014162 <mbedtls_poly1305_update+0xe6>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	69ba      	ldr	r2, [r7, #24]
 801414c:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014154:	68ba      	ldr	r2, [r7, #8]
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	4413      	add	r3, r2
 801415a:	69ba      	ldr	r2, [r7, #24]
 801415c:	4619      	mov	r1, r3
 801415e:	f000 fa3b 	bl	80145d8 <memcpy>
    }

    return( 0 );
 8014162:	2300      	movs	r3, #0
}
 8014164:	4618      	mov	r0, r3
 8014166:	3720      	adds	r7, #32
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <calloc>:
 801416c:	4b02      	ldr	r3, [pc, #8]	; (8014178 <calloc+0xc>)
 801416e:	460a      	mov	r2, r1
 8014170:	4601      	mov	r1, r0
 8014172:	6818      	ldr	r0, [r3, #0]
 8014174:	f000 ba46 	b.w	8014604 <_calloc_r>
 8014178:	2000002c 	.word	0x2000002c

0801417c <__errno>:
 801417c:	4b01      	ldr	r3, [pc, #4]	; (8014184 <__errno+0x8>)
 801417e:	6818      	ldr	r0, [r3, #0]
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	2000002c 	.word	0x2000002c

08014188 <__sflush_r>:
 8014188:	898a      	ldrh	r2, [r1, #12]
 801418a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801418e:	4605      	mov	r5, r0
 8014190:	0710      	lsls	r0, r2, #28
 8014192:	460c      	mov	r4, r1
 8014194:	d458      	bmi.n	8014248 <__sflush_r+0xc0>
 8014196:	684b      	ldr	r3, [r1, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	dc05      	bgt.n	80141a8 <__sflush_r+0x20>
 801419c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801419e:	2b00      	cmp	r3, #0
 80141a0:	dc02      	bgt.n	80141a8 <__sflush_r+0x20>
 80141a2:	2000      	movs	r0, #0
 80141a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141aa:	2e00      	cmp	r6, #0
 80141ac:	d0f9      	beq.n	80141a2 <__sflush_r+0x1a>
 80141ae:	2300      	movs	r3, #0
 80141b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141b4:	682f      	ldr	r7, [r5, #0]
 80141b6:	602b      	str	r3, [r5, #0]
 80141b8:	d032      	beq.n	8014220 <__sflush_r+0x98>
 80141ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80141bc:	89a3      	ldrh	r3, [r4, #12]
 80141be:	075a      	lsls	r2, r3, #29
 80141c0:	d505      	bpl.n	80141ce <__sflush_r+0x46>
 80141c2:	6863      	ldr	r3, [r4, #4]
 80141c4:	1ac0      	subs	r0, r0, r3
 80141c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141c8:	b10b      	cbz	r3, 80141ce <__sflush_r+0x46>
 80141ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80141cc:	1ac0      	subs	r0, r0, r3
 80141ce:	2300      	movs	r3, #0
 80141d0:	4602      	mov	r2, r0
 80141d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141d4:	6a21      	ldr	r1, [r4, #32]
 80141d6:	4628      	mov	r0, r5
 80141d8:	47b0      	blx	r6
 80141da:	1c43      	adds	r3, r0, #1
 80141dc:	89a3      	ldrh	r3, [r4, #12]
 80141de:	d106      	bne.n	80141ee <__sflush_r+0x66>
 80141e0:	6829      	ldr	r1, [r5, #0]
 80141e2:	291d      	cmp	r1, #29
 80141e4:	d82c      	bhi.n	8014240 <__sflush_r+0xb8>
 80141e6:	4a2a      	ldr	r2, [pc, #168]	; (8014290 <__sflush_r+0x108>)
 80141e8:	40ca      	lsrs	r2, r1
 80141ea:	07d6      	lsls	r6, r2, #31
 80141ec:	d528      	bpl.n	8014240 <__sflush_r+0xb8>
 80141ee:	2200      	movs	r2, #0
 80141f0:	6062      	str	r2, [r4, #4]
 80141f2:	04d9      	lsls	r1, r3, #19
 80141f4:	6922      	ldr	r2, [r4, #16]
 80141f6:	6022      	str	r2, [r4, #0]
 80141f8:	d504      	bpl.n	8014204 <__sflush_r+0x7c>
 80141fa:	1c42      	adds	r2, r0, #1
 80141fc:	d101      	bne.n	8014202 <__sflush_r+0x7a>
 80141fe:	682b      	ldr	r3, [r5, #0]
 8014200:	b903      	cbnz	r3, 8014204 <__sflush_r+0x7c>
 8014202:	6560      	str	r0, [r4, #84]	; 0x54
 8014204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014206:	602f      	str	r7, [r5, #0]
 8014208:	2900      	cmp	r1, #0
 801420a:	d0ca      	beq.n	80141a2 <__sflush_r+0x1a>
 801420c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014210:	4299      	cmp	r1, r3
 8014212:	d002      	beq.n	801421a <__sflush_r+0x92>
 8014214:	4628      	mov	r0, r5
 8014216:	f000 fa05 	bl	8014624 <_free_r>
 801421a:	2000      	movs	r0, #0
 801421c:	6360      	str	r0, [r4, #52]	; 0x34
 801421e:	e7c1      	b.n	80141a4 <__sflush_r+0x1c>
 8014220:	6a21      	ldr	r1, [r4, #32]
 8014222:	2301      	movs	r3, #1
 8014224:	4628      	mov	r0, r5
 8014226:	47b0      	blx	r6
 8014228:	1c41      	adds	r1, r0, #1
 801422a:	d1c7      	bne.n	80141bc <__sflush_r+0x34>
 801422c:	682b      	ldr	r3, [r5, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d0c4      	beq.n	80141bc <__sflush_r+0x34>
 8014232:	2b1d      	cmp	r3, #29
 8014234:	d001      	beq.n	801423a <__sflush_r+0xb2>
 8014236:	2b16      	cmp	r3, #22
 8014238:	d101      	bne.n	801423e <__sflush_r+0xb6>
 801423a:	602f      	str	r7, [r5, #0]
 801423c:	e7b1      	b.n	80141a2 <__sflush_r+0x1a>
 801423e:	89a3      	ldrh	r3, [r4, #12]
 8014240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014244:	81a3      	strh	r3, [r4, #12]
 8014246:	e7ad      	b.n	80141a4 <__sflush_r+0x1c>
 8014248:	690f      	ldr	r7, [r1, #16]
 801424a:	2f00      	cmp	r7, #0
 801424c:	d0a9      	beq.n	80141a2 <__sflush_r+0x1a>
 801424e:	0793      	lsls	r3, r2, #30
 8014250:	680e      	ldr	r6, [r1, #0]
 8014252:	bf08      	it	eq
 8014254:	694b      	ldreq	r3, [r1, #20]
 8014256:	600f      	str	r7, [r1, #0]
 8014258:	bf18      	it	ne
 801425a:	2300      	movne	r3, #0
 801425c:	eba6 0807 	sub.w	r8, r6, r7
 8014260:	608b      	str	r3, [r1, #8]
 8014262:	f1b8 0f00 	cmp.w	r8, #0
 8014266:	dd9c      	ble.n	80141a2 <__sflush_r+0x1a>
 8014268:	6a21      	ldr	r1, [r4, #32]
 801426a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801426c:	4643      	mov	r3, r8
 801426e:	463a      	mov	r2, r7
 8014270:	4628      	mov	r0, r5
 8014272:	47b0      	blx	r6
 8014274:	2800      	cmp	r0, #0
 8014276:	dc06      	bgt.n	8014286 <__sflush_r+0xfe>
 8014278:	89a3      	ldrh	r3, [r4, #12]
 801427a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801427e:	81a3      	strh	r3, [r4, #12]
 8014280:	f04f 30ff 	mov.w	r0, #4294967295
 8014284:	e78e      	b.n	80141a4 <__sflush_r+0x1c>
 8014286:	4407      	add	r7, r0
 8014288:	eba8 0800 	sub.w	r8, r8, r0
 801428c:	e7e9      	b.n	8014262 <__sflush_r+0xda>
 801428e:	bf00      	nop
 8014290:	20400001 	.word	0x20400001

08014294 <_fflush_r>:
 8014294:	b538      	push	{r3, r4, r5, lr}
 8014296:	690b      	ldr	r3, [r1, #16]
 8014298:	4605      	mov	r5, r0
 801429a:	460c      	mov	r4, r1
 801429c:	b913      	cbnz	r3, 80142a4 <_fflush_r+0x10>
 801429e:	2500      	movs	r5, #0
 80142a0:	4628      	mov	r0, r5
 80142a2:	bd38      	pop	{r3, r4, r5, pc}
 80142a4:	b118      	cbz	r0, 80142ae <_fflush_r+0x1a>
 80142a6:	6983      	ldr	r3, [r0, #24]
 80142a8:	b90b      	cbnz	r3, 80142ae <_fflush_r+0x1a>
 80142aa:	f000 f899 	bl	80143e0 <__sinit>
 80142ae:	4b14      	ldr	r3, [pc, #80]	; (8014300 <_fflush_r+0x6c>)
 80142b0:	429c      	cmp	r4, r3
 80142b2:	d11b      	bne.n	80142ec <_fflush_r+0x58>
 80142b4:	686c      	ldr	r4, [r5, #4]
 80142b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d0ef      	beq.n	801429e <_fflush_r+0xa>
 80142be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80142c0:	07d0      	lsls	r0, r2, #31
 80142c2:	d404      	bmi.n	80142ce <_fflush_r+0x3a>
 80142c4:	0599      	lsls	r1, r3, #22
 80142c6:	d402      	bmi.n	80142ce <_fflush_r+0x3a>
 80142c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142ca:	f000 f97a 	bl	80145c2 <__retarget_lock_acquire_recursive>
 80142ce:	4628      	mov	r0, r5
 80142d0:	4621      	mov	r1, r4
 80142d2:	f7ff ff59 	bl	8014188 <__sflush_r>
 80142d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142d8:	07da      	lsls	r2, r3, #31
 80142da:	4605      	mov	r5, r0
 80142dc:	d4e0      	bmi.n	80142a0 <_fflush_r+0xc>
 80142de:	89a3      	ldrh	r3, [r4, #12]
 80142e0:	059b      	lsls	r3, r3, #22
 80142e2:	d4dd      	bmi.n	80142a0 <_fflush_r+0xc>
 80142e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142e6:	f000 f96d 	bl	80145c4 <__retarget_lock_release_recursive>
 80142ea:	e7d9      	b.n	80142a0 <_fflush_r+0xc>
 80142ec:	4b05      	ldr	r3, [pc, #20]	; (8014304 <_fflush_r+0x70>)
 80142ee:	429c      	cmp	r4, r3
 80142f0:	d101      	bne.n	80142f6 <_fflush_r+0x62>
 80142f2:	68ac      	ldr	r4, [r5, #8]
 80142f4:	e7df      	b.n	80142b6 <_fflush_r+0x22>
 80142f6:	4b04      	ldr	r3, [pc, #16]	; (8014308 <_fflush_r+0x74>)
 80142f8:	429c      	cmp	r4, r3
 80142fa:	bf08      	it	eq
 80142fc:	68ec      	ldreq	r4, [r5, #12]
 80142fe:	e7da      	b.n	80142b6 <_fflush_r+0x22>
 8014300:	0801f1a8 	.word	0x0801f1a8
 8014304:	0801f1c8 	.word	0x0801f1c8
 8014308:	0801f188 	.word	0x0801f188

0801430c <fflush>:
 801430c:	4601      	mov	r1, r0
 801430e:	b920      	cbnz	r0, 801431a <fflush+0xe>
 8014310:	4b04      	ldr	r3, [pc, #16]	; (8014324 <fflush+0x18>)
 8014312:	4905      	ldr	r1, [pc, #20]	; (8014328 <fflush+0x1c>)
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	f000 b8fe 	b.w	8014516 <_fwalk_reent>
 801431a:	4b04      	ldr	r3, [pc, #16]	; (801432c <fflush+0x20>)
 801431c:	6818      	ldr	r0, [r3, #0]
 801431e:	f7ff bfb9 	b.w	8014294 <_fflush_r>
 8014322:	bf00      	nop
 8014324:	0801f1e8 	.word	0x0801f1e8
 8014328:	08014295 	.word	0x08014295
 801432c:	2000002c 	.word	0x2000002c

08014330 <std>:
 8014330:	2300      	movs	r3, #0
 8014332:	b510      	push	{r4, lr}
 8014334:	4604      	mov	r4, r0
 8014336:	e9c0 3300 	strd	r3, r3, [r0]
 801433a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801433e:	6083      	str	r3, [r0, #8]
 8014340:	8181      	strh	r1, [r0, #12]
 8014342:	6643      	str	r3, [r0, #100]	; 0x64
 8014344:	81c2      	strh	r2, [r0, #14]
 8014346:	6183      	str	r3, [r0, #24]
 8014348:	4619      	mov	r1, r3
 801434a:	2208      	movs	r2, #8
 801434c:	305c      	adds	r0, #92	; 0x5c
 801434e:	f000 f951 	bl	80145f4 <memset>
 8014352:	4b05      	ldr	r3, [pc, #20]	; (8014368 <std+0x38>)
 8014354:	6263      	str	r3, [r4, #36]	; 0x24
 8014356:	4b05      	ldr	r3, [pc, #20]	; (801436c <std+0x3c>)
 8014358:	62a3      	str	r3, [r4, #40]	; 0x28
 801435a:	4b05      	ldr	r3, [pc, #20]	; (8014370 <std+0x40>)
 801435c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801435e:	4b05      	ldr	r3, [pc, #20]	; (8014374 <std+0x44>)
 8014360:	6224      	str	r4, [r4, #32]
 8014362:	6323      	str	r3, [r4, #48]	; 0x30
 8014364:	bd10      	pop	{r4, pc}
 8014366:	bf00      	nop
 8014368:	080148b5 	.word	0x080148b5
 801436c:	080148d7 	.word	0x080148d7
 8014370:	0801490f 	.word	0x0801490f
 8014374:	08014933 	.word	0x08014933

08014378 <_cleanup_r>:
 8014378:	4901      	ldr	r1, [pc, #4]	; (8014380 <_cleanup_r+0x8>)
 801437a:	f000 b8cc 	b.w	8014516 <_fwalk_reent>
 801437e:	bf00      	nop
 8014380:	08014295 	.word	0x08014295

08014384 <__sfmoreglue>:
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	1e4a      	subs	r2, r1, #1
 8014388:	2568      	movs	r5, #104	; 0x68
 801438a:	4355      	muls	r5, r2
 801438c:	460e      	mov	r6, r1
 801438e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014392:	f000 f997 	bl	80146c4 <_malloc_r>
 8014396:	4604      	mov	r4, r0
 8014398:	b140      	cbz	r0, 80143ac <__sfmoreglue+0x28>
 801439a:	2100      	movs	r1, #0
 801439c:	e9c0 1600 	strd	r1, r6, [r0]
 80143a0:	300c      	adds	r0, #12
 80143a2:	60a0      	str	r0, [r4, #8]
 80143a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143a8:	f000 f924 	bl	80145f4 <memset>
 80143ac:	4620      	mov	r0, r4
 80143ae:	bd70      	pop	{r4, r5, r6, pc}

080143b0 <__sfp_lock_acquire>:
 80143b0:	4801      	ldr	r0, [pc, #4]	; (80143b8 <__sfp_lock_acquire+0x8>)
 80143b2:	f000 b906 	b.w	80145c2 <__retarget_lock_acquire_recursive>
 80143b6:	bf00      	nop
 80143b8:	20002a04 	.word	0x20002a04

080143bc <__sfp_lock_release>:
 80143bc:	4801      	ldr	r0, [pc, #4]	; (80143c4 <__sfp_lock_release+0x8>)
 80143be:	f000 b901 	b.w	80145c4 <__retarget_lock_release_recursive>
 80143c2:	bf00      	nop
 80143c4:	20002a04 	.word	0x20002a04

080143c8 <__sinit_lock_acquire>:
 80143c8:	4801      	ldr	r0, [pc, #4]	; (80143d0 <__sinit_lock_acquire+0x8>)
 80143ca:	f000 b8fa 	b.w	80145c2 <__retarget_lock_acquire_recursive>
 80143ce:	bf00      	nop
 80143d0:	200029ff 	.word	0x200029ff

080143d4 <__sinit_lock_release>:
 80143d4:	4801      	ldr	r0, [pc, #4]	; (80143dc <__sinit_lock_release+0x8>)
 80143d6:	f000 b8f5 	b.w	80145c4 <__retarget_lock_release_recursive>
 80143da:	bf00      	nop
 80143dc:	200029ff 	.word	0x200029ff

080143e0 <__sinit>:
 80143e0:	b510      	push	{r4, lr}
 80143e2:	4604      	mov	r4, r0
 80143e4:	f7ff fff0 	bl	80143c8 <__sinit_lock_acquire>
 80143e8:	69a3      	ldr	r3, [r4, #24]
 80143ea:	b11b      	cbz	r3, 80143f4 <__sinit+0x14>
 80143ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143f0:	f7ff bff0 	b.w	80143d4 <__sinit_lock_release>
 80143f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80143f8:	6523      	str	r3, [r4, #80]	; 0x50
 80143fa:	4b13      	ldr	r3, [pc, #76]	; (8014448 <__sinit+0x68>)
 80143fc:	4a13      	ldr	r2, [pc, #76]	; (801444c <__sinit+0x6c>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	62a2      	str	r2, [r4, #40]	; 0x28
 8014402:	42a3      	cmp	r3, r4
 8014404:	bf04      	itt	eq
 8014406:	2301      	moveq	r3, #1
 8014408:	61a3      	streq	r3, [r4, #24]
 801440a:	4620      	mov	r0, r4
 801440c:	f000 f820 	bl	8014450 <__sfp>
 8014410:	6060      	str	r0, [r4, #4]
 8014412:	4620      	mov	r0, r4
 8014414:	f000 f81c 	bl	8014450 <__sfp>
 8014418:	60a0      	str	r0, [r4, #8]
 801441a:	4620      	mov	r0, r4
 801441c:	f000 f818 	bl	8014450 <__sfp>
 8014420:	2200      	movs	r2, #0
 8014422:	60e0      	str	r0, [r4, #12]
 8014424:	2104      	movs	r1, #4
 8014426:	6860      	ldr	r0, [r4, #4]
 8014428:	f7ff ff82 	bl	8014330 <std>
 801442c:	68a0      	ldr	r0, [r4, #8]
 801442e:	2201      	movs	r2, #1
 8014430:	2109      	movs	r1, #9
 8014432:	f7ff ff7d 	bl	8014330 <std>
 8014436:	68e0      	ldr	r0, [r4, #12]
 8014438:	2202      	movs	r2, #2
 801443a:	2112      	movs	r1, #18
 801443c:	f7ff ff78 	bl	8014330 <std>
 8014440:	2301      	movs	r3, #1
 8014442:	61a3      	str	r3, [r4, #24]
 8014444:	e7d2      	b.n	80143ec <__sinit+0xc>
 8014446:	bf00      	nop
 8014448:	0801f1e8 	.word	0x0801f1e8
 801444c:	08014379 	.word	0x08014379

08014450 <__sfp>:
 8014450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014452:	4607      	mov	r7, r0
 8014454:	f7ff ffac 	bl	80143b0 <__sfp_lock_acquire>
 8014458:	4b1e      	ldr	r3, [pc, #120]	; (80144d4 <__sfp+0x84>)
 801445a:	681e      	ldr	r6, [r3, #0]
 801445c:	69b3      	ldr	r3, [r6, #24]
 801445e:	b913      	cbnz	r3, 8014466 <__sfp+0x16>
 8014460:	4630      	mov	r0, r6
 8014462:	f7ff ffbd 	bl	80143e0 <__sinit>
 8014466:	3648      	adds	r6, #72	; 0x48
 8014468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801446c:	3b01      	subs	r3, #1
 801446e:	d503      	bpl.n	8014478 <__sfp+0x28>
 8014470:	6833      	ldr	r3, [r6, #0]
 8014472:	b30b      	cbz	r3, 80144b8 <__sfp+0x68>
 8014474:	6836      	ldr	r6, [r6, #0]
 8014476:	e7f7      	b.n	8014468 <__sfp+0x18>
 8014478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801447c:	b9d5      	cbnz	r5, 80144b4 <__sfp+0x64>
 801447e:	4b16      	ldr	r3, [pc, #88]	; (80144d8 <__sfp+0x88>)
 8014480:	60e3      	str	r3, [r4, #12]
 8014482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014486:	6665      	str	r5, [r4, #100]	; 0x64
 8014488:	f000 f89a 	bl	80145c0 <__retarget_lock_init_recursive>
 801448c:	f7ff ff96 	bl	80143bc <__sfp_lock_release>
 8014490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014498:	6025      	str	r5, [r4, #0]
 801449a:	61a5      	str	r5, [r4, #24]
 801449c:	2208      	movs	r2, #8
 801449e:	4629      	mov	r1, r5
 80144a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144a4:	f000 f8a6 	bl	80145f4 <memset>
 80144a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144b0:	4620      	mov	r0, r4
 80144b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144b4:	3468      	adds	r4, #104	; 0x68
 80144b6:	e7d9      	b.n	801446c <__sfp+0x1c>
 80144b8:	2104      	movs	r1, #4
 80144ba:	4638      	mov	r0, r7
 80144bc:	f7ff ff62 	bl	8014384 <__sfmoreglue>
 80144c0:	4604      	mov	r4, r0
 80144c2:	6030      	str	r0, [r6, #0]
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d1d5      	bne.n	8014474 <__sfp+0x24>
 80144c8:	f7ff ff78 	bl	80143bc <__sfp_lock_release>
 80144cc:	230c      	movs	r3, #12
 80144ce:	603b      	str	r3, [r7, #0]
 80144d0:	e7ee      	b.n	80144b0 <__sfp+0x60>
 80144d2:	bf00      	nop
 80144d4:	0801f1e8 	.word	0x0801f1e8
 80144d8:	ffff0001 	.word	0xffff0001

080144dc <_fwalk>:
 80144dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144e0:	460f      	mov	r7, r1
 80144e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80144e6:	2600      	movs	r6, #0
 80144e8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80144ec:	f1b8 0801 	subs.w	r8, r8, #1
 80144f0:	d505      	bpl.n	80144fe <_fwalk+0x22>
 80144f2:	6824      	ldr	r4, [r4, #0]
 80144f4:	2c00      	cmp	r4, #0
 80144f6:	d1f7      	bne.n	80144e8 <_fwalk+0xc>
 80144f8:	4630      	mov	r0, r6
 80144fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fe:	89ab      	ldrh	r3, [r5, #12]
 8014500:	2b01      	cmp	r3, #1
 8014502:	d906      	bls.n	8014512 <_fwalk+0x36>
 8014504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014508:	3301      	adds	r3, #1
 801450a:	d002      	beq.n	8014512 <_fwalk+0x36>
 801450c:	4628      	mov	r0, r5
 801450e:	47b8      	blx	r7
 8014510:	4306      	orrs	r6, r0
 8014512:	3568      	adds	r5, #104	; 0x68
 8014514:	e7ea      	b.n	80144ec <_fwalk+0x10>

08014516 <_fwalk_reent>:
 8014516:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801451a:	4606      	mov	r6, r0
 801451c:	4688      	mov	r8, r1
 801451e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014522:	2700      	movs	r7, #0
 8014524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014528:	f1b9 0901 	subs.w	r9, r9, #1
 801452c:	d505      	bpl.n	801453a <_fwalk_reent+0x24>
 801452e:	6824      	ldr	r4, [r4, #0]
 8014530:	2c00      	cmp	r4, #0
 8014532:	d1f7      	bne.n	8014524 <_fwalk_reent+0xe>
 8014534:	4638      	mov	r0, r7
 8014536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801453a:	89ab      	ldrh	r3, [r5, #12]
 801453c:	2b01      	cmp	r3, #1
 801453e:	d907      	bls.n	8014550 <_fwalk_reent+0x3a>
 8014540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014544:	3301      	adds	r3, #1
 8014546:	d003      	beq.n	8014550 <_fwalk_reent+0x3a>
 8014548:	4629      	mov	r1, r5
 801454a:	4630      	mov	r0, r6
 801454c:	47c0      	blx	r8
 801454e:	4307      	orrs	r7, r0
 8014550:	3568      	adds	r5, #104	; 0x68
 8014552:	e7e9      	b.n	8014528 <_fwalk_reent+0x12>

08014554 <getchar>:
 8014554:	4b07      	ldr	r3, [pc, #28]	; (8014574 <getchar+0x20>)
 8014556:	b510      	push	{r4, lr}
 8014558:	681c      	ldr	r4, [r3, #0]
 801455a:	b124      	cbz	r4, 8014566 <getchar+0x12>
 801455c:	69a3      	ldr	r3, [r4, #24]
 801455e:	b913      	cbnz	r3, 8014566 <getchar+0x12>
 8014560:	4620      	mov	r0, r4
 8014562:	f7ff ff3d 	bl	80143e0 <__sinit>
 8014566:	6861      	ldr	r1, [r4, #4]
 8014568:	4620      	mov	r0, r4
 801456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801456e:	f000 bac7 	b.w	8014b00 <_getc_r>
 8014572:	bf00      	nop
 8014574:	2000002c 	.word	0x2000002c

08014578 <__libc_init_array>:
 8014578:	b570      	push	{r4, r5, r6, lr}
 801457a:	4d0d      	ldr	r5, [pc, #52]	; (80145b0 <__libc_init_array+0x38>)
 801457c:	4c0d      	ldr	r4, [pc, #52]	; (80145b4 <__libc_init_array+0x3c>)
 801457e:	1b64      	subs	r4, r4, r5
 8014580:	10a4      	asrs	r4, r4, #2
 8014582:	2600      	movs	r6, #0
 8014584:	42a6      	cmp	r6, r4
 8014586:	d109      	bne.n	801459c <__libc_init_array+0x24>
 8014588:	4d0b      	ldr	r5, [pc, #44]	; (80145b8 <__libc_init_array+0x40>)
 801458a:	4c0c      	ldr	r4, [pc, #48]	; (80145bc <__libc_init_array+0x44>)
 801458c:	f000 ff5c 	bl	8015448 <_init>
 8014590:	1b64      	subs	r4, r4, r5
 8014592:	10a4      	asrs	r4, r4, #2
 8014594:	2600      	movs	r6, #0
 8014596:	42a6      	cmp	r6, r4
 8014598:	d105      	bne.n	80145a6 <__libc_init_array+0x2e>
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80145a0:	4798      	blx	r3
 80145a2:	3601      	adds	r6, #1
 80145a4:	e7ee      	b.n	8014584 <__libc_init_array+0xc>
 80145a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80145aa:	4798      	blx	r3
 80145ac:	3601      	adds	r6, #1
 80145ae:	e7f2      	b.n	8014596 <__libc_init_array+0x1e>
 80145b0:	0801f228 	.word	0x0801f228
 80145b4:	0801f228 	.word	0x0801f228
 80145b8:	0801f228 	.word	0x0801f228
 80145bc:	0801f22c 	.word	0x0801f22c

080145c0 <__retarget_lock_init_recursive>:
 80145c0:	4770      	bx	lr

080145c2 <__retarget_lock_acquire_recursive>:
 80145c2:	4770      	bx	lr

080145c4 <__retarget_lock_release_recursive>:
 80145c4:	4770      	bx	lr
	...

080145c8 <free>:
 80145c8:	4b02      	ldr	r3, [pc, #8]	; (80145d4 <free+0xc>)
 80145ca:	4601      	mov	r1, r0
 80145cc:	6818      	ldr	r0, [r3, #0]
 80145ce:	f000 b829 	b.w	8014624 <_free_r>
 80145d2:	bf00      	nop
 80145d4:	2000002c 	.word	0x2000002c

080145d8 <memcpy>:
 80145d8:	440a      	add	r2, r1
 80145da:	4291      	cmp	r1, r2
 80145dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80145e0:	d100      	bne.n	80145e4 <memcpy+0xc>
 80145e2:	4770      	bx	lr
 80145e4:	b510      	push	{r4, lr}
 80145e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145ee:	4291      	cmp	r1, r2
 80145f0:	d1f9      	bne.n	80145e6 <memcpy+0xe>
 80145f2:	bd10      	pop	{r4, pc}

080145f4 <memset>:
 80145f4:	4402      	add	r2, r0
 80145f6:	4603      	mov	r3, r0
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d100      	bne.n	80145fe <memset+0xa>
 80145fc:	4770      	bx	lr
 80145fe:	f803 1b01 	strb.w	r1, [r3], #1
 8014602:	e7f9      	b.n	80145f8 <memset+0x4>

08014604 <_calloc_r>:
 8014604:	b513      	push	{r0, r1, r4, lr}
 8014606:	434a      	muls	r2, r1
 8014608:	4611      	mov	r1, r2
 801460a:	9201      	str	r2, [sp, #4]
 801460c:	f000 f85a 	bl	80146c4 <_malloc_r>
 8014610:	4604      	mov	r4, r0
 8014612:	b118      	cbz	r0, 801461c <_calloc_r+0x18>
 8014614:	9a01      	ldr	r2, [sp, #4]
 8014616:	2100      	movs	r1, #0
 8014618:	f7ff ffec 	bl	80145f4 <memset>
 801461c:	4620      	mov	r0, r4
 801461e:	b002      	add	sp, #8
 8014620:	bd10      	pop	{r4, pc}
	...

08014624 <_free_r>:
 8014624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014626:	2900      	cmp	r1, #0
 8014628:	d048      	beq.n	80146bc <_free_r+0x98>
 801462a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801462e:	9001      	str	r0, [sp, #4]
 8014630:	2b00      	cmp	r3, #0
 8014632:	f1a1 0404 	sub.w	r4, r1, #4
 8014636:	bfb8      	it	lt
 8014638:	18e4      	addlt	r4, r4, r3
 801463a:	f000 fb17 	bl	8014c6c <__malloc_lock>
 801463e:	4a20      	ldr	r2, [pc, #128]	; (80146c0 <_free_r+0x9c>)
 8014640:	9801      	ldr	r0, [sp, #4]
 8014642:	6813      	ldr	r3, [r2, #0]
 8014644:	4615      	mov	r5, r2
 8014646:	b933      	cbnz	r3, 8014656 <_free_r+0x32>
 8014648:	6063      	str	r3, [r4, #4]
 801464a:	6014      	str	r4, [r2, #0]
 801464c:	b003      	add	sp, #12
 801464e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014652:	f000 bb11 	b.w	8014c78 <__malloc_unlock>
 8014656:	42a3      	cmp	r3, r4
 8014658:	d90b      	bls.n	8014672 <_free_r+0x4e>
 801465a:	6821      	ldr	r1, [r4, #0]
 801465c:	1862      	adds	r2, r4, r1
 801465e:	4293      	cmp	r3, r2
 8014660:	bf04      	itt	eq
 8014662:	681a      	ldreq	r2, [r3, #0]
 8014664:	685b      	ldreq	r3, [r3, #4]
 8014666:	6063      	str	r3, [r4, #4]
 8014668:	bf04      	itt	eq
 801466a:	1852      	addeq	r2, r2, r1
 801466c:	6022      	streq	r2, [r4, #0]
 801466e:	602c      	str	r4, [r5, #0]
 8014670:	e7ec      	b.n	801464c <_free_r+0x28>
 8014672:	461a      	mov	r2, r3
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	b10b      	cbz	r3, 801467c <_free_r+0x58>
 8014678:	42a3      	cmp	r3, r4
 801467a:	d9fa      	bls.n	8014672 <_free_r+0x4e>
 801467c:	6811      	ldr	r1, [r2, #0]
 801467e:	1855      	adds	r5, r2, r1
 8014680:	42a5      	cmp	r5, r4
 8014682:	d10b      	bne.n	801469c <_free_r+0x78>
 8014684:	6824      	ldr	r4, [r4, #0]
 8014686:	4421      	add	r1, r4
 8014688:	1854      	adds	r4, r2, r1
 801468a:	42a3      	cmp	r3, r4
 801468c:	6011      	str	r1, [r2, #0]
 801468e:	d1dd      	bne.n	801464c <_free_r+0x28>
 8014690:	681c      	ldr	r4, [r3, #0]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	6053      	str	r3, [r2, #4]
 8014696:	4421      	add	r1, r4
 8014698:	6011      	str	r1, [r2, #0]
 801469a:	e7d7      	b.n	801464c <_free_r+0x28>
 801469c:	d902      	bls.n	80146a4 <_free_r+0x80>
 801469e:	230c      	movs	r3, #12
 80146a0:	6003      	str	r3, [r0, #0]
 80146a2:	e7d3      	b.n	801464c <_free_r+0x28>
 80146a4:	6825      	ldr	r5, [r4, #0]
 80146a6:	1961      	adds	r1, r4, r5
 80146a8:	428b      	cmp	r3, r1
 80146aa:	bf04      	itt	eq
 80146ac:	6819      	ldreq	r1, [r3, #0]
 80146ae:	685b      	ldreq	r3, [r3, #4]
 80146b0:	6063      	str	r3, [r4, #4]
 80146b2:	bf04      	itt	eq
 80146b4:	1949      	addeq	r1, r1, r5
 80146b6:	6021      	streq	r1, [r4, #0]
 80146b8:	6054      	str	r4, [r2, #4]
 80146ba:	e7c7      	b.n	801464c <_free_r+0x28>
 80146bc:	b003      	add	sp, #12
 80146be:	bd30      	pop	{r4, r5, pc}
 80146c0:	200022ec 	.word	0x200022ec

080146c4 <_malloc_r>:
 80146c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c6:	1ccd      	adds	r5, r1, #3
 80146c8:	f025 0503 	bic.w	r5, r5, #3
 80146cc:	3508      	adds	r5, #8
 80146ce:	2d0c      	cmp	r5, #12
 80146d0:	bf38      	it	cc
 80146d2:	250c      	movcc	r5, #12
 80146d4:	2d00      	cmp	r5, #0
 80146d6:	4606      	mov	r6, r0
 80146d8:	db01      	blt.n	80146de <_malloc_r+0x1a>
 80146da:	42a9      	cmp	r1, r5
 80146dc:	d903      	bls.n	80146e6 <_malloc_r+0x22>
 80146de:	230c      	movs	r3, #12
 80146e0:	6033      	str	r3, [r6, #0]
 80146e2:	2000      	movs	r0, #0
 80146e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146e6:	f000 fac1 	bl	8014c6c <__malloc_lock>
 80146ea:	4921      	ldr	r1, [pc, #132]	; (8014770 <_malloc_r+0xac>)
 80146ec:	680a      	ldr	r2, [r1, #0]
 80146ee:	4614      	mov	r4, r2
 80146f0:	b99c      	cbnz	r4, 801471a <_malloc_r+0x56>
 80146f2:	4f20      	ldr	r7, [pc, #128]	; (8014774 <_malloc_r+0xb0>)
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	b923      	cbnz	r3, 8014702 <_malloc_r+0x3e>
 80146f8:	4621      	mov	r1, r4
 80146fa:	4630      	mov	r0, r6
 80146fc:	f000 f8ca 	bl	8014894 <_sbrk_r>
 8014700:	6038      	str	r0, [r7, #0]
 8014702:	4629      	mov	r1, r5
 8014704:	4630      	mov	r0, r6
 8014706:	f000 f8c5 	bl	8014894 <_sbrk_r>
 801470a:	1c43      	adds	r3, r0, #1
 801470c:	d123      	bne.n	8014756 <_malloc_r+0x92>
 801470e:	230c      	movs	r3, #12
 8014710:	6033      	str	r3, [r6, #0]
 8014712:	4630      	mov	r0, r6
 8014714:	f000 fab0 	bl	8014c78 <__malloc_unlock>
 8014718:	e7e3      	b.n	80146e2 <_malloc_r+0x1e>
 801471a:	6823      	ldr	r3, [r4, #0]
 801471c:	1b5b      	subs	r3, r3, r5
 801471e:	d417      	bmi.n	8014750 <_malloc_r+0x8c>
 8014720:	2b0b      	cmp	r3, #11
 8014722:	d903      	bls.n	801472c <_malloc_r+0x68>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	441c      	add	r4, r3
 8014728:	6025      	str	r5, [r4, #0]
 801472a:	e004      	b.n	8014736 <_malloc_r+0x72>
 801472c:	6863      	ldr	r3, [r4, #4]
 801472e:	42a2      	cmp	r2, r4
 8014730:	bf0c      	ite	eq
 8014732:	600b      	streq	r3, [r1, #0]
 8014734:	6053      	strne	r3, [r2, #4]
 8014736:	4630      	mov	r0, r6
 8014738:	f000 fa9e 	bl	8014c78 <__malloc_unlock>
 801473c:	f104 000b 	add.w	r0, r4, #11
 8014740:	1d23      	adds	r3, r4, #4
 8014742:	f020 0007 	bic.w	r0, r0, #7
 8014746:	1ac2      	subs	r2, r0, r3
 8014748:	d0cc      	beq.n	80146e4 <_malloc_r+0x20>
 801474a:	1a1b      	subs	r3, r3, r0
 801474c:	50a3      	str	r3, [r4, r2]
 801474e:	e7c9      	b.n	80146e4 <_malloc_r+0x20>
 8014750:	4622      	mov	r2, r4
 8014752:	6864      	ldr	r4, [r4, #4]
 8014754:	e7cc      	b.n	80146f0 <_malloc_r+0x2c>
 8014756:	1cc4      	adds	r4, r0, #3
 8014758:	f024 0403 	bic.w	r4, r4, #3
 801475c:	42a0      	cmp	r0, r4
 801475e:	d0e3      	beq.n	8014728 <_malloc_r+0x64>
 8014760:	1a21      	subs	r1, r4, r0
 8014762:	4630      	mov	r0, r6
 8014764:	f000 f896 	bl	8014894 <_sbrk_r>
 8014768:	3001      	adds	r0, #1
 801476a:	d1dd      	bne.n	8014728 <_malloc_r+0x64>
 801476c:	e7cf      	b.n	801470e <_malloc_r+0x4a>
 801476e:	bf00      	nop
 8014770:	200022ec 	.word	0x200022ec
 8014774:	200022f0 	.word	0x200022f0

08014778 <iprintf>:
 8014778:	b40f      	push	{r0, r1, r2, r3}
 801477a:	4b0a      	ldr	r3, [pc, #40]	; (80147a4 <iprintf+0x2c>)
 801477c:	b513      	push	{r0, r1, r4, lr}
 801477e:	681c      	ldr	r4, [r3, #0]
 8014780:	b124      	cbz	r4, 801478c <iprintf+0x14>
 8014782:	69a3      	ldr	r3, [r4, #24]
 8014784:	b913      	cbnz	r3, 801478c <iprintf+0x14>
 8014786:	4620      	mov	r0, r4
 8014788:	f7ff fe2a 	bl	80143e0 <__sinit>
 801478c:	ab05      	add	r3, sp, #20
 801478e:	9a04      	ldr	r2, [sp, #16]
 8014790:	68a1      	ldr	r1, [r4, #8]
 8014792:	9301      	str	r3, [sp, #4]
 8014794:	4620      	mov	r0, r4
 8014796:	f000 fa9f 	bl	8014cd8 <_vfiprintf_r>
 801479a:	b002      	add	sp, #8
 801479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147a0:	b004      	add	sp, #16
 80147a2:	4770      	bx	lr
 80147a4:	2000002c 	.word	0x2000002c

080147a8 <_puts_r>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	460e      	mov	r6, r1
 80147ac:	4605      	mov	r5, r0
 80147ae:	b118      	cbz	r0, 80147b8 <_puts_r+0x10>
 80147b0:	6983      	ldr	r3, [r0, #24]
 80147b2:	b90b      	cbnz	r3, 80147b8 <_puts_r+0x10>
 80147b4:	f7ff fe14 	bl	80143e0 <__sinit>
 80147b8:	69ab      	ldr	r3, [r5, #24]
 80147ba:	68ac      	ldr	r4, [r5, #8]
 80147bc:	b913      	cbnz	r3, 80147c4 <_puts_r+0x1c>
 80147be:	4628      	mov	r0, r5
 80147c0:	f7ff fe0e 	bl	80143e0 <__sinit>
 80147c4:	4b2c      	ldr	r3, [pc, #176]	; (8014878 <_puts_r+0xd0>)
 80147c6:	429c      	cmp	r4, r3
 80147c8:	d120      	bne.n	801480c <_puts_r+0x64>
 80147ca:	686c      	ldr	r4, [r5, #4]
 80147cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147ce:	07db      	lsls	r3, r3, #31
 80147d0:	d405      	bmi.n	80147de <_puts_r+0x36>
 80147d2:	89a3      	ldrh	r3, [r4, #12]
 80147d4:	0598      	lsls	r0, r3, #22
 80147d6:	d402      	bmi.n	80147de <_puts_r+0x36>
 80147d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147da:	f7ff fef2 	bl	80145c2 <__retarget_lock_acquire_recursive>
 80147de:	89a3      	ldrh	r3, [r4, #12]
 80147e0:	0719      	lsls	r1, r3, #28
 80147e2:	d51d      	bpl.n	8014820 <_puts_r+0x78>
 80147e4:	6923      	ldr	r3, [r4, #16]
 80147e6:	b1db      	cbz	r3, 8014820 <_puts_r+0x78>
 80147e8:	3e01      	subs	r6, #1
 80147ea:	68a3      	ldr	r3, [r4, #8]
 80147ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147f0:	3b01      	subs	r3, #1
 80147f2:	60a3      	str	r3, [r4, #8]
 80147f4:	bb39      	cbnz	r1, 8014846 <_puts_r+0x9e>
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	da38      	bge.n	801486c <_puts_r+0xc4>
 80147fa:	4622      	mov	r2, r4
 80147fc:	210a      	movs	r1, #10
 80147fe:	4628      	mov	r0, r5
 8014800:	f000 f89c 	bl	801493c <__swbuf_r>
 8014804:	3001      	adds	r0, #1
 8014806:	d011      	beq.n	801482c <_puts_r+0x84>
 8014808:	250a      	movs	r5, #10
 801480a:	e011      	b.n	8014830 <_puts_r+0x88>
 801480c:	4b1b      	ldr	r3, [pc, #108]	; (801487c <_puts_r+0xd4>)
 801480e:	429c      	cmp	r4, r3
 8014810:	d101      	bne.n	8014816 <_puts_r+0x6e>
 8014812:	68ac      	ldr	r4, [r5, #8]
 8014814:	e7da      	b.n	80147cc <_puts_r+0x24>
 8014816:	4b1a      	ldr	r3, [pc, #104]	; (8014880 <_puts_r+0xd8>)
 8014818:	429c      	cmp	r4, r3
 801481a:	bf08      	it	eq
 801481c:	68ec      	ldreq	r4, [r5, #12]
 801481e:	e7d5      	b.n	80147cc <_puts_r+0x24>
 8014820:	4621      	mov	r1, r4
 8014822:	4628      	mov	r0, r5
 8014824:	f000 f8ee 	bl	8014a04 <__swsetup_r>
 8014828:	2800      	cmp	r0, #0
 801482a:	d0dd      	beq.n	80147e8 <_puts_r+0x40>
 801482c:	f04f 35ff 	mov.w	r5, #4294967295
 8014830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014832:	07da      	lsls	r2, r3, #31
 8014834:	d405      	bmi.n	8014842 <_puts_r+0x9a>
 8014836:	89a3      	ldrh	r3, [r4, #12]
 8014838:	059b      	lsls	r3, r3, #22
 801483a:	d402      	bmi.n	8014842 <_puts_r+0x9a>
 801483c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801483e:	f7ff fec1 	bl	80145c4 <__retarget_lock_release_recursive>
 8014842:	4628      	mov	r0, r5
 8014844:	bd70      	pop	{r4, r5, r6, pc}
 8014846:	2b00      	cmp	r3, #0
 8014848:	da04      	bge.n	8014854 <_puts_r+0xac>
 801484a:	69a2      	ldr	r2, [r4, #24]
 801484c:	429a      	cmp	r2, r3
 801484e:	dc06      	bgt.n	801485e <_puts_r+0xb6>
 8014850:	290a      	cmp	r1, #10
 8014852:	d004      	beq.n	801485e <_puts_r+0xb6>
 8014854:	6823      	ldr	r3, [r4, #0]
 8014856:	1c5a      	adds	r2, r3, #1
 8014858:	6022      	str	r2, [r4, #0]
 801485a:	7019      	strb	r1, [r3, #0]
 801485c:	e7c5      	b.n	80147ea <_puts_r+0x42>
 801485e:	4622      	mov	r2, r4
 8014860:	4628      	mov	r0, r5
 8014862:	f000 f86b 	bl	801493c <__swbuf_r>
 8014866:	3001      	adds	r0, #1
 8014868:	d1bf      	bne.n	80147ea <_puts_r+0x42>
 801486a:	e7df      	b.n	801482c <_puts_r+0x84>
 801486c:	6823      	ldr	r3, [r4, #0]
 801486e:	250a      	movs	r5, #10
 8014870:	1c5a      	adds	r2, r3, #1
 8014872:	6022      	str	r2, [r4, #0]
 8014874:	701d      	strb	r5, [r3, #0]
 8014876:	e7db      	b.n	8014830 <_puts_r+0x88>
 8014878:	0801f1a8 	.word	0x0801f1a8
 801487c:	0801f1c8 	.word	0x0801f1c8
 8014880:	0801f188 	.word	0x0801f188

08014884 <puts>:
 8014884:	4b02      	ldr	r3, [pc, #8]	; (8014890 <puts+0xc>)
 8014886:	4601      	mov	r1, r0
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	f7ff bf8d 	b.w	80147a8 <_puts_r>
 801488e:	bf00      	nop
 8014890:	2000002c 	.word	0x2000002c

08014894 <_sbrk_r>:
 8014894:	b538      	push	{r3, r4, r5, lr}
 8014896:	4d06      	ldr	r5, [pc, #24]	; (80148b0 <_sbrk_r+0x1c>)
 8014898:	2300      	movs	r3, #0
 801489a:	4604      	mov	r4, r0
 801489c:	4608      	mov	r0, r1
 801489e:	602b      	str	r3, [r5, #0]
 80148a0:	f7ec fb8c 	bl	8000fbc <_sbrk>
 80148a4:	1c43      	adds	r3, r0, #1
 80148a6:	d102      	bne.n	80148ae <_sbrk_r+0x1a>
 80148a8:	682b      	ldr	r3, [r5, #0]
 80148aa:	b103      	cbz	r3, 80148ae <_sbrk_r+0x1a>
 80148ac:	6023      	str	r3, [r4, #0]
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
 80148b0:	20002a08 	.word	0x20002a08

080148b4 <__sread>:
 80148b4:	b510      	push	{r4, lr}
 80148b6:	460c      	mov	r4, r1
 80148b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148bc:	f000 fcd0 	bl	8015260 <_read_r>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	bfab      	itete	ge
 80148c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80148c6:	89a3      	ldrhlt	r3, [r4, #12]
 80148c8:	181b      	addge	r3, r3, r0
 80148ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80148ce:	bfac      	ite	ge
 80148d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80148d2:	81a3      	strhlt	r3, [r4, #12]
 80148d4:	bd10      	pop	{r4, pc}

080148d6 <__swrite>:
 80148d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148da:	461f      	mov	r7, r3
 80148dc:	898b      	ldrh	r3, [r1, #12]
 80148de:	05db      	lsls	r3, r3, #23
 80148e0:	4605      	mov	r5, r0
 80148e2:	460c      	mov	r4, r1
 80148e4:	4616      	mov	r6, r2
 80148e6:	d505      	bpl.n	80148f4 <__swrite+0x1e>
 80148e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148ec:	2302      	movs	r3, #2
 80148ee:	2200      	movs	r2, #0
 80148f0:	f000 f946 	bl	8014b80 <_lseek_r>
 80148f4:	89a3      	ldrh	r3, [r4, #12]
 80148f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80148fe:	81a3      	strh	r3, [r4, #12]
 8014900:	4632      	mov	r2, r6
 8014902:	463b      	mov	r3, r7
 8014904:	4628      	mov	r0, r5
 8014906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801490a:	f000 b869 	b.w	80149e0 <_write_r>

0801490e <__sseek>:
 801490e:	b510      	push	{r4, lr}
 8014910:	460c      	mov	r4, r1
 8014912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014916:	f000 f933 	bl	8014b80 <_lseek_r>
 801491a:	1c43      	adds	r3, r0, #1
 801491c:	89a3      	ldrh	r3, [r4, #12]
 801491e:	bf15      	itete	ne
 8014920:	6560      	strne	r0, [r4, #84]	; 0x54
 8014922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801492a:	81a3      	strheq	r3, [r4, #12]
 801492c:	bf18      	it	ne
 801492e:	81a3      	strhne	r3, [r4, #12]
 8014930:	bd10      	pop	{r4, pc}

08014932 <__sclose>:
 8014932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014936:	f000 b8d3 	b.w	8014ae0 <_close_r>
	...

0801493c <__swbuf_r>:
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	460e      	mov	r6, r1
 8014940:	4614      	mov	r4, r2
 8014942:	4605      	mov	r5, r0
 8014944:	b118      	cbz	r0, 801494e <__swbuf_r+0x12>
 8014946:	6983      	ldr	r3, [r0, #24]
 8014948:	b90b      	cbnz	r3, 801494e <__swbuf_r+0x12>
 801494a:	f7ff fd49 	bl	80143e0 <__sinit>
 801494e:	4b21      	ldr	r3, [pc, #132]	; (80149d4 <__swbuf_r+0x98>)
 8014950:	429c      	cmp	r4, r3
 8014952:	d12b      	bne.n	80149ac <__swbuf_r+0x70>
 8014954:	686c      	ldr	r4, [r5, #4]
 8014956:	69a3      	ldr	r3, [r4, #24]
 8014958:	60a3      	str	r3, [r4, #8]
 801495a:	89a3      	ldrh	r3, [r4, #12]
 801495c:	071a      	lsls	r2, r3, #28
 801495e:	d52f      	bpl.n	80149c0 <__swbuf_r+0x84>
 8014960:	6923      	ldr	r3, [r4, #16]
 8014962:	b36b      	cbz	r3, 80149c0 <__swbuf_r+0x84>
 8014964:	6923      	ldr	r3, [r4, #16]
 8014966:	6820      	ldr	r0, [r4, #0]
 8014968:	1ac0      	subs	r0, r0, r3
 801496a:	6963      	ldr	r3, [r4, #20]
 801496c:	b2f6      	uxtb	r6, r6
 801496e:	4283      	cmp	r3, r0
 8014970:	4637      	mov	r7, r6
 8014972:	dc04      	bgt.n	801497e <__swbuf_r+0x42>
 8014974:	4621      	mov	r1, r4
 8014976:	4628      	mov	r0, r5
 8014978:	f7ff fc8c 	bl	8014294 <_fflush_r>
 801497c:	bb30      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	3b01      	subs	r3, #1
 8014982:	60a3      	str	r3, [r4, #8]
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	1c5a      	adds	r2, r3, #1
 8014988:	6022      	str	r2, [r4, #0]
 801498a:	701e      	strb	r6, [r3, #0]
 801498c:	6963      	ldr	r3, [r4, #20]
 801498e:	3001      	adds	r0, #1
 8014990:	4283      	cmp	r3, r0
 8014992:	d004      	beq.n	801499e <__swbuf_r+0x62>
 8014994:	89a3      	ldrh	r3, [r4, #12]
 8014996:	07db      	lsls	r3, r3, #31
 8014998:	d506      	bpl.n	80149a8 <__swbuf_r+0x6c>
 801499a:	2e0a      	cmp	r6, #10
 801499c:	d104      	bne.n	80149a8 <__swbuf_r+0x6c>
 801499e:	4621      	mov	r1, r4
 80149a0:	4628      	mov	r0, r5
 80149a2:	f7ff fc77 	bl	8014294 <_fflush_r>
 80149a6:	b988      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 80149a8:	4638      	mov	r0, r7
 80149aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ac:	4b0a      	ldr	r3, [pc, #40]	; (80149d8 <__swbuf_r+0x9c>)
 80149ae:	429c      	cmp	r4, r3
 80149b0:	d101      	bne.n	80149b6 <__swbuf_r+0x7a>
 80149b2:	68ac      	ldr	r4, [r5, #8]
 80149b4:	e7cf      	b.n	8014956 <__swbuf_r+0x1a>
 80149b6:	4b09      	ldr	r3, [pc, #36]	; (80149dc <__swbuf_r+0xa0>)
 80149b8:	429c      	cmp	r4, r3
 80149ba:	bf08      	it	eq
 80149bc:	68ec      	ldreq	r4, [r5, #12]
 80149be:	e7ca      	b.n	8014956 <__swbuf_r+0x1a>
 80149c0:	4621      	mov	r1, r4
 80149c2:	4628      	mov	r0, r5
 80149c4:	f000 f81e 	bl	8014a04 <__swsetup_r>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d0cb      	beq.n	8014964 <__swbuf_r+0x28>
 80149cc:	f04f 37ff 	mov.w	r7, #4294967295
 80149d0:	e7ea      	b.n	80149a8 <__swbuf_r+0x6c>
 80149d2:	bf00      	nop
 80149d4:	0801f1a8 	.word	0x0801f1a8
 80149d8:	0801f1c8 	.word	0x0801f1c8
 80149dc:	0801f188 	.word	0x0801f188

080149e0 <_write_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4d07      	ldr	r5, [pc, #28]	; (8014a00 <_write_r+0x20>)
 80149e4:	4604      	mov	r4, r0
 80149e6:	4608      	mov	r0, r1
 80149e8:	4611      	mov	r1, r2
 80149ea:	2200      	movs	r2, #0
 80149ec:	602a      	str	r2, [r5, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	f7ec fbce 	bl	8001190 <_write>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_write_r+0x1e>
 80149f8:	682b      	ldr	r3, [r5, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_write_r+0x1e>
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	20002a08 	.word	0x20002a08

08014a04 <__swsetup_r>:
 8014a04:	4b32      	ldr	r3, [pc, #200]	; (8014ad0 <__swsetup_r+0xcc>)
 8014a06:	b570      	push	{r4, r5, r6, lr}
 8014a08:	681d      	ldr	r5, [r3, #0]
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	b125      	cbz	r5, 8014a1a <__swsetup_r+0x16>
 8014a10:	69ab      	ldr	r3, [r5, #24]
 8014a12:	b913      	cbnz	r3, 8014a1a <__swsetup_r+0x16>
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7ff fce3 	bl	80143e0 <__sinit>
 8014a1a:	4b2e      	ldr	r3, [pc, #184]	; (8014ad4 <__swsetup_r+0xd0>)
 8014a1c:	429c      	cmp	r4, r3
 8014a1e:	d10f      	bne.n	8014a40 <__swsetup_r+0x3c>
 8014a20:	686c      	ldr	r4, [r5, #4]
 8014a22:	89a3      	ldrh	r3, [r4, #12]
 8014a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a28:	0719      	lsls	r1, r3, #28
 8014a2a:	d42c      	bmi.n	8014a86 <__swsetup_r+0x82>
 8014a2c:	06dd      	lsls	r5, r3, #27
 8014a2e:	d411      	bmi.n	8014a54 <__swsetup_r+0x50>
 8014a30:	2309      	movs	r3, #9
 8014a32:	6033      	str	r3, [r6, #0]
 8014a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a38:	81a3      	strh	r3, [r4, #12]
 8014a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3e:	e03e      	b.n	8014abe <__swsetup_r+0xba>
 8014a40:	4b25      	ldr	r3, [pc, #148]	; (8014ad8 <__swsetup_r+0xd4>)
 8014a42:	429c      	cmp	r4, r3
 8014a44:	d101      	bne.n	8014a4a <__swsetup_r+0x46>
 8014a46:	68ac      	ldr	r4, [r5, #8]
 8014a48:	e7eb      	b.n	8014a22 <__swsetup_r+0x1e>
 8014a4a:	4b24      	ldr	r3, [pc, #144]	; (8014adc <__swsetup_r+0xd8>)
 8014a4c:	429c      	cmp	r4, r3
 8014a4e:	bf08      	it	eq
 8014a50:	68ec      	ldreq	r4, [r5, #12]
 8014a52:	e7e6      	b.n	8014a22 <__swsetup_r+0x1e>
 8014a54:	0758      	lsls	r0, r3, #29
 8014a56:	d512      	bpl.n	8014a7e <__swsetup_r+0x7a>
 8014a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a5a:	b141      	cbz	r1, 8014a6e <__swsetup_r+0x6a>
 8014a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a60:	4299      	cmp	r1, r3
 8014a62:	d002      	beq.n	8014a6a <__swsetup_r+0x66>
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7ff fddd 	bl	8014624 <_free_r>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	2300      	movs	r3, #0
 8014a78:	6063      	str	r3, [r4, #4]
 8014a7a:	6923      	ldr	r3, [r4, #16]
 8014a7c:	6023      	str	r3, [r4, #0]
 8014a7e:	89a3      	ldrh	r3, [r4, #12]
 8014a80:	f043 0308 	orr.w	r3, r3, #8
 8014a84:	81a3      	strh	r3, [r4, #12]
 8014a86:	6923      	ldr	r3, [r4, #16]
 8014a88:	b94b      	cbnz	r3, 8014a9e <__swsetup_r+0x9a>
 8014a8a:	89a3      	ldrh	r3, [r4, #12]
 8014a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a94:	d003      	beq.n	8014a9e <__swsetup_r+0x9a>
 8014a96:	4621      	mov	r1, r4
 8014a98:	4630      	mov	r0, r6
 8014a9a:	f000 f8a7 	bl	8014bec <__smakebuf_r>
 8014a9e:	89a0      	ldrh	r0, [r4, #12]
 8014aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014aa4:	f010 0301 	ands.w	r3, r0, #1
 8014aa8:	d00a      	beq.n	8014ac0 <__swsetup_r+0xbc>
 8014aaa:	2300      	movs	r3, #0
 8014aac:	60a3      	str	r3, [r4, #8]
 8014aae:	6963      	ldr	r3, [r4, #20]
 8014ab0:	425b      	negs	r3, r3
 8014ab2:	61a3      	str	r3, [r4, #24]
 8014ab4:	6923      	ldr	r3, [r4, #16]
 8014ab6:	b943      	cbnz	r3, 8014aca <__swsetup_r+0xc6>
 8014ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014abc:	d1ba      	bne.n	8014a34 <__swsetup_r+0x30>
 8014abe:	bd70      	pop	{r4, r5, r6, pc}
 8014ac0:	0781      	lsls	r1, r0, #30
 8014ac2:	bf58      	it	pl
 8014ac4:	6963      	ldrpl	r3, [r4, #20]
 8014ac6:	60a3      	str	r3, [r4, #8]
 8014ac8:	e7f4      	b.n	8014ab4 <__swsetup_r+0xb0>
 8014aca:	2000      	movs	r0, #0
 8014acc:	e7f7      	b.n	8014abe <__swsetup_r+0xba>
 8014ace:	bf00      	nop
 8014ad0:	2000002c 	.word	0x2000002c
 8014ad4:	0801f1a8 	.word	0x0801f1a8
 8014ad8:	0801f1c8 	.word	0x0801f1c8
 8014adc:	0801f188 	.word	0x0801f188

08014ae0 <_close_r>:
 8014ae0:	b538      	push	{r3, r4, r5, lr}
 8014ae2:	4d06      	ldr	r5, [pc, #24]	; (8014afc <_close_r+0x1c>)
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	4604      	mov	r4, r0
 8014ae8:	4608      	mov	r0, r1
 8014aea:	602b      	str	r3, [r5, #0]
 8014aec:	f7ec fa32 	bl	8000f54 <_close>
 8014af0:	1c43      	adds	r3, r0, #1
 8014af2:	d102      	bne.n	8014afa <_close_r+0x1a>
 8014af4:	682b      	ldr	r3, [r5, #0]
 8014af6:	b103      	cbz	r3, 8014afa <_close_r+0x1a>
 8014af8:	6023      	str	r3, [r4, #0]
 8014afa:	bd38      	pop	{r3, r4, r5, pc}
 8014afc:	20002a08 	.word	0x20002a08

08014b00 <_getc_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	460c      	mov	r4, r1
 8014b04:	4605      	mov	r5, r0
 8014b06:	b118      	cbz	r0, 8014b10 <_getc_r+0x10>
 8014b08:	6983      	ldr	r3, [r0, #24]
 8014b0a:	b90b      	cbnz	r3, 8014b10 <_getc_r+0x10>
 8014b0c:	f7ff fc68 	bl	80143e0 <__sinit>
 8014b10:	4b18      	ldr	r3, [pc, #96]	; (8014b74 <_getc_r+0x74>)
 8014b12:	429c      	cmp	r4, r3
 8014b14:	d11e      	bne.n	8014b54 <_getc_r+0x54>
 8014b16:	686c      	ldr	r4, [r5, #4]
 8014b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b1a:	07d8      	lsls	r0, r3, #31
 8014b1c:	d405      	bmi.n	8014b2a <_getc_r+0x2a>
 8014b1e:	89a3      	ldrh	r3, [r4, #12]
 8014b20:	0599      	lsls	r1, r3, #22
 8014b22:	d402      	bmi.n	8014b2a <_getc_r+0x2a>
 8014b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b26:	f7ff fd4c 	bl	80145c2 <__retarget_lock_acquire_recursive>
 8014b2a:	6863      	ldr	r3, [r4, #4]
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	6063      	str	r3, [r4, #4]
 8014b32:	da19      	bge.n	8014b68 <_getc_r+0x68>
 8014b34:	4628      	mov	r0, r5
 8014b36:	4621      	mov	r1, r4
 8014b38:	f000 fba4 	bl	8015284 <__srget_r>
 8014b3c:	4605      	mov	r5, r0
 8014b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b40:	07da      	lsls	r2, r3, #31
 8014b42:	d405      	bmi.n	8014b50 <_getc_r+0x50>
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	059b      	lsls	r3, r3, #22
 8014b48:	d402      	bmi.n	8014b50 <_getc_r+0x50>
 8014b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b4c:	f7ff fd3a 	bl	80145c4 <__retarget_lock_release_recursive>
 8014b50:	4628      	mov	r0, r5
 8014b52:	bd38      	pop	{r3, r4, r5, pc}
 8014b54:	4b08      	ldr	r3, [pc, #32]	; (8014b78 <_getc_r+0x78>)
 8014b56:	429c      	cmp	r4, r3
 8014b58:	d101      	bne.n	8014b5e <_getc_r+0x5e>
 8014b5a:	68ac      	ldr	r4, [r5, #8]
 8014b5c:	e7dc      	b.n	8014b18 <_getc_r+0x18>
 8014b5e:	4b07      	ldr	r3, [pc, #28]	; (8014b7c <_getc_r+0x7c>)
 8014b60:	429c      	cmp	r4, r3
 8014b62:	bf08      	it	eq
 8014b64:	68ec      	ldreq	r4, [r5, #12]
 8014b66:	e7d7      	b.n	8014b18 <_getc_r+0x18>
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	1c5a      	adds	r2, r3, #1
 8014b6c:	6022      	str	r2, [r4, #0]
 8014b6e:	781d      	ldrb	r5, [r3, #0]
 8014b70:	e7e5      	b.n	8014b3e <_getc_r+0x3e>
 8014b72:	bf00      	nop
 8014b74:	0801f1a8 	.word	0x0801f1a8
 8014b78:	0801f1c8 	.word	0x0801f1c8
 8014b7c:	0801f188 	.word	0x0801f188

08014b80 <_lseek_r>:
 8014b80:	b538      	push	{r3, r4, r5, lr}
 8014b82:	4d07      	ldr	r5, [pc, #28]	; (8014ba0 <_lseek_r+0x20>)
 8014b84:	4604      	mov	r4, r0
 8014b86:	4608      	mov	r0, r1
 8014b88:	4611      	mov	r1, r2
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	602a      	str	r2, [r5, #0]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	f7ec fa07 	bl	8000fa2 <_lseek>
 8014b94:	1c43      	adds	r3, r0, #1
 8014b96:	d102      	bne.n	8014b9e <_lseek_r+0x1e>
 8014b98:	682b      	ldr	r3, [r5, #0]
 8014b9a:	b103      	cbz	r3, 8014b9e <_lseek_r+0x1e>
 8014b9c:	6023      	str	r3, [r4, #0]
 8014b9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ba0:	20002a08 	.word	0x20002a08

08014ba4 <__swhatbuf_r>:
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	460e      	mov	r6, r1
 8014ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bac:	2900      	cmp	r1, #0
 8014bae:	b096      	sub	sp, #88	; 0x58
 8014bb0:	4614      	mov	r4, r2
 8014bb2:	461d      	mov	r5, r3
 8014bb4:	da07      	bge.n	8014bc6 <__swhatbuf_r+0x22>
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	602b      	str	r3, [r5, #0]
 8014bba:	89b3      	ldrh	r3, [r6, #12]
 8014bbc:	061a      	lsls	r2, r3, #24
 8014bbe:	d410      	bmi.n	8014be2 <__swhatbuf_r+0x3e>
 8014bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bc4:	e00e      	b.n	8014be4 <__swhatbuf_r+0x40>
 8014bc6:	466a      	mov	r2, sp
 8014bc8:	f000 fb88 	bl	80152dc <_fstat_r>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	dbf2      	blt.n	8014bb6 <__swhatbuf_r+0x12>
 8014bd0:	9a01      	ldr	r2, [sp, #4]
 8014bd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014bd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014bda:	425a      	negs	r2, r3
 8014bdc:	415a      	adcs	r2, r3
 8014bde:	602a      	str	r2, [r5, #0]
 8014be0:	e7ee      	b.n	8014bc0 <__swhatbuf_r+0x1c>
 8014be2:	2340      	movs	r3, #64	; 0x40
 8014be4:	2000      	movs	r0, #0
 8014be6:	6023      	str	r3, [r4, #0]
 8014be8:	b016      	add	sp, #88	; 0x58
 8014bea:	bd70      	pop	{r4, r5, r6, pc}

08014bec <__smakebuf_r>:
 8014bec:	898b      	ldrh	r3, [r1, #12]
 8014bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bf0:	079d      	lsls	r5, r3, #30
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460c      	mov	r4, r1
 8014bf6:	d507      	bpl.n	8014c08 <__smakebuf_r+0x1c>
 8014bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bfc:	6023      	str	r3, [r4, #0]
 8014bfe:	6123      	str	r3, [r4, #16]
 8014c00:	2301      	movs	r3, #1
 8014c02:	6163      	str	r3, [r4, #20]
 8014c04:	b002      	add	sp, #8
 8014c06:	bd70      	pop	{r4, r5, r6, pc}
 8014c08:	ab01      	add	r3, sp, #4
 8014c0a:	466a      	mov	r2, sp
 8014c0c:	f7ff ffca 	bl	8014ba4 <__swhatbuf_r>
 8014c10:	9900      	ldr	r1, [sp, #0]
 8014c12:	4605      	mov	r5, r0
 8014c14:	4630      	mov	r0, r6
 8014c16:	f7ff fd55 	bl	80146c4 <_malloc_r>
 8014c1a:	b948      	cbnz	r0, 8014c30 <__smakebuf_r+0x44>
 8014c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c20:	059a      	lsls	r2, r3, #22
 8014c22:	d4ef      	bmi.n	8014c04 <__smakebuf_r+0x18>
 8014c24:	f023 0303 	bic.w	r3, r3, #3
 8014c28:	f043 0302 	orr.w	r3, r3, #2
 8014c2c:	81a3      	strh	r3, [r4, #12]
 8014c2e:	e7e3      	b.n	8014bf8 <__smakebuf_r+0xc>
 8014c30:	4b0d      	ldr	r3, [pc, #52]	; (8014c68 <__smakebuf_r+0x7c>)
 8014c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c34:	89a3      	ldrh	r3, [r4, #12]
 8014c36:	6020      	str	r0, [r4, #0]
 8014c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c3c:	81a3      	strh	r3, [r4, #12]
 8014c3e:	9b00      	ldr	r3, [sp, #0]
 8014c40:	6163      	str	r3, [r4, #20]
 8014c42:	9b01      	ldr	r3, [sp, #4]
 8014c44:	6120      	str	r0, [r4, #16]
 8014c46:	b15b      	cbz	r3, 8014c60 <__smakebuf_r+0x74>
 8014c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c4c:	4630      	mov	r0, r6
 8014c4e:	f000 fb57 	bl	8015300 <_isatty_r>
 8014c52:	b128      	cbz	r0, 8014c60 <__smakebuf_r+0x74>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	f023 0303 	bic.w	r3, r3, #3
 8014c5a:	f043 0301 	orr.w	r3, r3, #1
 8014c5e:	81a3      	strh	r3, [r4, #12]
 8014c60:	89a0      	ldrh	r0, [r4, #12]
 8014c62:	4305      	orrs	r5, r0
 8014c64:	81a5      	strh	r5, [r4, #12]
 8014c66:	e7cd      	b.n	8014c04 <__smakebuf_r+0x18>
 8014c68:	08014379 	.word	0x08014379

08014c6c <__malloc_lock>:
 8014c6c:	4801      	ldr	r0, [pc, #4]	; (8014c74 <__malloc_lock+0x8>)
 8014c6e:	f7ff bca8 	b.w	80145c2 <__retarget_lock_acquire_recursive>
 8014c72:	bf00      	nop
 8014c74:	20002a00 	.word	0x20002a00

08014c78 <__malloc_unlock>:
 8014c78:	4801      	ldr	r0, [pc, #4]	; (8014c80 <__malloc_unlock+0x8>)
 8014c7a:	f7ff bca3 	b.w	80145c4 <__retarget_lock_release_recursive>
 8014c7e:	bf00      	nop
 8014c80:	20002a00 	.word	0x20002a00

08014c84 <__sfputc_r>:
 8014c84:	6893      	ldr	r3, [r2, #8]
 8014c86:	3b01      	subs	r3, #1
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	b410      	push	{r4}
 8014c8c:	6093      	str	r3, [r2, #8]
 8014c8e:	da08      	bge.n	8014ca2 <__sfputc_r+0x1e>
 8014c90:	6994      	ldr	r4, [r2, #24]
 8014c92:	42a3      	cmp	r3, r4
 8014c94:	db01      	blt.n	8014c9a <__sfputc_r+0x16>
 8014c96:	290a      	cmp	r1, #10
 8014c98:	d103      	bne.n	8014ca2 <__sfputc_r+0x1e>
 8014c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c9e:	f7ff be4d 	b.w	801493c <__swbuf_r>
 8014ca2:	6813      	ldr	r3, [r2, #0]
 8014ca4:	1c58      	adds	r0, r3, #1
 8014ca6:	6010      	str	r0, [r2, #0]
 8014ca8:	7019      	strb	r1, [r3, #0]
 8014caa:	4608      	mov	r0, r1
 8014cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <__sfputs_r>:
 8014cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	460f      	mov	r7, r1
 8014cb8:	4614      	mov	r4, r2
 8014cba:	18d5      	adds	r5, r2, r3
 8014cbc:	42ac      	cmp	r4, r5
 8014cbe:	d101      	bne.n	8014cc4 <__sfputs_r+0x12>
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	e007      	b.n	8014cd4 <__sfputs_r+0x22>
 8014cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cc8:	463a      	mov	r2, r7
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7ff ffda 	bl	8014c84 <__sfputc_r>
 8014cd0:	1c43      	adds	r3, r0, #1
 8014cd2:	d1f3      	bne.n	8014cbc <__sfputs_r+0xa>
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014cd8 <_vfiprintf_r>:
 8014cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cdc:	460d      	mov	r5, r1
 8014cde:	b09d      	sub	sp, #116	; 0x74
 8014ce0:	4614      	mov	r4, r2
 8014ce2:	4698      	mov	r8, r3
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	b118      	cbz	r0, 8014cf0 <_vfiprintf_r+0x18>
 8014ce8:	6983      	ldr	r3, [r0, #24]
 8014cea:	b90b      	cbnz	r3, 8014cf0 <_vfiprintf_r+0x18>
 8014cec:	f7ff fb78 	bl	80143e0 <__sinit>
 8014cf0:	4b89      	ldr	r3, [pc, #548]	; (8014f18 <_vfiprintf_r+0x240>)
 8014cf2:	429d      	cmp	r5, r3
 8014cf4:	d11b      	bne.n	8014d2e <_vfiprintf_r+0x56>
 8014cf6:	6875      	ldr	r5, [r6, #4]
 8014cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cfa:	07d9      	lsls	r1, r3, #31
 8014cfc:	d405      	bmi.n	8014d0a <_vfiprintf_r+0x32>
 8014cfe:	89ab      	ldrh	r3, [r5, #12]
 8014d00:	059a      	lsls	r2, r3, #22
 8014d02:	d402      	bmi.n	8014d0a <_vfiprintf_r+0x32>
 8014d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d06:	f7ff fc5c 	bl	80145c2 <__retarget_lock_acquire_recursive>
 8014d0a:	89ab      	ldrh	r3, [r5, #12]
 8014d0c:	071b      	lsls	r3, r3, #28
 8014d0e:	d501      	bpl.n	8014d14 <_vfiprintf_r+0x3c>
 8014d10:	692b      	ldr	r3, [r5, #16]
 8014d12:	b9eb      	cbnz	r3, 8014d50 <_vfiprintf_r+0x78>
 8014d14:	4629      	mov	r1, r5
 8014d16:	4630      	mov	r0, r6
 8014d18:	f7ff fe74 	bl	8014a04 <__swsetup_r>
 8014d1c:	b1c0      	cbz	r0, 8014d50 <_vfiprintf_r+0x78>
 8014d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d20:	07dc      	lsls	r4, r3, #31
 8014d22:	d50e      	bpl.n	8014d42 <_vfiprintf_r+0x6a>
 8014d24:	f04f 30ff 	mov.w	r0, #4294967295
 8014d28:	b01d      	add	sp, #116	; 0x74
 8014d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d2e:	4b7b      	ldr	r3, [pc, #492]	; (8014f1c <_vfiprintf_r+0x244>)
 8014d30:	429d      	cmp	r5, r3
 8014d32:	d101      	bne.n	8014d38 <_vfiprintf_r+0x60>
 8014d34:	68b5      	ldr	r5, [r6, #8]
 8014d36:	e7df      	b.n	8014cf8 <_vfiprintf_r+0x20>
 8014d38:	4b79      	ldr	r3, [pc, #484]	; (8014f20 <_vfiprintf_r+0x248>)
 8014d3a:	429d      	cmp	r5, r3
 8014d3c:	bf08      	it	eq
 8014d3e:	68f5      	ldreq	r5, [r6, #12]
 8014d40:	e7da      	b.n	8014cf8 <_vfiprintf_r+0x20>
 8014d42:	89ab      	ldrh	r3, [r5, #12]
 8014d44:	0598      	lsls	r0, r3, #22
 8014d46:	d4ed      	bmi.n	8014d24 <_vfiprintf_r+0x4c>
 8014d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d4a:	f7ff fc3b 	bl	80145c4 <__retarget_lock_release_recursive>
 8014d4e:	e7e9      	b.n	8014d24 <_vfiprintf_r+0x4c>
 8014d50:	2300      	movs	r3, #0
 8014d52:	9309      	str	r3, [sp, #36]	; 0x24
 8014d54:	2320      	movs	r3, #32
 8014d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d5e:	2330      	movs	r3, #48	; 0x30
 8014d60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f24 <_vfiprintf_r+0x24c>
 8014d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d68:	f04f 0901 	mov.w	r9, #1
 8014d6c:	4623      	mov	r3, r4
 8014d6e:	469a      	mov	sl, r3
 8014d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d74:	b10a      	cbz	r2, 8014d7a <_vfiprintf_r+0xa2>
 8014d76:	2a25      	cmp	r2, #37	; 0x25
 8014d78:	d1f9      	bne.n	8014d6e <_vfiprintf_r+0x96>
 8014d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8014d7e:	d00b      	beq.n	8014d98 <_vfiprintf_r+0xc0>
 8014d80:	465b      	mov	r3, fp
 8014d82:	4622      	mov	r2, r4
 8014d84:	4629      	mov	r1, r5
 8014d86:	4630      	mov	r0, r6
 8014d88:	f7ff ff93 	bl	8014cb2 <__sfputs_r>
 8014d8c:	3001      	adds	r0, #1
 8014d8e:	f000 80aa 	beq.w	8014ee6 <_vfiprintf_r+0x20e>
 8014d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d94:	445a      	add	r2, fp
 8014d96:	9209      	str	r2, [sp, #36]	; 0x24
 8014d98:	f89a 3000 	ldrb.w	r3, [sl]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	f000 80a2 	beq.w	8014ee6 <_vfiprintf_r+0x20e>
 8014da2:	2300      	movs	r3, #0
 8014da4:	f04f 32ff 	mov.w	r2, #4294967295
 8014da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dac:	f10a 0a01 	add.w	sl, sl, #1
 8014db0:	9304      	str	r3, [sp, #16]
 8014db2:	9307      	str	r3, [sp, #28]
 8014db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014db8:	931a      	str	r3, [sp, #104]	; 0x68
 8014dba:	4654      	mov	r4, sl
 8014dbc:	2205      	movs	r2, #5
 8014dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dc2:	4858      	ldr	r0, [pc, #352]	; (8014f24 <_vfiprintf_r+0x24c>)
 8014dc4:	f7eb fa44 	bl	8000250 <memchr>
 8014dc8:	9a04      	ldr	r2, [sp, #16]
 8014dca:	b9d8      	cbnz	r0, 8014e04 <_vfiprintf_r+0x12c>
 8014dcc:	06d1      	lsls	r1, r2, #27
 8014dce:	bf44      	itt	mi
 8014dd0:	2320      	movmi	r3, #32
 8014dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dd6:	0713      	lsls	r3, r2, #28
 8014dd8:	bf44      	itt	mi
 8014dda:	232b      	movmi	r3, #43	; 0x2b
 8014ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014de0:	f89a 3000 	ldrb.w	r3, [sl]
 8014de4:	2b2a      	cmp	r3, #42	; 0x2a
 8014de6:	d015      	beq.n	8014e14 <_vfiprintf_r+0x13c>
 8014de8:	9a07      	ldr	r2, [sp, #28]
 8014dea:	4654      	mov	r4, sl
 8014dec:	2000      	movs	r0, #0
 8014dee:	f04f 0c0a 	mov.w	ip, #10
 8014df2:	4621      	mov	r1, r4
 8014df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014df8:	3b30      	subs	r3, #48	; 0x30
 8014dfa:	2b09      	cmp	r3, #9
 8014dfc:	d94e      	bls.n	8014e9c <_vfiprintf_r+0x1c4>
 8014dfe:	b1b0      	cbz	r0, 8014e2e <_vfiprintf_r+0x156>
 8014e00:	9207      	str	r2, [sp, #28]
 8014e02:	e014      	b.n	8014e2e <_vfiprintf_r+0x156>
 8014e04:	eba0 0308 	sub.w	r3, r0, r8
 8014e08:	fa09 f303 	lsl.w	r3, r9, r3
 8014e0c:	4313      	orrs	r3, r2
 8014e0e:	9304      	str	r3, [sp, #16]
 8014e10:	46a2      	mov	sl, r4
 8014e12:	e7d2      	b.n	8014dba <_vfiprintf_r+0xe2>
 8014e14:	9b03      	ldr	r3, [sp, #12]
 8014e16:	1d19      	adds	r1, r3, #4
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	9103      	str	r1, [sp, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	bfbb      	ittet	lt
 8014e20:	425b      	neglt	r3, r3
 8014e22:	f042 0202 	orrlt.w	r2, r2, #2
 8014e26:	9307      	strge	r3, [sp, #28]
 8014e28:	9307      	strlt	r3, [sp, #28]
 8014e2a:	bfb8      	it	lt
 8014e2c:	9204      	strlt	r2, [sp, #16]
 8014e2e:	7823      	ldrb	r3, [r4, #0]
 8014e30:	2b2e      	cmp	r3, #46	; 0x2e
 8014e32:	d10c      	bne.n	8014e4e <_vfiprintf_r+0x176>
 8014e34:	7863      	ldrb	r3, [r4, #1]
 8014e36:	2b2a      	cmp	r3, #42	; 0x2a
 8014e38:	d135      	bne.n	8014ea6 <_vfiprintf_r+0x1ce>
 8014e3a:	9b03      	ldr	r3, [sp, #12]
 8014e3c:	1d1a      	adds	r2, r3, #4
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	9203      	str	r2, [sp, #12]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	bfb8      	it	lt
 8014e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e4a:	3402      	adds	r4, #2
 8014e4c:	9305      	str	r3, [sp, #20]
 8014e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f34 <_vfiprintf_r+0x25c>
 8014e52:	7821      	ldrb	r1, [r4, #0]
 8014e54:	2203      	movs	r2, #3
 8014e56:	4650      	mov	r0, sl
 8014e58:	f7eb f9fa 	bl	8000250 <memchr>
 8014e5c:	b140      	cbz	r0, 8014e70 <_vfiprintf_r+0x198>
 8014e5e:	2340      	movs	r3, #64	; 0x40
 8014e60:	eba0 000a 	sub.w	r0, r0, sl
 8014e64:	fa03 f000 	lsl.w	r0, r3, r0
 8014e68:	9b04      	ldr	r3, [sp, #16]
 8014e6a:	4303      	orrs	r3, r0
 8014e6c:	3401      	adds	r4, #1
 8014e6e:	9304      	str	r3, [sp, #16]
 8014e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e74:	482c      	ldr	r0, [pc, #176]	; (8014f28 <_vfiprintf_r+0x250>)
 8014e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e7a:	2206      	movs	r2, #6
 8014e7c:	f7eb f9e8 	bl	8000250 <memchr>
 8014e80:	2800      	cmp	r0, #0
 8014e82:	d03f      	beq.n	8014f04 <_vfiprintf_r+0x22c>
 8014e84:	4b29      	ldr	r3, [pc, #164]	; (8014f2c <_vfiprintf_r+0x254>)
 8014e86:	bb1b      	cbnz	r3, 8014ed0 <_vfiprintf_r+0x1f8>
 8014e88:	9b03      	ldr	r3, [sp, #12]
 8014e8a:	3307      	adds	r3, #7
 8014e8c:	f023 0307 	bic.w	r3, r3, #7
 8014e90:	3308      	adds	r3, #8
 8014e92:	9303      	str	r3, [sp, #12]
 8014e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e96:	443b      	add	r3, r7
 8014e98:	9309      	str	r3, [sp, #36]	; 0x24
 8014e9a:	e767      	b.n	8014d6c <_vfiprintf_r+0x94>
 8014e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ea0:	460c      	mov	r4, r1
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	e7a5      	b.n	8014df2 <_vfiprintf_r+0x11a>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	3401      	adds	r4, #1
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	4619      	mov	r1, r3
 8014eae:	f04f 0c0a 	mov.w	ip, #10
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eb8:	3a30      	subs	r2, #48	; 0x30
 8014eba:	2a09      	cmp	r2, #9
 8014ebc:	d903      	bls.n	8014ec6 <_vfiprintf_r+0x1ee>
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d0c5      	beq.n	8014e4e <_vfiprintf_r+0x176>
 8014ec2:	9105      	str	r1, [sp, #20]
 8014ec4:	e7c3      	b.n	8014e4e <_vfiprintf_r+0x176>
 8014ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eca:	4604      	mov	r4, r0
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e7f0      	b.n	8014eb2 <_vfiprintf_r+0x1da>
 8014ed0:	ab03      	add	r3, sp, #12
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	462a      	mov	r2, r5
 8014ed6:	4b16      	ldr	r3, [pc, #88]	; (8014f30 <_vfiprintf_r+0x258>)
 8014ed8:	a904      	add	r1, sp, #16
 8014eda:	4630      	mov	r0, r6
 8014edc:	f3af 8000 	nop.w
 8014ee0:	4607      	mov	r7, r0
 8014ee2:	1c78      	adds	r0, r7, #1
 8014ee4:	d1d6      	bne.n	8014e94 <_vfiprintf_r+0x1bc>
 8014ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ee8:	07d9      	lsls	r1, r3, #31
 8014eea:	d405      	bmi.n	8014ef8 <_vfiprintf_r+0x220>
 8014eec:	89ab      	ldrh	r3, [r5, #12]
 8014eee:	059a      	lsls	r2, r3, #22
 8014ef0:	d402      	bmi.n	8014ef8 <_vfiprintf_r+0x220>
 8014ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ef4:	f7ff fb66 	bl	80145c4 <__retarget_lock_release_recursive>
 8014ef8:	89ab      	ldrh	r3, [r5, #12]
 8014efa:	065b      	lsls	r3, r3, #25
 8014efc:	f53f af12 	bmi.w	8014d24 <_vfiprintf_r+0x4c>
 8014f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f02:	e711      	b.n	8014d28 <_vfiprintf_r+0x50>
 8014f04:	ab03      	add	r3, sp, #12
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	462a      	mov	r2, r5
 8014f0a:	4b09      	ldr	r3, [pc, #36]	; (8014f30 <_vfiprintf_r+0x258>)
 8014f0c:	a904      	add	r1, sp, #16
 8014f0e:	4630      	mov	r0, r6
 8014f10:	f000 f880 	bl	8015014 <_printf_i>
 8014f14:	e7e4      	b.n	8014ee0 <_vfiprintf_r+0x208>
 8014f16:	bf00      	nop
 8014f18:	0801f1a8 	.word	0x0801f1a8
 8014f1c:	0801f1c8 	.word	0x0801f1c8
 8014f20:	0801f188 	.word	0x0801f188
 8014f24:	0801f1ec 	.word	0x0801f1ec
 8014f28:	0801f1f6 	.word	0x0801f1f6
 8014f2c:	00000000 	.word	0x00000000
 8014f30:	08014cb3 	.word	0x08014cb3
 8014f34:	0801f1f2 	.word	0x0801f1f2

08014f38 <_printf_common>:
 8014f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f3c:	4616      	mov	r6, r2
 8014f3e:	4699      	mov	r9, r3
 8014f40:	688a      	ldr	r2, [r1, #8]
 8014f42:	690b      	ldr	r3, [r1, #16]
 8014f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	bfb8      	it	lt
 8014f4c:	4613      	movlt	r3, r2
 8014f4e:	6033      	str	r3, [r6, #0]
 8014f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f54:	4607      	mov	r7, r0
 8014f56:	460c      	mov	r4, r1
 8014f58:	b10a      	cbz	r2, 8014f5e <_printf_common+0x26>
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	6033      	str	r3, [r6, #0]
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	0699      	lsls	r1, r3, #26
 8014f62:	bf42      	ittt	mi
 8014f64:	6833      	ldrmi	r3, [r6, #0]
 8014f66:	3302      	addmi	r3, #2
 8014f68:	6033      	strmi	r3, [r6, #0]
 8014f6a:	6825      	ldr	r5, [r4, #0]
 8014f6c:	f015 0506 	ands.w	r5, r5, #6
 8014f70:	d106      	bne.n	8014f80 <_printf_common+0x48>
 8014f72:	f104 0a19 	add.w	sl, r4, #25
 8014f76:	68e3      	ldr	r3, [r4, #12]
 8014f78:	6832      	ldr	r2, [r6, #0]
 8014f7a:	1a9b      	subs	r3, r3, r2
 8014f7c:	42ab      	cmp	r3, r5
 8014f7e:	dc26      	bgt.n	8014fce <_printf_common+0x96>
 8014f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f84:	1e13      	subs	r3, r2, #0
 8014f86:	6822      	ldr	r2, [r4, #0]
 8014f88:	bf18      	it	ne
 8014f8a:	2301      	movne	r3, #1
 8014f8c:	0692      	lsls	r2, r2, #26
 8014f8e:	d42b      	bmi.n	8014fe8 <_printf_common+0xb0>
 8014f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f94:	4649      	mov	r1, r9
 8014f96:	4638      	mov	r0, r7
 8014f98:	47c0      	blx	r8
 8014f9a:	3001      	adds	r0, #1
 8014f9c:	d01e      	beq.n	8014fdc <_printf_common+0xa4>
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	68e5      	ldr	r5, [r4, #12]
 8014fa2:	6832      	ldr	r2, [r6, #0]
 8014fa4:	f003 0306 	and.w	r3, r3, #6
 8014fa8:	2b04      	cmp	r3, #4
 8014faa:	bf08      	it	eq
 8014fac:	1aad      	subeq	r5, r5, r2
 8014fae:	68a3      	ldr	r3, [r4, #8]
 8014fb0:	6922      	ldr	r2, [r4, #16]
 8014fb2:	bf0c      	ite	eq
 8014fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fb8:	2500      	movne	r5, #0
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	bfc4      	itt	gt
 8014fbe:	1a9b      	subgt	r3, r3, r2
 8014fc0:	18ed      	addgt	r5, r5, r3
 8014fc2:	2600      	movs	r6, #0
 8014fc4:	341a      	adds	r4, #26
 8014fc6:	42b5      	cmp	r5, r6
 8014fc8:	d11a      	bne.n	8015000 <_printf_common+0xc8>
 8014fca:	2000      	movs	r0, #0
 8014fcc:	e008      	b.n	8014fe0 <_printf_common+0xa8>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	4652      	mov	r2, sl
 8014fd2:	4649      	mov	r1, r9
 8014fd4:	4638      	mov	r0, r7
 8014fd6:	47c0      	blx	r8
 8014fd8:	3001      	adds	r0, #1
 8014fda:	d103      	bne.n	8014fe4 <_printf_common+0xac>
 8014fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fe4:	3501      	adds	r5, #1
 8014fe6:	e7c6      	b.n	8014f76 <_printf_common+0x3e>
 8014fe8:	18e1      	adds	r1, r4, r3
 8014fea:	1c5a      	adds	r2, r3, #1
 8014fec:	2030      	movs	r0, #48	; 0x30
 8014fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ff2:	4422      	add	r2, r4
 8014ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	e7c7      	b.n	8014f90 <_printf_common+0x58>
 8015000:	2301      	movs	r3, #1
 8015002:	4622      	mov	r2, r4
 8015004:	4649      	mov	r1, r9
 8015006:	4638      	mov	r0, r7
 8015008:	47c0      	blx	r8
 801500a:	3001      	adds	r0, #1
 801500c:	d0e6      	beq.n	8014fdc <_printf_common+0xa4>
 801500e:	3601      	adds	r6, #1
 8015010:	e7d9      	b.n	8014fc6 <_printf_common+0x8e>
	...

08015014 <_printf_i>:
 8015014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015018:	460c      	mov	r4, r1
 801501a:	4691      	mov	r9, r2
 801501c:	7e27      	ldrb	r7, [r4, #24]
 801501e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015020:	2f78      	cmp	r7, #120	; 0x78
 8015022:	4680      	mov	r8, r0
 8015024:	469a      	mov	sl, r3
 8015026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801502a:	d807      	bhi.n	801503c <_printf_i+0x28>
 801502c:	2f62      	cmp	r7, #98	; 0x62
 801502e:	d80a      	bhi.n	8015046 <_printf_i+0x32>
 8015030:	2f00      	cmp	r7, #0
 8015032:	f000 80d8 	beq.w	80151e6 <_printf_i+0x1d2>
 8015036:	2f58      	cmp	r7, #88	; 0x58
 8015038:	f000 80a3 	beq.w	8015182 <_printf_i+0x16e>
 801503c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015044:	e03a      	b.n	80150bc <_printf_i+0xa8>
 8015046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801504a:	2b15      	cmp	r3, #21
 801504c:	d8f6      	bhi.n	801503c <_printf_i+0x28>
 801504e:	a001      	add	r0, pc, #4	; (adr r0, 8015054 <_printf_i+0x40>)
 8015050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015054:	080150ad 	.word	0x080150ad
 8015058:	080150c1 	.word	0x080150c1
 801505c:	0801503d 	.word	0x0801503d
 8015060:	0801503d 	.word	0x0801503d
 8015064:	0801503d 	.word	0x0801503d
 8015068:	0801503d 	.word	0x0801503d
 801506c:	080150c1 	.word	0x080150c1
 8015070:	0801503d 	.word	0x0801503d
 8015074:	0801503d 	.word	0x0801503d
 8015078:	0801503d 	.word	0x0801503d
 801507c:	0801503d 	.word	0x0801503d
 8015080:	080151cd 	.word	0x080151cd
 8015084:	080150f1 	.word	0x080150f1
 8015088:	080151af 	.word	0x080151af
 801508c:	0801503d 	.word	0x0801503d
 8015090:	0801503d 	.word	0x0801503d
 8015094:	080151ef 	.word	0x080151ef
 8015098:	0801503d 	.word	0x0801503d
 801509c:	080150f1 	.word	0x080150f1
 80150a0:	0801503d 	.word	0x0801503d
 80150a4:	0801503d 	.word	0x0801503d
 80150a8:	080151b7 	.word	0x080151b7
 80150ac:	680b      	ldr	r3, [r1, #0]
 80150ae:	1d1a      	adds	r2, r3, #4
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	600a      	str	r2, [r1, #0]
 80150b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80150b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150bc:	2301      	movs	r3, #1
 80150be:	e0a3      	b.n	8015208 <_printf_i+0x1f4>
 80150c0:	6825      	ldr	r5, [r4, #0]
 80150c2:	6808      	ldr	r0, [r1, #0]
 80150c4:	062e      	lsls	r6, r5, #24
 80150c6:	f100 0304 	add.w	r3, r0, #4
 80150ca:	d50a      	bpl.n	80150e2 <_printf_i+0xce>
 80150cc:	6805      	ldr	r5, [r0, #0]
 80150ce:	600b      	str	r3, [r1, #0]
 80150d0:	2d00      	cmp	r5, #0
 80150d2:	da03      	bge.n	80150dc <_printf_i+0xc8>
 80150d4:	232d      	movs	r3, #45	; 0x2d
 80150d6:	426d      	negs	r5, r5
 80150d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150dc:	485e      	ldr	r0, [pc, #376]	; (8015258 <_printf_i+0x244>)
 80150de:	230a      	movs	r3, #10
 80150e0:	e019      	b.n	8015116 <_printf_i+0x102>
 80150e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80150e6:	6805      	ldr	r5, [r0, #0]
 80150e8:	600b      	str	r3, [r1, #0]
 80150ea:	bf18      	it	ne
 80150ec:	b22d      	sxthne	r5, r5
 80150ee:	e7ef      	b.n	80150d0 <_printf_i+0xbc>
 80150f0:	680b      	ldr	r3, [r1, #0]
 80150f2:	6825      	ldr	r5, [r4, #0]
 80150f4:	1d18      	adds	r0, r3, #4
 80150f6:	6008      	str	r0, [r1, #0]
 80150f8:	0628      	lsls	r0, r5, #24
 80150fa:	d501      	bpl.n	8015100 <_printf_i+0xec>
 80150fc:	681d      	ldr	r5, [r3, #0]
 80150fe:	e002      	b.n	8015106 <_printf_i+0xf2>
 8015100:	0669      	lsls	r1, r5, #25
 8015102:	d5fb      	bpl.n	80150fc <_printf_i+0xe8>
 8015104:	881d      	ldrh	r5, [r3, #0]
 8015106:	4854      	ldr	r0, [pc, #336]	; (8015258 <_printf_i+0x244>)
 8015108:	2f6f      	cmp	r7, #111	; 0x6f
 801510a:	bf0c      	ite	eq
 801510c:	2308      	moveq	r3, #8
 801510e:	230a      	movne	r3, #10
 8015110:	2100      	movs	r1, #0
 8015112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015116:	6866      	ldr	r6, [r4, #4]
 8015118:	60a6      	str	r6, [r4, #8]
 801511a:	2e00      	cmp	r6, #0
 801511c:	bfa2      	ittt	ge
 801511e:	6821      	ldrge	r1, [r4, #0]
 8015120:	f021 0104 	bicge.w	r1, r1, #4
 8015124:	6021      	strge	r1, [r4, #0]
 8015126:	b90d      	cbnz	r5, 801512c <_printf_i+0x118>
 8015128:	2e00      	cmp	r6, #0
 801512a:	d04d      	beq.n	80151c8 <_printf_i+0x1b4>
 801512c:	4616      	mov	r6, r2
 801512e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015132:	fb03 5711 	mls	r7, r3, r1, r5
 8015136:	5dc7      	ldrb	r7, [r0, r7]
 8015138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801513c:	462f      	mov	r7, r5
 801513e:	42bb      	cmp	r3, r7
 8015140:	460d      	mov	r5, r1
 8015142:	d9f4      	bls.n	801512e <_printf_i+0x11a>
 8015144:	2b08      	cmp	r3, #8
 8015146:	d10b      	bne.n	8015160 <_printf_i+0x14c>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	07df      	lsls	r7, r3, #31
 801514c:	d508      	bpl.n	8015160 <_printf_i+0x14c>
 801514e:	6923      	ldr	r3, [r4, #16]
 8015150:	6861      	ldr	r1, [r4, #4]
 8015152:	4299      	cmp	r1, r3
 8015154:	bfde      	ittt	le
 8015156:	2330      	movle	r3, #48	; 0x30
 8015158:	f806 3c01 	strble.w	r3, [r6, #-1]
 801515c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015160:	1b92      	subs	r2, r2, r6
 8015162:	6122      	str	r2, [r4, #16]
 8015164:	f8cd a000 	str.w	sl, [sp]
 8015168:	464b      	mov	r3, r9
 801516a:	aa03      	add	r2, sp, #12
 801516c:	4621      	mov	r1, r4
 801516e:	4640      	mov	r0, r8
 8015170:	f7ff fee2 	bl	8014f38 <_printf_common>
 8015174:	3001      	adds	r0, #1
 8015176:	d14c      	bne.n	8015212 <_printf_i+0x1fe>
 8015178:	f04f 30ff 	mov.w	r0, #4294967295
 801517c:	b004      	add	sp, #16
 801517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015182:	4835      	ldr	r0, [pc, #212]	; (8015258 <_printf_i+0x244>)
 8015184:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015188:	6823      	ldr	r3, [r4, #0]
 801518a:	680e      	ldr	r6, [r1, #0]
 801518c:	061f      	lsls	r7, r3, #24
 801518e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015192:	600e      	str	r6, [r1, #0]
 8015194:	d514      	bpl.n	80151c0 <_printf_i+0x1ac>
 8015196:	07d9      	lsls	r1, r3, #31
 8015198:	bf44      	itt	mi
 801519a:	f043 0320 	orrmi.w	r3, r3, #32
 801519e:	6023      	strmi	r3, [r4, #0]
 80151a0:	b91d      	cbnz	r5, 80151aa <_printf_i+0x196>
 80151a2:	6823      	ldr	r3, [r4, #0]
 80151a4:	f023 0320 	bic.w	r3, r3, #32
 80151a8:	6023      	str	r3, [r4, #0]
 80151aa:	2310      	movs	r3, #16
 80151ac:	e7b0      	b.n	8015110 <_printf_i+0xfc>
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	f043 0320 	orr.w	r3, r3, #32
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	2378      	movs	r3, #120	; 0x78
 80151b8:	4828      	ldr	r0, [pc, #160]	; (801525c <_printf_i+0x248>)
 80151ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151be:	e7e3      	b.n	8015188 <_printf_i+0x174>
 80151c0:	065e      	lsls	r6, r3, #25
 80151c2:	bf48      	it	mi
 80151c4:	b2ad      	uxthmi	r5, r5
 80151c6:	e7e6      	b.n	8015196 <_printf_i+0x182>
 80151c8:	4616      	mov	r6, r2
 80151ca:	e7bb      	b.n	8015144 <_printf_i+0x130>
 80151cc:	680b      	ldr	r3, [r1, #0]
 80151ce:	6826      	ldr	r6, [r4, #0]
 80151d0:	6960      	ldr	r0, [r4, #20]
 80151d2:	1d1d      	adds	r5, r3, #4
 80151d4:	600d      	str	r5, [r1, #0]
 80151d6:	0635      	lsls	r5, r6, #24
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	d501      	bpl.n	80151e0 <_printf_i+0x1cc>
 80151dc:	6018      	str	r0, [r3, #0]
 80151de:	e002      	b.n	80151e6 <_printf_i+0x1d2>
 80151e0:	0671      	lsls	r1, r6, #25
 80151e2:	d5fb      	bpl.n	80151dc <_printf_i+0x1c8>
 80151e4:	8018      	strh	r0, [r3, #0]
 80151e6:	2300      	movs	r3, #0
 80151e8:	6123      	str	r3, [r4, #16]
 80151ea:	4616      	mov	r6, r2
 80151ec:	e7ba      	b.n	8015164 <_printf_i+0x150>
 80151ee:	680b      	ldr	r3, [r1, #0]
 80151f0:	1d1a      	adds	r2, r3, #4
 80151f2:	600a      	str	r2, [r1, #0]
 80151f4:	681e      	ldr	r6, [r3, #0]
 80151f6:	6862      	ldr	r2, [r4, #4]
 80151f8:	2100      	movs	r1, #0
 80151fa:	4630      	mov	r0, r6
 80151fc:	f7eb f828 	bl	8000250 <memchr>
 8015200:	b108      	cbz	r0, 8015206 <_printf_i+0x1f2>
 8015202:	1b80      	subs	r0, r0, r6
 8015204:	6060      	str	r0, [r4, #4]
 8015206:	6863      	ldr	r3, [r4, #4]
 8015208:	6123      	str	r3, [r4, #16]
 801520a:	2300      	movs	r3, #0
 801520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015210:	e7a8      	b.n	8015164 <_printf_i+0x150>
 8015212:	6923      	ldr	r3, [r4, #16]
 8015214:	4632      	mov	r2, r6
 8015216:	4649      	mov	r1, r9
 8015218:	4640      	mov	r0, r8
 801521a:	47d0      	blx	sl
 801521c:	3001      	adds	r0, #1
 801521e:	d0ab      	beq.n	8015178 <_printf_i+0x164>
 8015220:	6823      	ldr	r3, [r4, #0]
 8015222:	079b      	lsls	r3, r3, #30
 8015224:	d413      	bmi.n	801524e <_printf_i+0x23a>
 8015226:	68e0      	ldr	r0, [r4, #12]
 8015228:	9b03      	ldr	r3, [sp, #12]
 801522a:	4298      	cmp	r0, r3
 801522c:	bfb8      	it	lt
 801522e:	4618      	movlt	r0, r3
 8015230:	e7a4      	b.n	801517c <_printf_i+0x168>
 8015232:	2301      	movs	r3, #1
 8015234:	4632      	mov	r2, r6
 8015236:	4649      	mov	r1, r9
 8015238:	4640      	mov	r0, r8
 801523a:	47d0      	blx	sl
 801523c:	3001      	adds	r0, #1
 801523e:	d09b      	beq.n	8015178 <_printf_i+0x164>
 8015240:	3501      	adds	r5, #1
 8015242:	68e3      	ldr	r3, [r4, #12]
 8015244:	9903      	ldr	r1, [sp, #12]
 8015246:	1a5b      	subs	r3, r3, r1
 8015248:	42ab      	cmp	r3, r5
 801524a:	dcf2      	bgt.n	8015232 <_printf_i+0x21e>
 801524c:	e7eb      	b.n	8015226 <_printf_i+0x212>
 801524e:	2500      	movs	r5, #0
 8015250:	f104 0619 	add.w	r6, r4, #25
 8015254:	e7f5      	b.n	8015242 <_printf_i+0x22e>
 8015256:	bf00      	nop
 8015258:	0801f1fd 	.word	0x0801f1fd
 801525c:	0801f20e 	.word	0x0801f20e

08015260 <_read_r>:
 8015260:	b538      	push	{r3, r4, r5, lr}
 8015262:	4d07      	ldr	r5, [pc, #28]	; (8015280 <_read_r+0x20>)
 8015264:	4604      	mov	r4, r0
 8015266:	4608      	mov	r0, r1
 8015268:	4611      	mov	r1, r2
 801526a:	2200      	movs	r2, #0
 801526c:	602a      	str	r2, [r5, #0]
 801526e:	461a      	mov	r2, r3
 8015270:	f7eb ffa4 	bl	80011bc <_read>
 8015274:	1c43      	adds	r3, r0, #1
 8015276:	d102      	bne.n	801527e <_read_r+0x1e>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	b103      	cbz	r3, 801527e <_read_r+0x1e>
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	bd38      	pop	{r3, r4, r5, pc}
 8015280:	20002a08 	.word	0x20002a08

08015284 <__srget_r>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	460c      	mov	r4, r1
 8015288:	4605      	mov	r5, r0
 801528a:	b118      	cbz	r0, 8015294 <__srget_r+0x10>
 801528c:	6983      	ldr	r3, [r0, #24]
 801528e:	b90b      	cbnz	r3, 8015294 <__srget_r+0x10>
 8015290:	f7ff f8a6 	bl	80143e0 <__sinit>
 8015294:	4b0e      	ldr	r3, [pc, #56]	; (80152d0 <__srget_r+0x4c>)
 8015296:	429c      	cmp	r4, r3
 8015298:	d10d      	bne.n	80152b6 <__srget_r+0x32>
 801529a:	686c      	ldr	r4, [r5, #4]
 801529c:	4621      	mov	r1, r4
 801529e:	4628      	mov	r0, r5
 80152a0:	f000 f848 	bl	8015334 <__srefill_r>
 80152a4:	b988      	cbnz	r0, 80152ca <__srget_r+0x46>
 80152a6:	6863      	ldr	r3, [r4, #4]
 80152a8:	3b01      	subs	r3, #1
 80152aa:	6063      	str	r3, [r4, #4]
 80152ac:	6823      	ldr	r3, [r4, #0]
 80152ae:	1c5a      	adds	r2, r3, #1
 80152b0:	6022      	str	r2, [r4, #0]
 80152b2:	7818      	ldrb	r0, [r3, #0]
 80152b4:	bd38      	pop	{r3, r4, r5, pc}
 80152b6:	4b07      	ldr	r3, [pc, #28]	; (80152d4 <__srget_r+0x50>)
 80152b8:	429c      	cmp	r4, r3
 80152ba:	d101      	bne.n	80152c0 <__srget_r+0x3c>
 80152bc:	68ac      	ldr	r4, [r5, #8]
 80152be:	e7ed      	b.n	801529c <__srget_r+0x18>
 80152c0:	4b05      	ldr	r3, [pc, #20]	; (80152d8 <__srget_r+0x54>)
 80152c2:	429c      	cmp	r4, r3
 80152c4:	bf08      	it	eq
 80152c6:	68ec      	ldreq	r4, [r5, #12]
 80152c8:	e7e8      	b.n	801529c <__srget_r+0x18>
 80152ca:	f04f 30ff 	mov.w	r0, #4294967295
 80152ce:	e7f1      	b.n	80152b4 <__srget_r+0x30>
 80152d0:	0801f1a8 	.word	0x0801f1a8
 80152d4:	0801f1c8 	.word	0x0801f1c8
 80152d8:	0801f188 	.word	0x0801f188

080152dc <_fstat_r>:
 80152dc:	b538      	push	{r3, r4, r5, lr}
 80152de:	4d07      	ldr	r5, [pc, #28]	; (80152fc <_fstat_r+0x20>)
 80152e0:	2300      	movs	r3, #0
 80152e2:	4604      	mov	r4, r0
 80152e4:	4608      	mov	r0, r1
 80152e6:	4611      	mov	r1, r2
 80152e8:	602b      	str	r3, [r5, #0]
 80152ea:	f7eb fe3f 	bl	8000f6c <_fstat>
 80152ee:	1c43      	adds	r3, r0, #1
 80152f0:	d102      	bne.n	80152f8 <_fstat_r+0x1c>
 80152f2:	682b      	ldr	r3, [r5, #0]
 80152f4:	b103      	cbz	r3, 80152f8 <_fstat_r+0x1c>
 80152f6:	6023      	str	r3, [r4, #0]
 80152f8:	bd38      	pop	{r3, r4, r5, pc}
 80152fa:	bf00      	nop
 80152fc:	20002a08 	.word	0x20002a08

08015300 <_isatty_r>:
 8015300:	b538      	push	{r3, r4, r5, lr}
 8015302:	4d06      	ldr	r5, [pc, #24]	; (801531c <_isatty_r+0x1c>)
 8015304:	2300      	movs	r3, #0
 8015306:	4604      	mov	r4, r0
 8015308:	4608      	mov	r0, r1
 801530a:	602b      	str	r3, [r5, #0]
 801530c:	f7eb fe3e 	bl	8000f8c <_isatty>
 8015310:	1c43      	adds	r3, r0, #1
 8015312:	d102      	bne.n	801531a <_isatty_r+0x1a>
 8015314:	682b      	ldr	r3, [r5, #0]
 8015316:	b103      	cbz	r3, 801531a <_isatty_r+0x1a>
 8015318:	6023      	str	r3, [r4, #0]
 801531a:	bd38      	pop	{r3, r4, r5, pc}
 801531c:	20002a08 	.word	0x20002a08

08015320 <lflush>:
 8015320:	8983      	ldrh	r3, [r0, #12]
 8015322:	f003 0309 	and.w	r3, r3, #9
 8015326:	2b09      	cmp	r3, #9
 8015328:	d101      	bne.n	801532e <lflush+0xe>
 801532a:	f7fe bfef 	b.w	801430c <fflush>
 801532e:	2000      	movs	r0, #0
 8015330:	4770      	bx	lr
	...

08015334 <__srefill_r>:
 8015334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015336:	460c      	mov	r4, r1
 8015338:	4605      	mov	r5, r0
 801533a:	b118      	cbz	r0, 8015344 <__srefill_r+0x10>
 801533c:	6983      	ldr	r3, [r0, #24]
 801533e:	b90b      	cbnz	r3, 8015344 <__srefill_r+0x10>
 8015340:	f7ff f84e 	bl	80143e0 <__sinit>
 8015344:	4b3b      	ldr	r3, [pc, #236]	; (8015434 <__srefill_r+0x100>)
 8015346:	429c      	cmp	r4, r3
 8015348:	d10a      	bne.n	8015360 <__srefill_r+0x2c>
 801534a:	686c      	ldr	r4, [r5, #4]
 801534c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015350:	2300      	movs	r3, #0
 8015352:	6063      	str	r3, [r4, #4]
 8015354:	89a3      	ldrh	r3, [r4, #12]
 8015356:	069e      	lsls	r6, r3, #26
 8015358:	d50c      	bpl.n	8015374 <__srefill_r+0x40>
 801535a:	f04f 30ff 	mov.w	r0, #4294967295
 801535e:	e066      	b.n	801542e <__srefill_r+0xfa>
 8015360:	4b35      	ldr	r3, [pc, #212]	; (8015438 <__srefill_r+0x104>)
 8015362:	429c      	cmp	r4, r3
 8015364:	d101      	bne.n	801536a <__srefill_r+0x36>
 8015366:	68ac      	ldr	r4, [r5, #8]
 8015368:	e7f0      	b.n	801534c <__srefill_r+0x18>
 801536a:	4b34      	ldr	r3, [pc, #208]	; (801543c <__srefill_r+0x108>)
 801536c:	429c      	cmp	r4, r3
 801536e:	bf08      	it	eq
 8015370:	68ec      	ldreq	r4, [r5, #12]
 8015372:	e7eb      	b.n	801534c <__srefill_r+0x18>
 8015374:	0758      	lsls	r0, r3, #29
 8015376:	d448      	bmi.n	801540a <__srefill_r+0xd6>
 8015378:	06d9      	lsls	r1, r3, #27
 801537a:	d405      	bmi.n	8015388 <__srefill_r+0x54>
 801537c:	2309      	movs	r3, #9
 801537e:	602b      	str	r3, [r5, #0]
 8015380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015384:	81a3      	strh	r3, [r4, #12]
 8015386:	e7e8      	b.n	801535a <__srefill_r+0x26>
 8015388:	071a      	lsls	r2, r3, #28
 801538a:	d50b      	bpl.n	80153a4 <__srefill_r+0x70>
 801538c:	4621      	mov	r1, r4
 801538e:	4628      	mov	r0, r5
 8015390:	f7fe ff80 	bl	8014294 <_fflush_r>
 8015394:	2800      	cmp	r0, #0
 8015396:	d1e0      	bne.n	801535a <__srefill_r+0x26>
 8015398:	89a3      	ldrh	r3, [r4, #12]
 801539a:	60a0      	str	r0, [r4, #8]
 801539c:	f023 0308 	bic.w	r3, r3, #8
 80153a0:	81a3      	strh	r3, [r4, #12]
 80153a2:	61a0      	str	r0, [r4, #24]
 80153a4:	89a3      	ldrh	r3, [r4, #12]
 80153a6:	f043 0304 	orr.w	r3, r3, #4
 80153aa:	81a3      	strh	r3, [r4, #12]
 80153ac:	6923      	ldr	r3, [r4, #16]
 80153ae:	b91b      	cbnz	r3, 80153b8 <__srefill_r+0x84>
 80153b0:	4621      	mov	r1, r4
 80153b2:	4628      	mov	r0, r5
 80153b4:	f7ff fc1a 	bl	8014bec <__smakebuf_r>
 80153b8:	89a6      	ldrh	r6, [r4, #12]
 80153ba:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80153be:	07b3      	lsls	r3, r6, #30
 80153c0:	d00f      	beq.n	80153e2 <__srefill_r+0xae>
 80153c2:	2301      	movs	r3, #1
 80153c4:	81a3      	strh	r3, [r4, #12]
 80153c6:	4b1e      	ldr	r3, [pc, #120]	; (8015440 <__srefill_r+0x10c>)
 80153c8:	491e      	ldr	r1, [pc, #120]	; (8015444 <__srefill_r+0x110>)
 80153ca:	6818      	ldr	r0, [r3, #0]
 80153cc:	f006 0609 	and.w	r6, r6, #9
 80153d0:	f7ff f884 	bl	80144dc <_fwalk>
 80153d4:	2e09      	cmp	r6, #9
 80153d6:	81a7      	strh	r7, [r4, #12]
 80153d8:	d103      	bne.n	80153e2 <__srefill_r+0xae>
 80153da:	4621      	mov	r1, r4
 80153dc:	4628      	mov	r0, r5
 80153de:	f7fe fed3 	bl	8014188 <__sflush_r>
 80153e2:	6922      	ldr	r2, [r4, #16]
 80153e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80153e6:	6963      	ldr	r3, [r4, #20]
 80153e8:	6a21      	ldr	r1, [r4, #32]
 80153ea:	6022      	str	r2, [r4, #0]
 80153ec:	4628      	mov	r0, r5
 80153ee:	47b0      	blx	r6
 80153f0:	2800      	cmp	r0, #0
 80153f2:	6060      	str	r0, [r4, #4]
 80153f4:	dc1c      	bgt.n	8015430 <__srefill_r+0xfc>
 80153f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153fa:	bf17      	itett	ne
 80153fc:	2200      	movne	r2, #0
 80153fe:	f043 0320 	orreq.w	r3, r3, #32
 8015402:	6062      	strne	r2, [r4, #4]
 8015404:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8015408:	e7bc      	b.n	8015384 <__srefill_r+0x50>
 801540a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801540c:	2900      	cmp	r1, #0
 801540e:	d0cd      	beq.n	80153ac <__srefill_r+0x78>
 8015410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015414:	4299      	cmp	r1, r3
 8015416:	d002      	beq.n	801541e <__srefill_r+0xea>
 8015418:	4628      	mov	r0, r5
 801541a:	f7ff f903 	bl	8014624 <_free_r>
 801541e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015420:	6063      	str	r3, [r4, #4]
 8015422:	2000      	movs	r0, #0
 8015424:	6360      	str	r0, [r4, #52]	; 0x34
 8015426:	2b00      	cmp	r3, #0
 8015428:	d0c0      	beq.n	80153ac <__srefill_r+0x78>
 801542a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801542c:	6023      	str	r3, [r4, #0]
 801542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015430:	2000      	movs	r0, #0
 8015432:	e7fc      	b.n	801542e <__srefill_r+0xfa>
 8015434:	0801f1a8 	.word	0x0801f1a8
 8015438:	0801f1c8 	.word	0x0801f1c8
 801543c:	0801f188 	.word	0x0801f188
 8015440:	0801f1e8 	.word	0x0801f1e8
 8015444:	08015321 	.word	0x08015321

08015448 <_init>:
 8015448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801544a:	bf00      	nop
 801544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801544e:	bc08      	pop	{r3}
 8015450:	469e      	mov	lr, r3
 8015452:	4770      	bx	lr

08015454 <_fini>:
 8015454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015456:	bf00      	nop
 8015458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801545a:	bc08      	pop	{r3}
 801545c:	469e      	mov	lr, r3
 801545e:	4770      	bx	lr
