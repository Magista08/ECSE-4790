
LAB-02-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800313c  0800313c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080031b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001c8  080031b4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010826  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e17  00000000  00000000  000308c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008c41  00000000  00000000  000326db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0003b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  0003bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce01  00000000  00000000  0003ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100b8  00000000  00000000  00069809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011378c  00000000  00000000  000798c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018d04d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a8  00000000  00000000  0018d0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  0018f848  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  0018f8b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003010 	.word	0x08003010

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003010 	.word	0x08003010

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <Init_Timer>:
	// Looks like HAL hid this little gem, this register isn't mentioned in
	//   the STM32F7 ARM Reference Manual....
	// NVIC->ISER = ???
	// Not sure for that,doubt for the correctness for the interrupt

	NVIC->ISER[1] |= 0x00400000; // TIM6 posi is at 54
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <Init_Timer+0x40>)
 80005da:	6853      	ldr	r3, [r2, #4]
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e0:	6053      	str	r3, [r2, #4]

	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <Init_Timer+0x44>)
 80005e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
	asm ( "nop" );
 80005ec:	bf00      	nop
	asm ( "nop" );
 80005ee:	bf00      	nop

	// Set pre-scaler to slow down ticlks
	TIM6->PSC   = 10800;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <Init_Timer+0x48>)
 80005f2:	f642 2230 	movw	r2, #10800	; 0x2a30
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the Auto-reload Value for 10Hz overflow
	TIM6->ARR   = 20000;
 80005f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c

	// Generate update events to auto reload.
	TIM6->EGR  |= 0x0001U;
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	f042 0201 	orr.w	r2, r2, #1
 8000604:	615a      	str	r2, [r3, #20]

	// Enable Update Interrupts.
	TIM6->DIER |= 0x0001U;
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	60da      	str	r2, [r3, #12]

	// Start the timer.
	// TIM6->CR1
	TIM6->CR1 |= 0x0001U;
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	f042 0201 	orr.w	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100
 800061c:	40023800 	.word	0x40023800
 8000620:	40001000 	.word	0x40001000

08000624 <HAL_Init_GPIO>:

//HAL Version (TIM7)
void HAL_Init_GPIO(){
 8000624:	b510      	push	{r4, lr}
 8000626:	b082      	sub	sp, #8
	//Enable TIM7
	htim7.Instance = TIM7;
 8000628:	4c11      	ldr	r4, [pc, #68]	; (8000670 <HAL_Init_GPIO+0x4c>)
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_Init_GPIO+0x50>)
 800062c:	6023      	str	r3, [r4, #0]
	htim7.Init.Prescaler = 10800; //
 800062e:	f642 2330 	movw	r3, #10800	; 0x2a30
 8000632:	6063      	str	r3, [r4, #4]
	htim7.Init.Period = 20000; //2HZ / 20 = 0.1Hz = 10s
 8000634:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000638:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	2100      	movs	r1, #0
 800063c:	60a1      	str	r1, [r4, #8]
	__HAL_RCC_TIM7_CLK_ENABLE();
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_Init_GPIO+0x54>)
 8000640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000642:	f042 0220 	orr.w	r2, r2, #32
 8000646:	641a      	str	r2, [r3, #64]	; 0x40
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f003 0320 	and.w	r3, r3, #32
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	9b01      	ldr	r3, [sp, #4]

	HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000652:	460a      	mov	r2, r1
 8000654:	2037      	movs	r0, #55	; 0x37
 8000656:	f000 faa5 	bl	8000ba4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800065a:	2037      	movs	r0, #55	; 0x37
 800065c:	f000 fad4 	bl	8000c08 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Init(&htim7);
 8000660:	4620      	mov	r0, r4
 8000662:	f001 f905 	bl	8001870 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 8000666:	4620      	mov	r0, r4
 8000668:	f000 ff94 	bl	8001594 <HAL_TIM_Base_Start_IT>

}
 800066c:	b002      	add	sp, #8
 800066e:	bd10      	pop	{r4, pc}
 8000670:	20000174 	.word	0x20000174
 8000674:	40001400 	.word	0x40001400
 8000678:	40023800 	.word	0x40023800

0800067c <Init_GPIO>:


void Init_GPIO() {
 800067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000680:	b088      	sub	sp, #32
	//RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
	// or __HAL_RCC_SYSCFG_CLK_ENABLE();

	// Enable the RCC clock by HAL
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <Init_GPIO+0xc8>)
 8000684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800068a:	645a      	str	r2, [r3, #68]	; 0x44
 800068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800068e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8000696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
 800069e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	f042 0201 	orr.w	r2, r2, #1
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	9b02      	ldr	r3, [sp, #8]
	// Delay after an RCC peripheral clock enabling
	asm ("nop");
 80006ba:	bf00      	nop
	asm ("nop");
 80006bc:	bf00      	nop

	// Set Pin 13/5 to output. (LED1 and LED2)
	// Enable the output LED1
	GPIO_InitStruct.Pin   = GPIO_PIN_13;
 80006be:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 80006c2:	f8cd a00c 	str.w	sl, [sp, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80006c6:	2501      	movs	r5, #1
 80006c8:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80006ca:	2400      	movs	r4, #0
 80006cc:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006ce:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80006d0:	4e1d      	ldr	r6, [pc, #116]	; (8000748 <Init_GPIO+0xcc>)
 80006d2:	a903      	add	r1, sp, #12
 80006d4:	4630      	mov	r0, r6
 80006d6:	f000 fabb 	bl	8000c50 <HAL_GPIO_Init>

	// Enable the output LED2
	GPIO_InitStruct.Pin   = GPIO_PIN_5;
 80006da:	f04f 0920 	mov.w	r9, #32
 80006de:	f8cd 900c 	str.w	r9, [sp, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80006e2:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80006e4:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006e6:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80006e8:	a903      	add	r1, sp, #12
 80006ea:	4630      	mov	r0, r6
 80006ec:	f000 fab0 	bl	8000c50 <HAL_GPIO_Init>

	// Enable the output LED3
	GPIO_InitStruct.Pin   = GPIO_PIN_12;
 80006f0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80006f4:	f8cd 800c 	str.w	r8, [sp, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80006f8:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80006fa:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006fc:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	4f13      	ldr	r7, [pc, #76]	; (800074c <Init_GPIO+0xd0>)
 8000700:	a903      	add	r1, sp, #12
 8000702:	4638      	mov	r0, r7
 8000704:	f000 faa4 	bl	8000c50 <HAL_GPIO_Init>

	// Turn off LEDs
	HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_13, GPIO_PIN_RESET);
 8000708:	4622      	mov	r2, r4
 800070a:	4651      	mov	r1, sl
 800070c:	4630      	mov	r0, r6
 800070e:	f000 fb96 	bl	8000e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_5,  GPIO_PIN_RESET);
 8000712:	4622      	mov	r2, r4
 8000714:	4649      	mov	r1, r9
 8000716:	4630      	mov	r0, r6
 8000718:	f000 fb91 	bl	8000e3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 800071c:	4622      	mov	r2, r4
 800071e:	4641      	mov	r1, r8
 8000720:	4638      	mov	r0, r7
 8000722:	f000 fb8c 	bl	8000e3e <HAL_GPIO_WritePin>
	// By default pin PA0 will trigger the interrupt, change EXTICR1 to route proper pin
	//SYSCFG->EXTICR[0] // EXTICR1-4 are confusingly an array [0-3].

	// Set Pin 0 as input (button) with pull-down.
	//GPIOA->PUPDR
	GPIO_InitStruct.Pin  = GPIO_PIN_0;
 8000726:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <Init_GPIO+0xd4>)
 800072a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072c:	2302      	movs	r3, #2
 800072e:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	a903      	add	r1, sp, #12
 8000732:	4638      	mov	r0, r7
 8000734:	f000 fa8c 	bl	8000c50 <HAL_GPIO_Init>

	// And register for the falling edge.
	// EXTI->FTSR

	//HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000738:	2006      	movs	r0, #6
 800073a:	f000 fa65 	bl	8000c08 <HAL_NVIC_EnableIRQ>
}
 800073e:	b008      	add	sp, #32
 8000740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40022400 	.word	0x40022400
 800074c:	40020000 	.word	0x40020000
 8000750:	10110000 	.word	0x10110000

08000754 <TIM6_DAC_IRQHandler>:
//
//
// -- ISRs (IRQs) -------------
//

void TIM6_DAC_IRQHandler() {
 8000754:	b508      	push	{r3, lr}
	// Clear Interrupt Bit
	//TIM6->SR &= 0xFFFE;
	TIM6->SR = ~TIM_SR_UIF;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <TIM6_DAC_IRQHandler+0x24>)
 8000758:	f06f 0201 	mvn.w	r2, #1
 800075c:	611a      	str	r2, [r3, #16]

	// Other code here:
	HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_5);
 800075e:	2120      	movs	r1, #32
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <TIM6_DAC_IRQHandler+0x28>)
 8000762:	f000 fb72 	bl	8000e4a <HAL_GPIO_TogglePin>
	elapsed++;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <TIM6_DAC_IRQHandler+0x2c>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	3201      	adds	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
	printf("\rOverflows occurs, now the time is : %d ms", elapsed);
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <TIM6_DAC_IRQHandler+0x30>)
 8000772:	f001 ff2d 	bl	80025d0 <iprintf>

}
 8000776:	bd08      	pop	{r3, pc}
 8000778:	40001000 	.word	0x40001000
 800077c:	40022400 	.word	0x40022400
 8000780:	2000008c 	.word	0x2000008c
 8000784:	08003070 	.word	0x08003070

08000788 <TIM7_IRQHandler>:
void TIM7_IRQHandler(){
 8000788:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&htim7);
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <TIM7_IRQHandler+0xc>)
 800078c:	f000 ff1c 	bl	80015c8 <HAL_TIM_IRQHandler>
}
 8000790:	bd08      	pop	{r3, pc}
 8000792:	bf00      	nop
 8000794:	20000174 	.word	0x20000174

08000798 <EXTI0_IRQHandler>:
	// Other code here:

}

//HAL - GPIO/EXTI Handler
void EXTI0_IRQHandler() {
 8000798:	b508      	push	{r3, lr}
	//HAL_GPIO_EXTI_IRQHandler(???);
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fb5e 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
}
 80007a0:	bd08      	pop	{r3, pc}
	...

080007a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007a4:	b508      	push	{r3, lr}
	// ISR code here.
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80007a6:	2101      	movs	r1, #1
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80007aa:	f000 fb41 	bl	8000e30 <HAL_GPIO_ReadPin>
 80007ae:	b900      	cbnz	r0, 80007b2 <HAL_GPIO_EXTI_Callback+0xe>
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_13);
	}
}
 80007b0:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_13);
 80007b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x20>)
 80007b8:	f000 fb47 	bl	8000e4a <HAL_GPIO_TogglePin>
}
 80007bc:	e7f8      	b.n	80007b0 <HAL_GPIO_EXTI_Callback+0xc>
 80007be:	bf00      	nop
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40022400 	.word	0x40022400

080007c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c8:	b508      	push	{r3, lr}
	if (htim->Instance == TIM7){
 80007ca:	6802      	ldr	r2, [r0, #0]
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d000      	beq.n	80007d4 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
		timeUpdated++;
		printf("\rOverflows occurs, now the time is : %d ms", timeUpdated);
	}
}
 80007d2:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007da:	f000 fb36 	bl	8000e4a <HAL_GPIO_TogglePin>
		timeUpdated++;
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007e0:	7913      	ldrb	r3, [r2, #4]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	7113      	strb	r3, [r2, #4]
		printf("\rOverflows occurs, now the time is : %d ms", timeUpdated);
 80007e8:	7911      	ldrb	r1, [r2, #4]
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007ec:	f001 fef0 	bl	80025d0 <iprintf>
}
 80007f0:	e7ef      	b.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80007f2:	bf00      	nop
 80007f4:	40001400 	.word	0x40001400
 80007f8:	40020000 	.word	0x40020000
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	08003070 	.word	0x08003070

08000804 <flash_screen>:

// Assitance Function

void flash_screen(){
 8000804:	b508      	push	{r3, lr}
	printf("\033[30;47m"); // Erase screen & move cursor to home position
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <flash_screen+0x14>)
 8000808:	f001 fee2 	bl	80025d0 <iprintf>
	//printf("\033[0;44m");       // Let the screen become blue.
	//printf("\033[2J\033[;H");
	fflush(stdout);
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <flash_screen+0x18>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6898      	ldr	r0, [r3, #8]
 8000812:	f001 fcfb 	bl	800220c <fflush>
}
 8000816:	bd08      	pop	{r3, pc}
 8000818:	08003040 	.word	0x08003040
 800081c:	2000000c 	.word	0x2000000c

08000820 <main>:
int main() {
 8000820:	b508      	push	{r3, lr}
	Sys_Init();
 8000822:	f000 f87f 	bl	8000924 <Sys_Init>
	HAL_Init();
 8000826:	f000 f983 	bl	8000b30 <HAL_Init>
	Init_Timer();
 800082a:	f7ff fed5 	bl	80005d8 <Init_Timer>
	HAL_Init_GPIO();
 800082e:	f7ff fef9 	bl	8000624 <HAL_Init_GPIO>
	Init_GPIO();
 8000832:	f7ff ff23 	bl	800067c <Init_GPIO>
	flash_screen();
 8000836:	f7ff ffe5 	bl	8000804 <flash_screen>
	while(1);
 800083a:	e7fe      	b.n	800083a <main+0x1a>

0800083c <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 800083c:	b500      	push	{lr}
 800083e:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000848:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000852:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000854:	2219      	movs	r2, #25
 8000856:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000858:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800085c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000860:	2309      	movs	r3, #9
 8000862:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000864:	2307      	movs	r3, #7
 8000866:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000868:	4668      	mov	r0, sp
 800086a:	f000 fb43 	bl	8000ef4 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800086e:	b100      	cbz	r0, 8000872 <SystemClock_Config+0x36>
    while(1) { ; }
 8000870:	e7fe      	b.n	8000870 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000872:	f000 fb01 	bl	8000e78 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000876:	b100      	cbz	r0, 800087a <SystemClock_Config+0x3e>
    while(1) { ; }
 8000878:	e7fe      	b.n	8000878 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800087a:	230f      	movs	r3, #15
 800087c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000892:	2107      	movs	r1, #7
 8000894:	a80d      	add	r0, sp, #52	; 0x34
 8000896:	f000 fd9f 	bl	80013d8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800089a:	b100      	cbz	r0, 800089e <SystemClock_Config+0x62>
    while(1) { ; }
 800089c:	e7fe      	b.n	800089c <SystemClock_Config+0x60>
  }
}
 800089e:	b013      	add	sp, #76	; 0x4c
 80008a0:	f85d fb04 	ldr.w	pc, [sp], #4

080008a4 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80008a4:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008aa:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <CPU_CACHE_Enable+0x7c>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ba:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008c4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ca:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008ce:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008d6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008da:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80008de:	e000      	b.n	80008e2 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80008e0:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e2:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ea:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80008ee:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80008f2:	4c0b      	ldr	r4, [pc, #44]	; (8000920 <CPU_CACHE_Enable+0x7c>)
 80008f4:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 80008f8:	460b      	mov	r3, r1
 80008fa:	3901      	subs	r1, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f2      	bne.n	80008e6 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 8000900:	1e53      	subs	r3, r2, #1
 8000902:	2a00      	cmp	r2, #0
 8000904:	d1ec      	bne.n	80008e0 <CPU_CACHE_Enable+0x3c>
 8000906:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000910:	6163      	str	r3, [r4, #20]
 8000912:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000916:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800091a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000924:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000926:	f7ff ffbd 	bl	80008a4 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800092a:	f000 f901 	bl	8000b30 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800092e:	f7ff ff85 	bl	800083c <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <Sys_Init+0x1c>)
 8000934:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <Sys_Init+0x20>)
 800093a:	f000 f873 	bl	8000a24 <initUart>
}
 800093e:	bd08      	pop	{r3, pc}
 8000940:	40011000 	.word	0x40011000
 8000944:	200000b4 	.word	0x200000b4

08000948 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000948:	b508      	push	{r3, lr}
  HAL_IncTick();
 800094a:	f000 f907 	bl	8000b5c <HAL_IncTick>
}
 800094e:	bd08      	pop	{r3, pc}

08000950 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000950:	b530      	push	{r4, r5, lr}
 8000952:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <HAL_UART_MspInit+0xc0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d004      	beq.n	8000966 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_UART_MspInit+0xc4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d02c      	beq.n	80009bc <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000962:	b00b      	add	sp, #44	; 0x2c
 8000964:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000966:	4c2c      	ldr	r4, [pc, #176]	; (8000a18 <HAL_UART_MspInit+0xc8>)
 8000968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6323      	str	r3, [r4, #48]	; 0x30
 8000970:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000984:	2301      	movs	r3, #1
 8000986:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098c:	2307      	movs	r3, #7
 800098e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000990:	4d22      	ldr	r5, [pc, #136]	; (8000a1c <HAL_UART_MspInit+0xcc>)
 8000992:	a905      	add	r1, sp, #20
 8000994:	4628      	mov	r0, r5
 8000996:	f000 f95b 	bl	8000c50 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80009a0:	a905      	add	r1, sp, #20
 80009a2:	4628      	mov	r0, r5
 80009a4:	f000 f954 	bl	8000c50 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80009a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6463      	str	r3, [r4, #68]	; 0x44
 80009b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	9b02      	ldr	r3, [sp, #8]
 80009ba:	e7d2      	b.n	8000962 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80009bc:	4c16      	ldr	r4, [pc, #88]	; (8000a18 <HAL_UART_MspInit+0xc8>)
 80009be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6323      	str	r3, [r4, #48]	; 0x30
 80009c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	9303      	str	r3, [sp, #12]
 80009ce:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009e0:	2308      	movs	r3, #8
 80009e2:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80009e4:	4d0e      	ldr	r5, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0xd0>)
 80009e6:	a905      	add	r1, sp, #20
 80009e8:	4628      	mov	r0, r5
 80009ea:	f000 f931 	bl	8000c50 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80009f2:	a905      	add	r1, sp, #20
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 f92b 	bl	8000c50 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80009fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	6463      	str	r3, [r4, #68]	; 0x44
 8000a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	9304      	str	r3, [sp, #16]
 8000a0a:	9b04      	ldr	r3, [sp, #16]
}
 8000a0c:	e7a9      	b.n	8000962 <HAL_UART_MspInit+0x12>
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40011400 	.word	0x40011400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020800 	.word	0x40020800

08000a24 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000a24:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000a26:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000a28:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000a2e:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000a30:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000a32:	210c      	movs	r1, #12
 8000a34:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a36:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000a38:	f001 faf4 	bl	8002024 <HAL_UART_Init>
}
 8000a3c:	bd08      	pop	{r3, pc}
	...

08000a40 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000a40:	b510      	push	{r4, lr}
 8000a42:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	b292      	uxth	r2, r2
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <_write+0x14>)
 8000a4c:	f001 f9b4 	bl	8001db8 <HAL_UART_Transmit>
	return len;
}
 8000a50:	4620      	mov	r0, r4
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	200000b4 	.word	0x200000b4

08000a58 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000a58:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	2201      	movs	r2, #1
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <_read+0x18>)
 8000a66:	f001 fa14 	bl	8001e92 <HAL_UART_Receive>
	return len;
}
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	bd08      	pop	{r3, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000b4 	.word	0x200000b4

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a7a:	e003      	b.n	8000a84 <LoopCopyDataInit>

08000a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a82:	3104      	adds	r1, #4

08000a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a8c:	d3f6      	bcc.n	8000a7c <CopyDataInit>
  ldr  r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a90:	e002      	b.n	8000a98 <LoopFillZerobss>

08000a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a94:	f842 3b04 	str.w	r3, [r2], #4

08000a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a9c:	d3f9      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9e:	f000 f813 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f001 fcbb 	bl	800241c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff febb 	bl	8000820 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000ab0:	08003144 	.word	0x08003144
  ldr  r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ab8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ac0:	200001c8 	.word	0x200001c8

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SystemInit+0x18>)
 8000aca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ace:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ada:	609a      	str	r2, [r3, #8]
#endif
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_InitTick+0x40>)
 8000aee:	7818      	ldrb	r0, [r3, #0]
 8000af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_InitTick+0x44>)
 8000afa:	6810      	ldr	r0, [r2, #0]
 8000afc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b00:	f000 f890 	bl	8000c24 <HAL_SYSTICK_Config>
 8000b04:	b968      	cbnz	r0, 8000b22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	2c0f      	cmp	r4, #15
 8000b08:	d901      	bls.n	8000b0e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	e00a      	b.n	8000b24 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4621      	mov	r1, r4
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f000 f845 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1a:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_InitTick+0x40>)
 8000b1c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2000      	movs	r0, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b22:	2001      	movs	r0, #1
}
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	bf00      	nop
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	20000000 	.word	0x20000000

08000b30 <HAL_Init>:
{
 8000b30:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_Init+0x28>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f81b 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff ffcc 	bl	8000ae8 <HAL_InitTick>
  HAL_MspInit();
 8000b50:	f7ff ffc8 	bl	8000ae4 <HAL_MspInit>
}
 8000b54:	2000      	movs	r0, #0
 8000b56:	bd08      	pop	{r3, pc}
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <HAL_IncTick+0x10>)
 8000b5e:	6811      	ldr	r1, [r2, #0]
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_IncTick+0x14>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	440b      	add	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001b4 	.word	0x200001b4
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b74:	4b01      	ldr	r3, [pc, #4]	; (8000b7c <HAL_GetTick+0x8>)
 8000b76:	6818      	ldr	r0, [r3, #0]
}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200001b4 	.word	0x200001b4

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4906      	ldr	r1, [pc, #24]	; (8000b9c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000b82:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b88:	041b      	lsls	r3, r3, #16
 8000b8a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	0200      	lsls	r0, r0, #8
 8000b8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b92:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b94:	4a02      	ldr	r2, [pc, #8]	; (8000ba0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b96:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000b98:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0000 	.word	0x05fa0000

08000ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_NVIC_SetPriority+0x58>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bae:	f1c3 0407 	rsb	r4, r3, #7
 8000bb2:	2c04      	cmp	r4, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb8:	1d1d      	adds	r5, r3, #4
 8000bba:	2d06      	cmp	r5, #6
 8000bbc:	d914      	bls.n	8000be8 <HAL_NVIC_SetPriority+0x44>
 8000bbe:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8000bc4:	fa05 f404 	lsl.w	r4, r5, r4
 8000bc8:	ea21 0104 	bic.w	r1, r1, r4
 8000bcc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bce:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	db07      	blt.n	8000bec <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	0109      	lsls	r1, r1, #4
 8000bde:	b2c9      	uxtb	r1, r1
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_NVIC_SetPriority+0x5c>)
 8000be2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000be4:	bc30      	pop	{r4, r5}
 8000be6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be8:	2300      	movs	r3, #0
 8000bea:	e7e9      	b.n	8000bc0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	f000 000f 	and.w	r0, r0, #15
 8000bf0:	0109      	lsls	r1, r1, #4
 8000bf2:	b2c9      	uxtb	r1, r1
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_NVIC_SetPriority+0x60>)
 8000bf6:	5419      	strb	r1, [r3, r0]
 8000bf8:	e7f4      	b.n	8000be4 <HAL_NVIC_SetPriority+0x40>
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	e000e400 	.word	0xe000e400
 8000c04:	e000ed14 	.word	0xe000ed14

08000c08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	db07      	blt.n	8000c1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0c:	f000 021f 	and.w	r2, r0, #31
 8000c10:	0940      	lsrs	r0, r0, #5
 8000c12:	2301      	movs	r3, #1
 8000c14:	4093      	lsls	r3, r2
 8000c16:	4a02      	ldr	r2, [pc, #8]	; (8000c20 <HAL_NVIC_EnableIRQ+0x18>)
 8000c18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	3801      	subs	r0, #1
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d20a      	bcs.n	8000c42 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_SYSTICK_Config+0x24>)
 8000c2e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_SYSTICK_Config+0x28>)
 8000c32:	21f0      	movs	r1, #240	; 0xf0
 8000c34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	2000      	movs	r0, #0
 8000c3a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	2b0f      	cmp	r3, #15
 8000c54:	f200 80e3 	bhi.w	8000e1e <HAL_GPIO_Init+0x1ce>
{
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	e039      	b.n	8000cd2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5e:	2209      	movs	r2, #9
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000c62:	2200      	movs	r2, #0
 8000c64:	40b2      	lsls	r2, r6
 8000c66:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c68:	3402      	adds	r4, #2
 8000c6a:	4e6d      	ldr	r6, [pc, #436]	; (8000e20 <HAL_GPIO_Init+0x1d0>)
 8000c6c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c70:	4a6c      	ldr	r2, [pc, #432]	; (8000e24 <HAL_GPIO_Init+0x1d4>)
 8000c72:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c74:	43ea      	mvns	r2, r5
 8000c76:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7a:	684f      	ldr	r7, [r1, #4]
 8000c7c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c80:	d001      	beq.n	8000c86 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000c82:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000c86:	4c67      	ldr	r4, [pc, #412]	; (8000e24 <HAL_GPIO_Init+0x1d4>)
 8000c88:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000c8a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c8c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c90:	684f      	ldr	r7, [r1, #4]
 8000c92:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c96:	d001      	beq.n	8000c9c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000c98:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000c9c:	4c61      	ldr	r4, [pc, #388]	; (8000e24 <HAL_GPIO_Init+0x1d4>)
 8000c9e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ca2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca6:	684f      	ldr	r7, [r1, #4]
 8000ca8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000cac:	d001      	beq.n	8000cb2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000cae:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000cb2:	4c5c      	ldr	r4, [pc, #368]	; (8000e24 <HAL_GPIO_Init+0x1d4>)
 8000cb4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000cb6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cba:	684e      	ldr	r6, [r1, #4]
 8000cbc:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000cc0:	d001      	beq.n	8000cc6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000cc2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000cc6:	4c57      	ldr	r4, [pc, #348]	; (8000e24 <HAL_GPIO_Init+0x1d4>)
 8000cc8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cca:	3301      	adds	r3, #1
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	f200 80a4 	bhi.w	8000e1a <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	680c      	ldr	r4, [r1, #0]
 8000cd8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000cdc:	ea32 0404 	bics.w	r4, r2, r4
 8000ce0:	d1f3      	bne.n	8000cca <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce2:	684c      	ldr	r4, [r1, #4]
 8000ce4:	1e66      	subs	r6, r4, #1
 8000ce6:	2c11      	cmp	r4, #17
 8000ce8:	bf18      	it	ne
 8000cea:	2e01      	cmpne	r6, #1
 8000cec:	d901      	bls.n	8000cf2 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cee:	2c12      	cmp	r4, #18
 8000cf0:	d112      	bne.n	8000d18 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000cf2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cf4:	005f      	lsls	r7, r3, #1
 8000cf6:	2403      	movs	r4, #3
 8000cf8:	40bc      	lsls	r4, r7
 8000cfa:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cfe:	68cc      	ldr	r4, [r1, #12]
 8000d00:	40bc      	lsls	r4, r7
 8000d02:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d04:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d06:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d08:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d0c:	684c      	ldr	r4, [r1, #4]
 8000d0e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000d16:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d18:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d1a:	005e      	lsls	r6, r3, #1
 8000d1c:	2403      	movs	r4, #3
 8000d1e:	40b4      	lsls	r4, r6
 8000d20:	43e2      	mvns	r2, r4
 8000d22:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d26:	688c      	ldr	r4, [r1, #8]
 8000d28:	40b4      	lsls	r4, r6
 8000d2a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000d2c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2e:	684c      	ldr	r4, [r1, #4]
 8000d30:	2c12      	cmp	r4, #18
 8000d32:	bf18      	it	ne
 8000d34:	2c02      	cmpne	r4, #2
 8000d36:	d113      	bne.n	8000d60 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000d38:	08df      	lsrs	r7, r3, #3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d40:	f003 0407 	and.w	r4, r3, #7
 8000d44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000d48:	240f      	movs	r4, #15
 8000d4a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d4e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d52:	690c      	ldr	r4, [r1, #16]
 8000d54:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d58:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d5c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000d60:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d62:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d64:	684a      	ldr	r2, [r1, #4]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	40b2      	lsls	r2, r6
 8000d6c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d6e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d70:	684a      	ldr	r2, [r1, #4]
 8000d72:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d76:	d0a8      	beq.n	8000cca <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <HAL_GPIO_Init+0x1d8>)
 8000d7a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000d7c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d80:	6454      	str	r4, [r2, #68]	; 0x44
 8000d82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d88:	9201      	str	r2, [sp, #4]
 8000d8a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d8c:	089c      	lsrs	r4, r3, #2
 8000d8e:	1ca6      	adds	r6, r4, #2
 8000d90:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_GPIO_Init+0x1d0>)
 8000d92:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d96:	f003 0203 	and.w	r2, r3, #3
 8000d9a:	0096      	lsls	r6, r2, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	40b2      	lsls	r2, r6
 8000da0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_GPIO_Init+0x1dc>)
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f43f af5b 	beq.w	8000c62 <HAL_GPIO_Init+0x12>
 8000dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d022      	beq.n	8000dfa <HAL_GPIO_Init+0x1aa>
 8000db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db8:	4290      	cmp	r0, r2
 8000dba:	d020      	beq.n	8000dfe <HAL_GPIO_Init+0x1ae>
 8000dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d01e      	beq.n	8000e02 <HAL_GPIO_Init+0x1b2>
 8000dc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	d01c      	beq.n	8000e06 <HAL_GPIO_Init+0x1b6>
 8000dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	d01a      	beq.n	8000e0a <HAL_GPIO_Init+0x1ba>
 8000dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d018      	beq.n	8000e0e <HAL_GPIO_Init+0x1be>
 8000ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d016      	beq.n	8000e12 <HAL_GPIO_Init+0x1c2>
 8000de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de8:	4290      	cmp	r0, r2
 8000dea:	d014      	beq.n	8000e16 <HAL_GPIO_Init+0x1c6>
 8000dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f43f af34 	beq.w	8000c5e <HAL_GPIO_Init+0xe>
 8000df6:	220a      	movs	r2, #10
 8000df8:	e734      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	e732      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000dfe:	2202      	movs	r2, #2
 8000e00:	e730      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e02:	2203      	movs	r2, #3
 8000e04:	e72e      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e06:	2204      	movs	r2, #4
 8000e08:	e72c      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	e72a      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e0e:	2206      	movs	r2, #6
 8000e10:	e728      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e12:	2207      	movs	r2, #7
 8000e14:	e726      	b.n	8000c64 <HAL_GPIO_Init+0x14>
 8000e16:	2208      	movs	r2, #8
 8000e18:	e724      	b.n	8000c64 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000e1a:	b003      	add	sp, #12
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	4770      	bx	lr
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40013c00 	.word	0x40013c00
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e30:	6903      	ldr	r3, [r0, #16]
 8000e32:	4219      	tst	r1, r3
 8000e34:	d001      	beq.n	8000e3a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000e36:	2001      	movs	r0, #1
 8000e38:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e3a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000e3c:	4770      	bx	lr

08000e3e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3e:	b10a      	cbz	r2, 8000e44 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e40:	6181      	str	r1, [r0, #24]
 8000e42:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e44:	0409      	lsls	r1, r1, #16
 8000e46:	6181      	str	r1, [r0, #24]
  }
}
 8000e48:	4770      	bx	lr

08000e4a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000e4a:	6943      	ldr	r3, [r0, #20]
 8000e4c:	420b      	tst	r3, r1
 8000e4e:	d002      	beq.n	8000e56 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e50:	0409      	lsls	r1, r1, #16
 8000e52:	6181      	str	r1, [r0, #24]
 8000e54:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e56:	6181      	str	r1, [r0, #24]
  }
}
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e5c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4203      	tst	r3, r0
 8000e64:	d100      	bne.n	8000e68 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000e66:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e6a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e6c:	f7ff fc9a 	bl	80007a4 <HAL_GPIO_EXTI_Callback>
}
 8000e70:	e7f9      	b.n	8000e66 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e72:	bf00      	nop
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_PWREx_EnableOverDrive+0x74>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e9a:	f7ff fe6b 	bl	8000b74 <HAL_GetTick>
 8000e9e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ea8:	d108      	bne.n	8000ebc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eaa:	f7ff fe63 	bl	8000b74 <HAL_GetTick>
 8000eae:	1b00      	subs	r0, r0, r4
 8000eb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000eb4:	d9f4      	bls.n	8000ea0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000ec6:	f7ff fe55 	bl	8000b74 <HAL_GetTick>
 8000eca:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed4:	d107      	bne.n	8000ee6 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ed6:	f7ff fe4d 	bl	8000b74 <HAL_GetTick>
 8000eda:	1b00      	subs	r0, r0, r4
 8000edc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ee0:	d9f4      	bls.n	8000ecc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	e7e8      	b.n	8000eb8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e7e6      	b.n	8000eb8 <HAL_PWREx_EnableOverDrive+0x40>
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	f000 8206 	beq.w	8001306 <HAL_RCC_OscConfig+0x412>
{
 8000efa:	b570      	push	{r4, r5, r6, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f00:	6803      	ldr	r3, [r0, #0]
 8000f02:	f013 0f01 	tst.w	r3, #1
 8000f06:	d029      	beq.n	8000f5c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f08:	4ba7      	ldr	r3, [pc, #668]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d01a      	beq.n	8000f4a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f14:	4ba4      	ldr	r3, [pc, #656]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d00f      	beq.n	8000f40 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f26:	d040      	beq.n	8000faa <HAL_RCC_OscConfig+0xb6>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d154      	bne.n	8000fd6 <HAL_RCC_OscConfig+0xe2>
 8000f2c:	4b9e      	ldr	r3, [pc, #632]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e039      	b.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f40:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f48:	d0ea      	beq.n	8000f20 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	4b97      	ldr	r3, [pc, #604]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f52:	d003      	beq.n	8000f5c <HAL_RCC_OscConfig+0x68>
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 81d7 	beq.w	800130a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f013 0f02 	tst.w	r3, #2
 8000f62:	d074      	beq.n	800104e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f64:	4b90      	ldr	r3, [pc, #576]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f013 0f0c 	tst.w	r3, #12
 8000f6c:	d05e      	beq.n	800102c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6e:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d053      	beq.n	8001022 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8089 	beq.w	8001094 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f82:	4a89      	ldr	r2, [pc, #548]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fdf2 	bl	8000b74 <HAL_GetTick>
 8000f90:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f92:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f013 0f02 	tst.w	r3, #2
 8000f9a:	d172      	bne.n	8001082 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fdea 	bl	8000b74 <HAL_GetTick>
 8000fa0:	1b40      	subs	r0, r0, r5
 8000fa2:	2802      	cmp	r0, #2
 8000fa4:	d9f5      	bls.n	8000f92 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	e1b4      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000faa:	4a7f      	ldr	r2, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	6863      	ldr	r3, [r4, #4]
 8000fb6:	b32b      	cbz	r3, 8001004 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fddc 	bl	8000b74 <HAL_GetTick>
 8000fbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fc6:	d1c9      	bne.n	8000f5c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fdd4 	bl	8000b74 <HAL_GetTick>
 8000fcc:	1b40      	subs	r0, r0, r5
 8000fce:	2864      	cmp	r0, #100	; 0x64
 8000fd0:	d9f5      	bls.n	8000fbe <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	e19e      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fda:	d009      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xfc>
 8000fdc:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e7e1      	b.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e7d7      	b.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001004:	f7ff fdb6 	bl	8000b74 <HAL_GetTick>
 8001008:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001012:	d0a3      	beq.n	8000f5c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fdae 	bl	8000b74 <HAL_GetTick>
 8001018:	1b40      	subs	r0, r0, r5
 800101a:	2864      	cmp	r0, #100	; 0x64
 800101c:	d9f5      	bls.n	800100a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800101e:	2003      	movs	r0, #3
 8001020:	e178      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001022:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800102a:	d1a6      	bne.n	8000f7a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102c:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f013 0f02 	tst.w	r3, #2
 8001034:	d003      	beq.n	800103e <HAL_RCC_OscConfig+0x14a>
 8001036:	68e3      	ldr	r3, [r4, #12]
 8001038:	2b01      	cmp	r3, #1
 800103a:	f040 8168 	bne.w	800130e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001046:	6921      	ldr	r1, [r4, #16]
 8001048:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800104c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f013 0f08 	tst.w	r3, #8
 8001054:	d046      	beq.n	80010e4 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001056:	6963      	ldr	r3, [r4, #20]
 8001058:	b383      	cbz	r3, 80010bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105a:	4a53      	ldr	r2, [pc, #332]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 800105c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fd86 	bl	8000b74 <HAL_GetTick>
 8001068:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 800106c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800106e:	f013 0f02 	tst.w	r3, #2
 8001072:	d137      	bne.n	80010e4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fd7e 	bl	8000b74 <HAL_GetTick>
 8001078:	1b40      	subs	r0, r0, r5
 800107a:	2802      	cmp	r0, #2
 800107c:	d9f5      	bls.n	800106a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800107e:	2003      	movs	r0, #3
 8001080:	e148      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800108a:	6921      	ldr	r1, [r4, #16]
 800108c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e7dc      	b.n	800104e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001094:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fd69 	bl	8000b74 <HAL_GetTick>
 80010a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f013 0f02 	tst.w	r3, #2
 80010ac:	d0cf      	beq.n	800104e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fd61 	bl	8000b74 <HAL_GetTick>
 80010b2:	1b40      	subs	r0, r0, r5
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9f5      	bls.n	80010a4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e12b      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010bc:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010be:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c6:	f7ff fd55 	bl	8000b74 <HAL_GetTick>
 80010ca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d0:	f013 0f02 	tst.w	r3, #2
 80010d4:	d006      	beq.n	80010e4 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d6:	f7ff fd4d 	bl	8000b74 <HAL_GetTick>
 80010da:	1b40      	subs	r0, r0, r5
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9f5      	bls.n	80010cc <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80010e0:	2003      	movs	r0, #3
 80010e2:	e117      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	f013 0f04 	tst.w	r3, #4
 80010ea:	d07d      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800110a:	2501      	movs	r5, #1
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 800110e:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001118:	d00e      	beq.n	8001138 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111a:	68a3      	ldr	r3, [r4, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d01f      	beq.n	8001160 <HAL_RCC_OscConfig+0x26c>
 8001120:	2b00      	cmp	r3, #0
 8001122:	d135      	bne.n	8001190 <HAL_RCC_OscConfig+0x29c>
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	671a      	str	r2, [r3, #112]	; 0x70
 800112e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001130:	f022 0204 	bic.w	r2, r2, #4
 8001134:	671a      	str	r2, [r3, #112]	; 0x70
 8001136:	e018      	b.n	800116a <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff fd17 	bl	8000b74 <HAL_GetTick>
 8001146:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001150:	d1e3      	bne.n	800111a <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001152:	f7ff fd0f 	bl	8000b74 <HAL_GetTick>
 8001156:	1b80      	subs	r0, r0, r6
 8001158:	2864      	cmp	r0, #100	; 0x64
 800115a:	d9f5      	bls.n	8001148 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e0d9      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001162:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800116a:	68a3      	ldr	r3, [r4, #8]
 800116c:	b353      	cbz	r3, 80011c4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116e:	f7ff fd01 	bl	8000b74 <HAL_GetTick>
 8001172:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001178:	f013 0f02 	tst.w	r3, #2
 800117c:	d133      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fcf9 	bl	8000b74 <HAL_GetTick>
 8001182:	1b80      	subs	r0, r0, r6
 8001184:	f241 3388 	movw	r3, #5000	; 0x1388
 8001188:	4298      	cmp	r0, r3
 800118a:	d9f3      	bls.n	8001174 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e0c1      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	2b05      	cmp	r3, #5
 8001192:	d00d      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2bc>
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	671a      	str	r2, [r3, #112]	; 0x70
 800119e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011a0:	f022 0204 	bic.w	r2, r2, #4
 80011a4:	671a      	str	r2, [r3, #112]	; 0x70
 80011a6:	e7e0      	b.n	800116a <HAL_RCC_OscConfig+0x276>
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000
 80011b0:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 80011b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	671a      	str	r2, [r3, #112]	; 0x70
 80011ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	671a      	str	r2, [r3, #112]	; 0x70
 80011c2:	e7d2      	b.n	800116a <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c4:	f7ff fcd6 	bl	8000b74 <HAL_GetTick>
 80011c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ca:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	f013 0f02 	tst.w	r3, #2
 80011d2:	d008      	beq.n	80011e6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fcce 	bl	8000b74 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	f241 3388 	movw	r3, #5000	; 0x1388
 80011de:	4298      	cmp	r0, r3
 80011e0:	d9f3      	bls.n	80011ca <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80011e2:	2003      	movs	r0, #3
 80011e4:	e096      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011e6:	b9fd      	cbnz	r5, 8001228 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e8:	69a3      	ldr	r3, [r4, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8091 	beq.w	8001312 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 80011f2:	6892      	ldr	r2, [r2, #8]
 80011f4:	f002 020c 	and.w	r2, r2, #12
 80011f8:	2a08      	cmp	r2, #8
 80011fa:	d059      	beq.n	80012b0 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d019      	beq.n	8001234 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fcb3 	bl	8000b74 <HAL_GetTick>
 800120e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001218:	d048      	beq.n	80012ac <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fcab 	bl	8000b74 <HAL_GetTick>
 800121e:	1b00      	subs	r0, r0, r4
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f5      	bls.n	8001210 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001224:	2003      	movs	r0, #3
 8001226:	e075      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001228:	4a42      	ldr	r2, [pc, #264]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 800122a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800122c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	e7d9      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800123c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800123e:	f7ff fc99 	bl	8000b74 <HAL_GetTick>
 8001242:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800124c:	d006      	beq.n	800125c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fc91 	bl	8000b74 <HAL_GetTick>
 8001252:	1b40      	subs	r0, r0, r5
 8001254:	2802      	cmp	r0, #2
 8001256:	d9f5      	bls.n	8001244 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	e05b      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125c:	69e3      	ldr	r3, [r4, #28]
 800125e:	6a22      	ldr	r2, [r4, #32]
 8001260:	4313      	orrs	r3, r2
 8001262:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001264:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001268:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800126a:	0852      	lsrs	r2, r2, #1
 800126c:	3a01      	subs	r2, #1
 800126e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001272:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001274:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001278:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800127a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800127e:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001280:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001288:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800128a:	f7ff fc73 	bl	8000b74 <HAL_GetTick>
 800128e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fc6b 	bl	8000b74 <HAL_GetTick>
 800129e:	1b00      	subs	r0, r0, r4
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d9f5      	bls.n	8001290 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
 80012a6:	e035      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80012a8:	2000      	movs	r0, #0
 80012aa:	e033      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 80012ac:	2000      	movs	r0, #0
 80012ae:	e031      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <HAL_RCC_OscConfig+0x440>)
 80012b2:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d02f      	beq.n	8001318 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80012bc:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012be:	428b      	cmp	r3, r1
 80012c0:	d12c      	bne.n	800131c <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012c2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80012c6:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d129      	bne.n	8001320 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012d2:	4013      	ands	r3, r2
 80012d4:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80012d8:	d124      	bne.n	8001324 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012da:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80012de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 80012e8:	d11e      	bne.n	8001328 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ea:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 80012ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012f0:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 80012f4:	d11a      	bne.n	800132c <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80012f6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80012fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012fc:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8001302:	2000      	movs	r0, #0
 8001304:	e006      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8001306:	2001      	movs	r0, #1
}
 8001308:	4770      	bx	lr
        return HAL_ERROR;
 800130a:	2001      	movs	r0, #1
 800130c:	e002      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800130e:	2001      	movs	r0, #1
 8001310:	e000      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001312:	2000      	movs	r0, #0
}
 8001314:	b002      	add	sp, #8
 8001316:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
 800131a:	e7fb      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 800131c:	2001      	movs	r0, #1
 800131e:	e7f9      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 8001320:	2001      	movs	r0, #1
 8001322:	e7f7      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 8001324:	2001      	movs	r0, #1
 8001326:	e7f5      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 8001328:	2001      	movs	r0, #1
 800132a:	e7f3      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 800132c:	2001      	movs	r0, #1
 800132e:	e7f1      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 8001330:	2001      	movs	r0, #1
 8001332:	e7ef      	b.n	8001314 <HAL_RCC_OscConfig+0x420>
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d03d      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x8a>
 8001346:	2b08      	cmp	r3, #8
 8001348:	d13d      	bne.n	80013c6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001358:	d012      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 800135c:	6859      	ldr	r1, [r3, #4]
 800135e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001362:	2300      	movs	r3, #0
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001366:	fba1 0100 	umull	r0, r1, r1, r0
 800136a:	f7fe ffb9 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001376:	3301      	adds	r3, #1
 8001378:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800137a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800137e:	e023      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001388:	015c      	lsls	r4, r3, #5
 800138a:	2500      	movs	r5, #0
 800138c:	1ae4      	subs	r4, r4, r3
 800138e:	f165 0500 	sbc.w	r5, r5, #0
 8001392:	01ae      	lsls	r6, r5, #6
 8001394:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001398:	01a7      	lsls	r7, r4, #6
 800139a:	1b38      	subs	r0, r7, r4
 800139c:	eb66 0105 	sbc.w	r1, r6, r5
 80013a0:	00cc      	lsls	r4, r1, #3
 80013a2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80013a6:	00c5      	lsls	r5, r0, #3
 80013a8:	18e8      	adds	r0, r5, r3
 80013aa:	f144 0100 	adc.w	r1, r4, #0
 80013ae:	028b      	lsls	r3, r1, #10
 80013b0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80013b4:	0284      	lsls	r4, r0, #10
 80013b6:	4620      	mov	r0, r4
 80013b8:	4619      	mov	r1, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	f7fe ff90 	bl	80002e0 <__aeabi_uldivmod>
 80013c0:	e7d5      	b.n	800136e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	017d7840 	.word	0x017d7840
 80013d4:	00f42400 	.word	0x00f42400

080013d8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80013d8:	2800      	cmp	r0, #0
 80013da:	f000 80a0 	beq.w	800151e <HAL_RCC_ClockConfig+0x146>
{
 80013de:	b570      	push	{r4, r5, r6, lr}
 80013e0:	460d      	mov	r5, r1
 80013e2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_RCC_ClockConfig+0x158>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d20b      	bcs.n	8001408 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_RCC_ClockConfig+0x158>)
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	f023 030f 	bic.w	r3, r3, #15
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fc:	6813      	ldr	r3, [r2, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	428b      	cmp	r3, r1
 8001404:	f040 808d 	bne.w	8001522 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	f013 0f02 	tst.w	r3, #2
 800140e:	d017      	beq.n	8001440 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	f013 0f04 	tst.w	r3, #4
 8001414:	d004      	beq.n	8001420 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001416:	4a47      	ldr	r2, [pc, #284]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001418:	6893      	ldr	r3, [r2, #8]
 800141a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800141e:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	f013 0f08 	tst.w	r3, #8
 8001426:	d004      	beq.n	8001432 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001428:	4a42      	ldr	r2, [pc, #264]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 800142a:	6893      	ldr	r3, [r2, #8]
 800142c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001430:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001432:	4a40      	ldr	r2, [pc, #256]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001434:	6893      	ldr	r3, [r2, #8]
 8001436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800143a:	68a1      	ldr	r1, [r4, #8]
 800143c:	430b      	orrs	r3, r1
 800143e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	f013 0f01 	tst.w	r3, #1
 8001446:	d031      	beq.n	80014ac <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d020      	beq.n	8001490 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	2b02      	cmp	r3, #2
 8001450:	d025      	beq.n	800149e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4a38      	ldr	r2, [pc, #224]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	f012 0f02 	tst.w	r2, #2
 800145a:	d064      	beq.n	8001526 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 800145e:	688a      	ldr	r2, [r1, #8]
 8001460:	f022 0203 	bic.w	r2, r2, #3
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001468:	f7ff fb84 	bl	8000b74 <HAL_GetTick>
 800146c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	6862      	ldr	r2, [r4, #4]
 8001478:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800147c:	d016      	beq.n	80014ac <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff fb79 	bl	8000b74 <HAL_GetTick>
 8001482:	1b80      	subs	r0, r0, r6
 8001484:	f241 3388 	movw	r3, #5000	; 0x1388
 8001488:	4298      	cmp	r0, r3
 800148a:	d9f0      	bls.n	800146e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e045      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001498:	d1e0      	bne.n	800145c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	e03e      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014a6:	d1d9      	bne.n	800145c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
 80014aa:	e037      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_ClockConfig+0x158>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	42ab      	cmp	r3, r5
 80014b6:	d90a      	bls.n	80014ce <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_RCC_ClockConfig+0x158>)
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	432b      	orrs	r3, r5
 80014c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	42ab      	cmp	r3, r5
 80014cc:	d12d      	bne.n	800152a <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f013 0f04 	tst.w	r3, #4
 80014d4:	d006      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014de:	68e1      	ldr	r1, [r4, #12]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f013 0f08 	tst.w	r3, #8
 80014ea:	d007      	beq.n	80014fc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 80014ee:	6893      	ldr	r3, [r2, #8]
 80014f0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014f4:	6921      	ldr	r1, [r4, #16]
 80014f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fc:	f7ff ff1c 	bl	8001338 <HAL_RCC_GetSysClockFreq>
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_RCC_ClockConfig+0x15c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x160>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	40d8      	lsrs	r0, r3
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x164>)
 8001510:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x168>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f7ff fae7 	bl	8000ae8 <HAL_InitTick>
  return HAL_OK;
 800151a:	2000      	movs	r0, #0
}
 800151c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800151e:	2001      	movs	r0, #1
}
 8001520:	4770      	bx	lr
      return HAL_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e7fa      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e7f8      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
 800152c:	e7f6      	b.n	800151c <HAL_RCC_ClockConfig+0x144>
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00
 8001534:	40023800 	.word	0x40023800
 8001538:	08003028 	.word	0x08003028
 800153c:	20000000 	.word	0x20000000
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <HAL_RCC_GetHCLKFreq+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001550:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001552:	f7ff fff7 	bl	8001544 <HAL_RCC_GetHCLKFreq>
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800155e:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
}
 8001562:	40d8      	lsrs	r0, r3
 8001564:	bd08      	pop	{r3, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	08003038 	.word	0x08003038

08001570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001570:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001572:	f7ff ffe7 	bl	8001544 <HAL_RCC_GetHCLKFreq>
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800157e:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
}
 8001582:	40d8      	lsrs	r0, r3
 8001584:	bd08      	pop	{r3, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	08003038 	.word	0x08003038

08001590 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001590:	4770      	bx	lr
	...

08001594 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001594:	6802      	ldr	r2, [r0, #0]
 8001596:	68d3      	ldr	r3, [r2, #12]
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800159e:	6802      	ldr	r2, [r0, #0]
 80015a0:	6891      	ldr	r1, [r2, #8]
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_TIM_Base_Start_IT+0x28>)
 80015a4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	bf18      	it	ne
 80015aa:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80015ae:	d003      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80015b8:	2000      	movs	r0, #0
 80015ba:	4770      	bx	lr
 80015bc:	00010007 	.word	0x00010007

080015c0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015c0:	4770      	bx	lr

080015c2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015c2:	4770      	bx	lr

080015c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015c4:	4770      	bx	lr

080015c6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015c6:	4770      	bx	lr

080015c8 <HAL_TIM_IRQHandler>:
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015cc:	6803      	ldr	r3, [r0, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	f012 0f02 	tst.w	r2, #2
 80015d4:	d011      	beq.n	80015fa <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	f012 0f02 	tst.w	r2, #2
 80015dc:	d00d      	beq.n	80015fa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015de:	f06f 0202 	mvn.w	r2, #2
 80015e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f013 0f03 	tst.w	r3, #3
 80015f0:	d079      	beq.n	80016e6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80015f2:	f7ff ffe6 	bl	80015c2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f6:	2300      	movs	r3, #0
 80015f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	f012 0f04 	tst.w	r2, #4
 8001602:	d012      	beq.n	800162a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	f012 0f04 	tst.w	r2, #4
 800160a:	d00e      	beq.n	800162a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800160c:	f06f 0204 	mvn.w	r2, #4
 8001610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001612:	2302      	movs	r3, #2
 8001614:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800161e:	d068      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ffce 	bl	80015c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001626:	2300      	movs	r3, #0
 8001628:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	f012 0f08 	tst.w	r2, #8
 8001632:	d012      	beq.n	800165a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	f012 0f08 	tst.w	r2, #8
 800163a:	d00e      	beq.n	800165a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800163c:	f06f 0208 	mvn.w	r2, #8
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001642:	2304      	movs	r3, #4
 8001644:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f013 0f03 	tst.w	r3, #3
 800164e:	d057      	beq.n	8001700 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ffb6 	bl	80015c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	2300      	movs	r3, #0
 8001658:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	f012 0f10 	tst.w	r2, #16
 8001662:	d012      	beq.n	800168a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	f012 0f10 	tst.w	r2, #16
 800166a:	d00e      	beq.n	800168a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800166c:	f06f 0210 	mvn.w	r2, #16
 8001670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001672:	2308      	movs	r3, #8
 8001674:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800167e:	d046      	beq.n	800170e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff ff9e 	bl	80015c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001686:	2300      	movs	r3, #0
 8001688:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	f012 0f01 	tst.w	r2, #1
 8001692:	d003      	beq.n	800169c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	f012 0f01 	tst.w	r2, #1
 800169a:	d13f      	bne.n	800171c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016a4:	d003      	beq.n	80016ae <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016ac:	d13d      	bne.n	800172a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80016b6:	d003      	beq.n	80016c0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016be:	d13b      	bne.n	8001738 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016c8:	d003      	beq.n	80016d2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016d0:	d139      	bne.n	8001746 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	f012 0f20 	tst.w	r2, #32
 80016da:	d003      	beq.n	80016e4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	f012 0f20 	tst.w	r2, #32
 80016e2:	d137      	bne.n	8001754 <HAL_TIM_IRQHandler+0x18c>
}
 80016e4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e6:	f7ff ff6b 	bl	80015c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff ff6a 	bl	80015c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80016f0:	e781      	b.n	80015f6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff ff64 	bl	80015c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff ff63 	bl	80015c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80016fe:	e792      	b.n	8001626 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ff5d 	bl	80015c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff5c 	bl	80015c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800170c:	e7a3      	b.n	8001656 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff ff56 	bl	80015c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001714:	4620      	mov	r0, r4
 8001716:	f7ff ff55 	bl	80015c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800171a:	e7b4      	b.n	8001686 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800171c:	f06f 0201 	mvn.w	r2, #1
 8001720:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff f850 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
 8001728:	e7b8      	b.n	800169c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800172a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001730:	4620      	mov	r0, r4
 8001732:	f000 f8b8 	bl	80018a6 <HAL_TIMEx_BreakCallback>
 8001736:	e7ba      	b.n	80016ae <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001738:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800173c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800173e:	4620      	mov	r0, r4
 8001740:	f000 f8b2 	bl	80018a8 <HAL_TIMEx_Break2Callback>
 8001744:	e7bc      	b.n	80016c0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800174a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff ff3a 	bl	80015c6 <HAL_TIM_TriggerCallback>
 8001752:	e7be      	b.n	80016d2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001754:	f06f 0220 	mvn.w	r2, #32
 8001758:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800175a:	4620      	mov	r0, r4
 800175c:	f000 f8a2 	bl	80018a4 <HAL_TIMEx_CommutCallback>
}
 8001760:	e7c0      	b.n	80016e4 <HAL_TIM_IRQHandler+0x11c>
	...

08001764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001764:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001766:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001768:	4c3a      	ldr	r4, [pc, #232]	; (8001854 <TIM_Base_SetConfig+0xf0>)
 800176a:	42a0      	cmp	r0, r4
 800176c:	bf14      	ite	ne
 800176e:	2400      	movne	r4, #0
 8001770:	2401      	moveq	r4, #1
 8001772:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001776:	bf14      	ite	ne
 8001778:	4622      	movne	r2, r4
 800177a:	f044 0201 	orreq.w	r2, r4, #1
 800177e:	b9aa      	cbnz	r2, 80017ac <TIM_Base_SetConfig+0x48>
 8001780:	4d35      	ldr	r5, [pc, #212]	; (8001858 <TIM_Base_SetConfig+0xf4>)
 8001782:	42a8      	cmp	r0, r5
 8001784:	bf14      	ite	ne
 8001786:	2500      	movne	r5, #0
 8001788:	2501      	moveq	r5, #1
 800178a:	4e34      	ldr	r6, [pc, #208]	; (800185c <TIM_Base_SetConfig+0xf8>)
 800178c:	42b0      	cmp	r0, r6
 800178e:	d00d      	beq.n	80017ac <TIM_Base_SetConfig+0x48>
 8001790:	b965      	cbnz	r5, 80017ac <TIM_Base_SetConfig+0x48>
 8001792:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001796:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 800179a:	42a8      	cmp	r0, r5
 800179c:	bf14      	ite	ne
 800179e:	2500      	movne	r5, #0
 80017a0:	2501      	moveq	r5, #1
 80017a2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80017a6:	42b0      	cmp	r0, r6
 80017a8:	d000      	beq.n	80017ac <TIM_Base_SetConfig+0x48>
 80017aa:	b11d      	cbz	r5, 80017b4 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017b0:	684d      	ldr	r5, [r1, #4]
 80017b2:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d133      	bne.n	8001820 <TIM_Base_SetConfig+0xbc>
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <TIM_Base_SetConfig+0xf4>)
 80017ba:	4290      	cmp	r0, r2
 80017bc:	bf14      	ite	ne
 80017be:	2200      	movne	r2, #0
 80017c0:	2201      	moveq	r2, #1
 80017c2:	4d26      	ldr	r5, [pc, #152]	; (800185c <TIM_Base_SetConfig+0xf8>)
 80017c4:	42a8      	cmp	r0, r5
 80017c6:	d02b      	beq.n	8001820 <TIM_Base_SetConfig+0xbc>
 80017c8:	bb52      	cbnz	r2, 8001820 <TIM_Base_SetConfig+0xbc>
 80017ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80017ce:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80017d2:	4290      	cmp	r0, r2
 80017d4:	bf14      	ite	ne
 80017d6:	2200      	movne	r2, #0
 80017d8:	2201      	moveq	r2, #1
 80017da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d01e      	beq.n	8001820 <TIM_Base_SetConfig+0xbc>
 80017e2:	b9ea      	cbnz	r2, 8001820 <TIM_Base_SetConfig+0xbc>
 80017e4:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <TIM_Base_SetConfig+0xfc>)
 80017e6:	4290      	cmp	r0, r2
 80017e8:	bf14      	ite	ne
 80017ea:	2200      	movne	r2, #0
 80017ec:	2201      	moveq	r2, #1
 80017ee:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80017f2:	42a8      	cmp	r0, r5
 80017f4:	d014      	beq.n	8001820 <TIM_Base_SetConfig+0xbc>
 80017f6:	b99a      	cbnz	r2, 8001820 <TIM_Base_SetConfig+0xbc>
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <TIM_Base_SetConfig+0x100>)
 80017fa:	4290      	cmp	r0, r2
 80017fc:	bf14      	ite	ne
 80017fe:	2200      	movne	r2, #0
 8001800:	2201      	moveq	r2, #1
 8001802:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001806:	42a8      	cmp	r0, r5
 8001808:	d00a      	beq.n	8001820 <TIM_Base_SetConfig+0xbc>
 800180a:	b94a      	cbnz	r2, 8001820 <TIM_Base_SetConfig+0xbc>
 800180c:	4a16      	ldr	r2, [pc, #88]	; (8001868 <TIM_Base_SetConfig+0x104>)
 800180e:	4290      	cmp	r0, r2
 8001810:	bf14      	ite	ne
 8001812:	2200      	movne	r2, #0
 8001814:	2201      	moveq	r2, #1
 8001816:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 800181a:	42a8      	cmp	r0, r5
 800181c:	d000      	beq.n	8001820 <TIM_Base_SetConfig+0xbc>
 800181e:	b11a      	cbz	r2, 8001828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001824:	68ca      	ldr	r2, [r1, #12]
 8001826:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800182c:	694a      	ldr	r2, [r1, #20]
 800182e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001830:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001832:	688a      	ldr	r2, [r1, #8]
 8001834:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001836:	680a      	ldr	r2, [r1, #0]
 8001838:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <TIM_Base_SetConfig+0x108>)
 800183c:	4298      	cmp	r0, r3
 800183e:	bf14      	ite	ne
 8001840:	4623      	movne	r3, r4
 8001842:	f044 0301 	orreq.w	r3, r4, #1
 8001846:	b10b      	cbz	r3, 800184c <TIM_Base_SetConfig+0xe8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001848:	690b      	ldr	r3, [r1, #16]
 800184a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800184c:	2301      	movs	r3, #1
 800184e:	6143      	str	r3, [r0, #20]
}
 8001850:	bc70      	pop	{r4, r5, r6}
 8001852:	4770      	bx	lr
 8001854:	40010000 	.word	0x40010000
 8001858:	40000800 	.word	0x40000800
 800185c:	40000400 	.word	0x40000400
 8001860:	40014400 	.word	0x40014400
 8001864:	40001800 	.word	0x40001800
 8001868:	40002000 	.word	0x40002000
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001870:	b1b0      	cbz	r0, 80018a0 <HAL_TIM_Base_Init+0x30>
{
 8001872:	b510      	push	{r4, lr}
 8001874:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001876:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800187a:	b163      	cbz	r3, 8001896 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	2302      	movs	r3, #2
 800187e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001882:	4621      	mov	r1, r4
 8001884:	f851 0b04 	ldr.w	r0, [r1], #4
 8001888:	f7ff ff6c 	bl	8001764 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800188c:	2301      	movs	r3, #1
 800188e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001892:	2000      	movs	r0, #0
}
 8001894:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001896:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800189a:	f7ff fe79 	bl	8001590 <HAL_TIM_Base_MspInit>
 800189e:	e7ed      	b.n	800187c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
}
 80018a2:	4770      	bx	lr

080018a4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018a4:	4770      	bx	lr

080018a6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018a6:	4770      	bx	lr

080018a8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80018a8:	4770      	bx	lr
	...

080018ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018b0:	6883      	ldr	r3, [r0, #8]
 80018b2:	6902      	ldr	r2, [r0, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6942      	ldr	r2, [r0, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	69c2      	ldr	r2, [r0, #28]
 80018bc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	6808      	ldr	r0, [r1, #0]
 80018c2:	4a9f      	ldr	r2, [pc, #636]	; (8001b40 <UART_SetConfig+0x294>)
 80018c4:	4002      	ands	r2, r0
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	6853      	ldr	r3, [r2, #4]
 80018ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018d2:	68e1      	ldr	r1, [r4, #12]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018d8:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 80018da:	6a23      	ldr	r3, [r4, #32]
 80018dc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	688b      	ldr	r3, [r1, #8]
 80018e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	4a95      	ldr	r2, [pc, #596]	; (8001b44 <UART_SetConfig+0x298>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <UART_SetConfig+0x7a>
 80018f2:	4a95      	ldr	r2, [pc, #596]	; (8001b48 <UART_SetConfig+0x29c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d029      	beq.n	800194c <UART_SetConfig+0xa0>
 80018f8:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <UART_SetConfig+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03e      	beq.n	800197c <UART_SetConfig+0xd0>
 80018fe:	4a94      	ldr	r2, [pc, #592]	; (8001b50 <UART_SetConfig+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d062      	beq.n	80019ca <UART_SetConfig+0x11e>
 8001904:	4a93      	ldr	r2, [pc, #588]	; (8001b54 <UART_SetConfig+0x2a8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d071      	beq.n	80019ee <UART_SetConfig+0x142>
 800190a:	4a93      	ldr	r2, [pc, #588]	; (8001b58 <UART_SetConfig+0x2ac>)
 800190c:	4293      	cmp	r3, r2
 800190e:	f000 8083 	beq.w	8001a18 <UART_SetConfig+0x16c>
 8001912:	4a92      	ldr	r2, [pc, #584]	; (8001b5c <UART_SetConfig+0x2b0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	f000 8094 	beq.w	8001a42 <UART_SetConfig+0x196>
 800191a:	4a91      	ldr	r2, [pc, #580]	; (8001b60 <UART_SetConfig+0x2b4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	f000 80a5 	beq.w	8001a6c <UART_SetConfig+0x1c0>
 8001922:	2510      	movs	r5, #16
 8001924:	e03a      	b.n	800199c <UART_SetConfig+0xf0>
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <UART_SetConfig+0x2b8>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d809      	bhi.n	8001948 <UART_SetConfig+0x9c>
 8001934:	e8df f003 	tbb	[pc, r3]
 8001938:	06ae0402 	.word	0x06ae0402
 800193c:	2501      	movs	r5, #1
 800193e:	e02d      	b.n	800199c <UART_SetConfig+0xf0>
 8001940:	2504      	movs	r5, #4
 8001942:	e02b      	b.n	800199c <UART_SetConfig+0xf0>
 8001944:	2508      	movs	r5, #8
 8001946:	e029      	b.n	800199c <UART_SetConfig+0xf0>
 8001948:	2510      	movs	r5, #16
 800194a:	e027      	b.n	800199c <UART_SetConfig+0xf0>
 800194c:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <UART_SetConfig+0x2b8>)
 800194e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d80e      	bhi.n	8001978 <UART_SetConfig+0xcc>
 800195a:	e8df f003 	tbb	[pc, r3]
 800195e:	0d07      	.short	0x0d07
 8001960:	0d090d0d 	.word	0x0d090d0d
 8001964:	0d9d0d0d 	.word	0x0d9d0d0d
 8001968:	0d0d      	.short	0x0d0d
 800196a:	0b          	.byte	0x0b
 800196b:	00          	.byte	0x00
 800196c:	2500      	movs	r5, #0
 800196e:	e015      	b.n	800199c <UART_SetConfig+0xf0>
 8001970:	2504      	movs	r5, #4
 8001972:	e013      	b.n	800199c <UART_SetConfig+0xf0>
 8001974:	2508      	movs	r5, #8
 8001976:	e011      	b.n	800199c <UART_SetConfig+0xf0>
 8001978:	2510      	movs	r5, #16
 800197a:	e00f      	b.n	800199c <UART_SetConfig+0xf0>
 800197c:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <UART_SetConfig+0x2b8>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001986:	2b20      	cmp	r3, #32
 8001988:	f000 8088 	beq.w	8001a9c <UART_SetConfig+0x1f0>
 800198c:	d819      	bhi.n	80019c2 <UART_SetConfig+0x116>
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8086 	beq.w	8001aa0 <UART_SetConfig+0x1f4>
 8001994:	2b10      	cmp	r3, #16
 8001996:	f040 8085 	bne.w	8001aa4 <UART_SetConfig+0x1f8>
 800199a:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a2:	f000 80ab 	beq.w	8001afc <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80019a6:	2d08      	cmp	r5, #8
 80019a8:	f200 8140 	bhi.w	8001c2c <UART_SetConfig+0x380>
 80019ac:	e8df f015 	tbh	[pc, r5, lsl #1]
 80019b0:	01180107 	.word	0x01180107
 80019b4:	013e0122 	.word	0x013e0122
 80019b8:	013e012b 	.word	0x013e012b
 80019bc:	013e013e 	.word	0x013e013e
 80019c0:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019c2:	2b30      	cmp	r3, #48	; 0x30
 80019c4:	d170      	bne.n	8001aa8 <UART_SetConfig+0x1fc>
 80019c6:	2508      	movs	r5, #8
 80019c8:	e7e8      	b.n	800199c <UART_SetConfig+0xf0>
 80019ca:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <UART_SetConfig+0x2b8>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d069      	beq.n	8001aac <UART_SetConfig+0x200>
 80019d8:	d805      	bhi.n	80019e6 <UART_SetConfig+0x13a>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d068      	beq.n	8001ab0 <UART_SetConfig+0x204>
 80019de:	2b40      	cmp	r3, #64	; 0x40
 80019e0:	d168      	bne.n	8001ab4 <UART_SetConfig+0x208>
 80019e2:	2504      	movs	r5, #4
 80019e4:	e7da      	b.n	800199c <UART_SetConfig+0xf0>
 80019e6:	2bc0      	cmp	r3, #192	; 0xc0
 80019e8:	d166      	bne.n	8001ab8 <UART_SetConfig+0x20c>
 80019ea:	2508      	movs	r5, #8
 80019ec:	e7d6      	b.n	800199c <UART_SetConfig+0xf0>
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <UART_SetConfig+0x2b8>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d05e      	beq.n	8001abc <UART_SetConfig+0x210>
 80019fe:	d806      	bhi.n	8001a0e <UART_SetConfig+0x162>
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05d      	beq.n	8001ac0 <UART_SetConfig+0x214>
 8001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a08:	d15c      	bne.n	8001ac4 <UART_SetConfig+0x218>
 8001a0a:	2504      	movs	r5, #4
 8001a0c:	e7c6      	b.n	800199c <UART_SetConfig+0xf0>
 8001a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a12:	d159      	bne.n	8001ac8 <UART_SetConfig+0x21c>
 8001a14:	2508      	movs	r5, #8
 8001a16:	e7c1      	b.n	800199c <UART_SetConfig+0xf0>
 8001a18:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <UART_SetConfig+0x2b8>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a26:	d051      	beq.n	8001acc <UART_SetConfig+0x220>
 8001a28:	d806      	bhi.n	8001a38 <UART_SetConfig+0x18c>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d050      	beq.n	8001ad0 <UART_SetConfig+0x224>
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d14f      	bne.n	8001ad4 <UART_SetConfig+0x228>
 8001a34:	2504      	movs	r5, #4
 8001a36:	e7b1      	b.n	800199c <UART_SetConfig+0xf0>
 8001a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a3c:	d14c      	bne.n	8001ad8 <UART_SetConfig+0x22c>
 8001a3e:	2508      	movs	r5, #8
 8001a40:	e7ac      	b.n	800199c <UART_SetConfig+0xf0>
 8001a42:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <UART_SetConfig+0x2b8>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a50:	d044      	beq.n	8001adc <UART_SetConfig+0x230>
 8001a52:	d806      	bhi.n	8001a62 <UART_SetConfig+0x1b6>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d043      	beq.n	8001ae0 <UART_SetConfig+0x234>
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d142      	bne.n	8001ae4 <UART_SetConfig+0x238>
 8001a5e:	2504      	movs	r5, #4
 8001a60:	e79c      	b.n	800199c <UART_SetConfig+0xf0>
 8001a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a66:	d13f      	bne.n	8001ae8 <UART_SetConfig+0x23c>
 8001a68:	2508      	movs	r5, #8
 8001a6a:	e797      	b.n	800199c <UART_SetConfig+0xf0>
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <UART_SetConfig+0x2b8>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a7a:	d037      	beq.n	8001aec <UART_SetConfig+0x240>
 8001a7c:	d805      	bhi.n	8001a8a <UART_SetConfig+0x1de>
 8001a7e:	b3bb      	cbz	r3, 8001af0 <UART_SetConfig+0x244>
 8001a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a84:	d136      	bne.n	8001af4 <UART_SetConfig+0x248>
 8001a86:	2504      	movs	r5, #4
 8001a88:	e788      	b.n	800199c <UART_SetConfig+0xf0>
 8001a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a8e:	d133      	bne.n	8001af8 <UART_SetConfig+0x24c>
 8001a90:	2508      	movs	r5, #8
 8001a92:	e783      	b.n	800199c <UART_SetConfig+0xf0>
 8001a94:	2502      	movs	r5, #2
 8001a96:	e781      	b.n	800199c <UART_SetConfig+0xf0>
 8001a98:	2502      	movs	r5, #2
 8001a9a:	e77f      	b.n	800199c <UART_SetConfig+0xf0>
 8001a9c:	2502      	movs	r5, #2
 8001a9e:	e77d      	b.n	800199c <UART_SetConfig+0xf0>
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	e77b      	b.n	800199c <UART_SetConfig+0xf0>
 8001aa4:	2510      	movs	r5, #16
 8001aa6:	e779      	b.n	800199c <UART_SetConfig+0xf0>
 8001aa8:	2510      	movs	r5, #16
 8001aaa:	e777      	b.n	800199c <UART_SetConfig+0xf0>
 8001aac:	2502      	movs	r5, #2
 8001aae:	e775      	b.n	800199c <UART_SetConfig+0xf0>
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	e773      	b.n	800199c <UART_SetConfig+0xf0>
 8001ab4:	2510      	movs	r5, #16
 8001ab6:	e771      	b.n	800199c <UART_SetConfig+0xf0>
 8001ab8:	2510      	movs	r5, #16
 8001aba:	e76f      	b.n	800199c <UART_SetConfig+0xf0>
 8001abc:	2502      	movs	r5, #2
 8001abe:	e76d      	b.n	800199c <UART_SetConfig+0xf0>
 8001ac0:	2500      	movs	r5, #0
 8001ac2:	e76b      	b.n	800199c <UART_SetConfig+0xf0>
 8001ac4:	2510      	movs	r5, #16
 8001ac6:	e769      	b.n	800199c <UART_SetConfig+0xf0>
 8001ac8:	2510      	movs	r5, #16
 8001aca:	e767      	b.n	800199c <UART_SetConfig+0xf0>
 8001acc:	2502      	movs	r5, #2
 8001ace:	e765      	b.n	800199c <UART_SetConfig+0xf0>
 8001ad0:	2501      	movs	r5, #1
 8001ad2:	e763      	b.n	800199c <UART_SetConfig+0xf0>
 8001ad4:	2510      	movs	r5, #16
 8001ad6:	e761      	b.n	800199c <UART_SetConfig+0xf0>
 8001ad8:	2510      	movs	r5, #16
 8001ada:	e75f      	b.n	800199c <UART_SetConfig+0xf0>
 8001adc:	2502      	movs	r5, #2
 8001ade:	e75d      	b.n	800199c <UART_SetConfig+0xf0>
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	e75b      	b.n	800199c <UART_SetConfig+0xf0>
 8001ae4:	2510      	movs	r5, #16
 8001ae6:	e759      	b.n	800199c <UART_SetConfig+0xf0>
 8001ae8:	2510      	movs	r5, #16
 8001aea:	e757      	b.n	800199c <UART_SetConfig+0xf0>
 8001aec:	2502      	movs	r5, #2
 8001aee:	e755      	b.n	800199c <UART_SetConfig+0xf0>
 8001af0:	2500      	movs	r5, #0
 8001af2:	e753      	b.n	800199c <UART_SetConfig+0xf0>
 8001af4:	2510      	movs	r5, #16
 8001af6:	e751      	b.n	800199c <UART_SetConfig+0xf0>
 8001af8:	2510      	movs	r5, #16
 8001afa:	e74f      	b.n	800199c <UART_SetConfig+0xf0>
    switch (clocksource)
 8001afc:	2d08      	cmp	r5, #8
 8001afe:	d85b      	bhi.n	8001bb8 <UART_SetConfig+0x30c>
 8001b00:	e8df f005 	tbb	[pc, r5]
 8001b04:	5a3d3205 	.word	0x5a3d3205
 8001b08:	5a5a5a46 	.word	0x5a5a5a46
 8001b0c:	51          	.byte	0x51
 8001b0d:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b0e:	f7ff fd1f 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b12:	6862      	ldr	r2, [r4, #4]
 8001b14:	0853      	lsrs	r3, r2, #1
 8001b16:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b1e:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b20:	f1a3 0110 	sub.w	r1, r3, #16
 8001b24:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001b28:	4291      	cmp	r1, r2
 8001b2a:	f200 8082 	bhi.w	8001c32 <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b34:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001b38:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	60d3      	str	r3, [r2, #12]
 8001b3e:	e07b      	b.n	8001c38 <UART_SetConfig+0x38c>
 8001b40:	efff69f3 	.word	0xefff69f3
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	40004800 	.word	0x40004800
 8001b50:	40004c00 	.word	0x40004c00
 8001b54:	40005000 	.word	0x40005000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40007800 	.word	0x40007800
 8001b60:	40007c00 	.word	0x40007c00
 8001b64:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b68:	f7ff fd02 	bl	8001570 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b6c:	6862      	ldr	r2, [r4, #4]
 8001b6e:	0853      	lsrs	r3, r2, #1
 8001b70:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b78:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b7a:	2500      	movs	r5, #0
        break;
 8001b7c:	e7d0      	b.n	8001b20 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <UART_SetConfig+0x398>)
 8001b82:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b8a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b8c:	2500      	movs	r5, #0
        break;
 8001b8e:	e7c7      	b.n	8001b20 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b90:	f7ff fbd2 	bl	8001338 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b94:	6862      	ldr	r2, [r4, #4]
 8001b96:	0853      	lsrs	r3, r2, #1
 8001b98:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ba0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ba2:	2500      	movs	r5, #0
        break;
 8001ba4:	e7bc      	b.n	8001b20 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ba6:	6862      	ldr	r2, [r4, #4]
 8001ba8:	0853      	lsrs	r3, r2, #1
 8001baa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bb2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bb4:	2500      	movs	r5, #0
        break;
 8001bb6:	e7b3      	b.n	8001b20 <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb8:	2501      	movs	r5, #1
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e7b0      	b.n	8001b20 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bbe:	f7ff fcc7 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001bc2:	6862      	ldr	r2, [r4, #4]
 8001bc4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bcc:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bce:	f1a3 0110 	sub.w	r1, r3, #16
 8001bd2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001bd6:	4291      	cmp	r1, r2
 8001bd8:	d82d      	bhi.n	8001c36 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	60d3      	str	r3, [r2, #12]
 8001bde:	e02b      	b.n	8001c38 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001be0:	f7ff fcc6 	bl	8001570 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bf0:	2500      	movs	r5, #0
        break;
 8001bf2:	e7ec      	b.n	8001bce <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001bf4:	6862      	ldr	r2, [r4, #4]
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <UART_SetConfig+0x39c>)
 8001bf8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c00:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c02:	2500      	movs	r5, #0
        break;
 8001c04:	e7e3      	b.n	8001bce <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c06:	f7ff fb97 	bl	8001338 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c0a:	6862      	ldr	r2, [r4, #4]
 8001c0c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c16:	2500      	movs	r5, #0
        break;
 8001c18:	e7d9      	b.n	8001bce <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c1a:	6862      	ldr	r2, [r4, #4]
 8001c1c:	0853      	lsrs	r3, r2, #1
 8001c1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c26:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c28:	2500      	movs	r5, #0
        break;
 8001c2a:	e7d0      	b.n	8001bce <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2c:	2501      	movs	r5, #1
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e7cd      	b.n	8001bce <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 8001c32:	2501      	movs	r5, #1
 8001c34:	e000      	b.n	8001c38 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 8001c36:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c3c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001c3e:	4628      	mov	r0, r5
 8001c40:	bd38      	pop	{r3, r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	01e84800 	.word	0x01e84800
 8001c48:	00f42400 	.word	0x00f42400

08001c4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c4e:	f013 0f01 	tst.w	r3, #1
 8001c52:	d006      	beq.n	8001c62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	6853      	ldr	r3, [r2, #4]
 8001c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c5c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c64:	f013 0f02 	tst.w	r3, #2
 8001c68:	d006      	beq.n	8001c78 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c6a:	6802      	ldr	r2, [r0, #0]
 8001c6c:	6853      	ldr	r3, [r2, #4]
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c72:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c7a:	f013 0f04 	tst.w	r3, #4
 8001c7e:	d006      	beq.n	8001c8e <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	6853      	ldr	r3, [r2, #4]
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c88:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c90:	f013 0f08 	tst.w	r3, #8
 8001c94:	d006      	beq.n	8001ca4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c96:	6802      	ldr	r2, [r0, #0]
 8001c98:	6853      	ldr	r3, [r2, #4]
 8001c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c9e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ca6:	f013 0f10 	tst.w	r3, #16
 8001caa:	d006      	beq.n	8001cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cac:	6802      	ldr	r2, [r0, #0]
 8001cae:	6893      	ldr	r3, [r2, #8]
 8001cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cbc:	f013 0f20 	tst.w	r3, #32
 8001cc0:	d006      	beq.n	8001cd0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cc2:	6802      	ldr	r2, [r0, #0]
 8001cc4:	6893      	ldr	r3, [r2, #8]
 8001cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cd6:	d00a      	beq.n	8001cee <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cd8:	6802      	ldr	r2, [r0, #0]
 8001cda:	6853      	ldr	r3, [r2, #4]
 8001cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ce0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ce6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cec:	d00b      	beq.n	8001d06 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cf4:	d006      	beq.n	8001d04 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cf6:	6802      	ldr	r2, [r0, #0]
 8001cf8:	6853      	ldr	r3, [r2, #4]
 8001cfa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001cfe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6053      	str	r3, [r2, #4]
  }
}
 8001d04:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d06:	6802      	ldr	r2, [r0, #0]
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001d0e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6053      	str	r3, [r2, #4]
 8001d14:	e7eb      	b.n	8001cee <UART_AdvFeatureConfig+0xa2>

08001d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001d16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d1a:	4605      	mov	r5, r0
 8001d1c:	460f      	mov	r7, r1
 8001d1e:	4616      	mov	r6, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	682c      	ldr	r4, [r5, #0]
 8001d28:	69e4      	ldr	r4, [r4, #28]
 8001d2a:	ea37 0304 	bics.w	r3, r7, r4
 8001d2e:	bf0c      	ite	eq
 8001d30:	2401      	moveq	r4, #1
 8001d32:	2400      	movne	r4, #0
 8001d34:	42b4      	cmp	r4, r6
 8001d36:	d13c      	bne.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001d3c:	d0f3      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe ff19 	bl	8000b74 <HAL_GetTick>
 8001d42:	eba0 0009 	sub.w	r0, r0, r9
 8001d46:	4540      	cmp	r0, r8
 8001d48:	d821      	bhi.n	8001d8e <UART_WaitOnFlagUntilTimeout+0x78>
 8001d4a:	f1b8 0f00 	cmp.w	r8, #0
 8001d4e:	d01e      	beq.n	8001d8e <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f012 0f04 	tst.w	r2, #4
 8001d58:	d0e5      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001d60:	d0e1      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d66:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d68:	682a      	ldr	r2, [r5, #0]
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d70:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d72:	682a      	ldr	r2, [r5, #0]
 8001d74:	6893      	ldr	r3, [r2, #8]
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001d80:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d82:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d84:	2300      	movs	r3, #0
 8001d86:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	e012      	b.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d8e:	682a      	ldr	r2, [r5, #0]
 8001d90:	6813      	ldr	r3, [r2, #0]
 8001d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d96:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d98:	682a      	ldr	r2, [r5, #0]
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001da2:	2320      	movs	r3, #32
 8001da4:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001da6:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001da8:	2300      	movs	r3, #0
 8001daa:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
 8001db0:	e000      	b.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001db2:	2000      	movs	r0, #0
}
 8001db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001db8 <HAL_UART_Transmit>:
{
 8001db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001dc0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d159      	bne.n	8001e7a <HAL_UART_Transmit+0xc2>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460d      	mov	r5, r1
 8001dca:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001dcc:	fab2 f382 	clz	r3, r2
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	bf08      	it	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d152      	bne.n	8001e82 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001ddc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d050      	beq.n	8001e86 <HAL_UART_Transmit+0xce>
 8001de4:	2301      	movs	r3, #1
 8001de6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dee:	2321      	movs	r3, #33	; 0x21
 8001df0:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001df2:	f7fe febf 	bl	8000b74 <HAL_GetTick>
 8001df6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001df8:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001dfc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	68a3      	ldr	r3, [r4, #8]
 8001e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e06:	d005      	beq.n	8001e14 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8001e08:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001e12:	e014      	b.n	8001e3e <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e14:	6923      	ldr	r3, [r4, #16]
 8001e16:	b113      	cbz	r3, 8001e1e <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8001e18:	f04f 0800 	mov.w	r8, #0
 8001e1c:	e7f6      	b.n	8001e0c <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 8001e1e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001e20:	2500      	movs	r5, #0
 8001e22:	e7f3      	b.n	8001e0c <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e24:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001e30:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001e34:	b292      	uxth	r2, r2
 8001e36:	3a01      	subs	r2, #1
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001e3e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	b173      	cbz	r3, 8001e64 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e46:	9600      	str	r6, [sp, #0]
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff ff61 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001e54:	b9c8      	cbnz	r0, 8001e8a <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d0e4      	beq.n	8001e24 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e5a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e62:	e7e5      	b.n	8001e30 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e64:	9600      	str	r6, [sp, #0]
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff ff52 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001e72:	b960      	cbnz	r0, 8001e8e <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001e74:	2320      	movs	r3, #32
 8001e76:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001e78:	e000      	b.n	8001e7c <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001e7a:	2002      	movs	r0, #2
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e7fa      	b.n	8001e7c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001e86:	2002      	movs	r0, #2
 8001e88:	e7f8      	b.n	8001e7c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	e7f6      	b.n	8001e7c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001e8e:	2003      	movs	r0, #3
 8001e90:	e7f4      	b.n	8001e7c <HAL_UART_Transmit+0xc4>

08001e92 <HAL_UART_Receive>:
{
 8001e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e9a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	f040 8081 	bne.w	8001fa4 <HAL_UART_Receive+0x112>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	460d      	mov	r5, r1
 8001ea6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ea8:	fab2 f382 	clz	r3, r2
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	2900      	cmp	r1, #0
 8001eb0:	bf08      	it	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d179      	bne.n	8001fac <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001eb8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d077      	beq.n	8001fb0 <HAL_UART_Receive+0x11e>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eca:	2322      	movs	r3, #34	; 0x22
 8001ecc:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001ece:	f7fe fe51 	bl	8000b74 <HAL_GetTick>
 8001ed2:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001ed4:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001ed8:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001edc:	68a3      	ldr	r3, [r4, #8]
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee2:	d006      	beq.n	8001ef2 <HAL_UART_Receive+0x60>
 8001ee4:	b9a3      	cbnz	r3, 8001f10 <HAL_UART_Receive+0x7e>
 8001ee6:	6922      	ldr	r2, [r4, #16]
 8001ee8:	b972      	cbnz	r2, 8001f08 <HAL_UART_Receive+0x76>
 8001eea:	22ff      	movs	r2, #255	; 0xff
 8001eec:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ef0:	e014      	b.n	8001f1c <HAL_UART_Receive+0x8a>
 8001ef2:	6922      	ldr	r2, [r4, #16]
 8001ef4:	b922      	cbnz	r2, 8001f00 <HAL_UART_Receive+0x6e>
 8001ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001efa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001efe:	e00d      	b.n	8001f1c <HAL_UART_Receive+0x8a>
 8001f00:	22ff      	movs	r2, #255	; 0xff
 8001f02:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f06:	e009      	b.n	8001f1c <HAL_UART_Receive+0x8a>
 8001f08:	227f      	movs	r2, #127	; 0x7f
 8001f0a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f0e:	e005      	b.n	8001f1c <HAL_UART_Receive+0x8a>
 8001f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f14:	d00d      	beq.n	8001f32 <HAL_UART_Receive+0xa0>
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f1c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f24:	d00f      	beq.n	8001f46 <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001f26:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001f30:	e01e      	b.n	8001f70 <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 8001f32:	6922      	ldr	r2, [r4, #16]
 8001f34:	b91a      	cbnz	r2, 8001f3e <HAL_UART_Receive+0xac>
 8001f36:	227f      	movs	r2, #127	; 0x7f
 8001f38:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f3c:	e7ee      	b.n	8001f1c <HAL_UART_Receive+0x8a>
 8001f3e:	223f      	movs	r2, #63	; 0x3f
 8001f40:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001f44:	e7ea      	b.n	8001f1c <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f46:	6923      	ldr	r3, [r4, #16]
 8001f48:	b113      	cbz	r3, 8001f50 <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 8001f4a:	f04f 0900 	mov.w	r9, #0
 8001f4e:	e7ec      	b.n	8001f2a <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001f50:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001f52:	2500      	movs	r5, #0
 8001f54:	e7e9      	b.n	8001f2a <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	ea08 0303 	and.w	r3, r8, r3
 8001f5e:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001f62:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001f66:	b292      	uxth	r2, r2
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001f70:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b18b      	cbz	r3, 8001f9c <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f78:	9600      	str	r6, [sp, #0]
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2120      	movs	r1, #32
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fec8 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001f86:	b9a8      	cbnz	r0, 8001fb4 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	d0e4      	beq.n	8001f56 <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f90:	fa5f f388 	uxtb.w	r3, r8
 8001f94:	4013      	ands	r3, r2
 8001f96:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001f9a:	e7e2      	b.n	8001f62 <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001fa4:	2002      	movs	r0, #2
}
 8001fa6:	b003      	add	sp, #12
 8001fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7fa      	b.n	8001fa6 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	e7f8      	b.n	8001fa6 <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	e7f6      	b.n	8001fa6 <HAL_UART_Receive+0x114>

08001fb8 <UART_CheckIdleState>:
{
 8001fb8:	b530      	push	{r4, r5, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001fc2:	f7fe fdd7 	bl	8000b74 <HAL_GetTick>
 8001fc6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f013 0f08 	tst.w	r3, #8
 8001fd0:	d10c      	bne.n	8001fec <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f013 0f04 	tst.w	r3, #4
 8001fda:	d115      	bne.n	8002008 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001fe8:	b003      	add	sp, #12
 8001fea:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fe8b 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8002000:	2800      	cmp	r0, #0
 8002002:	d0e6      	beq.n	8001fd2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002004:	2003      	movs	r0, #3
 8002006:	e7ef      	b.n	8001fe8 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	462b      	mov	r3, r5
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff fe7d 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 800201c:	2800      	cmp	r0, #0
 800201e:	d0dd      	beq.n	8001fdc <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002020:	2003      	movs	r0, #3
 8002022:	e7e1      	b.n	8001fe8 <UART_CheckIdleState+0x30>

08002024 <HAL_UART_Init>:
  if (huart == NULL)
 8002024:	b368      	cbz	r0, 8002082 <HAL_UART_Init+0x5e>
{
 8002026:	b510      	push	{r4, lr}
 8002028:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800202c:	b303      	cbz	r3, 8002070 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800202e:	2324      	movs	r3, #36	; 0x24
 8002030:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff fc35 	bl	80018ac <UART_SetConfig>
 8002042:	2801      	cmp	r0, #1
 8002044:	d013      	beq.n	800206e <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002048:	b9bb      	cbnz	r3, 800207a <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6853      	ldr	r3, [r2, #4]
 800204e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002052:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	6893      	ldr	r3, [r2, #8]
 8002058:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800205c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ffa5 	bl	8001fb8 <UART_CheckIdleState>
}
 800206e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002070:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002074:	f7fe fc6c 	bl	8000950 <HAL_UART_MspInit>
 8002078:	e7d9      	b.n	800202e <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff fde6 	bl	8001c4c <UART_AdvFeatureConfig>
 8002080:	e7e3      	b.n	800204a <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002082:	2001      	movs	r0, #1
}
 8002084:	4770      	bx	lr
	...

08002088 <__sflush_r>:
 8002088:	898a      	ldrh	r2, [r1, #12]
 800208a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800208e:	4605      	mov	r5, r0
 8002090:	0710      	lsls	r0, r2, #28
 8002092:	460c      	mov	r4, r1
 8002094:	d458      	bmi.n	8002148 <__sflush_r+0xc0>
 8002096:	684b      	ldr	r3, [r1, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	dc05      	bgt.n	80020a8 <__sflush_r+0x20>
 800209c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	dc02      	bgt.n	80020a8 <__sflush_r+0x20>
 80020a2:	2000      	movs	r0, #0
 80020a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d0f9      	beq.n	80020a2 <__sflush_r+0x1a>
 80020ae:	2300      	movs	r3, #0
 80020b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020b4:	682f      	ldr	r7, [r5, #0]
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	d032      	beq.n	8002120 <__sflush_r+0x98>
 80020ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020bc:	89a3      	ldrh	r3, [r4, #12]
 80020be:	075a      	lsls	r2, r3, #29
 80020c0:	d505      	bpl.n	80020ce <__sflush_r+0x46>
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	1ac0      	subs	r0, r0, r3
 80020c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020c8:	b10b      	cbz	r3, 80020ce <__sflush_r+0x46>
 80020ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	4602      	mov	r2, r0
 80020d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020d4:	6a21      	ldr	r1, [r4, #32]
 80020d6:	4628      	mov	r0, r5
 80020d8:	47b0      	blx	r6
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	d106      	bne.n	80020ee <__sflush_r+0x66>
 80020e0:	6829      	ldr	r1, [r5, #0]
 80020e2:	291d      	cmp	r1, #29
 80020e4:	d82c      	bhi.n	8002140 <__sflush_r+0xb8>
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <__sflush_r+0x108>)
 80020e8:	40ca      	lsrs	r2, r1
 80020ea:	07d6      	lsls	r6, r2, #31
 80020ec:	d528      	bpl.n	8002140 <__sflush_r+0xb8>
 80020ee:	2200      	movs	r2, #0
 80020f0:	6062      	str	r2, [r4, #4]
 80020f2:	04d9      	lsls	r1, r3, #19
 80020f4:	6922      	ldr	r2, [r4, #16]
 80020f6:	6022      	str	r2, [r4, #0]
 80020f8:	d504      	bpl.n	8002104 <__sflush_r+0x7c>
 80020fa:	1c42      	adds	r2, r0, #1
 80020fc:	d101      	bne.n	8002102 <__sflush_r+0x7a>
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	b903      	cbnz	r3, 8002104 <__sflush_r+0x7c>
 8002102:	6560      	str	r0, [r4, #84]	; 0x54
 8002104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002106:	602f      	str	r7, [r5, #0]
 8002108:	2900      	cmp	r1, #0
 800210a:	d0ca      	beq.n	80020a2 <__sflush_r+0x1a>
 800210c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002110:	4299      	cmp	r1, r3
 8002112:	d002      	beq.n	800211a <__sflush_r+0x92>
 8002114:	4628      	mov	r0, r5
 8002116:	f000 f9b1 	bl	800247c <_free_r>
 800211a:	2000      	movs	r0, #0
 800211c:	6360      	str	r0, [r4, #52]	; 0x34
 800211e:	e7c1      	b.n	80020a4 <__sflush_r+0x1c>
 8002120:	6a21      	ldr	r1, [r4, #32]
 8002122:	2301      	movs	r3, #1
 8002124:	4628      	mov	r0, r5
 8002126:	47b0      	blx	r6
 8002128:	1c41      	adds	r1, r0, #1
 800212a:	d1c7      	bne.n	80020bc <__sflush_r+0x34>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0c4      	beq.n	80020bc <__sflush_r+0x34>
 8002132:	2b1d      	cmp	r3, #29
 8002134:	d001      	beq.n	800213a <__sflush_r+0xb2>
 8002136:	2b16      	cmp	r3, #22
 8002138:	d101      	bne.n	800213e <__sflush_r+0xb6>
 800213a:	602f      	str	r7, [r5, #0]
 800213c:	e7b1      	b.n	80020a2 <__sflush_r+0x1a>
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	e7ad      	b.n	80020a4 <__sflush_r+0x1c>
 8002148:	690f      	ldr	r7, [r1, #16]
 800214a:	2f00      	cmp	r7, #0
 800214c:	d0a9      	beq.n	80020a2 <__sflush_r+0x1a>
 800214e:	0793      	lsls	r3, r2, #30
 8002150:	680e      	ldr	r6, [r1, #0]
 8002152:	bf08      	it	eq
 8002154:	694b      	ldreq	r3, [r1, #20]
 8002156:	600f      	str	r7, [r1, #0]
 8002158:	bf18      	it	ne
 800215a:	2300      	movne	r3, #0
 800215c:	eba6 0807 	sub.w	r8, r6, r7
 8002160:	608b      	str	r3, [r1, #8]
 8002162:	f1b8 0f00 	cmp.w	r8, #0
 8002166:	dd9c      	ble.n	80020a2 <__sflush_r+0x1a>
 8002168:	6a21      	ldr	r1, [r4, #32]
 800216a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800216c:	4643      	mov	r3, r8
 800216e:	463a      	mov	r2, r7
 8002170:	4628      	mov	r0, r5
 8002172:	47b0      	blx	r6
 8002174:	2800      	cmp	r0, #0
 8002176:	dc06      	bgt.n	8002186 <__sflush_r+0xfe>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217e:	81a3      	strh	r3, [r4, #12]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	e78e      	b.n	80020a4 <__sflush_r+0x1c>
 8002186:	4407      	add	r7, r0
 8002188:	eba8 0800 	sub.w	r8, r8, r0
 800218c:	e7e9      	b.n	8002162 <__sflush_r+0xda>
 800218e:	bf00      	nop
 8002190:	20400001 	.word	0x20400001

08002194 <_fflush_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	690b      	ldr	r3, [r1, #16]
 8002198:	4605      	mov	r5, r0
 800219a:	460c      	mov	r4, r1
 800219c:	b913      	cbnz	r3, 80021a4 <_fflush_r+0x10>
 800219e:	2500      	movs	r5, #0
 80021a0:	4628      	mov	r0, r5
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	b118      	cbz	r0, 80021ae <_fflush_r+0x1a>
 80021a6:	6983      	ldr	r3, [r0, #24]
 80021a8:	b90b      	cbnz	r3, 80021ae <_fflush_r+0x1a>
 80021aa:	f000 f899 	bl	80022e0 <__sinit>
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <_fflush_r+0x6c>)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	d11b      	bne.n	80021ec <_fflush_r+0x58>
 80021b4:	686c      	ldr	r4, [r5, #4]
 80021b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ef      	beq.n	800219e <_fflush_r+0xa>
 80021be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021c0:	07d0      	lsls	r0, r2, #31
 80021c2:	d404      	bmi.n	80021ce <_fflush_r+0x3a>
 80021c4:	0599      	lsls	r1, r3, #22
 80021c6:	d402      	bmi.n	80021ce <_fflush_r+0x3a>
 80021c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ca:	f000 f94c 	bl	8002466 <__retarget_lock_acquire_recursive>
 80021ce:	4628      	mov	r0, r5
 80021d0:	4621      	mov	r1, r4
 80021d2:	f7ff ff59 	bl	8002088 <__sflush_r>
 80021d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021d8:	07da      	lsls	r2, r3, #31
 80021da:	4605      	mov	r5, r0
 80021dc:	d4e0      	bmi.n	80021a0 <_fflush_r+0xc>
 80021de:	89a3      	ldrh	r3, [r4, #12]
 80021e0:	059b      	lsls	r3, r3, #22
 80021e2:	d4dd      	bmi.n	80021a0 <_fflush_r+0xc>
 80021e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021e6:	f000 f93f 	bl	8002468 <__retarget_lock_release_recursive>
 80021ea:	e7d9      	b.n	80021a0 <_fflush_r+0xc>
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <_fflush_r+0x70>)
 80021ee:	429c      	cmp	r4, r3
 80021f0:	d101      	bne.n	80021f6 <_fflush_r+0x62>
 80021f2:	68ac      	ldr	r4, [r5, #8]
 80021f4:	e7df      	b.n	80021b6 <_fflush_r+0x22>
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <_fflush_r+0x74>)
 80021f8:	429c      	cmp	r4, r3
 80021fa:	bf08      	it	eq
 80021fc:	68ec      	ldreq	r4, [r5, #12]
 80021fe:	e7da      	b.n	80021b6 <_fflush_r+0x22>
 8002200:	080030bc 	.word	0x080030bc
 8002204:	080030dc 	.word	0x080030dc
 8002208:	0800309c 	.word	0x0800309c

0800220c <fflush>:
 800220c:	4601      	mov	r1, r0
 800220e:	b920      	cbnz	r0, 800221a <fflush+0xe>
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <fflush+0x18>)
 8002212:	4905      	ldr	r1, [pc, #20]	; (8002228 <fflush+0x1c>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f000 b8e1 	b.w	80023dc <_fwalk_reent>
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <fflush+0x20>)
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	f7ff bfb9 	b.w	8002194 <_fflush_r>
 8002222:	bf00      	nop
 8002224:	080030fc 	.word	0x080030fc
 8002228:	08002195 	.word	0x08002195
 800222c:	2000000c 	.word	0x2000000c

08002230 <std>:
 8002230:	2300      	movs	r3, #0
 8002232:	b510      	push	{r4, lr}
 8002234:	4604      	mov	r4, r0
 8002236:	e9c0 3300 	strd	r3, r3, [r0]
 800223a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800223e:	6083      	str	r3, [r0, #8]
 8002240:	8181      	strh	r1, [r0, #12]
 8002242:	6643      	str	r3, [r0, #100]	; 0x64
 8002244:	81c2      	strh	r2, [r0, #14]
 8002246:	6183      	str	r3, [r0, #24]
 8002248:	4619      	mov	r1, r3
 800224a:	2208      	movs	r2, #8
 800224c:	305c      	adds	r0, #92	; 0x5c
 800224e:	f000 f90c 	bl	800246a <memset>
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <std+0x38>)
 8002254:	6263      	str	r3, [r4, #36]	; 0x24
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <std+0x3c>)
 8002258:	62a3      	str	r3, [r4, #40]	; 0x28
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <std+0x40>)
 800225c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <std+0x44>)
 8002260:	6224      	str	r4, [r4, #32]
 8002262:	6323      	str	r3, [r4, #48]	; 0x30
 8002264:	bd10      	pop	{r4, pc}
 8002266:	bf00      	nop
 8002268:	08002621 	.word	0x08002621
 800226c:	08002643 	.word	0x08002643
 8002270:	0800267b 	.word	0x0800267b
 8002274:	0800269f 	.word	0x0800269f

08002278 <_cleanup_r>:
 8002278:	4901      	ldr	r1, [pc, #4]	; (8002280 <_cleanup_r+0x8>)
 800227a:	f000 b8af 	b.w	80023dc <_fwalk_reent>
 800227e:	bf00      	nop
 8002280:	08002195 	.word	0x08002195

08002284 <__sfmoreglue>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	1e4a      	subs	r2, r1, #1
 8002288:	2568      	movs	r5, #104	; 0x68
 800228a:	4355      	muls	r5, r2
 800228c:	460e      	mov	r6, r1
 800228e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002292:	f000 f943 	bl	800251c <_malloc_r>
 8002296:	4604      	mov	r4, r0
 8002298:	b140      	cbz	r0, 80022ac <__sfmoreglue+0x28>
 800229a:	2100      	movs	r1, #0
 800229c:	e9c0 1600 	strd	r1, r6, [r0]
 80022a0:	300c      	adds	r0, #12
 80022a2:	60a0      	str	r0, [r4, #8]
 80022a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022a8:	f000 f8df 	bl	800246a <memset>
 80022ac:	4620      	mov	r0, r4
 80022ae:	bd70      	pop	{r4, r5, r6, pc}

080022b0 <__sfp_lock_acquire>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__sfp_lock_acquire+0x8>)
 80022b2:	f000 b8d8 	b.w	8002466 <__retarget_lock_acquire_recursive>
 80022b6:	bf00      	nop
 80022b8:	200001c0 	.word	0x200001c0

080022bc <__sfp_lock_release>:
 80022bc:	4801      	ldr	r0, [pc, #4]	; (80022c4 <__sfp_lock_release+0x8>)
 80022be:	f000 b8d3 	b.w	8002468 <__retarget_lock_release_recursive>
 80022c2:	bf00      	nop
 80022c4:	200001c0 	.word	0x200001c0

080022c8 <__sinit_lock_acquire>:
 80022c8:	4801      	ldr	r0, [pc, #4]	; (80022d0 <__sinit_lock_acquire+0x8>)
 80022ca:	f000 b8cc 	b.w	8002466 <__retarget_lock_acquire_recursive>
 80022ce:	bf00      	nop
 80022d0:	200001bb 	.word	0x200001bb

080022d4 <__sinit_lock_release>:
 80022d4:	4801      	ldr	r0, [pc, #4]	; (80022dc <__sinit_lock_release+0x8>)
 80022d6:	f000 b8c7 	b.w	8002468 <__retarget_lock_release_recursive>
 80022da:	bf00      	nop
 80022dc:	200001bb 	.word	0x200001bb

080022e0 <__sinit>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	f7ff fff0 	bl	80022c8 <__sinit_lock_acquire>
 80022e8:	69a3      	ldr	r3, [r4, #24]
 80022ea:	b11b      	cbz	r3, 80022f4 <__sinit+0x14>
 80022ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f0:	f7ff bff0 	b.w	80022d4 <__sinit_lock_release>
 80022f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022f8:	6523      	str	r3, [r4, #80]	; 0x50
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <__sinit+0x68>)
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <__sinit+0x6c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	62a2      	str	r2, [r4, #40]	; 0x28
 8002302:	42a3      	cmp	r3, r4
 8002304:	bf04      	itt	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	61a3      	streq	r3, [r4, #24]
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f820 	bl	8002350 <__sfp>
 8002310:	6060      	str	r0, [r4, #4]
 8002312:	4620      	mov	r0, r4
 8002314:	f000 f81c 	bl	8002350 <__sfp>
 8002318:	60a0      	str	r0, [r4, #8]
 800231a:	4620      	mov	r0, r4
 800231c:	f000 f818 	bl	8002350 <__sfp>
 8002320:	2200      	movs	r2, #0
 8002322:	60e0      	str	r0, [r4, #12]
 8002324:	2104      	movs	r1, #4
 8002326:	6860      	ldr	r0, [r4, #4]
 8002328:	f7ff ff82 	bl	8002230 <std>
 800232c:	68a0      	ldr	r0, [r4, #8]
 800232e:	2201      	movs	r2, #1
 8002330:	2109      	movs	r1, #9
 8002332:	f7ff ff7d 	bl	8002230 <std>
 8002336:	68e0      	ldr	r0, [r4, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	2112      	movs	r1, #18
 800233c:	f7ff ff78 	bl	8002230 <std>
 8002340:	2301      	movs	r3, #1
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	e7d2      	b.n	80022ec <__sinit+0xc>
 8002346:	bf00      	nop
 8002348:	080030fc 	.word	0x080030fc
 800234c:	08002279 	.word	0x08002279

08002350 <__sfp>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4607      	mov	r7, r0
 8002354:	f7ff ffac 	bl	80022b0 <__sfp_lock_acquire>
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <__sfp+0x84>)
 800235a:	681e      	ldr	r6, [r3, #0]
 800235c:	69b3      	ldr	r3, [r6, #24]
 800235e:	b913      	cbnz	r3, 8002366 <__sfp+0x16>
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff ffbd 	bl	80022e0 <__sinit>
 8002366:	3648      	adds	r6, #72	; 0x48
 8002368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800236c:	3b01      	subs	r3, #1
 800236e:	d503      	bpl.n	8002378 <__sfp+0x28>
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	b30b      	cbz	r3, 80023b8 <__sfp+0x68>
 8002374:	6836      	ldr	r6, [r6, #0]
 8002376:	e7f7      	b.n	8002368 <__sfp+0x18>
 8002378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800237c:	b9d5      	cbnz	r5, 80023b4 <__sfp+0x64>
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <__sfp+0x88>)
 8002380:	60e3      	str	r3, [r4, #12]
 8002382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002386:	6665      	str	r5, [r4, #100]	; 0x64
 8002388:	f000 f86c 	bl	8002464 <__retarget_lock_init_recursive>
 800238c:	f7ff ff96 	bl	80022bc <__sfp_lock_release>
 8002390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002398:	6025      	str	r5, [r4, #0]
 800239a:	61a5      	str	r5, [r4, #24]
 800239c:	2208      	movs	r2, #8
 800239e:	4629      	mov	r1, r5
 80023a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023a4:	f000 f861 	bl	800246a <memset>
 80023a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023b0:	4620      	mov	r0, r4
 80023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b4:	3468      	adds	r4, #104	; 0x68
 80023b6:	e7d9      	b.n	800236c <__sfp+0x1c>
 80023b8:	2104      	movs	r1, #4
 80023ba:	4638      	mov	r0, r7
 80023bc:	f7ff ff62 	bl	8002284 <__sfmoreglue>
 80023c0:	4604      	mov	r4, r0
 80023c2:	6030      	str	r0, [r6, #0]
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d1d5      	bne.n	8002374 <__sfp+0x24>
 80023c8:	f7ff ff78 	bl	80022bc <__sfp_lock_release>
 80023cc:	230c      	movs	r3, #12
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	e7ee      	b.n	80023b0 <__sfp+0x60>
 80023d2:	bf00      	nop
 80023d4:	080030fc 	.word	0x080030fc
 80023d8:	ffff0001 	.word	0xffff0001

080023dc <_fwalk_reent>:
 80023dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e0:	4606      	mov	r6, r0
 80023e2:	4688      	mov	r8, r1
 80023e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023e8:	2700      	movs	r7, #0
 80023ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023ee:	f1b9 0901 	subs.w	r9, r9, #1
 80023f2:	d505      	bpl.n	8002400 <_fwalk_reent+0x24>
 80023f4:	6824      	ldr	r4, [r4, #0]
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	d1f7      	bne.n	80023ea <_fwalk_reent+0xe>
 80023fa:	4638      	mov	r0, r7
 80023fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002400:	89ab      	ldrh	r3, [r5, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d907      	bls.n	8002416 <_fwalk_reent+0x3a>
 8002406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800240a:	3301      	adds	r3, #1
 800240c:	d003      	beq.n	8002416 <_fwalk_reent+0x3a>
 800240e:	4629      	mov	r1, r5
 8002410:	4630      	mov	r0, r6
 8002412:	47c0      	blx	r8
 8002414:	4307      	orrs	r7, r0
 8002416:	3568      	adds	r5, #104	; 0x68
 8002418:	e7e9      	b.n	80023ee <_fwalk_reent+0x12>
	...

0800241c <__libc_init_array>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4d0d      	ldr	r5, [pc, #52]	; (8002454 <__libc_init_array+0x38>)
 8002420:	4c0d      	ldr	r4, [pc, #52]	; (8002458 <__libc_init_array+0x3c>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	2600      	movs	r6, #0
 8002428:	42a6      	cmp	r6, r4
 800242a:	d109      	bne.n	8002440 <__libc_init_array+0x24>
 800242c:	4d0b      	ldr	r5, [pc, #44]	; (800245c <__libc_init_array+0x40>)
 800242e:	4c0c      	ldr	r4, [pc, #48]	; (8002460 <__libc_init_array+0x44>)
 8002430:	f000 fdee 	bl	8003010 <_init>
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	2600      	movs	r6, #0
 800243a:	42a6      	cmp	r6, r4
 800243c:	d105      	bne.n	800244a <__libc_init_array+0x2e>
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	f855 3b04 	ldr.w	r3, [r5], #4
 8002444:	4798      	blx	r3
 8002446:	3601      	adds	r6, #1
 8002448:	e7ee      	b.n	8002428 <__libc_init_array+0xc>
 800244a:	f855 3b04 	ldr.w	r3, [r5], #4
 800244e:	4798      	blx	r3
 8002450:	3601      	adds	r6, #1
 8002452:	e7f2      	b.n	800243a <__libc_init_array+0x1e>
 8002454:	0800313c 	.word	0x0800313c
 8002458:	0800313c 	.word	0x0800313c
 800245c:	0800313c 	.word	0x0800313c
 8002460:	08003140 	.word	0x08003140

08002464 <__retarget_lock_init_recursive>:
 8002464:	4770      	bx	lr

08002466 <__retarget_lock_acquire_recursive>:
 8002466:	4770      	bx	lr

08002468 <__retarget_lock_release_recursive>:
 8002468:	4770      	bx	lr

0800246a <memset>:
 800246a:	4402      	add	r2, r0
 800246c:	4603      	mov	r3, r0
 800246e:	4293      	cmp	r3, r2
 8002470:	d100      	bne.n	8002474 <memset+0xa>
 8002472:	4770      	bx	lr
 8002474:	f803 1b01 	strb.w	r1, [r3], #1
 8002478:	e7f9      	b.n	800246e <memset+0x4>
	...

0800247c <_free_r>:
 800247c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800247e:	2900      	cmp	r1, #0
 8002480:	d048      	beq.n	8002514 <_free_r+0x98>
 8002482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002486:	9001      	str	r0, [sp, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f1a1 0404 	sub.w	r4, r1, #4
 800248e:	bfb8      	it	lt
 8002490:	18e4      	addlt	r4, r4, r3
 8002492:	f000 f93d 	bl	8002710 <__malloc_lock>
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <_free_r+0x9c>)
 8002498:	9801      	ldr	r0, [sp, #4]
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	4615      	mov	r5, r2
 800249e:	b933      	cbnz	r3, 80024ae <_free_r+0x32>
 80024a0:	6063      	str	r3, [r4, #4]
 80024a2:	6014      	str	r4, [r2, #0]
 80024a4:	b003      	add	sp, #12
 80024a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024aa:	f000 b937 	b.w	800271c <__malloc_unlock>
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	d90b      	bls.n	80024ca <_free_r+0x4e>
 80024b2:	6821      	ldr	r1, [r4, #0]
 80024b4:	1862      	adds	r2, r4, r1
 80024b6:	4293      	cmp	r3, r2
 80024b8:	bf04      	itt	eq
 80024ba:	681a      	ldreq	r2, [r3, #0]
 80024bc:	685b      	ldreq	r3, [r3, #4]
 80024be:	6063      	str	r3, [r4, #4]
 80024c0:	bf04      	itt	eq
 80024c2:	1852      	addeq	r2, r2, r1
 80024c4:	6022      	streq	r2, [r4, #0]
 80024c6:	602c      	str	r4, [r5, #0]
 80024c8:	e7ec      	b.n	80024a4 <_free_r+0x28>
 80024ca:	461a      	mov	r2, r3
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	b10b      	cbz	r3, 80024d4 <_free_r+0x58>
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d9fa      	bls.n	80024ca <_free_r+0x4e>
 80024d4:	6811      	ldr	r1, [r2, #0]
 80024d6:	1855      	adds	r5, r2, r1
 80024d8:	42a5      	cmp	r5, r4
 80024da:	d10b      	bne.n	80024f4 <_free_r+0x78>
 80024dc:	6824      	ldr	r4, [r4, #0]
 80024de:	4421      	add	r1, r4
 80024e0:	1854      	adds	r4, r2, r1
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	6011      	str	r1, [r2, #0]
 80024e6:	d1dd      	bne.n	80024a4 <_free_r+0x28>
 80024e8:	681c      	ldr	r4, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	6053      	str	r3, [r2, #4]
 80024ee:	4421      	add	r1, r4
 80024f0:	6011      	str	r1, [r2, #0]
 80024f2:	e7d7      	b.n	80024a4 <_free_r+0x28>
 80024f4:	d902      	bls.n	80024fc <_free_r+0x80>
 80024f6:	230c      	movs	r3, #12
 80024f8:	6003      	str	r3, [r0, #0]
 80024fa:	e7d3      	b.n	80024a4 <_free_r+0x28>
 80024fc:	6825      	ldr	r5, [r4, #0]
 80024fe:	1961      	adds	r1, r4, r5
 8002500:	428b      	cmp	r3, r1
 8002502:	bf04      	itt	eq
 8002504:	6819      	ldreq	r1, [r3, #0]
 8002506:	685b      	ldreq	r3, [r3, #4]
 8002508:	6063      	str	r3, [r4, #4]
 800250a:	bf04      	itt	eq
 800250c:	1949      	addeq	r1, r1, r5
 800250e:	6021      	streq	r1, [r4, #0]
 8002510:	6054      	str	r4, [r2, #4]
 8002512:	e7c7      	b.n	80024a4 <_free_r+0x28>
 8002514:	b003      	add	sp, #12
 8002516:	bd30      	pop	{r4, r5, pc}
 8002518:	200000a8 	.word	0x200000a8

0800251c <_malloc_r>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	1ccd      	adds	r5, r1, #3
 8002520:	f025 0503 	bic.w	r5, r5, #3
 8002524:	3508      	adds	r5, #8
 8002526:	2d0c      	cmp	r5, #12
 8002528:	bf38      	it	cc
 800252a:	250c      	movcc	r5, #12
 800252c:	2d00      	cmp	r5, #0
 800252e:	4606      	mov	r6, r0
 8002530:	db01      	blt.n	8002536 <_malloc_r+0x1a>
 8002532:	42a9      	cmp	r1, r5
 8002534:	d903      	bls.n	800253e <_malloc_r+0x22>
 8002536:	230c      	movs	r3, #12
 8002538:	6033      	str	r3, [r6, #0]
 800253a:	2000      	movs	r0, #0
 800253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800253e:	f000 f8e7 	bl	8002710 <__malloc_lock>
 8002542:	4921      	ldr	r1, [pc, #132]	; (80025c8 <_malloc_r+0xac>)
 8002544:	680a      	ldr	r2, [r1, #0]
 8002546:	4614      	mov	r4, r2
 8002548:	b99c      	cbnz	r4, 8002572 <_malloc_r+0x56>
 800254a:	4f20      	ldr	r7, [pc, #128]	; (80025cc <_malloc_r+0xb0>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b923      	cbnz	r3, 800255a <_malloc_r+0x3e>
 8002550:	4621      	mov	r1, r4
 8002552:	4630      	mov	r0, r6
 8002554:	f000 f854 	bl	8002600 <_sbrk_r>
 8002558:	6038      	str	r0, [r7, #0]
 800255a:	4629      	mov	r1, r5
 800255c:	4630      	mov	r0, r6
 800255e:	f000 f84f 	bl	8002600 <_sbrk_r>
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	d123      	bne.n	80025ae <_malloc_r+0x92>
 8002566:	230c      	movs	r3, #12
 8002568:	6033      	str	r3, [r6, #0]
 800256a:	4630      	mov	r0, r6
 800256c:	f000 f8d6 	bl	800271c <__malloc_unlock>
 8002570:	e7e3      	b.n	800253a <_malloc_r+0x1e>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	1b5b      	subs	r3, r3, r5
 8002576:	d417      	bmi.n	80025a8 <_malloc_r+0x8c>
 8002578:	2b0b      	cmp	r3, #11
 800257a:	d903      	bls.n	8002584 <_malloc_r+0x68>
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	441c      	add	r4, r3
 8002580:	6025      	str	r5, [r4, #0]
 8002582:	e004      	b.n	800258e <_malloc_r+0x72>
 8002584:	6863      	ldr	r3, [r4, #4]
 8002586:	42a2      	cmp	r2, r4
 8002588:	bf0c      	ite	eq
 800258a:	600b      	streq	r3, [r1, #0]
 800258c:	6053      	strne	r3, [r2, #4]
 800258e:	4630      	mov	r0, r6
 8002590:	f000 f8c4 	bl	800271c <__malloc_unlock>
 8002594:	f104 000b 	add.w	r0, r4, #11
 8002598:	1d23      	adds	r3, r4, #4
 800259a:	f020 0007 	bic.w	r0, r0, #7
 800259e:	1ac2      	subs	r2, r0, r3
 80025a0:	d0cc      	beq.n	800253c <_malloc_r+0x20>
 80025a2:	1a1b      	subs	r3, r3, r0
 80025a4:	50a3      	str	r3, [r4, r2]
 80025a6:	e7c9      	b.n	800253c <_malloc_r+0x20>
 80025a8:	4622      	mov	r2, r4
 80025aa:	6864      	ldr	r4, [r4, #4]
 80025ac:	e7cc      	b.n	8002548 <_malloc_r+0x2c>
 80025ae:	1cc4      	adds	r4, r0, #3
 80025b0:	f024 0403 	bic.w	r4, r4, #3
 80025b4:	42a0      	cmp	r0, r4
 80025b6:	d0e3      	beq.n	8002580 <_malloc_r+0x64>
 80025b8:	1a21      	subs	r1, r4, r0
 80025ba:	4630      	mov	r0, r6
 80025bc:	f000 f820 	bl	8002600 <_sbrk_r>
 80025c0:	3001      	adds	r0, #1
 80025c2:	d1dd      	bne.n	8002580 <_malloc_r+0x64>
 80025c4:	e7cf      	b.n	8002566 <_malloc_r+0x4a>
 80025c6:	bf00      	nop
 80025c8:	200000a8 	.word	0x200000a8
 80025cc:	200000ac 	.word	0x200000ac

080025d0 <iprintf>:
 80025d0:	b40f      	push	{r0, r1, r2, r3}
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <iprintf+0x2c>)
 80025d4:	b513      	push	{r0, r1, r4, lr}
 80025d6:	681c      	ldr	r4, [r3, #0]
 80025d8:	b124      	cbz	r4, 80025e4 <iprintf+0x14>
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	b913      	cbnz	r3, 80025e4 <iprintf+0x14>
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff fe7e 	bl	80022e0 <__sinit>
 80025e4:	ab05      	add	r3, sp, #20
 80025e6:	9a04      	ldr	r2, [sp, #16]
 80025e8:	68a1      	ldr	r1, [r4, #8]
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 f8c5 	bl	800277c <_vfiprintf_r>
 80025f2:	b002      	add	sp, #8
 80025f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f8:	b004      	add	sp, #16
 80025fa:	4770      	bx	lr
 80025fc:	2000000c 	.word	0x2000000c

08002600 <_sbrk_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	4d06      	ldr	r5, [pc, #24]	; (800261c <_sbrk_r+0x1c>)
 8002604:	2300      	movs	r3, #0
 8002606:	4604      	mov	r4, r0
 8002608:	4608      	mov	r0, r1
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	f000 fcf2 	bl	8002ff4 <_sbrk>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d102      	bne.n	800261a <_sbrk_r+0x1a>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	b103      	cbz	r3, 800261a <_sbrk_r+0x1a>
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	bd38      	pop	{r3, r4, r5, pc}
 800261c:	200001c4 	.word	0x200001c4

08002620 <__sread>:
 8002620:	b510      	push	{r4, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002628:	f000 fb6c 	bl	8002d04 <_read_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	bfab      	itete	ge
 8002630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002632:	89a3      	ldrhlt	r3, [r4, #12]
 8002634:	181b      	addge	r3, r3, r0
 8002636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800263a:	bfac      	ite	ge
 800263c:	6563      	strge	r3, [r4, #84]	; 0x54
 800263e:	81a3      	strhlt	r3, [r4, #12]
 8002640:	bd10      	pop	{r4, pc}

08002642 <__swrite>:
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	461f      	mov	r7, r3
 8002648:	898b      	ldrh	r3, [r1, #12]
 800264a:	05db      	lsls	r3, r3, #23
 800264c:	4605      	mov	r5, r0
 800264e:	460c      	mov	r4, r1
 8002650:	4616      	mov	r6, r2
 8002652:	d505      	bpl.n	8002660 <__swrite+0x1e>
 8002654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002658:	2302      	movs	r3, #2
 800265a:	2200      	movs	r2, #0
 800265c:	f000 f846 	bl	80026ec <_lseek_r>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800266a:	81a3      	strh	r3, [r4, #12]
 800266c:	4632      	mov	r2, r6
 800266e:	463b      	mov	r3, r7
 8002670:	4628      	mov	r0, r5
 8002672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	f000 b817 	b.w	80026a8 <_write_r>

0800267a <__sseek>:
 800267a:	b510      	push	{r4, lr}
 800267c:	460c      	mov	r4, r1
 800267e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002682:	f000 f833 	bl	80026ec <_lseek_r>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	bf15      	itete	ne
 800268c:	6560      	strne	r0, [r4, #84]	; 0x54
 800268e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002696:	81a3      	strheq	r3, [r4, #12]
 8002698:	bf18      	it	ne
 800269a:	81a3      	strhne	r3, [r4, #12]
 800269c:	bd10      	pop	{r4, pc}

0800269e <__sclose>:
 800269e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a2:	f000 b813 	b.w	80026cc <_close_r>
	...

080026a8 <_write_r>:
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4d07      	ldr	r5, [pc, #28]	; (80026c8 <_write_r+0x20>)
 80026ac:	4604      	mov	r4, r0
 80026ae:	4608      	mov	r0, r1
 80026b0:	4611      	mov	r1, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	602a      	str	r2, [r5, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	f7fe f9c2 	bl	8000a40 <_write>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d102      	bne.n	80026c6 <_write_r+0x1e>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	b103      	cbz	r3, 80026c6 <_write_r+0x1e>
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
 80026c8:	200001c4 	.word	0x200001c4

080026cc <_close_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4d06      	ldr	r5, [pc, #24]	; (80026e8 <_close_r+0x1c>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	602b      	str	r3, [r5, #0]
 80026d8:	f000 fc6c 	bl	8002fb4 <_close>
 80026dc:	1c43      	adds	r3, r0, #1
 80026de:	d102      	bne.n	80026e6 <_close_r+0x1a>
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	b103      	cbz	r3, 80026e6 <_close_r+0x1a>
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	bd38      	pop	{r3, r4, r5, pc}
 80026e8:	200001c4 	.word	0x200001c4

080026ec <_lseek_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4d07      	ldr	r5, [pc, #28]	; (800270c <_lseek_r+0x20>)
 80026f0:	4604      	mov	r4, r0
 80026f2:	4608      	mov	r0, r1
 80026f4:	4611      	mov	r1, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	602a      	str	r2, [r5, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 fc72 	bl	8002fe4 <_lseek>
 8002700:	1c43      	adds	r3, r0, #1
 8002702:	d102      	bne.n	800270a <_lseek_r+0x1e>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	b103      	cbz	r3, 800270a <_lseek_r+0x1e>
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	bd38      	pop	{r3, r4, r5, pc}
 800270c:	200001c4 	.word	0x200001c4

08002710 <__malloc_lock>:
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <__malloc_lock+0x8>)
 8002712:	f7ff bea8 	b.w	8002466 <__retarget_lock_acquire_recursive>
 8002716:	bf00      	nop
 8002718:	200001bc 	.word	0x200001bc

0800271c <__malloc_unlock>:
 800271c:	4801      	ldr	r0, [pc, #4]	; (8002724 <__malloc_unlock+0x8>)
 800271e:	f7ff bea3 	b.w	8002468 <__retarget_lock_release_recursive>
 8002722:	bf00      	nop
 8002724:	200001bc 	.word	0x200001bc

08002728 <__sfputc_r>:
 8002728:	6893      	ldr	r3, [r2, #8]
 800272a:	3b01      	subs	r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	b410      	push	{r4}
 8002730:	6093      	str	r3, [r2, #8]
 8002732:	da08      	bge.n	8002746 <__sfputc_r+0x1e>
 8002734:	6994      	ldr	r4, [r2, #24]
 8002736:	42a3      	cmp	r3, r4
 8002738:	db01      	blt.n	800273e <__sfputc_r+0x16>
 800273a:	290a      	cmp	r1, #10
 800273c:	d103      	bne.n	8002746 <__sfputc_r+0x1e>
 800273e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002742:	f000 baf1 	b.w	8002d28 <__swbuf_r>
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	1c58      	adds	r0, r3, #1
 800274a:	6010      	str	r0, [r2, #0]
 800274c:	7019      	strb	r1, [r3, #0]
 800274e:	4608      	mov	r0, r1
 8002750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002754:	4770      	bx	lr

08002756 <__sfputs_r>:
 8002756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002758:	4606      	mov	r6, r0
 800275a:	460f      	mov	r7, r1
 800275c:	4614      	mov	r4, r2
 800275e:	18d5      	adds	r5, r2, r3
 8002760:	42ac      	cmp	r4, r5
 8002762:	d101      	bne.n	8002768 <__sfputs_r+0x12>
 8002764:	2000      	movs	r0, #0
 8002766:	e007      	b.n	8002778 <__sfputs_r+0x22>
 8002768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800276c:	463a      	mov	r2, r7
 800276e:	4630      	mov	r0, r6
 8002770:	f7ff ffda 	bl	8002728 <__sfputc_r>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d1f3      	bne.n	8002760 <__sfputs_r+0xa>
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800277c <_vfiprintf_r>:
 800277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002780:	460d      	mov	r5, r1
 8002782:	b09d      	sub	sp, #116	; 0x74
 8002784:	4614      	mov	r4, r2
 8002786:	4698      	mov	r8, r3
 8002788:	4606      	mov	r6, r0
 800278a:	b118      	cbz	r0, 8002794 <_vfiprintf_r+0x18>
 800278c:	6983      	ldr	r3, [r0, #24]
 800278e:	b90b      	cbnz	r3, 8002794 <_vfiprintf_r+0x18>
 8002790:	f7ff fda6 	bl	80022e0 <__sinit>
 8002794:	4b89      	ldr	r3, [pc, #548]	; (80029bc <_vfiprintf_r+0x240>)
 8002796:	429d      	cmp	r5, r3
 8002798:	d11b      	bne.n	80027d2 <_vfiprintf_r+0x56>
 800279a:	6875      	ldr	r5, [r6, #4]
 800279c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800279e:	07d9      	lsls	r1, r3, #31
 80027a0:	d405      	bmi.n	80027ae <_vfiprintf_r+0x32>
 80027a2:	89ab      	ldrh	r3, [r5, #12]
 80027a4:	059a      	lsls	r2, r3, #22
 80027a6:	d402      	bmi.n	80027ae <_vfiprintf_r+0x32>
 80027a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027aa:	f7ff fe5c 	bl	8002466 <__retarget_lock_acquire_recursive>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	071b      	lsls	r3, r3, #28
 80027b2:	d501      	bpl.n	80027b8 <_vfiprintf_r+0x3c>
 80027b4:	692b      	ldr	r3, [r5, #16]
 80027b6:	b9eb      	cbnz	r3, 80027f4 <_vfiprintf_r+0x78>
 80027b8:	4629      	mov	r1, r5
 80027ba:	4630      	mov	r0, r6
 80027bc:	f000 fb06 	bl	8002dcc <__swsetup_r>
 80027c0:	b1c0      	cbz	r0, 80027f4 <_vfiprintf_r+0x78>
 80027c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c4:	07dc      	lsls	r4, r3, #31
 80027c6:	d50e      	bpl.n	80027e6 <_vfiprintf_r+0x6a>
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	b01d      	add	sp, #116	; 0x74
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	4b7b      	ldr	r3, [pc, #492]	; (80029c0 <_vfiprintf_r+0x244>)
 80027d4:	429d      	cmp	r5, r3
 80027d6:	d101      	bne.n	80027dc <_vfiprintf_r+0x60>
 80027d8:	68b5      	ldr	r5, [r6, #8]
 80027da:	e7df      	b.n	800279c <_vfiprintf_r+0x20>
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <_vfiprintf_r+0x248>)
 80027de:	429d      	cmp	r5, r3
 80027e0:	bf08      	it	eq
 80027e2:	68f5      	ldreq	r5, [r6, #12]
 80027e4:	e7da      	b.n	800279c <_vfiprintf_r+0x20>
 80027e6:	89ab      	ldrh	r3, [r5, #12]
 80027e8:	0598      	lsls	r0, r3, #22
 80027ea:	d4ed      	bmi.n	80027c8 <_vfiprintf_r+0x4c>
 80027ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027ee:	f7ff fe3b 	bl	8002468 <__retarget_lock_release_recursive>
 80027f2:	e7e9      	b.n	80027c8 <_vfiprintf_r+0x4c>
 80027f4:	2300      	movs	r3, #0
 80027f6:	9309      	str	r3, [sp, #36]	; 0x24
 80027f8:	2320      	movs	r3, #32
 80027fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002802:	2330      	movs	r3, #48	; 0x30
 8002804:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80029c8 <_vfiprintf_r+0x24c>
 8002808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800280c:	f04f 0901 	mov.w	r9, #1
 8002810:	4623      	mov	r3, r4
 8002812:	469a      	mov	sl, r3
 8002814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002818:	b10a      	cbz	r2, 800281e <_vfiprintf_r+0xa2>
 800281a:	2a25      	cmp	r2, #37	; 0x25
 800281c:	d1f9      	bne.n	8002812 <_vfiprintf_r+0x96>
 800281e:	ebba 0b04 	subs.w	fp, sl, r4
 8002822:	d00b      	beq.n	800283c <_vfiprintf_r+0xc0>
 8002824:	465b      	mov	r3, fp
 8002826:	4622      	mov	r2, r4
 8002828:	4629      	mov	r1, r5
 800282a:	4630      	mov	r0, r6
 800282c:	f7ff ff93 	bl	8002756 <__sfputs_r>
 8002830:	3001      	adds	r0, #1
 8002832:	f000 80aa 	beq.w	800298a <_vfiprintf_r+0x20e>
 8002836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002838:	445a      	add	r2, fp
 800283a:	9209      	str	r2, [sp, #36]	; 0x24
 800283c:	f89a 3000 	ldrb.w	r3, [sl]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a2 	beq.w	800298a <_vfiprintf_r+0x20e>
 8002846:	2300      	movs	r3, #0
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002850:	f10a 0a01 	add.w	sl, sl, #1
 8002854:	9304      	str	r3, [sp, #16]
 8002856:	9307      	str	r3, [sp, #28]
 8002858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800285c:	931a      	str	r3, [sp, #104]	; 0x68
 800285e:	4654      	mov	r4, sl
 8002860:	2205      	movs	r2, #5
 8002862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002866:	4858      	ldr	r0, [pc, #352]	; (80029c8 <_vfiprintf_r+0x24c>)
 8002868:	f7fd fcea 	bl	8000240 <memchr>
 800286c:	9a04      	ldr	r2, [sp, #16]
 800286e:	b9d8      	cbnz	r0, 80028a8 <_vfiprintf_r+0x12c>
 8002870:	06d1      	lsls	r1, r2, #27
 8002872:	bf44      	itt	mi
 8002874:	2320      	movmi	r3, #32
 8002876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800287a:	0713      	lsls	r3, r2, #28
 800287c:	bf44      	itt	mi
 800287e:	232b      	movmi	r3, #43	; 0x2b
 8002880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002884:	f89a 3000 	ldrb.w	r3, [sl]
 8002888:	2b2a      	cmp	r3, #42	; 0x2a
 800288a:	d015      	beq.n	80028b8 <_vfiprintf_r+0x13c>
 800288c:	9a07      	ldr	r2, [sp, #28]
 800288e:	4654      	mov	r4, sl
 8002890:	2000      	movs	r0, #0
 8002892:	f04f 0c0a 	mov.w	ip, #10
 8002896:	4621      	mov	r1, r4
 8002898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800289c:	3b30      	subs	r3, #48	; 0x30
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d94e      	bls.n	8002940 <_vfiprintf_r+0x1c4>
 80028a2:	b1b0      	cbz	r0, 80028d2 <_vfiprintf_r+0x156>
 80028a4:	9207      	str	r2, [sp, #28]
 80028a6:	e014      	b.n	80028d2 <_vfiprintf_r+0x156>
 80028a8:	eba0 0308 	sub.w	r3, r0, r8
 80028ac:	fa09 f303 	lsl.w	r3, r9, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	9304      	str	r3, [sp, #16]
 80028b4:	46a2      	mov	sl, r4
 80028b6:	e7d2      	b.n	800285e <_vfiprintf_r+0xe2>
 80028b8:	9b03      	ldr	r3, [sp, #12]
 80028ba:	1d19      	adds	r1, r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	9103      	str	r1, [sp, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bfbb      	ittet	lt
 80028c4:	425b      	neglt	r3, r3
 80028c6:	f042 0202 	orrlt.w	r2, r2, #2
 80028ca:	9307      	strge	r3, [sp, #28]
 80028cc:	9307      	strlt	r3, [sp, #28]
 80028ce:	bfb8      	it	lt
 80028d0:	9204      	strlt	r2, [sp, #16]
 80028d2:	7823      	ldrb	r3, [r4, #0]
 80028d4:	2b2e      	cmp	r3, #46	; 0x2e
 80028d6:	d10c      	bne.n	80028f2 <_vfiprintf_r+0x176>
 80028d8:	7863      	ldrb	r3, [r4, #1]
 80028da:	2b2a      	cmp	r3, #42	; 0x2a
 80028dc:	d135      	bne.n	800294a <_vfiprintf_r+0x1ce>
 80028de:	9b03      	ldr	r3, [sp, #12]
 80028e0:	1d1a      	adds	r2, r3, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	9203      	str	r2, [sp, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bfb8      	it	lt
 80028ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ee:	3402      	adds	r4, #2
 80028f0:	9305      	str	r3, [sp, #20]
 80028f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80029d8 <_vfiprintf_r+0x25c>
 80028f6:	7821      	ldrb	r1, [r4, #0]
 80028f8:	2203      	movs	r2, #3
 80028fa:	4650      	mov	r0, sl
 80028fc:	f7fd fca0 	bl	8000240 <memchr>
 8002900:	b140      	cbz	r0, 8002914 <_vfiprintf_r+0x198>
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	eba0 000a 	sub.w	r0, r0, sl
 8002908:	fa03 f000 	lsl.w	r0, r3, r0
 800290c:	9b04      	ldr	r3, [sp, #16]
 800290e:	4303      	orrs	r3, r0
 8002910:	3401      	adds	r4, #1
 8002912:	9304      	str	r3, [sp, #16]
 8002914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002918:	482c      	ldr	r0, [pc, #176]	; (80029cc <_vfiprintf_r+0x250>)
 800291a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800291e:	2206      	movs	r2, #6
 8002920:	f7fd fc8e 	bl	8000240 <memchr>
 8002924:	2800      	cmp	r0, #0
 8002926:	d03f      	beq.n	80029a8 <_vfiprintf_r+0x22c>
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <_vfiprintf_r+0x254>)
 800292a:	bb1b      	cbnz	r3, 8002974 <_vfiprintf_r+0x1f8>
 800292c:	9b03      	ldr	r3, [sp, #12]
 800292e:	3307      	adds	r3, #7
 8002930:	f023 0307 	bic.w	r3, r3, #7
 8002934:	3308      	adds	r3, #8
 8002936:	9303      	str	r3, [sp, #12]
 8002938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800293a:	443b      	add	r3, r7
 800293c:	9309      	str	r3, [sp, #36]	; 0x24
 800293e:	e767      	b.n	8002810 <_vfiprintf_r+0x94>
 8002940:	fb0c 3202 	mla	r2, ip, r2, r3
 8002944:	460c      	mov	r4, r1
 8002946:	2001      	movs	r0, #1
 8002948:	e7a5      	b.n	8002896 <_vfiprintf_r+0x11a>
 800294a:	2300      	movs	r3, #0
 800294c:	3401      	adds	r4, #1
 800294e:	9305      	str	r3, [sp, #20]
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0c0a 	mov.w	ip, #10
 8002956:	4620      	mov	r0, r4
 8002958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800295c:	3a30      	subs	r2, #48	; 0x30
 800295e:	2a09      	cmp	r2, #9
 8002960:	d903      	bls.n	800296a <_vfiprintf_r+0x1ee>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0c5      	beq.n	80028f2 <_vfiprintf_r+0x176>
 8002966:	9105      	str	r1, [sp, #20]
 8002968:	e7c3      	b.n	80028f2 <_vfiprintf_r+0x176>
 800296a:	fb0c 2101 	mla	r1, ip, r1, r2
 800296e:	4604      	mov	r4, r0
 8002970:	2301      	movs	r3, #1
 8002972:	e7f0      	b.n	8002956 <_vfiprintf_r+0x1da>
 8002974:	ab03      	add	r3, sp, #12
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	462a      	mov	r2, r5
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <_vfiprintf_r+0x258>)
 800297c:	a904      	add	r1, sp, #16
 800297e:	4630      	mov	r0, r6
 8002980:	f3af 8000 	nop.w
 8002984:	4607      	mov	r7, r0
 8002986:	1c78      	adds	r0, r7, #1
 8002988:	d1d6      	bne.n	8002938 <_vfiprintf_r+0x1bc>
 800298a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800298c:	07d9      	lsls	r1, r3, #31
 800298e:	d405      	bmi.n	800299c <_vfiprintf_r+0x220>
 8002990:	89ab      	ldrh	r3, [r5, #12]
 8002992:	059a      	lsls	r2, r3, #22
 8002994:	d402      	bmi.n	800299c <_vfiprintf_r+0x220>
 8002996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002998:	f7ff fd66 	bl	8002468 <__retarget_lock_release_recursive>
 800299c:	89ab      	ldrh	r3, [r5, #12]
 800299e:	065b      	lsls	r3, r3, #25
 80029a0:	f53f af12 	bmi.w	80027c8 <_vfiprintf_r+0x4c>
 80029a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029a6:	e711      	b.n	80027cc <_vfiprintf_r+0x50>
 80029a8:	ab03      	add	r3, sp, #12
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	462a      	mov	r2, r5
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <_vfiprintf_r+0x258>)
 80029b0:	a904      	add	r1, sp, #16
 80029b2:	4630      	mov	r0, r6
 80029b4:	f000 f880 	bl	8002ab8 <_printf_i>
 80029b8:	e7e4      	b.n	8002984 <_vfiprintf_r+0x208>
 80029ba:	bf00      	nop
 80029bc:	080030bc 	.word	0x080030bc
 80029c0:	080030dc 	.word	0x080030dc
 80029c4:	0800309c 	.word	0x0800309c
 80029c8:	08003100 	.word	0x08003100
 80029cc:	0800310a 	.word	0x0800310a
 80029d0:	00000000 	.word	0x00000000
 80029d4:	08002757 	.word	0x08002757
 80029d8:	08003106 	.word	0x08003106

080029dc <_printf_common>:
 80029dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e0:	4616      	mov	r6, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	688a      	ldr	r2, [r1, #8]
 80029e6:	690b      	ldr	r3, [r1, #16]
 80029e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bfb8      	it	lt
 80029f0:	4613      	movlt	r3, r2
 80029f2:	6033      	str	r3, [r6, #0]
 80029f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029f8:	4607      	mov	r7, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	b10a      	cbz	r2, 8002a02 <_printf_common+0x26>
 80029fe:	3301      	adds	r3, #1
 8002a00:	6033      	str	r3, [r6, #0]
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	0699      	lsls	r1, r3, #26
 8002a06:	bf42      	ittt	mi
 8002a08:	6833      	ldrmi	r3, [r6, #0]
 8002a0a:	3302      	addmi	r3, #2
 8002a0c:	6033      	strmi	r3, [r6, #0]
 8002a0e:	6825      	ldr	r5, [r4, #0]
 8002a10:	f015 0506 	ands.w	r5, r5, #6
 8002a14:	d106      	bne.n	8002a24 <_printf_common+0x48>
 8002a16:	f104 0a19 	add.w	sl, r4, #25
 8002a1a:	68e3      	ldr	r3, [r4, #12]
 8002a1c:	6832      	ldr	r2, [r6, #0]
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	42ab      	cmp	r3, r5
 8002a22:	dc26      	bgt.n	8002a72 <_printf_common+0x96>
 8002a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a28:	1e13      	subs	r3, r2, #0
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	bf18      	it	ne
 8002a2e:	2301      	movne	r3, #1
 8002a30:	0692      	lsls	r2, r2, #26
 8002a32:	d42b      	bmi.n	8002a8c <_printf_common+0xb0>
 8002a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a38:	4649      	mov	r1, r9
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	47c0      	blx	r8
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d01e      	beq.n	8002a80 <_printf_common+0xa4>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	68e5      	ldr	r5, [r4, #12]
 8002a46:	6832      	ldr	r2, [r6, #0]
 8002a48:	f003 0306 	and.w	r3, r3, #6
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	bf08      	it	eq
 8002a50:	1aad      	subeq	r5, r5, r2
 8002a52:	68a3      	ldr	r3, [r4, #8]
 8002a54:	6922      	ldr	r2, [r4, #16]
 8002a56:	bf0c      	ite	eq
 8002a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a5c:	2500      	movne	r5, #0
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	bfc4      	itt	gt
 8002a62:	1a9b      	subgt	r3, r3, r2
 8002a64:	18ed      	addgt	r5, r5, r3
 8002a66:	2600      	movs	r6, #0
 8002a68:	341a      	adds	r4, #26
 8002a6a:	42b5      	cmp	r5, r6
 8002a6c:	d11a      	bne.n	8002aa4 <_printf_common+0xc8>
 8002a6e:	2000      	movs	r0, #0
 8002a70:	e008      	b.n	8002a84 <_printf_common+0xa8>
 8002a72:	2301      	movs	r3, #1
 8002a74:	4652      	mov	r2, sl
 8002a76:	4649      	mov	r1, r9
 8002a78:	4638      	mov	r0, r7
 8002a7a:	47c0      	blx	r8
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d103      	bne.n	8002a88 <_printf_common+0xac>
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a88:	3501      	adds	r5, #1
 8002a8a:	e7c6      	b.n	8002a1a <_printf_common+0x3e>
 8002a8c:	18e1      	adds	r1, r4, r3
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	2030      	movs	r0, #48	; 0x30
 8002a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a96:	4422      	add	r2, r4
 8002a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	e7c7      	b.n	8002a34 <_printf_common+0x58>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	4638      	mov	r0, r7
 8002aac:	47c0      	blx	r8
 8002aae:	3001      	adds	r0, #1
 8002ab0:	d0e6      	beq.n	8002a80 <_printf_common+0xa4>
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7d9      	b.n	8002a6a <_printf_common+0x8e>
	...

08002ab8 <_printf_i>:
 8002ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002abc:	460c      	mov	r4, r1
 8002abe:	4691      	mov	r9, r2
 8002ac0:	7e27      	ldrb	r7, [r4, #24]
 8002ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ac4:	2f78      	cmp	r7, #120	; 0x78
 8002ac6:	4680      	mov	r8, r0
 8002ac8:	469a      	mov	sl, r3
 8002aca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ace:	d807      	bhi.n	8002ae0 <_printf_i+0x28>
 8002ad0:	2f62      	cmp	r7, #98	; 0x62
 8002ad2:	d80a      	bhi.n	8002aea <_printf_i+0x32>
 8002ad4:	2f00      	cmp	r7, #0
 8002ad6:	f000 80d8 	beq.w	8002c8a <_printf_i+0x1d2>
 8002ada:	2f58      	cmp	r7, #88	; 0x58
 8002adc:	f000 80a3 	beq.w	8002c26 <_printf_i+0x16e>
 8002ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ae8:	e03a      	b.n	8002b60 <_printf_i+0xa8>
 8002aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aee:	2b15      	cmp	r3, #21
 8002af0:	d8f6      	bhi.n	8002ae0 <_printf_i+0x28>
 8002af2:	a001      	add	r0, pc, #4	; (adr r0, 8002af8 <_printf_i+0x40>)
 8002af4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002af8:	08002b51 	.word	0x08002b51
 8002afc:	08002b65 	.word	0x08002b65
 8002b00:	08002ae1 	.word	0x08002ae1
 8002b04:	08002ae1 	.word	0x08002ae1
 8002b08:	08002ae1 	.word	0x08002ae1
 8002b0c:	08002ae1 	.word	0x08002ae1
 8002b10:	08002b65 	.word	0x08002b65
 8002b14:	08002ae1 	.word	0x08002ae1
 8002b18:	08002ae1 	.word	0x08002ae1
 8002b1c:	08002ae1 	.word	0x08002ae1
 8002b20:	08002ae1 	.word	0x08002ae1
 8002b24:	08002c71 	.word	0x08002c71
 8002b28:	08002b95 	.word	0x08002b95
 8002b2c:	08002c53 	.word	0x08002c53
 8002b30:	08002ae1 	.word	0x08002ae1
 8002b34:	08002ae1 	.word	0x08002ae1
 8002b38:	08002c93 	.word	0x08002c93
 8002b3c:	08002ae1 	.word	0x08002ae1
 8002b40:	08002b95 	.word	0x08002b95
 8002b44:	08002ae1 	.word	0x08002ae1
 8002b48:	08002ae1 	.word	0x08002ae1
 8002b4c:	08002c5b 	.word	0x08002c5b
 8002b50:	680b      	ldr	r3, [r1, #0]
 8002b52:	1d1a      	adds	r2, r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	600a      	str	r2, [r1, #0]
 8002b58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0a3      	b.n	8002cac <_printf_i+0x1f4>
 8002b64:	6825      	ldr	r5, [r4, #0]
 8002b66:	6808      	ldr	r0, [r1, #0]
 8002b68:	062e      	lsls	r6, r5, #24
 8002b6a:	f100 0304 	add.w	r3, r0, #4
 8002b6e:	d50a      	bpl.n	8002b86 <_printf_i+0xce>
 8002b70:	6805      	ldr	r5, [r0, #0]
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	2d00      	cmp	r5, #0
 8002b76:	da03      	bge.n	8002b80 <_printf_i+0xc8>
 8002b78:	232d      	movs	r3, #45	; 0x2d
 8002b7a:	426d      	negs	r5, r5
 8002b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b80:	485e      	ldr	r0, [pc, #376]	; (8002cfc <_printf_i+0x244>)
 8002b82:	230a      	movs	r3, #10
 8002b84:	e019      	b.n	8002bba <_printf_i+0x102>
 8002b86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b8a:	6805      	ldr	r5, [r0, #0]
 8002b8c:	600b      	str	r3, [r1, #0]
 8002b8e:	bf18      	it	ne
 8002b90:	b22d      	sxthne	r5, r5
 8002b92:	e7ef      	b.n	8002b74 <_printf_i+0xbc>
 8002b94:	680b      	ldr	r3, [r1, #0]
 8002b96:	6825      	ldr	r5, [r4, #0]
 8002b98:	1d18      	adds	r0, r3, #4
 8002b9a:	6008      	str	r0, [r1, #0]
 8002b9c:	0628      	lsls	r0, r5, #24
 8002b9e:	d501      	bpl.n	8002ba4 <_printf_i+0xec>
 8002ba0:	681d      	ldr	r5, [r3, #0]
 8002ba2:	e002      	b.n	8002baa <_printf_i+0xf2>
 8002ba4:	0669      	lsls	r1, r5, #25
 8002ba6:	d5fb      	bpl.n	8002ba0 <_printf_i+0xe8>
 8002ba8:	881d      	ldrh	r5, [r3, #0]
 8002baa:	4854      	ldr	r0, [pc, #336]	; (8002cfc <_printf_i+0x244>)
 8002bac:	2f6f      	cmp	r7, #111	; 0x6f
 8002bae:	bf0c      	ite	eq
 8002bb0:	2308      	moveq	r3, #8
 8002bb2:	230a      	movne	r3, #10
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bba:	6866      	ldr	r6, [r4, #4]
 8002bbc:	60a6      	str	r6, [r4, #8]
 8002bbe:	2e00      	cmp	r6, #0
 8002bc0:	bfa2      	ittt	ge
 8002bc2:	6821      	ldrge	r1, [r4, #0]
 8002bc4:	f021 0104 	bicge.w	r1, r1, #4
 8002bc8:	6021      	strge	r1, [r4, #0]
 8002bca:	b90d      	cbnz	r5, 8002bd0 <_printf_i+0x118>
 8002bcc:	2e00      	cmp	r6, #0
 8002bce:	d04d      	beq.n	8002c6c <_printf_i+0x1b4>
 8002bd0:	4616      	mov	r6, r2
 8002bd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bd6:	fb03 5711 	mls	r7, r3, r1, r5
 8002bda:	5dc7      	ldrb	r7, [r0, r7]
 8002bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002be0:	462f      	mov	r7, r5
 8002be2:	42bb      	cmp	r3, r7
 8002be4:	460d      	mov	r5, r1
 8002be6:	d9f4      	bls.n	8002bd2 <_printf_i+0x11a>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d10b      	bne.n	8002c04 <_printf_i+0x14c>
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	07df      	lsls	r7, r3, #31
 8002bf0:	d508      	bpl.n	8002c04 <_printf_i+0x14c>
 8002bf2:	6923      	ldr	r3, [r4, #16]
 8002bf4:	6861      	ldr	r1, [r4, #4]
 8002bf6:	4299      	cmp	r1, r3
 8002bf8:	bfde      	ittt	le
 8002bfa:	2330      	movle	r3, #48	; 0x30
 8002bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c04:	1b92      	subs	r2, r2, r6
 8002c06:	6122      	str	r2, [r4, #16]
 8002c08:	f8cd a000 	str.w	sl, [sp]
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	aa03      	add	r2, sp, #12
 8002c10:	4621      	mov	r1, r4
 8002c12:	4640      	mov	r0, r8
 8002c14:	f7ff fee2 	bl	80029dc <_printf_common>
 8002c18:	3001      	adds	r0, #1
 8002c1a:	d14c      	bne.n	8002cb6 <_printf_i+0x1fe>
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	b004      	add	sp, #16
 8002c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c26:	4835      	ldr	r0, [pc, #212]	; (8002cfc <_printf_i+0x244>)
 8002c28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	680e      	ldr	r6, [r1, #0]
 8002c30:	061f      	lsls	r7, r3, #24
 8002c32:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c36:	600e      	str	r6, [r1, #0]
 8002c38:	d514      	bpl.n	8002c64 <_printf_i+0x1ac>
 8002c3a:	07d9      	lsls	r1, r3, #31
 8002c3c:	bf44      	itt	mi
 8002c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c42:	6023      	strmi	r3, [r4, #0]
 8002c44:	b91d      	cbnz	r5, 8002c4e <_printf_i+0x196>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f023 0320 	bic.w	r3, r3, #32
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	2310      	movs	r3, #16
 8002c50:	e7b0      	b.n	8002bb4 <_printf_i+0xfc>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	2378      	movs	r3, #120	; 0x78
 8002c5c:	4828      	ldr	r0, [pc, #160]	; (8002d00 <_printf_i+0x248>)
 8002c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c62:	e7e3      	b.n	8002c2c <_printf_i+0x174>
 8002c64:	065e      	lsls	r6, r3, #25
 8002c66:	bf48      	it	mi
 8002c68:	b2ad      	uxthmi	r5, r5
 8002c6a:	e7e6      	b.n	8002c3a <_printf_i+0x182>
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	e7bb      	b.n	8002be8 <_printf_i+0x130>
 8002c70:	680b      	ldr	r3, [r1, #0]
 8002c72:	6826      	ldr	r6, [r4, #0]
 8002c74:	6960      	ldr	r0, [r4, #20]
 8002c76:	1d1d      	adds	r5, r3, #4
 8002c78:	600d      	str	r5, [r1, #0]
 8002c7a:	0635      	lsls	r5, r6, #24
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	d501      	bpl.n	8002c84 <_printf_i+0x1cc>
 8002c80:	6018      	str	r0, [r3, #0]
 8002c82:	e002      	b.n	8002c8a <_printf_i+0x1d2>
 8002c84:	0671      	lsls	r1, r6, #25
 8002c86:	d5fb      	bpl.n	8002c80 <_printf_i+0x1c8>
 8002c88:	8018      	strh	r0, [r3, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6123      	str	r3, [r4, #16]
 8002c8e:	4616      	mov	r6, r2
 8002c90:	e7ba      	b.n	8002c08 <_printf_i+0x150>
 8002c92:	680b      	ldr	r3, [r1, #0]
 8002c94:	1d1a      	adds	r2, r3, #4
 8002c96:	600a      	str	r2, [r1, #0]
 8002c98:	681e      	ldr	r6, [r3, #0]
 8002c9a:	6862      	ldr	r2, [r4, #4]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f7fd face 	bl	8000240 <memchr>
 8002ca4:	b108      	cbz	r0, 8002caa <_printf_i+0x1f2>
 8002ca6:	1b80      	subs	r0, r0, r6
 8002ca8:	6060      	str	r0, [r4, #4]
 8002caa:	6863      	ldr	r3, [r4, #4]
 8002cac:	6123      	str	r3, [r4, #16]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb4:	e7a8      	b.n	8002c08 <_printf_i+0x150>
 8002cb6:	6923      	ldr	r3, [r4, #16]
 8002cb8:	4632      	mov	r2, r6
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	47d0      	blx	sl
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d0ab      	beq.n	8002c1c <_printf_i+0x164>
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	079b      	lsls	r3, r3, #30
 8002cc8:	d413      	bmi.n	8002cf2 <_printf_i+0x23a>
 8002cca:	68e0      	ldr	r0, [r4, #12]
 8002ccc:	9b03      	ldr	r3, [sp, #12]
 8002cce:	4298      	cmp	r0, r3
 8002cd0:	bfb8      	it	lt
 8002cd2:	4618      	movlt	r0, r3
 8002cd4:	e7a4      	b.n	8002c20 <_printf_i+0x168>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	4632      	mov	r2, r6
 8002cda:	4649      	mov	r1, r9
 8002cdc:	4640      	mov	r0, r8
 8002cde:	47d0      	blx	sl
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d09b      	beq.n	8002c1c <_printf_i+0x164>
 8002ce4:	3501      	adds	r5, #1
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	9903      	ldr	r1, [sp, #12]
 8002cea:	1a5b      	subs	r3, r3, r1
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	dcf2      	bgt.n	8002cd6 <_printf_i+0x21e>
 8002cf0:	e7eb      	b.n	8002cca <_printf_i+0x212>
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	f104 0619 	add.w	r6, r4, #25
 8002cf8:	e7f5      	b.n	8002ce6 <_printf_i+0x22e>
 8002cfa:	bf00      	nop
 8002cfc:	08003111 	.word	0x08003111
 8002d00:	08003122 	.word	0x08003122

08002d04 <_read_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4d07      	ldr	r5, [pc, #28]	; (8002d24 <_read_r+0x20>)
 8002d08:	4604      	mov	r4, r0
 8002d0a:	4608      	mov	r0, r1
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	602a      	str	r2, [r5, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7fd fea0 	bl	8000a58 <_read>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d102      	bne.n	8002d22 <_read_r+0x1e>
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	b103      	cbz	r3, 8002d22 <_read_r+0x1e>
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	200001c4 	.word	0x200001c4

08002d28 <__swbuf_r>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	460e      	mov	r6, r1
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	4605      	mov	r5, r0
 8002d30:	b118      	cbz	r0, 8002d3a <__swbuf_r+0x12>
 8002d32:	6983      	ldr	r3, [r0, #24]
 8002d34:	b90b      	cbnz	r3, 8002d3a <__swbuf_r+0x12>
 8002d36:	f7ff fad3 	bl	80022e0 <__sinit>
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <__swbuf_r+0x98>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	d12b      	bne.n	8002d98 <__swbuf_r+0x70>
 8002d40:	686c      	ldr	r4, [r5, #4]
 8002d42:	69a3      	ldr	r3, [r4, #24]
 8002d44:	60a3      	str	r3, [r4, #8]
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	071a      	lsls	r2, r3, #28
 8002d4a:	d52f      	bpl.n	8002dac <__swbuf_r+0x84>
 8002d4c:	6923      	ldr	r3, [r4, #16]
 8002d4e:	b36b      	cbz	r3, 8002dac <__swbuf_r+0x84>
 8002d50:	6923      	ldr	r3, [r4, #16]
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	1ac0      	subs	r0, r0, r3
 8002d56:	6963      	ldr	r3, [r4, #20]
 8002d58:	b2f6      	uxtb	r6, r6
 8002d5a:	4283      	cmp	r3, r0
 8002d5c:	4637      	mov	r7, r6
 8002d5e:	dc04      	bgt.n	8002d6a <__swbuf_r+0x42>
 8002d60:	4621      	mov	r1, r4
 8002d62:	4628      	mov	r0, r5
 8002d64:	f7ff fa16 	bl	8002194 <_fflush_r>
 8002d68:	bb30      	cbnz	r0, 8002db8 <__swbuf_r+0x90>
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	6022      	str	r2, [r4, #0]
 8002d76:	701e      	strb	r6, [r3, #0]
 8002d78:	6963      	ldr	r3, [r4, #20]
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	4283      	cmp	r3, r0
 8002d7e:	d004      	beq.n	8002d8a <__swbuf_r+0x62>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	07db      	lsls	r3, r3, #31
 8002d84:	d506      	bpl.n	8002d94 <__swbuf_r+0x6c>
 8002d86:	2e0a      	cmp	r6, #10
 8002d88:	d104      	bne.n	8002d94 <__swbuf_r+0x6c>
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f7ff fa01 	bl	8002194 <_fflush_r>
 8002d92:	b988      	cbnz	r0, 8002db8 <__swbuf_r+0x90>
 8002d94:	4638      	mov	r0, r7
 8002d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <__swbuf_r+0x9c>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d101      	bne.n	8002da2 <__swbuf_r+0x7a>
 8002d9e:	68ac      	ldr	r4, [r5, #8]
 8002da0:	e7cf      	b.n	8002d42 <__swbuf_r+0x1a>
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <__swbuf_r+0xa0>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	bf08      	it	eq
 8002da8:	68ec      	ldreq	r4, [r5, #12]
 8002daa:	e7ca      	b.n	8002d42 <__swbuf_r+0x1a>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f80c 	bl	8002dcc <__swsetup_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d0cb      	beq.n	8002d50 <__swbuf_r+0x28>
 8002db8:	f04f 37ff 	mov.w	r7, #4294967295
 8002dbc:	e7ea      	b.n	8002d94 <__swbuf_r+0x6c>
 8002dbe:	bf00      	nop
 8002dc0:	080030bc 	.word	0x080030bc
 8002dc4:	080030dc 	.word	0x080030dc
 8002dc8:	0800309c 	.word	0x0800309c

08002dcc <__swsetup_r>:
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <__swsetup_r+0xcc>)
 8002dce:	b570      	push	{r4, r5, r6, lr}
 8002dd0:	681d      	ldr	r5, [r3, #0]
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	b125      	cbz	r5, 8002de2 <__swsetup_r+0x16>
 8002dd8:	69ab      	ldr	r3, [r5, #24]
 8002dda:	b913      	cbnz	r3, 8002de2 <__swsetup_r+0x16>
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f7ff fa7f 	bl	80022e0 <__sinit>
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <__swsetup_r+0xd0>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d10f      	bne.n	8002e08 <__swsetup_r+0x3c>
 8002de8:	686c      	ldr	r4, [r5, #4]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df0:	0719      	lsls	r1, r3, #28
 8002df2:	d42c      	bmi.n	8002e4e <__swsetup_r+0x82>
 8002df4:	06dd      	lsls	r5, r3, #27
 8002df6:	d411      	bmi.n	8002e1c <__swsetup_r+0x50>
 8002df8:	2309      	movs	r3, #9
 8002dfa:	6033      	str	r3, [r6, #0]
 8002dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e00:	81a3      	strh	r3, [r4, #12]
 8002e02:	f04f 30ff 	mov.w	r0, #4294967295
 8002e06:	e03e      	b.n	8002e86 <__swsetup_r+0xba>
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <__swsetup_r+0xd4>)
 8002e0a:	429c      	cmp	r4, r3
 8002e0c:	d101      	bne.n	8002e12 <__swsetup_r+0x46>
 8002e0e:	68ac      	ldr	r4, [r5, #8]
 8002e10:	e7eb      	b.n	8002dea <__swsetup_r+0x1e>
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <__swsetup_r+0xd8>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	bf08      	it	eq
 8002e18:	68ec      	ldreq	r4, [r5, #12]
 8002e1a:	e7e6      	b.n	8002dea <__swsetup_r+0x1e>
 8002e1c:	0758      	lsls	r0, r3, #29
 8002e1e:	d512      	bpl.n	8002e46 <__swsetup_r+0x7a>
 8002e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e22:	b141      	cbz	r1, 8002e36 <__swsetup_r+0x6a>
 8002e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	d002      	beq.n	8002e32 <__swsetup_r+0x66>
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f7ff fb25 	bl	800247c <_free_r>
 8002e32:	2300      	movs	r3, #0
 8002e34:	6363      	str	r3, [r4, #52]	; 0x34
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6923      	ldr	r3, [r4, #16]
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f043 0308 	orr.w	r3, r3, #8
 8002e4c:	81a3      	strh	r3, [r4, #12]
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	b94b      	cbnz	r3, 8002e66 <__swsetup_r+0x9a>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d003      	beq.n	8002e66 <__swsetup_r+0x9a>
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4630      	mov	r0, r6
 8002e62:	f000 f845 	bl	8002ef0 <__smakebuf_r>
 8002e66:	89a0      	ldrh	r0, [r4, #12]
 8002e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e6c:	f010 0301 	ands.w	r3, r0, #1
 8002e70:	d00a      	beq.n	8002e88 <__swsetup_r+0xbc>
 8002e72:	2300      	movs	r3, #0
 8002e74:	60a3      	str	r3, [r4, #8]
 8002e76:	6963      	ldr	r3, [r4, #20]
 8002e78:	425b      	negs	r3, r3
 8002e7a:	61a3      	str	r3, [r4, #24]
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	b943      	cbnz	r3, 8002e92 <__swsetup_r+0xc6>
 8002e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e84:	d1ba      	bne.n	8002dfc <__swsetup_r+0x30>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	0781      	lsls	r1, r0, #30
 8002e8a:	bf58      	it	pl
 8002e8c:	6963      	ldrpl	r3, [r4, #20]
 8002e8e:	60a3      	str	r3, [r4, #8]
 8002e90:	e7f4      	b.n	8002e7c <__swsetup_r+0xb0>
 8002e92:	2000      	movs	r0, #0
 8002e94:	e7f7      	b.n	8002e86 <__swsetup_r+0xba>
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	080030bc 	.word	0x080030bc
 8002ea0:	080030dc 	.word	0x080030dc
 8002ea4:	0800309c 	.word	0x0800309c

08002ea8 <__swhatbuf_r>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	460e      	mov	r6, r1
 8002eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb0:	2900      	cmp	r1, #0
 8002eb2:	b096      	sub	sp, #88	; 0x58
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	da07      	bge.n	8002eca <__swhatbuf_r+0x22>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	602b      	str	r3, [r5, #0]
 8002ebe:	89b3      	ldrh	r3, [r6, #12]
 8002ec0:	061a      	lsls	r2, r3, #24
 8002ec2:	d410      	bmi.n	8002ee6 <__swhatbuf_r+0x3e>
 8002ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec8:	e00e      	b.n	8002ee8 <__swhatbuf_r+0x40>
 8002eca:	466a      	mov	r2, sp
 8002ecc:	f000 f850 	bl	8002f70 <_fstat_r>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	dbf2      	blt.n	8002eba <__swhatbuf_r+0x12>
 8002ed4:	9a01      	ldr	r2, [sp, #4]
 8002ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ede:	425a      	negs	r2, r3
 8002ee0:	415a      	adcs	r2, r3
 8002ee2:	602a      	str	r2, [r5, #0]
 8002ee4:	e7ee      	b.n	8002ec4 <__swhatbuf_r+0x1c>
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	2000      	movs	r0, #0
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	b016      	add	sp, #88	; 0x58
 8002eee:	bd70      	pop	{r4, r5, r6, pc}

08002ef0 <__smakebuf_r>:
 8002ef0:	898b      	ldrh	r3, [r1, #12]
 8002ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ef4:	079d      	lsls	r5, r3, #30
 8002ef6:	4606      	mov	r6, r0
 8002ef8:	460c      	mov	r4, r1
 8002efa:	d507      	bpl.n	8002f0c <__smakebuf_r+0x1c>
 8002efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	6123      	str	r3, [r4, #16]
 8002f04:	2301      	movs	r3, #1
 8002f06:	6163      	str	r3, [r4, #20]
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	ab01      	add	r3, sp, #4
 8002f0e:	466a      	mov	r2, sp
 8002f10:	f7ff ffca 	bl	8002ea8 <__swhatbuf_r>
 8002f14:	9900      	ldr	r1, [sp, #0]
 8002f16:	4605      	mov	r5, r0
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f7ff faff 	bl	800251c <_malloc_r>
 8002f1e:	b948      	cbnz	r0, 8002f34 <__smakebuf_r+0x44>
 8002f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f24:	059a      	lsls	r2, r3, #22
 8002f26:	d4ef      	bmi.n	8002f08 <__smakebuf_r+0x18>
 8002f28:	f023 0303 	bic.w	r3, r3, #3
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	e7e3      	b.n	8002efc <__smakebuf_r+0xc>
 8002f34:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <__smakebuf_r+0x7c>)
 8002f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	81a3      	strh	r3, [r4, #12]
 8002f42:	9b00      	ldr	r3, [sp, #0]
 8002f44:	6163      	str	r3, [r4, #20]
 8002f46:	9b01      	ldr	r3, [sp, #4]
 8002f48:	6120      	str	r0, [r4, #16]
 8002f4a:	b15b      	cbz	r3, 8002f64 <__smakebuf_r+0x74>
 8002f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f50:	4630      	mov	r0, r6
 8002f52:	f000 f81f 	bl	8002f94 <_isatty_r>
 8002f56:	b128      	cbz	r0, 8002f64 <__smakebuf_r+0x74>
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	89a0      	ldrh	r0, [r4, #12]
 8002f66:	4305      	orrs	r5, r0
 8002f68:	81a5      	strh	r5, [r4, #12]
 8002f6a:	e7cd      	b.n	8002f08 <__smakebuf_r+0x18>
 8002f6c:	08002279 	.word	0x08002279

08002f70 <_fstat_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	4d07      	ldr	r5, [pc, #28]	; (8002f90 <_fstat_r+0x20>)
 8002f74:	2300      	movs	r3, #0
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	f000 f821 	bl	8002fc4 <_fstat>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	d102      	bne.n	8002f8c <_fstat_r+0x1c>
 8002f86:	682b      	ldr	r3, [r5, #0]
 8002f88:	b103      	cbz	r3, 8002f8c <_fstat_r+0x1c>
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	200001c4 	.word	0x200001c4

08002f94 <_isatty_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4d06      	ldr	r5, [pc, #24]	; (8002fb0 <_isatty_r+0x1c>)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	602b      	str	r3, [r5, #0]
 8002fa0:	f000 f818 	bl	8002fd4 <_isatty>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_isatty_r+0x1a>
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_isatty_r+0x1a>
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	200001c4 	.word	0x200001c4

08002fb4 <_close>:
 8002fb4:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <_close+0xc>)
 8002fb6:	2258      	movs	r2, #88	; 0x58
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbe:	4770      	bx	lr
 8002fc0:	200001c4 	.word	0x200001c4

08002fc4 <_fstat>:
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <_fstat+0xc>)
 8002fc6:	2258      	movs	r2, #88	; 0x58
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295
 8002fce:	4770      	bx	lr
 8002fd0:	200001c4 	.word	0x200001c4

08002fd4 <_isatty>:
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <_isatty+0xc>)
 8002fd6:	2258      	movs	r2, #88	; 0x58
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	2000      	movs	r0, #0
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200001c4 	.word	0x200001c4

08002fe4 <_lseek>:
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <_lseek+0xc>)
 8002fe6:	2258      	movs	r2, #88	; 0x58
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295
 8002fee:	4770      	bx	lr
 8002ff0:	200001c4 	.word	0x200001c4

08002ff4 <_sbrk>:
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <_sbrk+0x14>)
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	b909      	cbnz	r1, 8003000 <_sbrk+0xc>
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <_sbrk+0x18>)
 8002ffe:	6019      	str	r1, [r3, #0]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	4402      	add	r2, r0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4770      	bx	lr
 8003008:	200000b0 	.word	0x200000b0
 800300c:	200001c8 	.word	0x200001c8

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
