
LAB-01-Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b0  080032b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032b8  080032b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08003330  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001ac  08003330  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae15  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001907  00000000  00000000  0002aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003823  00000000  00000000  0002c7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000600  00000000  00000000  00030628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bedc  00000000  00000000  00030c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4a2  00000000  00000000  0005cb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a26f  00000000  00000000  00066fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00171215  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001978  00000000  00000000  00171268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000006c  00000000  00000000  00172be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  00172c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002f94 	.word	0x08002f94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002f94 	.word	0x08002f94

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <is_printable>:

//------------------------------------------------------------------------------------
//Extra thing to consider...
//------------------------------------------------------------------------------------
int is_printable(char cChar){
	if (cChar > 0x20 && cChar < 0x7E)
 80005d8:	3821      	subs	r0, #33	; 0x21
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	285c      	cmp	r0, #92	; 0x5c
 80005de:	d901      	bls.n	80005e4 <is_printable+0xc>
		return 1;
	return 0;
 80005e0:	2000      	movs	r0, #0
 80005e2:	4770      	bx	lr
		return 1;
 80005e4:	2001      	movs	r0, #1
}
 80005e6:	4770      	bx	lr

080005e8 <GPIO_init>:

void GPIO_init(){
 80005e8:	b410      	push	{r4}
	// CLK Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN; // or through registers
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <GPIO_init+0xf8>)
 80005ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f6:	f042 0201 	orr.w	r2, r2, #1
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80005fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fe:	f042 0208 	orr.w	r2, r2, #8
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000606:	f042 0204 	orr.w	r2, r2, #4
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f042 0220 	orr.w	r2, r2, #32
 8000612:	631a      	str	r2, [r3, #48]	; 0x30

	// LEDs Init
	// Output init
	GPIOJ->MODER  |= 0x04000400U;// LED 1 & 2
 8000614:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	f042 2204 	orr.w	r2, r2, #67109888	; 0x4000400
 800061e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER  |= 0x01000000U;// LED 3
 8000620:	4930      	ldr	r1, [pc, #192]	; (80006e4 <GPIO_init+0xfc>)
 8000622:	680a      	ldr	r2, [r1, #0]
 8000624:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000628:	600a      	str	r2, [r1, #0]
	GPIOD->MODER  |= 0x00000100U;// LED 4
 800062a:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <GPIO_init+0x100>)
 800062c:	6810      	ldr	r0, [r2, #0]
 800062e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000632:	6010      	str	r0, [r2, #0]

	// Output Push-pull mode
	GPIOJ->OTYPER &= 0xFFFFDFDFU;// LED 1 & 2
 8000634:	685c      	ldr	r4, [r3, #4]
 8000636:	482d      	ldr	r0, [pc, #180]	; (80006ec <GPIO_init+0x104>)
 8000638:	4020      	ands	r0, r4
 800063a:	6058      	str	r0, [r3, #4]
	GPIOA->OTYPER &= 0xFFFEFFFFU;// LED 3
 800063c:	6848      	ldr	r0, [r1, #4]
 800063e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8000642:	6048      	str	r0, [r1, #4]
	GPIOD->OTYPER &= 0xFFFFFFBFU;// LED 4
 8000644:	6850      	ldr	r0, [r2, #4]
 8000646:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800064a:	6050      	str	r0, [r2, #4]

	// GPIO Pin enable to output mode
	GPIOJ->BSRR   |= (uint16_t)GPIO_PIN_5;
 800064c:	6998      	ldr	r0, [r3, #24]
 800064e:	f040 0020 	orr.w	r0, r0, #32
 8000652:	6198      	str	r0, [r3, #24]
	GPIOJ->BSRR   |= (uint16_t)GPIO_PIN_13;
 8000654:	6998      	ldr	r0, [r3, #24]
 8000656:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800065a:	6198      	str	r0, [r3, #24]
	GPIOA->BSRR   |= (uint16_t)GPIO_PIN_12;
 800065c:	6988      	ldr	r0, [r1, #24]
 800065e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8000662:	6188      	str	r0, [r1, #24]
	GPIOD->BSRR   |= (uint16_t)GPIO_PIN_4;
 8000664:	6990      	ldr	r0, [r2, #24]
 8000666:	f040 0010 	orr.w	r0, r0, #16
 800066a:	6190      	str	r0, [r2, #24]

	//Turn off all LEDs
	GPIOJ->ODR &= ~(GPIO_PIN_13);
 800066c:	6958      	ldr	r0, [r3, #20]
 800066e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8000672:	6158      	str	r0, [r3, #20]
	GPIOJ->ODR &= ~(GPIO_PIN_5);
 8000674:	6958      	ldr	r0, [r3, #20]
 8000676:	f020 0020 	bic.w	r0, r0, #32
 800067a:	6158      	str	r0, [r3, #20]
	GPIOA->ODR &= ~(GPIO_PIN_12);
 800067c:	6948      	ldr	r0, [r1, #20]
 800067e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8000682:	6148      	str	r0, [r1, #20]
	GPIOD->ODR |=   GPIO_PIN_4;
 8000684:	6951      	ldr	r1, [r2, #20]
 8000686:	f041 0110 	orr.w	r1, r1, #16
 800068a:	6151      	str	r1, [r2, #20]


	// PINs init
	// Input init
	GPIOC->MODER  &= 0xFFFF0FFFU;// D0 & 1
 800068c:	4918      	ldr	r1, [pc, #96]	; (80006f0 <GPIO_init+0x108>)
 800068e:	680a      	ldr	r2, [r1, #0]
 8000690:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000694:	600a      	str	r2, [r1, #0]
	GPIOJ->MODER  &= 0xFFFFFFF3U;// D2
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f022 020c 	bic.w	r2, r2, #12
 800069c:	601a      	str	r2, [r3, #0]
	GPIOF->MODER  &= 0xFFFFCFFFU;// D3
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <GPIO_init+0x10c>)
 80006a0:	6810      	ldr	r0, [r2, #0]
 80006a2:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 80006a6:	6010      	str	r0, [r2, #0]

	// Input Open Drain Mode
	GPIOJ->OTYPER |= 0x00000002U;// D0 & 1
 80006a8:	6858      	ldr	r0, [r3, #4]
 80006aa:	f040 0002 	orr.w	r0, r0, #2
 80006ae:	6058      	str	r0, [r3, #4]
	GPIOC->OTYPER |= 0x000000C0U;// D2
 80006b0:	6848      	ldr	r0, [r1, #4]
 80006b2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80006b6:	6048      	str	r0, [r1, #4]
	GPIOF->OTYPER |= 0x00001000U;// D3
 80006b8:	6850      	ldr	r0, [r2, #4]
 80006ba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80006be:	6050      	str	r0, [r2, #4]

	// Input Pull-up Mode
	GPIOC->PUPDR  |= 0x00005000U;// D0 & 1
 80006c0:	68c8      	ldr	r0, [r1, #12]
 80006c2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 80006c6:	60c8      	str	r0, [r1, #12]
	GPIOJ->PUPDR  |= 0x00000004U;// D2
 80006c8:	68d9      	ldr	r1, [r3, #12]
 80006ca:	f041 0104 	orr.w	r1, r1, #4
 80006ce:	60d9      	str	r1, [r3, #12]
	GPIOF->PUPDR  |= 0x00001000U;// D3
 80006d0:	68d3      	ldr	r3, [r2, #12]
 80006d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d6:	60d3      	str	r3, [r2, #12]
}
 80006d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	ffffdfdf 	.word	0xffffdfdf
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40021400 	.word	0x40021400

080006f8 <main>:
{
 80006f8:	b570      	push	{r4, r5, r6, lr}
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80006fa:	f000 f8f5 	bl	80008e8 <Sys_Init>
    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80006fe:	4c35      	ldr	r4, [pc, #212]	; (80007d4 <main+0xdc>)
 8000700:	4620      	mov	r0, r4
 8000702:	f001 fdc9 	bl	8002298 <iprintf>
    printf("\033[0;44m");       // Let the screen become blue.
 8000706:	4834      	ldr	r0, [pc, #208]	; (80007d8 <main+0xe0>)
 8000708:	f001 fdc6 	bl	8002298 <iprintf>
    printf("\033[2J\033[;H");
 800070c:	4620      	mov	r0, r4
 800070e:	f001 fdc3 	bl	8002298 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <main+0xe4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	f001 fbae 	bl	8001e78 <fflush>
    HAL_Delay(1000); // Pause for a second
 800071c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000720:	f000 fa10 	bl	8000b44 <HAL_Delay>
    HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f000 fa0c 	bl	8000b44 <HAL_Delay>
    GPIO_init();
 800072c:	f7ff ff5c 	bl	80005e8 <GPIO_init>
    printf("\033[33m \r\n%56s","PRESS <ESC> OR <CTRL> + [ TO QUIT\r\n");
 8000730:	492b      	ldr	r1, [pc, #172]	; (80007e0 <main+0xe8>)
 8000732:	482c      	ldr	r0, [pc, #176]	; (80007e4 <main+0xec>)
 8000734:	f001 fdb0 	bl	8002298 <iprintf>
    int nPtrLineNum = 2;
 8000738:	2402      	movs	r4, #2
    int nLoopingSignal = 0;
 800073a:	2600      	movs	r6, #0
    while (!nLoopingSignal){
 800073c:	e01d      	b.n	800077a <main+0x82>
    			for ( int i = nPtrLineNum; i < 12; i++)
 800073e:	2c0b      	cmp	r4, #11
 8000740:	dc04      	bgt.n	800074c <main+0x54>
    				printf("\n");
 8000742:	200a      	movs	r0, #10
 8000744:	f001 fdc0 	bl	80022c8 <putchar>
    			for ( int i = nPtrLineNum; i < 12; i++)
 8000748:	3401      	adds	r4, #1
 800074a:	e7f8      	b.n	800073e <main+0x46>
    			nPtrLineNum = 12;
 800074c:	240c      	movs	r4, #12
 800074e:	e021      	b.n	8000794 <main+0x9c>
    		if (nPtrLineNum == 2){
 8000750:	2c02      	cmp	r4, #2
 8000752:	d004      	beq.n	800075e <main+0x66>
    		printf("\033[33mThe keyboard character is:\033[31m %c\r\n", choice);
 8000754:	b2e9      	uxtb	r1, r5
 8000756:	4824      	ldr	r0, [pc, #144]	; (80007e8 <main+0xf0>)
 8000758:	f001 fd9e 	bl	8002298 <iprintf>
 800075c:	e004      	b.n	8000768 <main+0x70>
    			printf("\n\n\n\r");
 800075e:	4823      	ldr	r0, [pc, #140]	; (80007ec <main+0xf4>)
 8000760:	f001 fd9a 	bl	8002298 <iprintf>
 8000764:	e7f6      	b.n	8000754 <main+0x5c>
    		nLoopingSignal = 1;
 8000766:	2601      	movs	r6, #1
    	nPtrLineNum++;
 8000768:	3401      	adds	r4, #1
    	if (nPtrLineNum >= 24 && !nLoopingSignal){
 800076a:	f086 0301 	eor.w	r3, r6, #1
 800076e:	2c17      	cmp	r4, #23
 8000770:	bfd4      	ite	le
 8000772:	2300      	movle	r3, #0
 8000774:	f003 0301 	andgt.w	r3, r3, #1
 8000778:	b99b      	cbnz	r3, 80007a2 <main+0xaa>
    while (!nLoopingSignal){
 800077a:	bb06      	cbnz	r6, 80007be <main+0xc6>
    	choice = getchar();
 800077c:	f001 fca0 	bl	80020c0 <getchar>
 8000780:	4605      	mov	r5, r0
 8000782:	b2c0      	uxtb	r0, r0
    	if (choice == '^[' || choice == 27){
 8000784:	281b      	cmp	r0, #27
 8000786:	d0ee      	beq.n	8000766 <main+0x6e>
    	}else if (is_printable(choice) == 0){
 8000788:	f7ff ff26 	bl	80005d8 <is_printable>
 800078c:	2800      	cmp	r0, #0
 800078e:	d1df      	bne.n	8000750 <main+0x58>
    		if (nPtrLineNum < 12){
 8000790:	2c0b      	cmp	r4, #11
 8000792:	ddd4      	ble.n	800073e <main+0x46>
    		printf("\a\033[33m%s $%02x is \033[4m%s\033[24m\r\n", "The keyboard character", choice, "not printable");
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <main+0xf8>)
 8000796:	b2ea      	uxtb	r2, r5
 8000798:	4916      	ldr	r1, [pc, #88]	; (80007f4 <main+0xfc>)
 800079a:	4817      	ldr	r0, [pc, #92]	; (80007f8 <main+0x100>)
 800079c:	f001 fd7c 	bl	8002298 <iprintf>
 80007a0:	e7e2      	b.n	8000768 <main+0x70>
    		printf("\033[2J\033[;H");
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0xdc>)
 80007a4:	f001 fd78 	bl	8002298 <iprintf>
    		fflush(stdout);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0xe4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6898      	ldr	r0, [r3, #8]
 80007ae:	f001 fb63 	bl	8001e78 <fflush>
    		printf("\033[33m \r\n%56s","PRESS <ESC> OR <CTRL> + [ TO QUIT\n\r");
 80007b2:	4912      	ldr	r1, [pc, #72]	; (80007fc <main+0x104>)
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0xec>)
 80007b6:	f001 fd6f 	bl	8002298 <iprintf>
    		nPtrLineNum = 2;
 80007ba:	2402      	movs	r4, #2
 80007bc:	e7dd      	b.n	800077a <main+0x82>
    printf("\033[2J\033[;H");
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <main+0xdc>)
 80007c0:	f001 fd6a 	bl	8002298 <iprintf>
    fflush(stdout);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <main+0xe4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6898      	ldr	r0, [r3, #8]
 80007ca:	f001 fb55 	bl	8001e78 <fflush>
}
 80007ce:	2000      	movs	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	bf00      	nop
 80007d4:	08002fc4 	.word	0x08002fc4
 80007d8:	08002fd0 	.word	0x08002fd0
 80007dc:	2000000c 	.word	0x2000000c
 80007e0:	08002fd8 	.word	0x08002fd8
 80007e4:	08002ffc 	.word	0x08002ffc
 80007e8:	0800305c 	.word	0x0800305c
 80007ec:	08003054 	.word	0x08003054
 80007f0:	0800300c 	.word	0x0800300c
 80007f4:	0800301c 	.word	0x0800301c
 80007f8:	08003034 	.word	0x08003034
 80007fc:	08003088 	.word	0x08003088

08000800 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000800:	b500      	push	{lr}
 8000802:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000816:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000818:	2219      	movs	r2, #25
 800081a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800081c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000820:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000822:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000824:	2309      	movs	r3, #9
 8000826:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000828:	2307      	movs	r3, #7
 800082a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800082c:	4668      	mov	r0, sp
 800082e:	f000 fb25 	bl	8000e7c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000832:	b100      	cbz	r0, 8000836 <SystemClock_Config+0x36>
    while(1) { ; }
 8000834:	e7fe      	b.n	8000834 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000836:	f000 fae3 	bl	8000e00 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800083a:	b100      	cbz	r0, 800083e <SystemClock_Config+0x3e>
    while(1) { ; }
 800083c:	e7fe      	b.n	800083c <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800083e:	230f      	movs	r3, #15
 8000840:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000856:	2107      	movs	r1, #7
 8000858:	a80d      	add	r0, sp, #52	; 0x34
 800085a:	f000 fd81 	bl	8001360 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800085e:	b100      	cbz	r0, 8000862 <SystemClock_Config+0x62>
    while(1) { ; }
 8000860:	e7fe      	b.n	8000860 <SystemClock_Config+0x60>
  }
}
 8000862:	b013      	add	sp, #76	; 0x4c
 8000864:	f85d fb04 	ldr.w	pc, [sp], #4

08000868 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000868:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <CPU_CACHE_Enable+0x7c>)
 8000874:	2100      	movs	r1, #0
 8000876:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800087e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000888:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800088e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000892:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000896:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800089a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800089e:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80008a2:	e000      	b.n	80008a6 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80008a4:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008a6:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008aa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ae:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80008b2:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80008b6:	4c0b      	ldr	r4, [pc, #44]	; (80008e4 <CPU_CACHE_Enable+0x7c>)
 80008b8:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 80008bc:	460b      	mov	r3, r1
 80008be:	3901      	subs	r1, #1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f2      	bne.n	80008aa <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80008c4:	1e53      	subs	r3, r2, #1
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d1ec      	bne.n	80008a4 <CPU_CACHE_Enable+0x3c>
 80008ca:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ce:	6963      	ldr	r3, [r4, #20]
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6163      	str	r3, [r4, #20]
 80008d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008da:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80008de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 80008e8:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 80008ea:	f7ff ffbd 	bl	8000868 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 80008ee:	f000 f901 	bl	8000af4 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 80008f2:	f7ff ff85 	bl	8000800 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 80008f6:	4a03      	ldr	r2, [pc, #12]	; (8000904 <Sys_Init+0x1c>)
 80008f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <Sys_Init+0x20>)
 80008fe:	f000 f873 	bl	80009e8 <initUart>
}
 8000902:	bd08      	pop	{r3, pc}
 8000904:	40011000 	.word	0x40011000
 8000908:	20000098 	.word	0x20000098

0800090c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800090c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800090e:	f000 f907 	bl	8000b20 <HAL_IncTick>
}
 8000912:	bd08      	pop	{r3, pc}

08000914 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000914:	b530      	push	{r4, r5, lr}
 8000916:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <HAL_UART_MspInit+0xc0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d004      	beq.n	800092a <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <HAL_UART_MspInit+0xc4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d02c      	beq.n	8000980 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 800092a:	4c2c      	ldr	r4, [pc, #176]	; (80009dc <HAL_UART_MspInit+0xc8>)
 800092c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6323      	str	r3, [r4, #48]	; 0x30
 8000934:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000948:	2301      	movs	r3, #1
 800094a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000950:	2307      	movs	r3, #7
 8000952:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000954:	4d22      	ldr	r5, [pc, #136]	; (80009e0 <HAL_UART_MspInit+0xcc>)
 8000956:	a905      	add	r1, sp, #20
 8000958:	4628      	mov	r0, r5
 800095a:	f000 f961 	bl	8000c20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000964:	a905      	add	r1, sp, #20
 8000966:	4628      	mov	r0, r5
 8000968:	f000 f95a 	bl	8000c20 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 800096c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6463      	str	r3, [r4, #68]	; 0x44
 8000974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	9b02      	ldr	r3, [sp, #8]
 800097e:	e7d2      	b.n	8000926 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000980:	4c16      	ldr	r4, [pc, #88]	; (80009dc <HAL_UART_MspInit+0xc8>)
 8000982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6323      	str	r3, [r4, #48]	; 0x30
 800098a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	9303      	str	r3, [sp, #12]
 8000992:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009a4:	2308      	movs	r3, #8
 80009a6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80009a8:	4d0e      	ldr	r5, [pc, #56]	; (80009e4 <HAL_UART_MspInit+0xd0>)
 80009aa:	a905      	add	r1, sp, #20
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f937 	bl	8000c20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80009b6:	a905      	add	r1, sp, #20
 80009b8:	4628      	mov	r0, r5
 80009ba:	f000 f931 	bl	8000c20 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 80009be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6463      	str	r3, [r4, #68]	; 0x44
 80009c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	9304      	str	r3, [sp, #16]
 80009ce:	9b04      	ldr	r3, [sp, #16]
}
 80009d0:	e7a9      	b.n	8000926 <HAL_UART_MspInit+0x12>
 80009d2:	bf00      	nop
 80009d4:	40011000 	.word	0x40011000
 80009d8:	40011400 	.word	0x40011400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020800 	.word	0x40020800

080009e8 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 80009e8:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 80009ea:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 80009ec:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	2200      	movs	r2, #0
 80009f0:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 80009f2:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 80009f4:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 80009f6:	210c      	movs	r1, #12
 80009f8:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80009fa:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 80009fc:	f001 f948 	bl	8001c90 <HAL_UART_Init>
}
 8000a00:	bd08      	pop	{r3, pc}
	...

08000a04 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000a04:	b510      	push	{r4, lr}
 8000a06:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	4802      	ldr	r0, [pc, #8]	; (8000a18 <_write+0x14>)
 8000a10:	f001 f808 	bl	8001a24 <HAL_UART_Transmit>
	return len;
}
 8000a14:	4620      	mov	r0, r4
 8000a16:	bd10      	pop	{r4, pc}
 8000a18:	20000098 	.word	0x20000098

08000a1c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000a1c:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000a1e:	2200      	movs	r2, #0
 8000a20:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	2201      	movs	r2, #1
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <_read+0x18>)
 8000a2a:	f001 f868 	bl	8001afe <HAL_UART_Receive>
	return len;
}
 8000a2e:	2001      	movs	r0, #1
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	20000098 	.word	0x20000098

08000a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490e      	ldr	r1, [pc, #56]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0b      	ldr	r4, [pc, #44]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a62:	f000 f813 	bl	8000a8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a66:	f001 fb3d 	bl	80020e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff fe45 	bl	80006f8 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a7c:	080032c0 	.word	0x080032c0
  ldr r2, =_sbss
 8000a80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a84:	200001ac 	.word	0x200001ac

08000a88 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC_IRQHandler>
	...

08000a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SystemInit+0x18>)
 8000a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000aa8:	4770      	bx	lr
	...

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b510      	push	{r4, lr}
 8000aae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_InitTick+0x40>)
 8000ab2:	7818      	ldrb	r0, [r3, #0]
 8000ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <HAL_InitTick+0x44>)
 8000abe:	6810      	ldr	r0, [r2, #0]
 8000ac0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ac4:	f000 f896 	bl	8000bf4 <HAL_SYSTICK_Config>
 8000ac8:	b968      	cbnz	r0, 8000ae6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	2c0f      	cmp	r4, #15
 8000acc:	d901      	bls.n	8000ad2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
 8000ad0:	e00a      	b.n	8000ae8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ada:	f000 f859 	bl	8000b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_InitTick+0x40>)
 8000ae0:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
}
 8000ae8:	bd10      	pop	{r4, pc}
 8000aea:	bf00      	nop
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_Init>:
{
 8000af4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_Init+0x28>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000afe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f82f 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f7ff ffcc 	bl	8000aac <HAL_InitTick>
  HAL_MspInit();
 8000b14:	f7ff ffc8 	bl	8000aa8 <HAL_MspInit>
}
 8000b18:	2000      	movs	r0, #0
 8000b1a:	bd08      	pop	{r3, pc}
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x10>)
 8000b22:	6811      	ldr	r1, [r2, #0]
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_IncTick+0x14>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000198 	.word	0x20000198
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <HAL_GetTick+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000198 	.word	0x20000198

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff6 	bl	8000b38 <HAL_GetTick>
 8000b4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b52:	d002      	beq.n	8000b5a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_Delay+0x24>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5a:	f7ff ffed 	bl	8000b38 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	42a0      	cmp	r0, r4
 8000b62:	d3fa      	bcc.n	8000b5a <HAL_Delay+0x16>
  {
  }
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4906      	ldr	r1, [pc, #24]	; (8000b88 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000b6e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	0200      	lsls	r0, r0, #8
 8000b7a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b82:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000b84:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	05fa0000 	.word	0x05fa0000

08000b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b90:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_NVIC_SetPriority+0x58>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9a:	f1c3 0407 	rsb	r4, r3, #7
 8000b9e:	2c04      	cmp	r4, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba4:	1d1d      	adds	r5, r3, #4
 8000ba6:	2d06      	cmp	r5, #6
 8000ba8:	d914      	bls.n	8000bd4 <HAL_NVIC_SetPriority+0x44>
 8000baa:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 35ff 	mov.w	r5, #4294967295
 8000bb0:	fa05 f404 	lsl.w	r4, r5, r4
 8000bb4:	ea21 0104 	bic.w	r1, r1, r4
 8000bb8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bba:	fa05 f303 	lsl.w	r3, r5, r3
 8000bbe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	db07      	blt.n	8000bd8 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	0109      	lsls	r1, r1, #4
 8000bca:	b2c9      	uxtb	r1, r1
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_NVIC_SetPriority+0x5c>)
 8000bce:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bd0:	bc30      	pop	{r4, r5}
 8000bd2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e7e9      	b.n	8000bac <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	f000 000f 	and.w	r0, r0, #15
 8000bdc:	0109      	lsls	r1, r1, #4
 8000bde:	b2c9      	uxtb	r1, r1
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_NVIC_SetPriority+0x60>)
 8000be2:	5419      	strb	r1, [r3, r0]
 8000be4:	e7f4      	b.n	8000bd0 <HAL_NVIC_SetPriority+0x40>
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	e000e400 	.word	0xe000e400
 8000bf0:	e000ed14 	.word	0xe000ed14

08000bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d20a      	bcs.n	8000c12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_SYSTICK_Config+0x24>)
 8000bfe:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_SYSTICK_Config+0x28>)
 8000c02:	21f0      	movs	r1, #240	; 0xf0
 8000c04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	2000      	movs	r0, #0
 8000c0a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	f200 80e3 	bhi.w	8000dee <HAL_GPIO_Init+0x1ce>
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	e039      	b.n	8000ca2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c2e:	2209      	movs	r2, #9
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000c32:	2200      	movs	r2, #0
 8000c34:	40b2      	lsls	r2, r6
 8000c36:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c38:	3402      	adds	r4, #2
 8000c3a:	4e6d      	ldr	r6, [pc, #436]	; (8000df0 <HAL_GPIO_Init+0x1d0>)
 8000c3c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c40:	4a6c      	ldr	r2, [pc, #432]	; (8000df4 <HAL_GPIO_Init+0x1d4>)
 8000c42:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c44:	43ea      	mvns	r2, r5
 8000c46:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4a:	684f      	ldr	r7, [r1, #4]
 8000c4c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c50:	d001      	beq.n	8000c56 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000c52:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000c56:	4c67      	ldr	r4, [pc, #412]	; (8000df4 <HAL_GPIO_Init+0x1d4>)
 8000c58:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000c5a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c60:	684f      	ldr	r7, [r1, #4]
 8000c62:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c66:	d001      	beq.n	8000c6c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000c68:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000c6c:	4c61      	ldr	r4, [pc, #388]	; (8000df4 <HAL_GPIO_Init+0x1d4>)
 8000c6e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c70:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c72:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c76:	684f      	ldr	r7, [r1, #4]
 8000c78:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000c7c:	d001      	beq.n	8000c82 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000c7e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000c82:	4c5c      	ldr	r4, [pc, #368]	; (8000df4 <HAL_GPIO_Init+0x1d4>)
 8000c84:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000c86:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c88:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8a:	684e      	ldr	r6, [r1, #4]
 8000c8c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c90:	d001      	beq.n	8000c96 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000c92:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000c96:	4c57      	ldr	r4, [pc, #348]	; (8000df4 <HAL_GPIO_Init+0x1d4>)
 8000c98:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	f200 80a4 	bhi.w	8000dea <HAL_GPIO_Init+0x1ca>
    ioposition = ((uint32_t)0x01) << position;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	680c      	ldr	r4, [r1, #0]
 8000ca8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000cac:	ea32 0404 	bics.w	r4, r2, r4
 8000cb0:	d1f3      	bne.n	8000c9a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb2:	684c      	ldr	r4, [r1, #4]
 8000cb4:	1e66      	subs	r6, r4, #1
 8000cb6:	2c11      	cmp	r4, #17
 8000cb8:	bf18      	it	ne
 8000cba:	2e01      	cmpne	r6, #1
 8000cbc:	d901      	bls.n	8000cc2 <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	2c12      	cmp	r4, #18
 8000cc0:	d112      	bne.n	8000ce8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 8000cc2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cc4:	005f      	lsls	r7, r3, #1
 8000cc6:	2403      	movs	r4, #3
 8000cc8:	40bc      	lsls	r4, r7
 8000cca:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cce:	68cc      	ldr	r4, [r1, #12]
 8000cd0:	40bc      	lsls	r4, r7
 8000cd2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000cd4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cd6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cdc:	684c      	ldr	r4, [r1, #4]
 8000cde:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000ce6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ce8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cea:	005e      	lsls	r6, r3, #1
 8000cec:	2403      	movs	r4, #3
 8000cee:	40b4      	lsls	r4, r6
 8000cf0:	43e2      	mvns	r2, r4
 8000cf2:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cf6:	688c      	ldr	r4, [r1, #8]
 8000cf8:	40b4      	lsls	r4, r6
 8000cfa:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8000cfc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfe:	684c      	ldr	r4, [r1, #4]
 8000d00:	2c12      	cmp	r4, #18
 8000d02:	bf18      	it	ne
 8000d04:	2c02      	cmpne	r4, #2
 8000d06:	d113      	bne.n	8000d30 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8000d08:	08df      	lsrs	r7, r3, #3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d10:	f003 0407 	and.w	r4, r3, #7
 8000d14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000d18:	240f      	movs	r4, #15
 8000d1a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d1e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d22:	690c      	ldr	r4, [r1, #16]
 8000d24:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d28:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d2c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000d30:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d32:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d34:	684a      	ldr	r2, [r1, #4]
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	40b2      	lsls	r2, r6
 8000d3c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d3e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	684a      	ldr	r2, [r1, #4]
 8000d42:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d46:	d0a8      	beq.n	8000c9a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d48:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <HAL_GPIO_Init+0x1d8>)
 8000d4a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000d4c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d50:	6454      	str	r4, [r2, #68]	; 0x44
 8000d52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d5c:	089c      	lsrs	r4, r3, #2
 8000d5e:	1ca6      	adds	r6, r4, #2
 8000d60:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <HAL_GPIO_Init+0x1d0>)
 8000d62:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d66:	f003 0203 	and.w	r2, r3, #3
 8000d6a:	0096      	lsls	r6, r2, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	40b2      	lsls	r2, r6
 8000d70:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_GPIO_Init+0x1dc>)
 8000d76:	4290      	cmp	r0, r2
 8000d78:	f43f af5b 	beq.w	8000c32 <HAL_GPIO_Init+0x12>
 8000d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d022      	beq.n	8000dca <HAL_GPIO_Init+0x1aa>
 8000d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d88:	4290      	cmp	r0, r2
 8000d8a:	d020      	beq.n	8000dce <HAL_GPIO_Init+0x1ae>
 8000d8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d90:	4290      	cmp	r0, r2
 8000d92:	d01e      	beq.n	8000dd2 <HAL_GPIO_Init+0x1b2>
 8000d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d01c      	beq.n	8000dd6 <HAL_GPIO_Init+0x1b6>
 8000d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d01a      	beq.n	8000dda <HAL_GPIO_Init+0x1ba>
 8000da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000da8:	4290      	cmp	r0, r2
 8000daa:	d018      	beq.n	8000dde <HAL_GPIO_Init+0x1be>
 8000dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d016      	beq.n	8000de2 <HAL_GPIO_Init+0x1c2>
 8000db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db8:	4290      	cmp	r0, r2
 8000dba:	d014      	beq.n	8000de6 <HAL_GPIO_Init+0x1c6>
 8000dbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f43f af34 	beq.w	8000c2e <HAL_GPIO_Init+0xe>
 8000dc6:	220a      	movs	r2, #10
 8000dc8:	e734      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dca:	2201      	movs	r2, #1
 8000dcc:	e732      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dce:	2202      	movs	r2, #2
 8000dd0:	e730      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	e72e      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	e72c      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dda:	2205      	movs	r2, #5
 8000ddc:	e72a      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000dde:	2206      	movs	r2, #6
 8000de0:	e728      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000de2:	2207      	movs	r2, #7
 8000de4:	e726      	b.n	8000c34 <HAL_GPIO_Init+0x14>
 8000de6:	2208      	movs	r2, #8
 8000de8:	e724      	b.n	8000c34 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000dea:	b003      	add	sp, #12
 8000dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dee:	4770      	bx	lr
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40013c00 	.word	0x40013c00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e00:	b510      	push	{r4, lr}
 8000e02:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_PWREx_EnableOverDrive+0x74>)
 8000e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e22:	f7ff fe89 	bl	8000b38 <HAL_GetTick>
 8000e26:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e30:	d108      	bne.n	8000e44 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e32:	f7ff fe81 	bl	8000b38 <HAL_GetTick>
 8000e36:	1b00      	subs	r0, r0, r4
 8000e38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e3c:	d9f4      	bls.n	8000e28 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000e3e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000e40:	b002      	add	sp, #8
 8000e42:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000e4e:	f7ff fe73 	bl	8000b38 <HAL_GetTick>
 8000e52:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_PWREx_EnableOverDrive+0x78>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e5c:	d107      	bne.n	8000e6e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e5e:	f7ff fe6b 	bl	8000b38 <HAL_GetTick>
 8000e62:	1b00      	subs	r0, r0, r4
 8000e64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e68:	d9f4      	bls.n	8000e54 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e7e8      	b.n	8000e40 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	e7e6      	b.n	8000e40 <HAL_PWREx_EnableOverDrive+0x40>
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	f000 8206 	beq.w	800128e <HAL_RCC_OscConfig+0x412>
{
 8000e82:	b570      	push	{r4, r5, r6, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e88:	6803      	ldr	r3, [r0, #0]
 8000e8a:	f013 0f01 	tst.w	r3, #1
 8000e8e:	d029      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4ba7      	ldr	r3, [pc, #668]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d01a      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e9c:	4ba4      	ldr	r3, [pc, #656]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d00f      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea8:	6863      	ldr	r3, [r4, #4]
 8000eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eae:	d040      	beq.n	8000f32 <HAL_RCC_OscConfig+0xb6>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d154      	bne.n	8000f5e <HAL_RCC_OscConfig+0xe2>
 8000eb4:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e039      	b.n	8000f3c <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec8:	4b99      	ldr	r3, [pc, #612]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ed0:	d0ea      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b97      	ldr	r3, [pc, #604]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eda:	d003      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x68>
 8000edc:	6863      	ldr	r3, [r4, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 81d7 	beq.w	8001292 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	f013 0f02 	tst.w	r3, #2
 8000eea:	d074      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eec:	4b90      	ldr	r3, [pc, #576]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f013 0f0c 	tst.w	r3, #12
 8000ef4:	d05e      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ef6:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d053      	beq.n	8000faa <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f02:	68e3      	ldr	r3, [r4, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8089 	beq.w	800101c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f0a:	4a89      	ldr	r2, [pc, #548]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fe10 	bl	8000b38 <HAL_GetTick>
 8000f18:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1a:	4b85      	ldr	r3, [pc, #532]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f013 0f02 	tst.w	r3, #2
 8000f22:	d172      	bne.n	800100a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f24:	f7ff fe08 	bl	8000b38 <HAL_GetTick>
 8000f28:	1b40      	subs	r0, r0, r5
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9f5      	bls.n	8000f1a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e1b4      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f32:	4a7f      	ldr	r2, [pc, #508]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	b32b      	cbz	r3, 8000f8c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000f40:	f7ff fdfa 	bl	8000b38 <HAL_GetTick>
 8000f44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f4e:	d1c9      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fdf2 	bl	8000b38 <HAL_GetTick>
 8000f54:	1b40      	subs	r0, r0, r5
 8000f56:	2864      	cmp	r0, #100	; 0x64
 8000f58:	d9f5      	bls.n	8000f46 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	e19e      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f62:	d009      	beq.n	8000f78 <HAL_RCC_OscConfig+0xfc>
 8000f64:	4b72      	ldr	r3, [pc, #456]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e7e1      	b.n	8000f3c <HAL_RCC_OscConfig+0xc0>
 8000f78:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e7d7      	b.n	8000f3c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fdd4 	bl	8000b38 <HAL_GetTick>
 8000f90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	4b67      	ldr	r3, [pc, #412]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f9a:	d0a3      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fdcc 	bl	8000b38 <HAL_GetTick>
 8000fa0:	1b40      	subs	r0, r0, r5
 8000fa2:	2864      	cmp	r0, #100	; 0x64
 8000fa4:	d9f5      	bls.n	8000f92 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	e178      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000faa:	4b61      	ldr	r3, [pc, #388]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fb2:	d1a6      	bne.n	8000f02 <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f013 0f02 	tst.w	r3, #2
 8000fbc:	d003      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x14a>
 8000fbe:	68e3      	ldr	r3, [r4, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 8168 	bne.w	8001296 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4a5a      	ldr	r2, [pc, #360]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fce:	6921      	ldr	r1, [r4, #16]
 8000fd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fd4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	f013 0f08 	tst.w	r3, #8
 8000fdc:	d046      	beq.n	800106c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fde:	6963      	ldr	r3, [r4, #20]
 8000fe0:	b383      	cbz	r3, 8001044 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe2:	4a53      	ldr	r2, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000fe4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fec:	f7ff fda4 	bl	8000b38 <HAL_GetTick>
 8000ff0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8000ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff6:	f013 0f02 	tst.w	r3, #2
 8000ffa:	d137      	bne.n	800106c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fd9c 	bl	8000b38 <HAL_GetTick>
 8001000:	1b40      	subs	r0, r0, r5
 8001002:	2802      	cmp	r0, #2
 8001004:	d9f5      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e148      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001012:	6921      	ldr	r1, [r4, #16]
 8001014:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e7dc      	b.n	8000fd6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800101c:	4a44      	ldr	r2, [pc, #272]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001026:	f7ff fd87 	bl	8000b38 <HAL_GetTick>
 800102a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f013 0f02 	tst.w	r3, #2
 8001034:	d0cf      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff fd7f 	bl	8000b38 <HAL_GetTick>
 800103a:	1b40      	subs	r0, r0, r5
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f5      	bls.n	800102c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e12b      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001044:	4a3a      	ldr	r2, [pc, #232]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8001046:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104e:	f7ff fd73 	bl	8000b38 <HAL_GetTick>
 8001052:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8001056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001058:	f013 0f02 	tst.w	r3, #2
 800105c:	d006      	beq.n	800106c <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fd6b 	bl	8000b38 <HAL_GetTick>
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	2802      	cmp	r0, #2
 8001066:	d9f5      	bls.n	8001054 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001068:	2003      	movs	r0, #3
 800106a:	e117      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	f013 0f04 	tst.w	r3, #4
 8001072:	d07d      	beq.n	8001170 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800107c:	d10b      	bne.n	8001096 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001092:	2501      	movs	r5, #1
 8001094:	e000      	b.n	8001098 <HAL_RCC_OscConfig+0x21c>
  FlagStatus pwrclkchanged = RESET;
 8001096:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_RCC_OscConfig+0x2b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010a0:	d00e      	beq.n	80010c0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a2:	68a3      	ldr	r3, [r4, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d01f      	beq.n	80010e8 <HAL_RCC_OscConfig+0x26c>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d135      	bne.n	8001118 <HAL_RCC_OscConfig+0x29c>
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 80010ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	671a      	str	r2, [r3, #112]	; 0x70
 80010b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b8:	f022 0204 	bic.w	r2, r2, #4
 80010bc:	671a      	str	r2, [r3, #112]	; 0x70
 80010be:	e018      	b.n	80010f2 <HAL_RCC_OscConfig+0x276>
      PWR->CR1 |= PWR_CR1_DBP;
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_RCC_OscConfig+0x2b8>)
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010ca:	f7ff fd35 	bl	8000b38 <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_RCC_OscConfig+0x2b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010d8:	d1e3      	bne.n	80010a2 <HAL_RCC_OscConfig+0x226>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010da:	f7ff fd2d 	bl	8000b38 <HAL_GetTick>
 80010de:	1b80      	subs	r0, r0, r6
 80010e0:	2864      	cmp	r0, #100	; 0x64
 80010e2:	d9f5      	bls.n	80010d0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80010e4:	2003      	movs	r0, #3
 80010e6:	e0d9      	b.n	800129c <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 80010ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	b353      	cbz	r3, 800114c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f6:	f7ff fd1f 	bl	8000b38 <HAL_GetTick>
 80010fa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 80010fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001100:	f013 0f02 	tst.w	r3, #2
 8001104:	d133      	bne.n	800116e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fd17 	bl	8000b38 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001110:	4298      	cmp	r0, r3
 8001112:	d9f3      	bls.n	80010fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001114:	2003      	movs	r0, #3
 8001116:	e0c1      	b.n	800129c <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	2b05      	cmp	r3, #5
 800111a:	d00d      	beq.n	8001138 <HAL_RCC_OscConfig+0x2bc>
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_RCC_OscConfig+0x2b4>)
 800111e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	671a      	str	r2, [r3, #112]	; 0x70
 8001126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001128:	f022 0204 	bic.w	r2, r2, #4
 800112c:	671a      	str	r2, [r3, #112]	; 0x70
 800112e:	e7e0      	b.n	80010f2 <HAL_RCC_OscConfig+0x276>
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000
 8001138:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800113a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800113c:	f042 0204 	orr.w	r2, r2, #4
 8001140:	671a      	str	r2, [r3, #112]	; 0x70
 8001142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	671a      	str	r2, [r3, #112]	; 0x70
 800114a:	e7d2      	b.n	80010f2 <HAL_RCC_OscConfig+0x276>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114c:	f7ff fcf4 	bl	8000b38 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 8001154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	d008      	beq.n	800116e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff fcec 	bl	8000b38 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	f241 3388 	movw	r3, #5000	; 0x1388
 8001166:	4298      	cmp	r0, r3
 8001168:	d9f3      	bls.n	8001152 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e096      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800116e:	b9fd      	cbnz	r5, 80011b0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001170:	69a3      	ldr	r3, [r4, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8091 	beq.w	800129a <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001178:	4a50      	ldr	r2, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800117a:	6892      	ldr	r2, [r2, #8]
 800117c:	f002 020c 	and.w	r2, r2, #12
 8001180:	2a08      	cmp	r2, #8
 8001182:	d059      	beq.n	8001238 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001184:	2b02      	cmp	r3, #2
 8001186:	d019      	beq.n	80011bc <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fcd1 	bl	8000b38 <HAL_GetTick>
 8001196:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001198:	4b48      	ldr	r3, [pc, #288]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011a0:	d048      	beq.n	8001234 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fcc9 	bl	8000b38 <HAL_GetTick>
 80011a6:	1b00      	subs	r0, r0, r4
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d9f5      	bls.n	8001198 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80011ac:	2003      	movs	r0, #3
 80011ae:	e075      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b0:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 80011b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	e7d9      	b.n	8001170 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80011bc:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011c6:	f7ff fcb7 	bl	8000b38 <HAL_GetTick>
 80011ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011cc:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011d4:	d006      	beq.n	80011e4 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fcaf 	bl	8000b38 <HAL_GetTick>
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f5      	bls.n	80011cc <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80011e0:	2003      	movs	r0, #3
 80011e2:	e05b      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e4:	69e3      	ldr	r3, [r4, #28]
 80011e6:	6a22      	ldr	r2, [r4, #32]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011f2:	0852      	lsrs	r2, r2, #1
 80011f4:	3a01      	subs	r2, #1
 80011f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001200:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001202:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001206:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 8001208:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001210:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001212:	f7ff fc91 	bl	8000b38 <HAL_GetTick>
 8001216:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fc89 	bl	8000b38 <HAL_GetTick>
 8001226:	1b00      	subs	r0, r0, r4
 8001228:	2802      	cmp	r0, #2
 800122a:	d9f5      	bls.n	8001218 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e035      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001230:	2000      	movs	r0, #0
 8001232:	e033      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 8001234:	2000      	movs	r0, #0
 8001236:	e031      	b.n	800129c <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_RCC_OscConfig+0x440>)
 800123a:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800123c:	2b01      	cmp	r3, #1
 800123e:	d02f      	beq.n	80012a0 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001240:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8001244:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001246:	428b      	cmp	r3, r1
 8001248:	d12c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800124a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800124e:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001250:	428b      	cmp	r3, r1
 8001252:	d129      	bne.n	80012a8 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001254:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001256:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800125a:	4013      	ands	r3, r2
 800125c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001260:	d124      	bne.n	80012ac <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001262:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8001266:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800126c:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001270:	d11e      	bne.n	80012b0 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001272:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8001276:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001278:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800127c:	d11a      	bne.n	80012b4 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800127e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001282:	6b23      	ldr	r3, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001284:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 800128a:	2000      	movs	r0, #0
 800128c:	e006      	b.n	800129c <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
}
 8001290:	4770      	bx	lr
        return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	e002      	b.n	800129c <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8001296:	2001      	movs	r0, #1
 8001298:	e000      	b.n	800129c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 800129a:	2000      	movs	r0, #0
}
 800129c:	b002      	add	sp, #8
 800129e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
 80012a2:	e7fb      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012a4:	2001      	movs	r0, #1
 80012a6:	e7f9      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012a8:	2001      	movs	r0, #1
 80012aa:	e7f7      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012ac:	2001      	movs	r0, #1
 80012ae:	e7f5      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012b0:	2001      	movs	r0, #1
 80012b2:	e7f3      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012b4:	2001      	movs	r0, #1
 80012b6:	e7f1      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012b8:	2001      	movs	r0, #1
 80012ba:	e7ef      	b.n	800129c <HAL_RCC_OscConfig+0x420>
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d03d      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x8a>
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d13d      	bne.n	800134e <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012e0:	d012      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e4:	6859      	ldr	r1, [r3, #4]
 80012e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012ea:	2300      	movs	r3, #0
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	fba1 0100 	umull	r0, r1, r1, r0
 80012f2:	f7fe fff5 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012fe:	3301      	adds	r3, #1
 8001300:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001302:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001306:	e023      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_RCC_GetSysClockFreq+0x94>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001310:	015c      	lsls	r4, r3, #5
 8001312:	2500      	movs	r5, #0
 8001314:	1ae4      	subs	r4, r4, r3
 8001316:	f165 0500 	sbc.w	r5, r5, #0
 800131a:	01ae      	lsls	r6, r5, #6
 800131c:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001320:	01a7      	lsls	r7, r4, #6
 8001322:	1b38      	subs	r0, r7, r4
 8001324:	eb66 0105 	sbc.w	r1, r6, r5
 8001328:	00cc      	lsls	r4, r1, #3
 800132a:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800132e:	00c5      	lsls	r5, r0, #3
 8001330:	18e8      	adds	r0, r5, r3
 8001332:	f144 0100 	adc.w	r1, r4, #0
 8001336:	028b      	lsls	r3, r1, #10
 8001338:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800133c:	0284      	lsls	r4, r0, #10
 800133e:	4620      	mov	r0, r4
 8001340:	4619      	mov	r1, r3
 8001342:	2300      	movs	r3, #0
 8001344:	f7fe ffcc 	bl	80002e0 <__aeabi_uldivmod>
 8001348:	e7d5      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <HAL_RCC_GetSysClockFreq+0x98>)
 800134c:	e000      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	017d7840 	.word	0x017d7840
 800135c:	00f42400 	.word	0x00f42400

08001360 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001360:	2800      	cmp	r0, #0
 8001362:	f000 80a0 	beq.w	80014a6 <HAL_RCC_ClockConfig+0x146>
{
 8001366:	b570      	push	{r4, r5, r6, lr}
 8001368:	460d      	mov	r5, r1
 800136a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <HAL_RCC_ClockConfig+0x158>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	428b      	cmp	r3, r1
 8001376:	d20b      	bcs.n	8001390 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001378:	4a4f      	ldr	r2, [pc, #316]	; (80014b8 <HAL_RCC_ClockConfig+0x158>)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	f023 030f 	bic.w	r3, r3, #15
 8001380:	430b      	orrs	r3, r1
 8001382:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	428b      	cmp	r3, r1
 800138c:	f040 808d 	bne.w	80014aa <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	f013 0f02 	tst.w	r3, #2
 8001396:	d017      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	f013 0f04 	tst.w	r3, #4
 800139c:	d004      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139e:	4a47      	ldr	r2, [pc, #284]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013a6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f013 0f08 	tst.w	r3, #8
 80013ae:	d004      	beq.n	80013ba <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b0:	4a42      	ldr	r2, [pc, #264]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013b2:	6893      	ldr	r3, [r2, #8]
 80013b4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013b8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ba:	4a40      	ldr	r2, [pc, #256]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013bc:	6893      	ldr	r3, [r2, #8]
 80013be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013c2:	68a1      	ldr	r1, [r4, #8]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	f013 0f01 	tst.w	r3, #1
 80013ce:	d031      	beq.n	8001434 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d020      	beq.n	8001418 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d025      	beq.n	8001426 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4a38      	ldr	r2, [pc, #224]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	f012 0f02 	tst.w	r2, #2
 80013e2:	d064      	beq.n	80014ae <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013e6:	688a      	ldr	r2, [r1, #8]
 80013e8:	f022 0203 	bic.w	r2, r2, #3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013f0:	f7ff fba2 	bl	8000b38 <HAL_GetTick>
 80013f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	6862      	ldr	r2, [r4, #4]
 8001400:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001404:	d016      	beq.n	8001434 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001406:	f7ff fb97 	bl	8000b38 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001410:	4298      	cmp	r0, r3
 8001412:	d9f0      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001414:	2003      	movs	r0, #3
 8001416:	e045      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001420:	d1e0      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
 8001424:	e03e      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800142e:	d1d9      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
 8001432:	e037      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_RCC_ClockConfig+0x158>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	42ab      	cmp	r3, r5
 800143e:	d90a      	bls.n	8001456 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_RCC_ClockConfig+0x158>)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f023 030f 	bic.w	r3, r3, #15
 8001448:	432b      	orrs	r3, r5
 800144a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144c:	6813      	ldr	r3, [r2, #0]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	42ab      	cmp	r3, r5
 8001454:	d12d      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	f013 0f04 	tst.w	r3, #4
 800145c:	d006      	beq.n	800146c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 8001460:	6893      	ldr	r3, [r2, #8]
 8001462:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001466:	68e1      	ldr	r1, [r4, #12]
 8001468:	430b      	orrs	r3, r1
 800146a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	f013 0f08 	tst.w	r3, #8
 8001472:	d007      	beq.n	8001484 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 8001476:	6893      	ldr	r3, [r2, #8]
 8001478:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800147c:	6921      	ldr	r1, [r4, #16]
 800147e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001482:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001484:	f7ff ff1c 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_ClockConfig+0x15c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_RCC_ClockConfig+0x160>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	40d8      	lsrs	r0, r3
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_ClockConfig+0x164>)
 8001498:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_ClockConfig+0x168>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f7ff fb05 	bl	8000aac <HAL_InitTick>
  return HAL_OK;
 80014a2:	2000      	movs	r0, #0
}
 80014a4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
}
 80014a8:	4770      	bx	lr
      return HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7fa      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	e7f8      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	e7f6      	b.n	80014a4 <HAL_RCC_ClockConfig+0x144>
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00
 80014bc:	40023800 	.word	0x40023800
 80014c0:	08002fac 	.word	0x08002fac
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014da:	f7ff fff7 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014e6:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ea:	40d8      	lsrs	r0, r3
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	08002fbc 	.word	0x08002fbc

080014f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014fa:	f7ff ffe7 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001506:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001508:	5cd3      	ldrb	r3, [r2, r3]
}
 800150a:	40d8      	lsrs	r0, r3
 800150c:	bd08      	pop	{r3, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	08002fbc 	.word	0x08002fbc

08001518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800151c:	6883      	ldr	r3, [r0, #8]
 800151e:	6902      	ldr	r2, [r0, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	6942      	ldr	r2, [r0, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	69c2      	ldr	r2, [r0, #28]
 8001528:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800152a:	6801      	ldr	r1, [r0, #0]
 800152c:	6808      	ldr	r0, [r1, #0]
 800152e:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <UART_SetConfig+0x294>)
 8001530:	4002      	ands	r2, r0
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800153e:	68e1      	ldr	r1, [r4, #12]
 8001540:	430b      	orrs	r3, r1
 8001542:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001544:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001546:	6a23      	ldr	r3, [r4, #32]
 8001548:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800154a:	6821      	ldr	r1, [r4, #0]
 800154c:	688b      	ldr	r3, [r1, #8]
 800154e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	4a95      	ldr	r2, [pc, #596]	; (80017b0 <UART_SetConfig+0x298>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <UART_SetConfig+0x7a>
 800155e:	4a95      	ldr	r2, [pc, #596]	; (80017b4 <UART_SetConfig+0x29c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d029      	beq.n	80015b8 <UART_SetConfig+0xa0>
 8001564:	4a94      	ldr	r2, [pc, #592]	; (80017b8 <UART_SetConfig+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d03e      	beq.n	80015e8 <UART_SetConfig+0xd0>
 800156a:	4a94      	ldr	r2, [pc, #592]	; (80017bc <UART_SetConfig+0x2a4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d062      	beq.n	8001636 <UART_SetConfig+0x11e>
 8001570:	4a93      	ldr	r2, [pc, #588]	; (80017c0 <UART_SetConfig+0x2a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d071      	beq.n	800165a <UART_SetConfig+0x142>
 8001576:	4a93      	ldr	r2, [pc, #588]	; (80017c4 <UART_SetConfig+0x2ac>)
 8001578:	4293      	cmp	r3, r2
 800157a:	f000 8083 	beq.w	8001684 <UART_SetConfig+0x16c>
 800157e:	4a92      	ldr	r2, [pc, #584]	; (80017c8 <UART_SetConfig+0x2b0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	f000 8094 	beq.w	80016ae <UART_SetConfig+0x196>
 8001586:	4a91      	ldr	r2, [pc, #580]	; (80017cc <UART_SetConfig+0x2b4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	f000 80a5 	beq.w	80016d8 <UART_SetConfig+0x1c0>
 800158e:	2510      	movs	r5, #16
 8001590:	e03a      	b.n	8001608 <UART_SetConfig+0xf0>
 8001592:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <UART_SetConfig+0x2b8>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d809      	bhi.n	80015b4 <UART_SetConfig+0x9c>
 80015a0:	e8df f003 	tbb	[pc, r3]
 80015a4:	06ae0402 	.word	0x06ae0402
 80015a8:	2501      	movs	r5, #1
 80015aa:	e02d      	b.n	8001608 <UART_SetConfig+0xf0>
 80015ac:	2504      	movs	r5, #4
 80015ae:	e02b      	b.n	8001608 <UART_SetConfig+0xf0>
 80015b0:	2508      	movs	r5, #8
 80015b2:	e029      	b.n	8001608 <UART_SetConfig+0xf0>
 80015b4:	2510      	movs	r5, #16
 80015b6:	e027      	b.n	8001608 <UART_SetConfig+0xf0>
 80015b8:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <UART_SetConfig+0x2b8>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d80e      	bhi.n	80015e4 <UART_SetConfig+0xcc>
 80015c6:	e8df f003 	tbb	[pc, r3]
 80015ca:	0d07      	.short	0x0d07
 80015cc:	0d090d0d 	.word	0x0d090d0d
 80015d0:	0d9d0d0d 	.word	0x0d9d0d0d
 80015d4:	0d0d      	.short	0x0d0d
 80015d6:	0b          	.byte	0x0b
 80015d7:	00          	.byte	0x00
 80015d8:	2500      	movs	r5, #0
 80015da:	e015      	b.n	8001608 <UART_SetConfig+0xf0>
 80015dc:	2504      	movs	r5, #4
 80015de:	e013      	b.n	8001608 <UART_SetConfig+0xf0>
 80015e0:	2508      	movs	r5, #8
 80015e2:	e011      	b.n	8001608 <UART_SetConfig+0xf0>
 80015e4:	2510      	movs	r5, #16
 80015e6:	e00f      	b.n	8001608 <UART_SetConfig+0xf0>
 80015e8:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <UART_SetConfig+0x2b8>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	f000 8088 	beq.w	8001708 <UART_SetConfig+0x1f0>
 80015f8:	d819      	bhi.n	800162e <UART_SetConfig+0x116>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8086 	beq.w	800170c <UART_SetConfig+0x1f4>
 8001600:	2b10      	cmp	r3, #16
 8001602:	f040 8085 	bne.w	8001710 <UART_SetConfig+0x1f8>
 8001606:	2504      	movs	r5, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001608:	69e3      	ldr	r3, [r4, #28]
 800160a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800160e:	f000 80ab 	beq.w	8001768 <UART_SetConfig+0x250>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001612:	2d08      	cmp	r5, #8
 8001614:	f200 8140 	bhi.w	8001898 <UART_SetConfig+0x380>
 8001618:	e8df f015 	tbh	[pc, r5, lsl #1]
 800161c:	01180107 	.word	0x01180107
 8001620:	013e0122 	.word	0x013e0122
 8001624:	013e012b 	.word	0x013e012b
 8001628:	013e013e 	.word	0x013e013e
 800162c:	0135      	.short	0x0135
  UART_GETCLOCKSOURCE(huart, clocksource);
 800162e:	2b30      	cmp	r3, #48	; 0x30
 8001630:	d170      	bne.n	8001714 <UART_SetConfig+0x1fc>
 8001632:	2508      	movs	r5, #8
 8001634:	e7e8      	b.n	8001608 <UART_SetConfig+0xf0>
 8001636:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <UART_SetConfig+0x2b8>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001640:	2b80      	cmp	r3, #128	; 0x80
 8001642:	d069      	beq.n	8001718 <UART_SetConfig+0x200>
 8001644:	d805      	bhi.n	8001652 <UART_SetConfig+0x13a>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d068      	beq.n	800171c <UART_SetConfig+0x204>
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d168      	bne.n	8001720 <UART_SetConfig+0x208>
 800164e:	2504      	movs	r5, #4
 8001650:	e7da      	b.n	8001608 <UART_SetConfig+0xf0>
 8001652:	2bc0      	cmp	r3, #192	; 0xc0
 8001654:	d166      	bne.n	8001724 <UART_SetConfig+0x20c>
 8001656:	2508      	movs	r5, #8
 8001658:	e7d6      	b.n	8001608 <UART_SetConfig+0xf0>
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <UART_SetConfig+0x2b8>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d05e      	beq.n	8001728 <UART_SetConfig+0x210>
 800166a:	d806      	bhi.n	800167a <UART_SetConfig+0x162>
 800166c:	2b00      	cmp	r3, #0
 800166e:	d05d      	beq.n	800172c <UART_SetConfig+0x214>
 8001670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001674:	d15c      	bne.n	8001730 <UART_SetConfig+0x218>
 8001676:	2504      	movs	r5, #4
 8001678:	e7c6      	b.n	8001608 <UART_SetConfig+0xf0>
 800167a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800167e:	d159      	bne.n	8001734 <UART_SetConfig+0x21c>
 8001680:	2508      	movs	r5, #8
 8001682:	e7c1      	b.n	8001608 <UART_SetConfig+0xf0>
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <UART_SetConfig+0x2b8>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800168e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001692:	d051      	beq.n	8001738 <UART_SetConfig+0x220>
 8001694:	d806      	bhi.n	80016a4 <UART_SetConfig+0x18c>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d050      	beq.n	800173c <UART_SetConfig+0x224>
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d14f      	bne.n	8001740 <UART_SetConfig+0x228>
 80016a0:	2504      	movs	r5, #4
 80016a2:	e7b1      	b.n	8001608 <UART_SetConfig+0xf0>
 80016a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80016a8:	d14c      	bne.n	8001744 <UART_SetConfig+0x22c>
 80016aa:	2508      	movs	r5, #8
 80016ac:	e7ac      	b.n	8001608 <UART_SetConfig+0xf0>
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <UART_SetConfig+0x2b8>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016bc:	d044      	beq.n	8001748 <UART_SetConfig+0x230>
 80016be:	d806      	bhi.n	80016ce <UART_SetConfig+0x1b6>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d043      	beq.n	800174c <UART_SetConfig+0x234>
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c8:	d142      	bne.n	8001750 <UART_SetConfig+0x238>
 80016ca:	2504      	movs	r5, #4
 80016cc:	e79c      	b.n	8001608 <UART_SetConfig+0xf0>
 80016ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016d2:	d13f      	bne.n	8001754 <UART_SetConfig+0x23c>
 80016d4:	2508      	movs	r5, #8
 80016d6:	e797      	b.n	8001608 <UART_SetConfig+0xf0>
 80016d8:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <UART_SetConfig+0x2b8>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e6:	d037      	beq.n	8001758 <UART_SetConfig+0x240>
 80016e8:	d805      	bhi.n	80016f6 <UART_SetConfig+0x1de>
 80016ea:	b3bb      	cbz	r3, 800175c <UART_SetConfig+0x244>
 80016ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f0:	d136      	bne.n	8001760 <UART_SetConfig+0x248>
 80016f2:	2504      	movs	r5, #4
 80016f4:	e788      	b.n	8001608 <UART_SetConfig+0xf0>
 80016f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80016fa:	d133      	bne.n	8001764 <UART_SetConfig+0x24c>
 80016fc:	2508      	movs	r5, #8
 80016fe:	e783      	b.n	8001608 <UART_SetConfig+0xf0>
 8001700:	2502      	movs	r5, #2
 8001702:	e781      	b.n	8001608 <UART_SetConfig+0xf0>
 8001704:	2502      	movs	r5, #2
 8001706:	e77f      	b.n	8001608 <UART_SetConfig+0xf0>
 8001708:	2502      	movs	r5, #2
 800170a:	e77d      	b.n	8001608 <UART_SetConfig+0xf0>
 800170c:	2500      	movs	r5, #0
 800170e:	e77b      	b.n	8001608 <UART_SetConfig+0xf0>
 8001710:	2510      	movs	r5, #16
 8001712:	e779      	b.n	8001608 <UART_SetConfig+0xf0>
 8001714:	2510      	movs	r5, #16
 8001716:	e777      	b.n	8001608 <UART_SetConfig+0xf0>
 8001718:	2502      	movs	r5, #2
 800171a:	e775      	b.n	8001608 <UART_SetConfig+0xf0>
 800171c:	2500      	movs	r5, #0
 800171e:	e773      	b.n	8001608 <UART_SetConfig+0xf0>
 8001720:	2510      	movs	r5, #16
 8001722:	e771      	b.n	8001608 <UART_SetConfig+0xf0>
 8001724:	2510      	movs	r5, #16
 8001726:	e76f      	b.n	8001608 <UART_SetConfig+0xf0>
 8001728:	2502      	movs	r5, #2
 800172a:	e76d      	b.n	8001608 <UART_SetConfig+0xf0>
 800172c:	2500      	movs	r5, #0
 800172e:	e76b      	b.n	8001608 <UART_SetConfig+0xf0>
 8001730:	2510      	movs	r5, #16
 8001732:	e769      	b.n	8001608 <UART_SetConfig+0xf0>
 8001734:	2510      	movs	r5, #16
 8001736:	e767      	b.n	8001608 <UART_SetConfig+0xf0>
 8001738:	2502      	movs	r5, #2
 800173a:	e765      	b.n	8001608 <UART_SetConfig+0xf0>
 800173c:	2501      	movs	r5, #1
 800173e:	e763      	b.n	8001608 <UART_SetConfig+0xf0>
 8001740:	2510      	movs	r5, #16
 8001742:	e761      	b.n	8001608 <UART_SetConfig+0xf0>
 8001744:	2510      	movs	r5, #16
 8001746:	e75f      	b.n	8001608 <UART_SetConfig+0xf0>
 8001748:	2502      	movs	r5, #2
 800174a:	e75d      	b.n	8001608 <UART_SetConfig+0xf0>
 800174c:	2500      	movs	r5, #0
 800174e:	e75b      	b.n	8001608 <UART_SetConfig+0xf0>
 8001750:	2510      	movs	r5, #16
 8001752:	e759      	b.n	8001608 <UART_SetConfig+0xf0>
 8001754:	2510      	movs	r5, #16
 8001756:	e757      	b.n	8001608 <UART_SetConfig+0xf0>
 8001758:	2502      	movs	r5, #2
 800175a:	e755      	b.n	8001608 <UART_SetConfig+0xf0>
 800175c:	2500      	movs	r5, #0
 800175e:	e753      	b.n	8001608 <UART_SetConfig+0xf0>
 8001760:	2510      	movs	r5, #16
 8001762:	e751      	b.n	8001608 <UART_SetConfig+0xf0>
 8001764:	2510      	movs	r5, #16
 8001766:	e74f      	b.n	8001608 <UART_SetConfig+0xf0>
    switch (clocksource)
 8001768:	2d08      	cmp	r5, #8
 800176a:	d85b      	bhi.n	8001824 <UART_SetConfig+0x30c>
 800176c:	e8df f005 	tbb	[pc, r5]
 8001770:	5a3d3205 	.word	0x5a3d3205
 8001774:	5a5a5a46 	.word	0x5a5a5a46
 8001778:	51          	.byte	0x51
 8001779:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800177a:	f7ff fead 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800177e:	6862      	ldr	r2, [r4, #4]
 8001780:	0853      	lsrs	r3, r2, #1
 8001782:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001786:	fbb3 f3f2 	udiv	r3, r3, r2
 800178a:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800178c:	f1a3 0110 	sub.w	r1, r3, #16
 8001790:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001794:	4291      	cmp	r1, r2
 8001796:	f200 8082 	bhi.w	800189e <UART_SetConfig+0x386>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800179a:	b29a      	uxth	r2, r3
 800179c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80017a4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	60d3      	str	r3, [r2, #12]
 80017aa:	e07b      	b.n	80018a4 <UART_SetConfig+0x38c>
 80017ac:	efff69f3 	.word	0xefff69f3
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40004400 	.word	0x40004400
 80017b8:	40004800 	.word	0x40004800
 80017bc:	40004c00 	.word	0x40004c00
 80017c0:	40005000 	.word	0x40005000
 80017c4:	40011400 	.word	0x40011400
 80017c8:	40007800 	.word	0x40007800
 80017cc:	40007c00 	.word	0x40007c00
 80017d0:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK2Freq();
 80017d4:	f7ff fe90 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017d8:	6862      	ldr	r2, [r4, #4]
 80017da:	0853      	lsrs	r3, r2, #1
 80017dc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80017e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017e6:	2500      	movs	r5, #0
        break;
 80017e8:	e7d0      	b.n	800178c <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80017ea:	6862      	ldr	r2, [r4, #4]
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <UART_SetConfig+0x398>)
 80017ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80017f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80017f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017f8:	2500      	movs	r5, #0
        break;
 80017fa:	e7c7      	b.n	800178c <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 80017fc:	f7ff fd60 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001800:	6862      	ldr	r2, [r4, #4]
 8001802:	0853      	lsrs	r3, r2, #1
 8001804:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001808:	fbb3 f3f2 	udiv	r3, r3, r2
 800180c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800180e:	2500      	movs	r5, #0
        break;
 8001810:	e7bc      	b.n	800178c <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001812:	6862      	ldr	r2, [r4, #4]
 8001814:	0853      	lsrs	r3, r2, #1
 8001816:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800181a:	fbb3 f3f2 	udiv	r3, r3, r2
 800181e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001820:	2500      	movs	r5, #0
        break;
 8001822:	e7b3      	b.n	800178c <UART_SetConfig+0x274>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001824:	2501      	movs	r5, #1
 8001826:	2300      	movs	r3, #0
 8001828:	e7b0      	b.n	800178c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800182a:	f7ff fe55 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800182e:	6862      	ldr	r2, [r4, #4]
 8001830:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001834:	fbb3 f3f2 	udiv	r3, r3, r2
 8001838:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800183a:	f1a3 0110 	sub.w	r1, r3, #16
 800183e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001842:	4291      	cmp	r1, r2
 8001844:	d82d      	bhi.n	80018a2 <UART_SetConfig+0x38a>
    {
      huart->Instance->BRR = usartdiv;
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	60d3      	str	r3, [r2, #12]
 800184a:	e02b      	b.n	80018a4 <UART_SetConfig+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800184c:	f7ff fe54 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001850:	6862      	ldr	r2, [r4, #4]
 8001852:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001856:	fbb3 f3f2 	udiv	r3, r3, r2
 800185a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800185c:	2500      	movs	r5, #0
        break;
 800185e:	e7ec      	b.n	800183a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001860:	6862      	ldr	r2, [r4, #4]
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <UART_SetConfig+0x39c>)
 8001864:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001868:	fbb3 f3f2 	udiv	r3, r3, r2
 800186c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800186e:	2500      	movs	r5, #0
        break;
 8001870:	e7e3      	b.n	800183a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetSysClockFreq();
 8001872:	f7ff fd25 	bl	80012c0 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001876:	6862      	ldr	r2, [r4, #4]
 8001878:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800187c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001880:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001882:	2500      	movs	r5, #0
        break;
 8001884:	e7d9      	b.n	800183a <UART_SetConfig+0x322>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001886:	6862      	ldr	r2, [r4, #4]
 8001888:	0853      	lsrs	r3, r2, #1
 800188a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800188e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001892:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001894:	2500      	movs	r5, #0
        break;
 8001896:	e7d0      	b.n	800183a <UART_SetConfig+0x322>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001898:	2501      	movs	r5, #1
 800189a:	2300      	movs	r3, #0
 800189c:	e7cd      	b.n	800183a <UART_SetConfig+0x322>
      ret = HAL_ERROR;
 800189e:	2501      	movs	r5, #1
 80018a0:	e000      	b.n	80018a4 <UART_SetConfig+0x38c>
    }
    else
    {
      ret = HAL_ERROR;
 80018a2:	2501      	movs	r5, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80018a8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80018aa:	4628      	mov	r0, r5
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
 80018ae:	bf00      	nop
 80018b0:	01e84800 	.word	0x01e84800
 80018b4:	00f42400 	.word	0x00f42400

080018b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ba:	f013 0f01 	tst.w	r3, #1
 80018be:	d006      	beq.n	80018ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018d0:	f013 0f02 	tst.w	r3, #2
 80018d4:	d006      	beq.n	80018e4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018d6:	6802      	ldr	r2, [r0, #0]
 80018d8:	6853      	ldr	r3, [r2, #4]
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018e6:	f013 0f04 	tst.w	r3, #4
 80018ea:	d006      	beq.n	80018fa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018ec:	6802      	ldr	r2, [r0, #0]
 80018ee:	6853      	ldr	r3, [r2, #4]
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80018f6:	430b      	orrs	r3, r1
 80018f8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018fc:	f013 0f08 	tst.w	r3, #8
 8001900:	d006      	beq.n	8001910 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	6853      	ldr	r3, [r2, #4]
 8001906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800190a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800190c:	430b      	orrs	r3, r1
 800190e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001912:	f013 0f10 	tst.w	r3, #16
 8001916:	d006      	beq.n	8001926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001918:	6802      	ldr	r2, [r0, #0]
 800191a:	6893      	ldr	r3, [r2, #8]
 800191c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001920:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001922:	430b      	orrs	r3, r1
 8001924:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001926:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001928:	f013 0f20 	tst.w	r3, #32
 800192c:	d006      	beq.n	800193c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800192e:	6802      	ldr	r2, [r0, #0]
 8001930:	6893      	ldr	r3, [r2, #8]
 8001932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001936:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001938:	430b      	orrs	r3, r1
 800193a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800193c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800193e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001942:	d00a      	beq.n	800195a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001944:	6802      	ldr	r2, [r0, #0]
 8001946:	6853      	ldr	r3, [r2, #4]
 8001948:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800194c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800194e:	430b      	orrs	r3, r1
 8001950:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001952:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001958:	d00b      	beq.n	8001972 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800195a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800195c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001960:	d006      	beq.n	8001970 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001962:	6802      	ldr	r2, [r0, #0]
 8001964:	6853      	ldr	r3, [r2, #4]
 8001966:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800196a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800196c:	430b      	orrs	r3, r1
 800196e:	6053      	str	r3, [r2, #4]
  }
}
 8001970:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001972:	6802      	ldr	r2, [r0, #0]
 8001974:	6853      	ldr	r3, [r2, #4]
 8001976:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800197a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800197c:	430b      	orrs	r3, r1
 800197e:	6053      	str	r3, [r2, #4]
 8001980:	e7eb      	b.n	800195a <UART_AdvFeatureConfig+0xa2>

08001982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001982:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001986:	4605      	mov	r5, r0
 8001988:	460f      	mov	r7, r1
 800198a:	4616      	mov	r6, r2
 800198c:	4699      	mov	r9, r3
 800198e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001992:	682c      	ldr	r4, [r5, #0]
 8001994:	69e4      	ldr	r4, [r4, #28]
 8001996:	ea37 0304 	bics.w	r3, r7, r4
 800199a:	bf0c      	ite	eq
 800199c:	2401      	moveq	r4, #1
 800199e:	2400      	movne	r4, #0
 80019a0:	42b4      	cmp	r4, r6
 80019a2:	d13c      	bne.n	8001a1e <UART_WaitOnFlagUntilTimeout+0x9c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80019a8:	d0f3      	beq.n	8001992 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff f8c5 	bl	8000b38 <HAL_GetTick>
 80019ae:	eba0 0009 	sub.w	r0, r0, r9
 80019b2:	4540      	cmp	r0, r8
 80019b4:	d821      	bhi.n	80019fa <UART_WaitOnFlagUntilTimeout+0x78>
 80019b6:	f1b8 0f00 	cmp.w	r8, #0
 80019ba:	d01e      	beq.n	80019fa <UART_WaitOnFlagUntilTimeout+0x78>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f012 0f04 	tst.w	r2, #4
 80019c4:	d0e5      	beq.n	8001992 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80019cc:	d0e1      	beq.n	8001992 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80019ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019d4:	682a      	ldr	r2, [r5, #0]
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80019dc:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019de:	682a      	ldr	r2, [r5, #0]
 80019e0:	6893      	ldr	r3, [r2, #8]
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80019e8:	2320      	movs	r3, #32
 80019ea:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80019ec:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80019ee:	67eb      	str	r3, [r5, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80019f0:	2300      	movs	r3, #0
 80019f2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
 80019f8:	e012      	b.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x9e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019fa:	682a      	ldr	r2, [r5, #0]
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a02:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a04:	682a      	ldr	r2, [r5, #0]
 8001a06:	6893      	ldr	r3, [r2, #8]
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001a12:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001a14:	2300      	movs	r3, #0
 8001a16:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	e000      	b.n	8001a20 <UART_WaitOnFlagUntilTimeout+0x9e>
        }
      }
    }
  }
  return HAL_OK;
 8001a1e:	2000      	movs	r0, #0
}
 8001a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a24 <HAL_UART_Transmit>:
{
 8001a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001a2c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d159      	bne.n	8001ae6 <HAL_UART_Transmit+0xc2>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001a38:	fab2 f382 	clz	r3, r2
 8001a3c:	095b      	lsrs	r3, r3, #5
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	bf08      	it	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d152      	bne.n	8001aee <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8001a48:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d050      	beq.n	8001af2 <HAL_UART_Transmit+0xce>
 8001a50:	2301      	movs	r3, #1
 8001a52:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a5a:	2321      	movs	r3, #33	; 0x21
 8001a5c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001a5e:	f7ff f86b 	bl	8000b38 <HAL_GetTick>
 8001a62:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001a64:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001a68:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a6c:	68a3      	ldr	r3, [r4, #8]
 8001a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a72:	d005      	beq.n	8001a80 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8001a74:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8001a7e:	e014      	b.n	8001aaa <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a80:	6923      	ldr	r3, [r4, #16]
 8001a82:	b113      	cbz	r3, 8001a8a <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8001a84:	f04f 0800 	mov.w	r8, #0
 8001a88:	e7f6      	b.n	8001a78 <HAL_UART_Transmit+0x54>
      pdata16bits = (uint16_t *) pData;
 8001a8a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	e7f3      	b.n	8001a78 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a90:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001a9c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001aaa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b173      	cbz	r3, 8001ad0 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab2:	9600      	str	r6, [sp, #0]
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff ff61 	bl	8001982 <UART_WaitOnFlagUntilTimeout>
 8001ac0:	b9c8      	cbnz	r0, 8001af6 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8001ac2:	2d00      	cmp	r5, #0
 8001ac4:	d0e4      	beq.n	8001a90 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ac6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ace:	e7e5      	b.n	8001a9c <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ad0:	9600      	str	r6, [sp, #0]
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ff52 	bl	8001982 <UART_WaitOnFlagUntilTimeout>
 8001ade:	b960      	cbnz	r0, 8001afa <HAL_UART_Transmit+0xd6>
    huart->gState = HAL_UART_STATE_READY;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001ae4:	e000      	b.n	8001ae8 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 8001ae6:	2002      	movs	r0, #2
}
 8001ae8:	b002      	add	sp, #8
 8001aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
 8001af0:	e7fa      	b.n	8001ae8 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001af2:	2002      	movs	r0, #2
 8001af4:	e7f8      	b.n	8001ae8 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8001af6:	2003      	movs	r0, #3
 8001af8:	e7f6      	b.n	8001ae8 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	e7f4      	b.n	8001ae8 <HAL_UART_Transmit+0xc4>

08001afe <HAL_UART_Receive>:
{
 8001afe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b06:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	f040 8081 	bne.w	8001c10 <HAL_UART_Receive+0x112>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	460d      	mov	r5, r1
 8001b12:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001b14:	fab2 f382 	clz	r3, r2
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	bf08      	it	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d179      	bne.n	8001c18 <HAL_UART_Receive+0x11a>
    __HAL_LOCK(huart);
 8001b24:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d077      	beq.n	8001c1c <HAL_UART_Receive+0x11e>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b36:	2322      	movs	r3, #34	; 0x22
 8001b38:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fffd 	bl	8000b38 <HAL_GetTick>
 8001b3e:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8001b40:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8001b44:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001b48:	68a3      	ldr	r3, [r4, #8]
 8001b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4e:	d006      	beq.n	8001b5e <HAL_UART_Receive+0x60>
 8001b50:	b9a3      	cbnz	r3, 8001b7c <HAL_UART_Receive+0x7e>
 8001b52:	6922      	ldr	r2, [r4, #16]
 8001b54:	b972      	cbnz	r2, 8001b74 <HAL_UART_Receive+0x76>
 8001b56:	22ff      	movs	r2, #255	; 0xff
 8001b58:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b5c:	e014      	b.n	8001b88 <HAL_UART_Receive+0x8a>
 8001b5e:	6922      	ldr	r2, [r4, #16]
 8001b60:	b922      	cbnz	r2, 8001b6c <HAL_UART_Receive+0x6e>
 8001b62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001b66:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b6a:	e00d      	b.n	8001b88 <HAL_UART_Receive+0x8a>
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b72:	e009      	b.n	8001b88 <HAL_UART_Receive+0x8a>
 8001b74:	227f      	movs	r2, #127	; 0x7f
 8001b76:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001b7a:	e005      	b.n	8001b88 <HAL_UART_Receive+0x8a>
 8001b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b80:	d00d      	beq.n	8001b9e <HAL_UART_Receive+0xa0>
 8001b82:	2200      	movs	r2, #0
 8001b84:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001b88:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b90:	d00f      	beq.n	8001bb2 <HAL_UART_Receive+0xb4>
      pdata16bits = NULL;
 8001b92:	f04f 0900 	mov.w	r9, #0
    __HAL_UNLOCK(huart);
 8001b96:	2300      	movs	r3, #0
 8001b98:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8001b9c:	e01e      	b.n	8001bdc <HAL_UART_Receive+0xde>
    UART_MASK_COMPUTATION(huart);
 8001b9e:	6922      	ldr	r2, [r4, #16]
 8001ba0:	b91a      	cbnz	r2, 8001baa <HAL_UART_Receive+0xac>
 8001ba2:	227f      	movs	r2, #127	; 0x7f
 8001ba4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001ba8:	e7ee      	b.n	8001b88 <HAL_UART_Receive+0x8a>
 8001baa:	223f      	movs	r2, #63	; 0x3f
 8001bac:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001bb0:	e7ea      	b.n	8001b88 <HAL_UART_Receive+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bb2:	6923      	ldr	r3, [r4, #16]
 8001bb4:	b113      	cbz	r3, 8001bbc <HAL_UART_Receive+0xbe>
      pdata16bits = NULL;
 8001bb6:	f04f 0900 	mov.w	r9, #0
 8001bba:	e7ec      	b.n	8001b96 <HAL_UART_Receive+0x98>
      pdata16bits = (uint16_t *) pData;
 8001bbc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	e7e9      	b.n	8001b96 <HAL_UART_Receive+0x98>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	ea08 0303 	and.w	r3, r8, r3
 8001bca:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8001bce:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001bdc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	b18b      	cbz	r3, 8001c08 <HAL_UART_Receive+0x10a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001be4:	9600      	str	r6, [sp, #0]
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff fec8 	bl	8001982 <UART_WaitOnFlagUntilTimeout>
 8001bf2:	b9a8      	cbnz	r0, 8001c20 <HAL_UART_Receive+0x122>
      if (pdata8bits == NULL)
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	d0e4      	beq.n	8001bc2 <HAL_UART_Receive+0xc4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfc:	fa5f f388 	uxtb.w	r3, r8
 8001c00:	4013      	ands	r3, r2
 8001c02:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8001c06:	e7e2      	b.n	8001bce <HAL_UART_Receive+0xd0>
    huart->RxState = HAL_UART_STATE_READY;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e000      	b.n	8001c12 <HAL_UART_Receive+0x114>
    return HAL_BUSY;
 8001c10:	2002      	movs	r0, #2
}
 8001c12:	b003      	add	sp, #12
 8001c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
 8001c1a:	e7fa      	b.n	8001c12 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	e7f8      	b.n	8001c12 <HAL_UART_Receive+0x114>
        return HAL_TIMEOUT;
 8001c20:	2003      	movs	r0, #3
 8001c22:	e7f6      	b.n	8001c12 <HAL_UART_Receive+0x114>

08001c24 <UART_CheckIdleState>:
{
 8001c24:	b530      	push	{r4, r5, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001c2e:	f7fe ff83 	bl	8000b38 <HAL_GetTick>
 8001c32:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f013 0f08 	tst.w	r3, #8
 8001c3c:	d10c      	bne.n	8001c58 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f013 0f04 	tst.w	r3, #4
 8001c46:	d115      	bne.n	8001c74 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001c4c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001c54:	b003      	add	sp, #12
 8001c56:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff fe8b 	bl	8001982 <UART_WaitOnFlagUntilTimeout>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d0e6      	beq.n	8001c3e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	e7ef      	b.n	8001c54 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff fe7d 	bl	8001982 <UART_WaitOnFlagUntilTimeout>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d0dd      	beq.n	8001c48 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e7e1      	b.n	8001c54 <UART_CheckIdleState+0x30>

08001c90 <HAL_UART_Init>:
  if (huart == NULL)
 8001c90:	b368      	cbz	r0, 8001cee <HAL_UART_Init+0x5e>
{
 8001c92:	b510      	push	{r4, lr}
 8001c94:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c96:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001c98:	b303      	cbz	r3, 8001cdc <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c9a:	2324      	movs	r3, #36	; 0x24
 8001c9c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff fc35 	bl	8001518 <UART_SetConfig>
 8001cae:	2801      	cmp	r0, #1
 8001cb0:	d013      	beq.n	8001cda <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cb4:	b9bb      	cbnz	r3, 8001ce6 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	6853      	ldr	r3, [r2, #4]
 8001cba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cbe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cc0:	6822      	ldr	r2, [r4, #0]
 8001cc2:	6893      	ldr	r3, [r2, #8]
 8001cc4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001cc8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7ff ffa5 	bl	8001c24 <UART_CheckIdleState>
}
 8001cda:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001cdc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001ce0:	f7fe fe18 	bl	8000914 <HAL_UART_MspInit>
 8001ce4:	e7d9      	b.n	8001c9a <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff fde6 	bl	80018b8 <UART_AdvFeatureConfig>
 8001cec:	e7e3      	b.n	8001cb6 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8001cee:	2001      	movs	r0, #1
}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <__sflush_r>:
 8001cf4:	898a      	ldrh	r2, [r1, #12]
 8001cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	0710      	lsls	r0, r2, #28
 8001cfe:	460c      	mov	r4, r1
 8001d00:	d458      	bmi.n	8001db4 <__sflush_r+0xc0>
 8001d02:	684b      	ldr	r3, [r1, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	dc05      	bgt.n	8001d14 <__sflush_r+0x20>
 8001d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dc02      	bgt.n	8001d14 <__sflush_r+0x20>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d16:	2e00      	cmp	r6, #0
 8001d18:	d0f9      	beq.n	8001d0e <__sflush_r+0x1a>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d20:	682f      	ldr	r7, [r5, #0]
 8001d22:	602b      	str	r3, [r5, #0]
 8001d24:	d032      	beq.n	8001d8c <__sflush_r+0x98>
 8001d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d28:	89a3      	ldrh	r3, [r4, #12]
 8001d2a:	075a      	lsls	r2, r3, #29
 8001d2c:	d505      	bpl.n	8001d3a <__sflush_r+0x46>
 8001d2e:	6863      	ldr	r3, [r4, #4]
 8001d30:	1ac0      	subs	r0, r0, r3
 8001d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d34:	b10b      	cbz	r3, 8001d3a <__sflush_r+0x46>
 8001d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d38:	1ac0      	subs	r0, r0, r3
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d40:	6a21      	ldr	r1, [r4, #32]
 8001d42:	4628      	mov	r0, r5
 8001d44:	47b0      	blx	r6
 8001d46:	1c43      	adds	r3, r0, #1
 8001d48:	89a3      	ldrh	r3, [r4, #12]
 8001d4a:	d106      	bne.n	8001d5a <__sflush_r+0x66>
 8001d4c:	6829      	ldr	r1, [r5, #0]
 8001d4e:	291d      	cmp	r1, #29
 8001d50:	d82c      	bhi.n	8001dac <__sflush_r+0xb8>
 8001d52:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <__sflush_r+0x108>)
 8001d54:	40ca      	lsrs	r2, r1
 8001d56:	07d6      	lsls	r6, r2, #31
 8001d58:	d528      	bpl.n	8001dac <__sflush_r+0xb8>
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	6062      	str	r2, [r4, #4]
 8001d5e:	04d9      	lsls	r1, r3, #19
 8001d60:	6922      	ldr	r2, [r4, #16]
 8001d62:	6022      	str	r2, [r4, #0]
 8001d64:	d504      	bpl.n	8001d70 <__sflush_r+0x7c>
 8001d66:	1c42      	adds	r2, r0, #1
 8001d68:	d101      	bne.n	8001d6e <__sflush_r+0x7a>
 8001d6a:	682b      	ldr	r3, [r5, #0]
 8001d6c:	b903      	cbnz	r3, 8001d70 <__sflush_r+0x7c>
 8001d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8001d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d72:	602f      	str	r7, [r5, #0]
 8001d74:	2900      	cmp	r1, #0
 8001d76:	d0ca      	beq.n	8001d0e <__sflush_r+0x1a>
 8001d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d7c:	4299      	cmp	r1, r3
 8001d7e:	d002      	beq.n	8001d86 <__sflush_r+0x92>
 8001d80:	4628      	mov	r0, r5
 8001d82:	f000 f9df 	bl	8002144 <_free_r>
 8001d86:	2000      	movs	r0, #0
 8001d88:	6360      	str	r0, [r4, #52]	; 0x34
 8001d8a:	e7c1      	b.n	8001d10 <__sflush_r+0x1c>
 8001d8c:	6a21      	ldr	r1, [r4, #32]
 8001d8e:	2301      	movs	r3, #1
 8001d90:	4628      	mov	r0, r5
 8001d92:	47b0      	blx	r6
 8001d94:	1c41      	adds	r1, r0, #1
 8001d96:	d1c7      	bne.n	8001d28 <__sflush_r+0x34>
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0c4      	beq.n	8001d28 <__sflush_r+0x34>
 8001d9e:	2b1d      	cmp	r3, #29
 8001da0:	d001      	beq.n	8001da6 <__sflush_r+0xb2>
 8001da2:	2b16      	cmp	r3, #22
 8001da4:	d101      	bne.n	8001daa <__sflush_r+0xb6>
 8001da6:	602f      	str	r7, [r5, #0]
 8001da8:	e7b1      	b.n	8001d0e <__sflush_r+0x1a>
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db0:	81a3      	strh	r3, [r4, #12]
 8001db2:	e7ad      	b.n	8001d10 <__sflush_r+0x1c>
 8001db4:	690f      	ldr	r7, [r1, #16]
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d0a9      	beq.n	8001d0e <__sflush_r+0x1a>
 8001dba:	0793      	lsls	r3, r2, #30
 8001dbc:	680e      	ldr	r6, [r1, #0]
 8001dbe:	bf08      	it	eq
 8001dc0:	694b      	ldreq	r3, [r1, #20]
 8001dc2:	600f      	str	r7, [r1, #0]
 8001dc4:	bf18      	it	ne
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	eba6 0807 	sub.w	r8, r6, r7
 8001dcc:	608b      	str	r3, [r1, #8]
 8001dce:	f1b8 0f00 	cmp.w	r8, #0
 8001dd2:	dd9c      	ble.n	8001d0e <__sflush_r+0x1a>
 8001dd4:	6a21      	ldr	r1, [r4, #32]
 8001dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dd8:	4643      	mov	r3, r8
 8001dda:	463a      	mov	r2, r7
 8001ddc:	4628      	mov	r0, r5
 8001dde:	47b0      	blx	r6
 8001de0:	2800      	cmp	r0, #0
 8001de2:	dc06      	bgt.n	8001df2 <__sflush_r+0xfe>
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dea:	81a3      	strh	r3, [r4, #12]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	e78e      	b.n	8001d10 <__sflush_r+0x1c>
 8001df2:	4407      	add	r7, r0
 8001df4:	eba8 0800 	sub.w	r8, r8, r0
 8001df8:	e7e9      	b.n	8001dce <__sflush_r+0xda>
 8001dfa:	bf00      	nop
 8001dfc:	20400001 	.word	0x20400001

08001e00 <_fflush_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	690b      	ldr	r3, [r1, #16]
 8001e04:	4605      	mov	r5, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	b913      	cbnz	r3, 8001e10 <_fflush_r+0x10>
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	b118      	cbz	r0, 8001e1a <_fflush_r+0x1a>
 8001e12:	6983      	ldr	r3, [r0, #24]
 8001e14:	b90b      	cbnz	r3, 8001e1a <_fflush_r+0x1a>
 8001e16:	f000 f899 	bl	8001f4c <__sinit>
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <_fflush_r+0x6c>)
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	d11b      	bne.n	8001e58 <_fflush_r+0x58>
 8001e20:	686c      	ldr	r4, [r5, #4]
 8001e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ef      	beq.n	8001e0a <_fflush_r+0xa>
 8001e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e2c:	07d0      	lsls	r0, r2, #31
 8001e2e:	d404      	bmi.n	8001e3a <_fflush_r+0x3a>
 8001e30:	0599      	lsls	r1, r3, #22
 8001e32:	d402      	bmi.n	8001e3a <_fflush_r+0x3a>
 8001e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e36:	f000 f97a 	bl	800212e <__retarget_lock_acquire_recursive>
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f7ff ff59 	bl	8001cf4 <__sflush_r>
 8001e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e44:	07da      	lsls	r2, r3, #31
 8001e46:	4605      	mov	r5, r0
 8001e48:	d4e0      	bmi.n	8001e0c <_fflush_r+0xc>
 8001e4a:	89a3      	ldrh	r3, [r4, #12]
 8001e4c:	059b      	lsls	r3, r3, #22
 8001e4e:	d4dd      	bmi.n	8001e0c <_fflush_r+0xc>
 8001e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e52:	f000 f96d 	bl	8002130 <__retarget_lock_release_recursive>
 8001e56:	e7d9      	b.n	8001e0c <_fflush_r+0xc>
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <_fflush_r+0x70>)
 8001e5a:	429c      	cmp	r4, r3
 8001e5c:	d101      	bne.n	8001e62 <_fflush_r+0x62>
 8001e5e:	68ac      	ldr	r4, [r5, #8]
 8001e60:	e7df      	b.n	8001e22 <_fflush_r+0x22>
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <_fflush_r+0x74>)
 8001e64:	429c      	cmp	r4, r3
 8001e66:	bf08      	it	eq
 8001e68:	68ec      	ldreq	r4, [r5, #12]
 8001e6a:	e7da      	b.n	8001e22 <_fflush_r+0x22>
 8001e6c:	08003238 	.word	0x08003238
 8001e70:	08003258 	.word	0x08003258
 8001e74:	08003218 	.word	0x08003218

08001e78 <fflush>:
 8001e78:	4601      	mov	r1, r0
 8001e7a:	b920      	cbnz	r0, 8001e86 <fflush+0xe>
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <fflush+0x18>)
 8001e7e:	4905      	ldr	r1, [pc, #20]	; (8001e94 <fflush+0x1c>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f000 b8fe 	b.w	8002082 <_fwalk_reent>
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <fflush+0x20>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f7ff bfb9 	b.w	8001e00 <_fflush_r>
 8001e8e:	bf00      	nop
 8001e90:	08003278 	.word	0x08003278
 8001e94:	08001e01 	.word	0x08001e01
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <std>:
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	b510      	push	{r4, lr}
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eaa:	6083      	str	r3, [r0, #8]
 8001eac:	8181      	strh	r1, [r0, #12]
 8001eae:	6643      	str	r3, [r0, #100]	; 0x64
 8001eb0:	81c2      	strh	r2, [r0, #14]
 8001eb2:	6183      	str	r3, [r0, #24]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	305c      	adds	r0, #92	; 0x5c
 8001eba:	f000 f93a 	bl	8002132 <memset>
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <std+0x38>)
 8001ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <std+0x3c>)
 8001ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <std+0x40>)
 8001ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <std+0x44>)
 8001ecc:	6224      	str	r4, [r4, #32]
 8001ece:	6323      	str	r3, [r4, #48]	; 0x30
 8001ed0:	bd10      	pop	{r4, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08002315 	.word	0x08002315
 8001ed8:	08002337 	.word	0x08002337
 8001edc:	0800236f 	.word	0x0800236f
 8001ee0:	08002393 	.word	0x08002393

08001ee4 <_cleanup_r>:
 8001ee4:	4901      	ldr	r1, [pc, #4]	; (8001eec <_cleanup_r+0x8>)
 8001ee6:	f000 b8cc 	b.w	8002082 <_fwalk_reent>
 8001eea:	bf00      	nop
 8001eec:	08001e01 	.word	0x08001e01

08001ef0 <__sfmoreglue>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	1e4a      	subs	r2, r1, #1
 8001ef4:	2568      	movs	r5, #104	; 0x68
 8001ef6:	4355      	muls	r5, r2
 8001ef8:	460e      	mov	r6, r1
 8001efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001efe:	f000 f971 	bl	80021e4 <_malloc_r>
 8001f02:	4604      	mov	r4, r0
 8001f04:	b140      	cbz	r0, 8001f18 <__sfmoreglue+0x28>
 8001f06:	2100      	movs	r1, #0
 8001f08:	e9c0 1600 	strd	r1, r6, [r0]
 8001f0c:	300c      	adds	r0, #12
 8001f0e:	60a0      	str	r0, [r4, #8]
 8001f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f14:	f000 f90d 	bl	8002132 <memset>
 8001f18:	4620      	mov	r0, r4
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}

08001f1c <__sfp_lock_acquire>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <__sfp_lock_acquire+0x8>)
 8001f1e:	f000 b906 	b.w	800212e <__retarget_lock_acquire_recursive>
 8001f22:	bf00      	nop
 8001f24:	200001a4 	.word	0x200001a4

08001f28 <__sfp_lock_release>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__sfp_lock_release+0x8>)
 8001f2a:	f000 b901 	b.w	8002130 <__retarget_lock_release_recursive>
 8001f2e:	bf00      	nop
 8001f30:	200001a4 	.word	0x200001a4

08001f34 <__sinit_lock_acquire>:
 8001f34:	4801      	ldr	r0, [pc, #4]	; (8001f3c <__sinit_lock_acquire+0x8>)
 8001f36:	f000 b8fa 	b.w	800212e <__retarget_lock_acquire_recursive>
 8001f3a:	bf00      	nop
 8001f3c:	2000019f 	.word	0x2000019f

08001f40 <__sinit_lock_release>:
 8001f40:	4801      	ldr	r0, [pc, #4]	; (8001f48 <__sinit_lock_release+0x8>)
 8001f42:	f000 b8f5 	b.w	8002130 <__retarget_lock_release_recursive>
 8001f46:	bf00      	nop
 8001f48:	2000019f 	.word	0x2000019f

08001f4c <__sinit>:
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	4604      	mov	r4, r0
 8001f50:	f7ff fff0 	bl	8001f34 <__sinit_lock_acquire>
 8001f54:	69a3      	ldr	r3, [r4, #24]
 8001f56:	b11b      	cbz	r3, 8001f60 <__sinit+0x14>
 8001f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5c:	f7ff bff0 	b.w	8001f40 <__sinit_lock_release>
 8001f60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f64:	6523      	str	r3, [r4, #80]	; 0x50
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <__sinit+0x68>)
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <__sinit+0x6c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f6e:	42a3      	cmp	r3, r4
 8001f70:	bf04      	itt	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	61a3      	streq	r3, [r4, #24]
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 f820 	bl	8001fbc <__sfp>
 8001f7c:	6060      	str	r0, [r4, #4]
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f000 f81c 	bl	8001fbc <__sfp>
 8001f84:	60a0      	str	r0, [r4, #8]
 8001f86:	4620      	mov	r0, r4
 8001f88:	f000 f818 	bl	8001fbc <__sfp>
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60e0      	str	r0, [r4, #12]
 8001f90:	2104      	movs	r1, #4
 8001f92:	6860      	ldr	r0, [r4, #4]
 8001f94:	f7ff ff82 	bl	8001e9c <std>
 8001f98:	68a0      	ldr	r0, [r4, #8]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2109      	movs	r1, #9
 8001f9e:	f7ff ff7d 	bl	8001e9c <std>
 8001fa2:	68e0      	ldr	r0, [r4, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	2112      	movs	r1, #18
 8001fa8:	f7ff ff78 	bl	8001e9c <std>
 8001fac:	2301      	movs	r3, #1
 8001fae:	61a3      	str	r3, [r4, #24]
 8001fb0:	e7d2      	b.n	8001f58 <__sinit+0xc>
 8001fb2:	bf00      	nop
 8001fb4:	08003278 	.word	0x08003278
 8001fb8:	08001ee5 	.word	0x08001ee5

08001fbc <__sfp>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	4607      	mov	r7, r0
 8001fc0:	f7ff ffac 	bl	8001f1c <__sfp_lock_acquire>
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <__sfp+0x84>)
 8001fc6:	681e      	ldr	r6, [r3, #0]
 8001fc8:	69b3      	ldr	r3, [r6, #24]
 8001fca:	b913      	cbnz	r3, 8001fd2 <__sfp+0x16>
 8001fcc:	4630      	mov	r0, r6
 8001fce:	f7ff ffbd 	bl	8001f4c <__sinit>
 8001fd2:	3648      	adds	r6, #72	; 0x48
 8001fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	d503      	bpl.n	8001fe4 <__sfp+0x28>
 8001fdc:	6833      	ldr	r3, [r6, #0]
 8001fde:	b30b      	cbz	r3, 8002024 <__sfp+0x68>
 8001fe0:	6836      	ldr	r6, [r6, #0]
 8001fe2:	e7f7      	b.n	8001fd4 <__sfp+0x18>
 8001fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fe8:	b9d5      	cbnz	r5, 8002020 <__sfp+0x64>
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <__sfp+0x88>)
 8001fec:	60e3      	str	r3, [r4, #12]
 8001fee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ff2:	6665      	str	r5, [r4, #100]	; 0x64
 8001ff4:	f000 f89a 	bl	800212c <__retarget_lock_init_recursive>
 8001ff8:	f7ff ff96 	bl	8001f28 <__sfp_lock_release>
 8001ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002004:	6025      	str	r5, [r4, #0]
 8002006:	61a5      	str	r5, [r4, #24]
 8002008:	2208      	movs	r2, #8
 800200a:	4629      	mov	r1, r5
 800200c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002010:	f000 f88f 	bl	8002132 <memset>
 8002014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800201c:	4620      	mov	r0, r4
 800201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002020:	3468      	adds	r4, #104	; 0x68
 8002022:	e7d9      	b.n	8001fd8 <__sfp+0x1c>
 8002024:	2104      	movs	r1, #4
 8002026:	4638      	mov	r0, r7
 8002028:	f7ff ff62 	bl	8001ef0 <__sfmoreglue>
 800202c:	4604      	mov	r4, r0
 800202e:	6030      	str	r0, [r6, #0]
 8002030:	2800      	cmp	r0, #0
 8002032:	d1d5      	bne.n	8001fe0 <__sfp+0x24>
 8002034:	f7ff ff78 	bl	8001f28 <__sfp_lock_release>
 8002038:	230c      	movs	r3, #12
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	e7ee      	b.n	800201c <__sfp+0x60>
 800203e:	bf00      	nop
 8002040:	08003278 	.word	0x08003278
 8002044:	ffff0001 	.word	0xffff0001

08002048 <_fwalk>:
 8002048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800204c:	460f      	mov	r7, r1
 800204e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002052:	2600      	movs	r6, #0
 8002054:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002058:	f1b8 0801 	subs.w	r8, r8, #1
 800205c:	d505      	bpl.n	800206a <_fwalk+0x22>
 800205e:	6824      	ldr	r4, [r4, #0]
 8002060:	2c00      	cmp	r4, #0
 8002062:	d1f7      	bne.n	8002054 <_fwalk+0xc>
 8002064:	4630      	mov	r0, r6
 8002066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800206a:	89ab      	ldrh	r3, [r5, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d906      	bls.n	800207e <_fwalk+0x36>
 8002070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002074:	3301      	adds	r3, #1
 8002076:	d002      	beq.n	800207e <_fwalk+0x36>
 8002078:	4628      	mov	r0, r5
 800207a:	47b8      	blx	r7
 800207c:	4306      	orrs	r6, r0
 800207e:	3568      	adds	r5, #104	; 0x68
 8002080:	e7ea      	b.n	8002058 <_fwalk+0x10>

08002082 <_fwalk_reent>:
 8002082:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002086:	4606      	mov	r6, r0
 8002088:	4688      	mov	r8, r1
 800208a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800208e:	2700      	movs	r7, #0
 8002090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002094:	f1b9 0901 	subs.w	r9, r9, #1
 8002098:	d505      	bpl.n	80020a6 <_fwalk_reent+0x24>
 800209a:	6824      	ldr	r4, [r4, #0]
 800209c:	2c00      	cmp	r4, #0
 800209e:	d1f7      	bne.n	8002090 <_fwalk_reent+0xe>
 80020a0:	4638      	mov	r0, r7
 80020a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020a6:	89ab      	ldrh	r3, [r5, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d907      	bls.n	80020bc <_fwalk_reent+0x3a>
 80020ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020b0:	3301      	adds	r3, #1
 80020b2:	d003      	beq.n	80020bc <_fwalk_reent+0x3a>
 80020b4:	4629      	mov	r1, r5
 80020b6:	4630      	mov	r0, r6
 80020b8:	47c0      	blx	r8
 80020ba:	4307      	orrs	r7, r0
 80020bc:	3568      	adds	r5, #104	; 0x68
 80020be:	e7e9      	b.n	8002094 <_fwalk_reent+0x12>

080020c0 <getchar>:
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <getchar+0x20>)
 80020c2:	b510      	push	{r4, lr}
 80020c4:	681c      	ldr	r4, [r3, #0]
 80020c6:	b124      	cbz	r4, 80020d2 <getchar+0x12>
 80020c8:	69a3      	ldr	r3, [r4, #24]
 80020ca:	b913      	cbnz	r3, 80020d2 <getchar+0x12>
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7ff ff3d 	bl	8001f4c <__sinit>
 80020d2:	6861      	ldr	r1, [r4, #4]
 80020d4:	4620      	mov	r0, r4
 80020d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020da:	f000 ba41 	b.w	8002560 <_getc_r>
 80020de:	bf00      	nop
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <__libc_init_array>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4d0d      	ldr	r5, [pc, #52]	; (800211c <__libc_init_array+0x38>)
 80020e8:	4c0d      	ldr	r4, [pc, #52]	; (8002120 <__libc_init_array+0x3c>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	2600      	movs	r6, #0
 80020f0:	42a6      	cmp	r6, r4
 80020f2:	d109      	bne.n	8002108 <__libc_init_array+0x24>
 80020f4:	4d0b      	ldr	r5, [pc, #44]	; (8002124 <__libc_init_array+0x40>)
 80020f6:	4c0c      	ldr	r4, [pc, #48]	; (8002128 <__libc_init_array+0x44>)
 80020f8:	f000 ff4c 	bl	8002f94 <_init>
 80020fc:	1b64      	subs	r4, r4, r5
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	2600      	movs	r6, #0
 8002102:	42a6      	cmp	r6, r4
 8002104:	d105      	bne.n	8002112 <__libc_init_array+0x2e>
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	f855 3b04 	ldr.w	r3, [r5], #4
 800210c:	4798      	blx	r3
 800210e:	3601      	adds	r6, #1
 8002110:	e7ee      	b.n	80020f0 <__libc_init_array+0xc>
 8002112:	f855 3b04 	ldr.w	r3, [r5], #4
 8002116:	4798      	blx	r3
 8002118:	3601      	adds	r6, #1
 800211a:	e7f2      	b.n	8002102 <__libc_init_array+0x1e>
 800211c:	080032b8 	.word	0x080032b8
 8002120:	080032b8 	.word	0x080032b8
 8002124:	080032b8 	.word	0x080032b8
 8002128:	080032bc 	.word	0x080032bc

0800212c <__retarget_lock_init_recursive>:
 800212c:	4770      	bx	lr

0800212e <__retarget_lock_acquire_recursive>:
 800212e:	4770      	bx	lr

08002130 <__retarget_lock_release_recursive>:
 8002130:	4770      	bx	lr

08002132 <memset>:
 8002132:	4402      	add	r2, r0
 8002134:	4603      	mov	r3, r0
 8002136:	4293      	cmp	r3, r2
 8002138:	d100      	bne.n	800213c <memset+0xa>
 800213a:	4770      	bx	lr
 800213c:	f803 1b01 	strb.w	r1, [r3], #1
 8002140:	e7f9      	b.n	8002136 <memset+0x4>
	...

08002144 <_free_r>:
 8002144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002146:	2900      	cmp	r1, #0
 8002148:	d048      	beq.n	80021dc <_free_r+0x98>
 800214a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800214e:	9001      	str	r0, [sp, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f1a1 0404 	sub.w	r4, r1, #4
 8002156:	bfb8      	it	lt
 8002158:	18e4      	addlt	r4, r4, r3
 800215a:	f000 fab7 	bl	80026cc <__malloc_lock>
 800215e:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <_free_r+0x9c>)
 8002160:	9801      	ldr	r0, [sp, #4]
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	4615      	mov	r5, r2
 8002166:	b933      	cbnz	r3, 8002176 <_free_r+0x32>
 8002168:	6063      	str	r3, [r4, #4]
 800216a:	6014      	str	r4, [r2, #0]
 800216c:	b003      	add	sp, #12
 800216e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002172:	f000 bab1 	b.w	80026d8 <__malloc_unlock>
 8002176:	42a3      	cmp	r3, r4
 8002178:	d90b      	bls.n	8002192 <_free_r+0x4e>
 800217a:	6821      	ldr	r1, [r4, #0]
 800217c:	1862      	adds	r2, r4, r1
 800217e:	4293      	cmp	r3, r2
 8002180:	bf04      	itt	eq
 8002182:	681a      	ldreq	r2, [r3, #0]
 8002184:	685b      	ldreq	r3, [r3, #4]
 8002186:	6063      	str	r3, [r4, #4]
 8002188:	bf04      	itt	eq
 800218a:	1852      	addeq	r2, r2, r1
 800218c:	6022      	streq	r2, [r4, #0]
 800218e:	602c      	str	r4, [r5, #0]
 8002190:	e7ec      	b.n	800216c <_free_r+0x28>
 8002192:	461a      	mov	r2, r3
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	b10b      	cbz	r3, 800219c <_free_r+0x58>
 8002198:	42a3      	cmp	r3, r4
 800219a:	d9fa      	bls.n	8002192 <_free_r+0x4e>
 800219c:	6811      	ldr	r1, [r2, #0]
 800219e:	1855      	adds	r5, r2, r1
 80021a0:	42a5      	cmp	r5, r4
 80021a2:	d10b      	bne.n	80021bc <_free_r+0x78>
 80021a4:	6824      	ldr	r4, [r4, #0]
 80021a6:	4421      	add	r1, r4
 80021a8:	1854      	adds	r4, r2, r1
 80021aa:	42a3      	cmp	r3, r4
 80021ac:	6011      	str	r1, [r2, #0]
 80021ae:	d1dd      	bne.n	800216c <_free_r+0x28>
 80021b0:	681c      	ldr	r4, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	6053      	str	r3, [r2, #4]
 80021b6:	4421      	add	r1, r4
 80021b8:	6011      	str	r1, [r2, #0]
 80021ba:	e7d7      	b.n	800216c <_free_r+0x28>
 80021bc:	d902      	bls.n	80021c4 <_free_r+0x80>
 80021be:	230c      	movs	r3, #12
 80021c0:	6003      	str	r3, [r0, #0]
 80021c2:	e7d3      	b.n	800216c <_free_r+0x28>
 80021c4:	6825      	ldr	r5, [r4, #0]
 80021c6:	1961      	adds	r1, r4, r5
 80021c8:	428b      	cmp	r3, r1
 80021ca:	bf04      	itt	eq
 80021cc:	6819      	ldreq	r1, [r3, #0]
 80021ce:	685b      	ldreq	r3, [r3, #4]
 80021d0:	6063      	str	r3, [r4, #4]
 80021d2:	bf04      	itt	eq
 80021d4:	1949      	addeq	r1, r1, r5
 80021d6:	6021      	streq	r1, [r4, #0]
 80021d8:	6054      	str	r4, [r2, #4]
 80021da:	e7c7      	b.n	800216c <_free_r+0x28>
 80021dc:	b003      	add	sp, #12
 80021de:	bd30      	pop	{r4, r5, pc}
 80021e0:	2000008c 	.word	0x2000008c

080021e4 <_malloc_r>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	1ccd      	adds	r5, r1, #3
 80021e8:	f025 0503 	bic.w	r5, r5, #3
 80021ec:	3508      	adds	r5, #8
 80021ee:	2d0c      	cmp	r5, #12
 80021f0:	bf38      	it	cc
 80021f2:	250c      	movcc	r5, #12
 80021f4:	2d00      	cmp	r5, #0
 80021f6:	4606      	mov	r6, r0
 80021f8:	db01      	blt.n	80021fe <_malloc_r+0x1a>
 80021fa:	42a9      	cmp	r1, r5
 80021fc:	d903      	bls.n	8002206 <_malloc_r+0x22>
 80021fe:	230c      	movs	r3, #12
 8002200:	6033      	str	r3, [r6, #0]
 8002202:	2000      	movs	r0, #0
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002206:	f000 fa61 	bl	80026cc <__malloc_lock>
 800220a:	4921      	ldr	r1, [pc, #132]	; (8002290 <_malloc_r+0xac>)
 800220c:	680a      	ldr	r2, [r1, #0]
 800220e:	4614      	mov	r4, r2
 8002210:	b99c      	cbnz	r4, 800223a <_malloc_r+0x56>
 8002212:	4f20      	ldr	r7, [pc, #128]	; (8002294 <_malloc_r+0xb0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b923      	cbnz	r3, 8002222 <_malloc_r+0x3e>
 8002218:	4621      	mov	r1, r4
 800221a:	4630      	mov	r0, r6
 800221c:	f000 f86a 	bl	80022f4 <_sbrk_r>
 8002220:	6038      	str	r0, [r7, #0]
 8002222:	4629      	mov	r1, r5
 8002224:	4630      	mov	r0, r6
 8002226:	f000 f865 	bl	80022f4 <_sbrk_r>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d123      	bne.n	8002276 <_malloc_r+0x92>
 800222e:	230c      	movs	r3, #12
 8002230:	6033      	str	r3, [r6, #0]
 8002232:	4630      	mov	r0, r6
 8002234:	f000 fa50 	bl	80026d8 <__malloc_unlock>
 8002238:	e7e3      	b.n	8002202 <_malloc_r+0x1e>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	1b5b      	subs	r3, r3, r5
 800223e:	d417      	bmi.n	8002270 <_malloc_r+0x8c>
 8002240:	2b0b      	cmp	r3, #11
 8002242:	d903      	bls.n	800224c <_malloc_r+0x68>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	441c      	add	r4, r3
 8002248:	6025      	str	r5, [r4, #0]
 800224a:	e004      	b.n	8002256 <_malloc_r+0x72>
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	42a2      	cmp	r2, r4
 8002250:	bf0c      	ite	eq
 8002252:	600b      	streq	r3, [r1, #0]
 8002254:	6053      	strne	r3, [r2, #4]
 8002256:	4630      	mov	r0, r6
 8002258:	f000 fa3e 	bl	80026d8 <__malloc_unlock>
 800225c:	f104 000b 	add.w	r0, r4, #11
 8002260:	1d23      	adds	r3, r4, #4
 8002262:	f020 0007 	bic.w	r0, r0, #7
 8002266:	1ac2      	subs	r2, r0, r3
 8002268:	d0cc      	beq.n	8002204 <_malloc_r+0x20>
 800226a:	1a1b      	subs	r3, r3, r0
 800226c:	50a3      	str	r3, [r4, r2]
 800226e:	e7c9      	b.n	8002204 <_malloc_r+0x20>
 8002270:	4622      	mov	r2, r4
 8002272:	6864      	ldr	r4, [r4, #4]
 8002274:	e7cc      	b.n	8002210 <_malloc_r+0x2c>
 8002276:	1cc4      	adds	r4, r0, #3
 8002278:	f024 0403 	bic.w	r4, r4, #3
 800227c:	42a0      	cmp	r0, r4
 800227e:	d0e3      	beq.n	8002248 <_malloc_r+0x64>
 8002280:	1a21      	subs	r1, r4, r0
 8002282:	4630      	mov	r0, r6
 8002284:	f000 f836 	bl	80022f4 <_sbrk_r>
 8002288:	3001      	adds	r0, #1
 800228a:	d1dd      	bne.n	8002248 <_malloc_r+0x64>
 800228c:	e7cf      	b.n	800222e <_malloc_r+0x4a>
 800228e:	bf00      	nop
 8002290:	2000008c 	.word	0x2000008c
 8002294:	20000090 	.word	0x20000090

08002298 <iprintf>:
 8002298:	b40f      	push	{r0, r1, r2, r3}
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <iprintf+0x2c>)
 800229c:	b513      	push	{r0, r1, r4, lr}
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	b124      	cbz	r4, 80022ac <iprintf+0x14>
 80022a2:	69a3      	ldr	r3, [r4, #24]
 80022a4:	b913      	cbnz	r3, 80022ac <iprintf+0x14>
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff fe50 	bl	8001f4c <__sinit>
 80022ac:	ab05      	add	r3, sp, #20
 80022ae:	9a04      	ldr	r2, [sp, #16]
 80022b0:	68a1      	ldr	r1, [r4, #8]
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 fa3f 	bl	8002738 <_vfiprintf_r>
 80022ba:	b002      	add	sp, #8
 80022bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c0:	b004      	add	sp, #16
 80022c2:	4770      	bx	lr
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <putchar>:
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <putchar+0x28>)
 80022ca:	b513      	push	{r0, r1, r4, lr}
 80022cc:	681c      	ldr	r4, [r3, #0]
 80022ce:	4601      	mov	r1, r0
 80022d0:	b134      	cbz	r4, 80022e0 <putchar+0x18>
 80022d2:	69a3      	ldr	r3, [r4, #24]
 80022d4:	b923      	cbnz	r3, 80022e0 <putchar+0x18>
 80022d6:	9001      	str	r0, [sp, #4]
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fe37 	bl	8001f4c <__sinit>
 80022de:	9901      	ldr	r1, [sp, #4]
 80022e0:	68a2      	ldr	r2, [r4, #8]
 80022e2:	4620      	mov	r0, r4
 80022e4:	b002      	add	sp, #8
 80022e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ea:	f000 bce9 	b.w	8002cc0 <_putc_r>
 80022ee:	bf00      	nop
 80022f0:	2000000c 	.word	0x2000000c

080022f4 <_sbrk_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4d06      	ldr	r5, [pc, #24]	; (8002310 <_sbrk_r+0x1c>)
 80022f8:	2300      	movs	r3, #0
 80022fa:	4604      	mov	r4, r0
 80022fc:	4608      	mov	r0, r1
 80022fe:	602b      	str	r3, [r5, #0]
 8002300:	f000 fe3a 	bl	8002f78 <_sbrk>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d102      	bne.n	800230e <_sbrk_r+0x1a>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b103      	cbz	r3, 800230e <_sbrk_r+0x1a>
 800230c:	6023      	str	r3, [r4, #0]
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	200001a8 	.word	0x200001a8

08002314 <__sread>:
 8002314:	b510      	push	{r4, lr}
 8002316:	460c      	mov	r4, r1
 8002318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231c:	f000 fd18 	bl	8002d50 <_read_r>
 8002320:	2800      	cmp	r0, #0
 8002322:	bfab      	itete	ge
 8002324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002326:	89a3      	ldrhlt	r3, [r4, #12]
 8002328:	181b      	addge	r3, r3, r0
 800232a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800232e:	bfac      	ite	ge
 8002330:	6563      	strge	r3, [r4, #84]	; 0x54
 8002332:	81a3      	strhlt	r3, [r4, #12]
 8002334:	bd10      	pop	{r4, pc}

08002336 <__swrite>:
 8002336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800233a:	461f      	mov	r7, r3
 800233c:	898b      	ldrh	r3, [r1, #12]
 800233e:	05db      	lsls	r3, r3, #23
 8002340:	4605      	mov	r5, r0
 8002342:	460c      	mov	r4, r1
 8002344:	4616      	mov	r6, r2
 8002346:	d505      	bpl.n	8002354 <__swrite+0x1e>
 8002348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234c:	2302      	movs	r3, #2
 800234e:	2200      	movs	r2, #0
 8002350:	f000 f946 	bl	80025e0 <_lseek_r>
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800235a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800235e:	81a3      	strh	r3, [r4, #12]
 8002360:	4632      	mov	r2, r6
 8002362:	463b      	mov	r3, r7
 8002364:	4628      	mov	r0, r5
 8002366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800236a:	f000 b869 	b.w	8002440 <_write_r>

0800236e <__sseek>:
 800236e:	b510      	push	{r4, lr}
 8002370:	460c      	mov	r4, r1
 8002372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002376:	f000 f933 	bl	80025e0 <_lseek_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	89a3      	ldrh	r3, [r4, #12]
 800237e:	bf15      	itete	ne
 8002380:	6560      	strne	r0, [r4, #84]	; 0x54
 8002382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800238a:	81a3      	strheq	r3, [r4, #12]
 800238c:	bf18      	it	ne
 800238e:	81a3      	strhne	r3, [r4, #12]
 8002390:	bd10      	pop	{r4, pc}

08002392 <__sclose>:
 8002392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002396:	f000 b8d3 	b.w	8002540 <_close_r>
	...

0800239c <__swbuf_r>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	460e      	mov	r6, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	4605      	mov	r5, r0
 80023a4:	b118      	cbz	r0, 80023ae <__swbuf_r+0x12>
 80023a6:	6983      	ldr	r3, [r0, #24]
 80023a8:	b90b      	cbnz	r3, 80023ae <__swbuf_r+0x12>
 80023aa:	f7ff fdcf 	bl	8001f4c <__sinit>
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <__swbuf_r+0x98>)
 80023b0:	429c      	cmp	r4, r3
 80023b2:	d12b      	bne.n	800240c <__swbuf_r+0x70>
 80023b4:	686c      	ldr	r4, [r5, #4]
 80023b6:	69a3      	ldr	r3, [r4, #24]
 80023b8:	60a3      	str	r3, [r4, #8]
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	071a      	lsls	r2, r3, #28
 80023be:	d52f      	bpl.n	8002420 <__swbuf_r+0x84>
 80023c0:	6923      	ldr	r3, [r4, #16]
 80023c2:	b36b      	cbz	r3, 8002420 <__swbuf_r+0x84>
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	6820      	ldr	r0, [r4, #0]
 80023c8:	1ac0      	subs	r0, r0, r3
 80023ca:	6963      	ldr	r3, [r4, #20]
 80023cc:	b2f6      	uxtb	r6, r6
 80023ce:	4283      	cmp	r3, r0
 80023d0:	4637      	mov	r7, r6
 80023d2:	dc04      	bgt.n	80023de <__swbuf_r+0x42>
 80023d4:	4621      	mov	r1, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7ff fd12 	bl	8001e00 <_fflush_r>
 80023dc:	bb30      	cbnz	r0, 800242c <__swbuf_r+0x90>
 80023de:	68a3      	ldr	r3, [r4, #8]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60a3      	str	r3, [r4, #8]
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	6022      	str	r2, [r4, #0]
 80023ea:	701e      	strb	r6, [r3, #0]
 80023ec:	6963      	ldr	r3, [r4, #20]
 80023ee:	3001      	adds	r0, #1
 80023f0:	4283      	cmp	r3, r0
 80023f2:	d004      	beq.n	80023fe <__swbuf_r+0x62>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	07db      	lsls	r3, r3, #31
 80023f8:	d506      	bpl.n	8002408 <__swbuf_r+0x6c>
 80023fa:	2e0a      	cmp	r6, #10
 80023fc:	d104      	bne.n	8002408 <__swbuf_r+0x6c>
 80023fe:	4621      	mov	r1, r4
 8002400:	4628      	mov	r0, r5
 8002402:	f7ff fcfd 	bl	8001e00 <_fflush_r>
 8002406:	b988      	cbnz	r0, 800242c <__swbuf_r+0x90>
 8002408:	4638      	mov	r0, r7
 800240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <__swbuf_r+0x9c>)
 800240e:	429c      	cmp	r4, r3
 8002410:	d101      	bne.n	8002416 <__swbuf_r+0x7a>
 8002412:	68ac      	ldr	r4, [r5, #8]
 8002414:	e7cf      	b.n	80023b6 <__swbuf_r+0x1a>
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <__swbuf_r+0xa0>)
 8002418:	429c      	cmp	r4, r3
 800241a:	bf08      	it	eq
 800241c:	68ec      	ldreq	r4, [r5, #12]
 800241e:	e7ca      	b.n	80023b6 <__swbuf_r+0x1a>
 8002420:	4621      	mov	r1, r4
 8002422:	4628      	mov	r0, r5
 8002424:	f000 f81e 	bl	8002464 <__swsetup_r>
 8002428:	2800      	cmp	r0, #0
 800242a:	d0cb      	beq.n	80023c4 <__swbuf_r+0x28>
 800242c:	f04f 37ff 	mov.w	r7, #4294967295
 8002430:	e7ea      	b.n	8002408 <__swbuf_r+0x6c>
 8002432:	bf00      	nop
 8002434:	08003238 	.word	0x08003238
 8002438:	08003258 	.word	0x08003258
 800243c:	08003218 	.word	0x08003218

08002440 <_write_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4d07      	ldr	r5, [pc, #28]	; (8002460 <_write_r+0x20>)
 8002444:	4604      	mov	r4, r0
 8002446:	4608      	mov	r0, r1
 8002448:	4611      	mov	r1, r2
 800244a:	2200      	movs	r2, #0
 800244c:	602a      	str	r2, [r5, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	f7fe fad8 	bl	8000a04 <_write>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_write_r+0x1e>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_write_r+0x1e>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	200001a8 	.word	0x200001a8

08002464 <__swsetup_r>:
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <__swsetup_r+0xcc>)
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	681d      	ldr	r5, [r3, #0]
 800246a:	4606      	mov	r6, r0
 800246c:	460c      	mov	r4, r1
 800246e:	b125      	cbz	r5, 800247a <__swsetup_r+0x16>
 8002470:	69ab      	ldr	r3, [r5, #24]
 8002472:	b913      	cbnz	r3, 800247a <__swsetup_r+0x16>
 8002474:	4628      	mov	r0, r5
 8002476:	f7ff fd69 	bl	8001f4c <__sinit>
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <__swsetup_r+0xd0>)
 800247c:	429c      	cmp	r4, r3
 800247e:	d10f      	bne.n	80024a0 <__swsetup_r+0x3c>
 8002480:	686c      	ldr	r4, [r5, #4]
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002488:	0719      	lsls	r1, r3, #28
 800248a:	d42c      	bmi.n	80024e6 <__swsetup_r+0x82>
 800248c:	06dd      	lsls	r5, r3, #27
 800248e:	d411      	bmi.n	80024b4 <__swsetup_r+0x50>
 8002490:	2309      	movs	r3, #9
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002498:	81a3      	strh	r3, [r4, #12]
 800249a:	f04f 30ff 	mov.w	r0, #4294967295
 800249e:	e03e      	b.n	800251e <__swsetup_r+0xba>
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <__swsetup_r+0xd4>)
 80024a2:	429c      	cmp	r4, r3
 80024a4:	d101      	bne.n	80024aa <__swsetup_r+0x46>
 80024a6:	68ac      	ldr	r4, [r5, #8]
 80024a8:	e7eb      	b.n	8002482 <__swsetup_r+0x1e>
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <__swsetup_r+0xd8>)
 80024ac:	429c      	cmp	r4, r3
 80024ae:	bf08      	it	eq
 80024b0:	68ec      	ldreq	r4, [r5, #12]
 80024b2:	e7e6      	b.n	8002482 <__swsetup_r+0x1e>
 80024b4:	0758      	lsls	r0, r3, #29
 80024b6:	d512      	bpl.n	80024de <__swsetup_r+0x7a>
 80024b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ba:	b141      	cbz	r1, 80024ce <__swsetup_r+0x6a>
 80024bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024c0:	4299      	cmp	r1, r3
 80024c2:	d002      	beq.n	80024ca <__swsetup_r+0x66>
 80024c4:	4630      	mov	r0, r6
 80024c6:	f7ff fe3d 	bl	8002144 <_free_r>
 80024ca:	2300      	movs	r3, #0
 80024cc:	6363      	str	r3, [r4, #52]	; 0x34
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	2300      	movs	r3, #0
 80024d8:	6063      	str	r3, [r4, #4]
 80024da:	6923      	ldr	r3, [r4, #16]
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	b94b      	cbnz	r3, 80024fe <__swsetup_r+0x9a>
 80024ea:	89a3      	ldrh	r3, [r4, #12]
 80024ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d003      	beq.n	80024fe <__swsetup_r+0x9a>
 80024f6:	4621      	mov	r1, r4
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 f8a7 	bl	800264c <__smakebuf_r>
 80024fe:	89a0      	ldrh	r0, [r4, #12]
 8002500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002504:	f010 0301 	ands.w	r3, r0, #1
 8002508:	d00a      	beq.n	8002520 <__swsetup_r+0xbc>
 800250a:	2300      	movs	r3, #0
 800250c:	60a3      	str	r3, [r4, #8]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	425b      	negs	r3, r3
 8002512:	61a3      	str	r3, [r4, #24]
 8002514:	6923      	ldr	r3, [r4, #16]
 8002516:	b943      	cbnz	r3, 800252a <__swsetup_r+0xc6>
 8002518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800251c:	d1ba      	bne.n	8002494 <__swsetup_r+0x30>
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	0781      	lsls	r1, r0, #30
 8002522:	bf58      	it	pl
 8002524:	6963      	ldrpl	r3, [r4, #20]
 8002526:	60a3      	str	r3, [r4, #8]
 8002528:	e7f4      	b.n	8002514 <__swsetup_r+0xb0>
 800252a:	2000      	movs	r0, #0
 800252c:	e7f7      	b.n	800251e <__swsetup_r+0xba>
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c
 8002534:	08003238 	.word	0x08003238
 8002538:	08003258 	.word	0x08003258
 800253c:	08003218 	.word	0x08003218

08002540 <_close_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4d06      	ldr	r5, [pc, #24]	; (800255c <_close_r+0x1c>)
 8002544:	2300      	movs	r3, #0
 8002546:	4604      	mov	r4, r0
 8002548:	4608      	mov	r0, r1
 800254a:	602b      	str	r3, [r5, #0]
 800254c:	f000 fcf4 	bl	8002f38 <_close>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d102      	bne.n	800255a <_close_r+0x1a>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	b103      	cbz	r3, 800255a <_close_r+0x1a>
 8002558:	6023      	str	r3, [r4, #0]
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	200001a8 	.word	0x200001a8

08002560 <_getc_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	460c      	mov	r4, r1
 8002564:	4605      	mov	r5, r0
 8002566:	b118      	cbz	r0, 8002570 <_getc_r+0x10>
 8002568:	6983      	ldr	r3, [r0, #24]
 800256a:	b90b      	cbnz	r3, 8002570 <_getc_r+0x10>
 800256c:	f7ff fcee 	bl	8001f4c <__sinit>
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <_getc_r+0x74>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d11e      	bne.n	80025b4 <_getc_r+0x54>
 8002576:	686c      	ldr	r4, [r5, #4]
 8002578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800257a:	07d8      	lsls	r0, r3, #31
 800257c:	d405      	bmi.n	800258a <_getc_r+0x2a>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	0599      	lsls	r1, r3, #22
 8002582:	d402      	bmi.n	800258a <_getc_r+0x2a>
 8002584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002586:	f7ff fdd2 	bl	800212e <__retarget_lock_acquire_recursive>
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	3b01      	subs	r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	6063      	str	r3, [r4, #4]
 8002592:	da19      	bge.n	80025c8 <_getc_r+0x68>
 8002594:	4628      	mov	r0, r5
 8002596:	4621      	mov	r1, r4
 8002598:	f000 fbec 	bl	8002d74 <__srget_r>
 800259c:	4605      	mov	r5, r0
 800259e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025a0:	07da      	lsls	r2, r3, #31
 80025a2:	d405      	bmi.n	80025b0 <_getc_r+0x50>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	059b      	lsls	r3, r3, #22
 80025a8:	d402      	bmi.n	80025b0 <_getc_r+0x50>
 80025aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ac:	f7ff fdc0 	bl	8002130 <__retarget_lock_release_recursive>
 80025b0:	4628      	mov	r0, r5
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <_getc_r+0x78>)
 80025b6:	429c      	cmp	r4, r3
 80025b8:	d101      	bne.n	80025be <_getc_r+0x5e>
 80025ba:	68ac      	ldr	r4, [r5, #8]
 80025bc:	e7dc      	b.n	8002578 <_getc_r+0x18>
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_getc_r+0x7c>)
 80025c0:	429c      	cmp	r4, r3
 80025c2:	bf08      	it	eq
 80025c4:	68ec      	ldreq	r4, [r5, #12]
 80025c6:	e7d7      	b.n	8002578 <_getc_r+0x18>
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	6022      	str	r2, [r4, #0]
 80025ce:	781d      	ldrb	r5, [r3, #0]
 80025d0:	e7e5      	b.n	800259e <_getc_r+0x3e>
 80025d2:	bf00      	nop
 80025d4:	08003238 	.word	0x08003238
 80025d8:	08003258 	.word	0x08003258
 80025dc:	08003218 	.word	0x08003218

080025e0 <_lseek_r>:
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4d07      	ldr	r5, [pc, #28]	; (8002600 <_lseek_r+0x20>)
 80025e4:	4604      	mov	r4, r0
 80025e6:	4608      	mov	r0, r1
 80025e8:	4611      	mov	r1, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	602a      	str	r2, [r5, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 fcba 	bl	8002f68 <_lseek>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_lseek_r+0x1e>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_lseek_r+0x1e>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	200001a8 	.word	0x200001a8

08002604 <__swhatbuf_r>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	460e      	mov	r6, r1
 8002608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260c:	2900      	cmp	r1, #0
 800260e:	b096      	sub	sp, #88	; 0x58
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	da07      	bge.n	8002626 <__swhatbuf_r+0x22>
 8002616:	2300      	movs	r3, #0
 8002618:	602b      	str	r3, [r5, #0]
 800261a:	89b3      	ldrh	r3, [r6, #12]
 800261c:	061a      	lsls	r2, r3, #24
 800261e:	d410      	bmi.n	8002642 <__swhatbuf_r+0x3e>
 8002620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002624:	e00e      	b.n	8002644 <__swhatbuf_r+0x40>
 8002626:	466a      	mov	r2, sp
 8002628:	f000 fbd0 	bl	8002dcc <_fstat_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	dbf2      	blt.n	8002616 <__swhatbuf_r+0x12>
 8002630:	9a01      	ldr	r2, [sp, #4]
 8002632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800263a:	425a      	negs	r2, r3
 800263c:	415a      	adcs	r2, r3
 800263e:	602a      	str	r2, [r5, #0]
 8002640:	e7ee      	b.n	8002620 <__swhatbuf_r+0x1c>
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	2000      	movs	r0, #0
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	b016      	add	sp, #88	; 0x58
 800264a:	bd70      	pop	{r4, r5, r6, pc}

0800264c <__smakebuf_r>:
 800264c:	898b      	ldrh	r3, [r1, #12]
 800264e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002650:	079d      	lsls	r5, r3, #30
 8002652:	4606      	mov	r6, r0
 8002654:	460c      	mov	r4, r1
 8002656:	d507      	bpl.n	8002668 <__smakebuf_r+0x1c>
 8002658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	6123      	str	r3, [r4, #16]
 8002660:	2301      	movs	r3, #1
 8002662:	6163      	str	r3, [r4, #20]
 8002664:	b002      	add	sp, #8
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	ab01      	add	r3, sp, #4
 800266a:	466a      	mov	r2, sp
 800266c:	f7ff ffca 	bl	8002604 <__swhatbuf_r>
 8002670:	9900      	ldr	r1, [sp, #0]
 8002672:	4605      	mov	r5, r0
 8002674:	4630      	mov	r0, r6
 8002676:	f7ff fdb5 	bl	80021e4 <_malloc_r>
 800267a:	b948      	cbnz	r0, 8002690 <__smakebuf_r+0x44>
 800267c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002680:	059a      	lsls	r2, r3, #22
 8002682:	d4ef      	bmi.n	8002664 <__smakebuf_r+0x18>
 8002684:	f023 0303 	bic.w	r3, r3, #3
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	81a3      	strh	r3, [r4, #12]
 800268e:	e7e3      	b.n	8002658 <__smakebuf_r+0xc>
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <__smakebuf_r+0x7c>)
 8002692:	62b3      	str	r3, [r6, #40]	; 0x28
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	6020      	str	r0, [r4, #0]
 8002698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269c:	81a3      	strh	r3, [r4, #12]
 800269e:	9b00      	ldr	r3, [sp, #0]
 80026a0:	6163      	str	r3, [r4, #20]
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	6120      	str	r0, [r4, #16]
 80026a6:	b15b      	cbz	r3, 80026c0 <__smakebuf_r+0x74>
 80026a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ac:	4630      	mov	r0, r6
 80026ae:	f000 fb9f 	bl	8002df0 <_isatty_r>
 80026b2:	b128      	cbz	r0, 80026c0 <__smakebuf_r+0x74>
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	81a3      	strh	r3, [r4, #12]
 80026c0:	89a0      	ldrh	r0, [r4, #12]
 80026c2:	4305      	orrs	r5, r0
 80026c4:	81a5      	strh	r5, [r4, #12]
 80026c6:	e7cd      	b.n	8002664 <__smakebuf_r+0x18>
 80026c8:	08001ee5 	.word	0x08001ee5

080026cc <__malloc_lock>:
 80026cc:	4801      	ldr	r0, [pc, #4]	; (80026d4 <__malloc_lock+0x8>)
 80026ce:	f7ff bd2e 	b.w	800212e <__retarget_lock_acquire_recursive>
 80026d2:	bf00      	nop
 80026d4:	200001a0 	.word	0x200001a0

080026d8 <__malloc_unlock>:
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <__malloc_unlock+0x8>)
 80026da:	f7ff bd29 	b.w	8002130 <__retarget_lock_release_recursive>
 80026de:	bf00      	nop
 80026e0:	200001a0 	.word	0x200001a0

080026e4 <__sfputc_r>:
 80026e4:	6893      	ldr	r3, [r2, #8]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	b410      	push	{r4}
 80026ec:	6093      	str	r3, [r2, #8]
 80026ee:	da08      	bge.n	8002702 <__sfputc_r+0x1e>
 80026f0:	6994      	ldr	r4, [r2, #24]
 80026f2:	42a3      	cmp	r3, r4
 80026f4:	db01      	blt.n	80026fa <__sfputc_r+0x16>
 80026f6:	290a      	cmp	r1, #10
 80026f8:	d103      	bne.n	8002702 <__sfputc_r+0x1e>
 80026fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026fe:	f7ff be4d 	b.w	800239c <__swbuf_r>
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	1c58      	adds	r0, r3, #1
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	7019      	strb	r1, [r3, #0]
 800270a:	4608      	mov	r0, r1
 800270c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002710:	4770      	bx	lr

08002712 <__sfputs_r>:
 8002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002714:	4606      	mov	r6, r0
 8002716:	460f      	mov	r7, r1
 8002718:	4614      	mov	r4, r2
 800271a:	18d5      	adds	r5, r2, r3
 800271c:	42ac      	cmp	r4, r5
 800271e:	d101      	bne.n	8002724 <__sfputs_r+0x12>
 8002720:	2000      	movs	r0, #0
 8002722:	e007      	b.n	8002734 <__sfputs_r+0x22>
 8002724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002728:	463a      	mov	r2, r7
 800272a:	4630      	mov	r0, r6
 800272c:	f7ff ffda 	bl	80026e4 <__sfputc_r>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d1f3      	bne.n	800271c <__sfputs_r+0xa>
 8002734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002738 <_vfiprintf_r>:
 8002738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273c:	460d      	mov	r5, r1
 800273e:	b09d      	sub	sp, #116	; 0x74
 8002740:	4614      	mov	r4, r2
 8002742:	4698      	mov	r8, r3
 8002744:	4606      	mov	r6, r0
 8002746:	b118      	cbz	r0, 8002750 <_vfiprintf_r+0x18>
 8002748:	6983      	ldr	r3, [r0, #24]
 800274a:	b90b      	cbnz	r3, 8002750 <_vfiprintf_r+0x18>
 800274c:	f7ff fbfe 	bl	8001f4c <__sinit>
 8002750:	4b89      	ldr	r3, [pc, #548]	; (8002978 <_vfiprintf_r+0x240>)
 8002752:	429d      	cmp	r5, r3
 8002754:	d11b      	bne.n	800278e <_vfiprintf_r+0x56>
 8002756:	6875      	ldr	r5, [r6, #4]
 8002758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800275a:	07d9      	lsls	r1, r3, #31
 800275c:	d405      	bmi.n	800276a <_vfiprintf_r+0x32>
 800275e:	89ab      	ldrh	r3, [r5, #12]
 8002760:	059a      	lsls	r2, r3, #22
 8002762:	d402      	bmi.n	800276a <_vfiprintf_r+0x32>
 8002764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002766:	f7ff fce2 	bl	800212e <__retarget_lock_acquire_recursive>
 800276a:	89ab      	ldrh	r3, [r5, #12]
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	d501      	bpl.n	8002774 <_vfiprintf_r+0x3c>
 8002770:	692b      	ldr	r3, [r5, #16]
 8002772:	b9eb      	cbnz	r3, 80027b0 <_vfiprintf_r+0x78>
 8002774:	4629      	mov	r1, r5
 8002776:	4630      	mov	r0, r6
 8002778:	f7ff fe74 	bl	8002464 <__swsetup_r>
 800277c:	b1c0      	cbz	r0, 80027b0 <_vfiprintf_r+0x78>
 800277e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002780:	07dc      	lsls	r4, r3, #31
 8002782:	d50e      	bpl.n	80027a2 <_vfiprintf_r+0x6a>
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	b01d      	add	sp, #116	; 0x74
 800278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <_vfiprintf_r+0x244>)
 8002790:	429d      	cmp	r5, r3
 8002792:	d101      	bne.n	8002798 <_vfiprintf_r+0x60>
 8002794:	68b5      	ldr	r5, [r6, #8]
 8002796:	e7df      	b.n	8002758 <_vfiprintf_r+0x20>
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <_vfiprintf_r+0x248>)
 800279a:	429d      	cmp	r5, r3
 800279c:	bf08      	it	eq
 800279e:	68f5      	ldreq	r5, [r6, #12]
 80027a0:	e7da      	b.n	8002758 <_vfiprintf_r+0x20>
 80027a2:	89ab      	ldrh	r3, [r5, #12]
 80027a4:	0598      	lsls	r0, r3, #22
 80027a6:	d4ed      	bmi.n	8002784 <_vfiprintf_r+0x4c>
 80027a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027aa:	f7ff fcc1 	bl	8002130 <__retarget_lock_release_recursive>
 80027ae:	e7e9      	b.n	8002784 <_vfiprintf_r+0x4c>
 80027b0:	2300      	movs	r3, #0
 80027b2:	9309      	str	r3, [sp, #36]	; 0x24
 80027b4:	2320      	movs	r3, #32
 80027b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80027be:	2330      	movs	r3, #48	; 0x30
 80027c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002984 <_vfiprintf_r+0x24c>
 80027c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027c8:	f04f 0901 	mov.w	r9, #1
 80027cc:	4623      	mov	r3, r4
 80027ce:	469a      	mov	sl, r3
 80027d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027d4:	b10a      	cbz	r2, 80027da <_vfiprintf_r+0xa2>
 80027d6:	2a25      	cmp	r2, #37	; 0x25
 80027d8:	d1f9      	bne.n	80027ce <_vfiprintf_r+0x96>
 80027da:	ebba 0b04 	subs.w	fp, sl, r4
 80027de:	d00b      	beq.n	80027f8 <_vfiprintf_r+0xc0>
 80027e0:	465b      	mov	r3, fp
 80027e2:	4622      	mov	r2, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	4630      	mov	r0, r6
 80027e8:	f7ff ff93 	bl	8002712 <__sfputs_r>
 80027ec:	3001      	adds	r0, #1
 80027ee:	f000 80aa 	beq.w	8002946 <_vfiprintf_r+0x20e>
 80027f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027f4:	445a      	add	r2, fp
 80027f6:	9209      	str	r2, [sp, #36]	; 0x24
 80027f8:	f89a 3000 	ldrb.w	r3, [sl]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a2 	beq.w	8002946 <_vfiprintf_r+0x20e>
 8002802:	2300      	movs	r3, #0
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800280c:	f10a 0a01 	add.w	sl, sl, #1
 8002810:	9304      	str	r3, [sp, #16]
 8002812:	9307      	str	r3, [sp, #28]
 8002814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002818:	931a      	str	r3, [sp, #104]	; 0x68
 800281a:	4654      	mov	r4, sl
 800281c:	2205      	movs	r2, #5
 800281e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002822:	4858      	ldr	r0, [pc, #352]	; (8002984 <_vfiprintf_r+0x24c>)
 8002824:	f7fd fd0c 	bl	8000240 <memchr>
 8002828:	9a04      	ldr	r2, [sp, #16]
 800282a:	b9d8      	cbnz	r0, 8002864 <_vfiprintf_r+0x12c>
 800282c:	06d1      	lsls	r1, r2, #27
 800282e:	bf44      	itt	mi
 8002830:	2320      	movmi	r3, #32
 8002832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002836:	0713      	lsls	r3, r2, #28
 8002838:	bf44      	itt	mi
 800283a:	232b      	movmi	r3, #43	; 0x2b
 800283c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002840:	f89a 3000 	ldrb.w	r3, [sl]
 8002844:	2b2a      	cmp	r3, #42	; 0x2a
 8002846:	d015      	beq.n	8002874 <_vfiprintf_r+0x13c>
 8002848:	9a07      	ldr	r2, [sp, #28]
 800284a:	4654      	mov	r4, sl
 800284c:	2000      	movs	r0, #0
 800284e:	f04f 0c0a 	mov.w	ip, #10
 8002852:	4621      	mov	r1, r4
 8002854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002858:	3b30      	subs	r3, #48	; 0x30
 800285a:	2b09      	cmp	r3, #9
 800285c:	d94e      	bls.n	80028fc <_vfiprintf_r+0x1c4>
 800285e:	b1b0      	cbz	r0, 800288e <_vfiprintf_r+0x156>
 8002860:	9207      	str	r2, [sp, #28]
 8002862:	e014      	b.n	800288e <_vfiprintf_r+0x156>
 8002864:	eba0 0308 	sub.w	r3, r0, r8
 8002868:	fa09 f303 	lsl.w	r3, r9, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	46a2      	mov	sl, r4
 8002872:	e7d2      	b.n	800281a <_vfiprintf_r+0xe2>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	1d19      	adds	r1, r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	9103      	str	r1, [sp, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bfbb      	ittet	lt
 8002880:	425b      	neglt	r3, r3
 8002882:	f042 0202 	orrlt.w	r2, r2, #2
 8002886:	9307      	strge	r3, [sp, #28]
 8002888:	9307      	strlt	r3, [sp, #28]
 800288a:	bfb8      	it	lt
 800288c:	9204      	strlt	r2, [sp, #16]
 800288e:	7823      	ldrb	r3, [r4, #0]
 8002890:	2b2e      	cmp	r3, #46	; 0x2e
 8002892:	d10c      	bne.n	80028ae <_vfiprintf_r+0x176>
 8002894:	7863      	ldrb	r3, [r4, #1]
 8002896:	2b2a      	cmp	r3, #42	; 0x2a
 8002898:	d135      	bne.n	8002906 <_vfiprintf_r+0x1ce>
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	1d1a      	adds	r2, r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	9203      	str	r2, [sp, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bfb8      	it	lt
 80028a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028aa:	3402      	adds	r4, #2
 80028ac:	9305      	str	r3, [sp, #20]
 80028ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002994 <_vfiprintf_r+0x25c>
 80028b2:	7821      	ldrb	r1, [r4, #0]
 80028b4:	2203      	movs	r2, #3
 80028b6:	4650      	mov	r0, sl
 80028b8:	f7fd fcc2 	bl	8000240 <memchr>
 80028bc:	b140      	cbz	r0, 80028d0 <_vfiprintf_r+0x198>
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	eba0 000a 	sub.w	r0, r0, sl
 80028c4:	fa03 f000 	lsl.w	r0, r3, r0
 80028c8:	9b04      	ldr	r3, [sp, #16]
 80028ca:	4303      	orrs	r3, r0
 80028cc:	3401      	adds	r4, #1
 80028ce:	9304      	str	r3, [sp, #16]
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	482c      	ldr	r0, [pc, #176]	; (8002988 <_vfiprintf_r+0x250>)
 80028d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028da:	2206      	movs	r2, #6
 80028dc:	f7fd fcb0 	bl	8000240 <memchr>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d03f      	beq.n	8002964 <_vfiprintf_r+0x22c>
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <_vfiprintf_r+0x254>)
 80028e6:	bb1b      	cbnz	r3, 8002930 <_vfiprintf_r+0x1f8>
 80028e8:	9b03      	ldr	r3, [sp, #12]
 80028ea:	3307      	adds	r3, #7
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	3308      	adds	r3, #8
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f6:	443b      	add	r3, r7
 80028f8:	9309      	str	r3, [sp, #36]	; 0x24
 80028fa:	e767      	b.n	80027cc <_vfiprintf_r+0x94>
 80028fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002900:	460c      	mov	r4, r1
 8002902:	2001      	movs	r0, #1
 8002904:	e7a5      	b.n	8002852 <_vfiprintf_r+0x11a>
 8002906:	2300      	movs	r3, #0
 8002908:	3401      	adds	r4, #1
 800290a:	9305      	str	r3, [sp, #20]
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 0c0a 	mov.w	ip, #10
 8002912:	4620      	mov	r0, r4
 8002914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002918:	3a30      	subs	r2, #48	; 0x30
 800291a:	2a09      	cmp	r2, #9
 800291c:	d903      	bls.n	8002926 <_vfiprintf_r+0x1ee>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0c5      	beq.n	80028ae <_vfiprintf_r+0x176>
 8002922:	9105      	str	r1, [sp, #20]
 8002924:	e7c3      	b.n	80028ae <_vfiprintf_r+0x176>
 8002926:	fb0c 2101 	mla	r1, ip, r1, r2
 800292a:	4604      	mov	r4, r0
 800292c:	2301      	movs	r3, #1
 800292e:	e7f0      	b.n	8002912 <_vfiprintf_r+0x1da>
 8002930:	ab03      	add	r3, sp, #12
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	462a      	mov	r2, r5
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <_vfiprintf_r+0x258>)
 8002938:	a904      	add	r1, sp, #16
 800293a:	4630      	mov	r0, r6
 800293c:	f3af 8000 	nop.w
 8002940:	4607      	mov	r7, r0
 8002942:	1c78      	adds	r0, r7, #1
 8002944:	d1d6      	bne.n	80028f4 <_vfiprintf_r+0x1bc>
 8002946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002948:	07d9      	lsls	r1, r3, #31
 800294a:	d405      	bmi.n	8002958 <_vfiprintf_r+0x220>
 800294c:	89ab      	ldrh	r3, [r5, #12]
 800294e:	059a      	lsls	r2, r3, #22
 8002950:	d402      	bmi.n	8002958 <_vfiprintf_r+0x220>
 8002952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002954:	f7ff fbec 	bl	8002130 <__retarget_lock_release_recursive>
 8002958:	89ab      	ldrh	r3, [r5, #12]
 800295a:	065b      	lsls	r3, r3, #25
 800295c:	f53f af12 	bmi.w	8002784 <_vfiprintf_r+0x4c>
 8002960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002962:	e711      	b.n	8002788 <_vfiprintf_r+0x50>
 8002964:	ab03      	add	r3, sp, #12
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	462a      	mov	r2, r5
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <_vfiprintf_r+0x258>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	4630      	mov	r0, r6
 8002970:	f000 f880 	bl	8002a74 <_printf_i>
 8002974:	e7e4      	b.n	8002940 <_vfiprintf_r+0x208>
 8002976:	bf00      	nop
 8002978:	08003238 	.word	0x08003238
 800297c:	08003258 	.word	0x08003258
 8002980:	08003218 	.word	0x08003218
 8002984:	0800327c 	.word	0x0800327c
 8002988:	08003286 	.word	0x08003286
 800298c:	00000000 	.word	0x00000000
 8002990:	08002713 	.word	0x08002713
 8002994:	08003282 	.word	0x08003282

08002998 <_printf_common>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	4616      	mov	r6, r2
 800299e:	4699      	mov	r9, r3
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	690b      	ldr	r3, [r1, #16]
 80029a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bfb8      	it	lt
 80029ac:	4613      	movlt	r3, r2
 80029ae:	6033      	str	r3, [r6, #0]
 80029b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029b4:	4607      	mov	r7, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	b10a      	cbz	r2, 80029be <_printf_common+0x26>
 80029ba:	3301      	adds	r3, #1
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	0699      	lsls	r1, r3, #26
 80029c2:	bf42      	ittt	mi
 80029c4:	6833      	ldrmi	r3, [r6, #0]
 80029c6:	3302      	addmi	r3, #2
 80029c8:	6033      	strmi	r3, [r6, #0]
 80029ca:	6825      	ldr	r5, [r4, #0]
 80029cc:	f015 0506 	ands.w	r5, r5, #6
 80029d0:	d106      	bne.n	80029e0 <_printf_common+0x48>
 80029d2:	f104 0a19 	add.w	sl, r4, #25
 80029d6:	68e3      	ldr	r3, [r4, #12]
 80029d8:	6832      	ldr	r2, [r6, #0]
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	42ab      	cmp	r3, r5
 80029de:	dc26      	bgt.n	8002a2e <_printf_common+0x96>
 80029e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029e4:	1e13      	subs	r3, r2, #0
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	bf18      	it	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	0692      	lsls	r2, r2, #26
 80029ee:	d42b      	bmi.n	8002a48 <_printf_common+0xb0>
 80029f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029f4:	4649      	mov	r1, r9
 80029f6:	4638      	mov	r0, r7
 80029f8:	47c0      	blx	r8
 80029fa:	3001      	adds	r0, #1
 80029fc:	d01e      	beq.n	8002a3c <_printf_common+0xa4>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	68e5      	ldr	r5, [r4, #12]
 8002a02:	6832      	ldr	r2, [r6, #0]
 8002a04:	f003 0306 	and.w	r3, r3, #6
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	bf08      	it	eq
 8002a0c:	1aad      	subeq	r5, r5, r2
 8002a0e:	68a3      	ldr	r3, [r4, #8]
 8002a10:	6922      	ldr	r2, [r4, #16]
 8002a12:	bf0c      	ite	eq
 8002a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a18:	2500      	movne	r5, #0
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	bfc4      	itt	gt
 8002a1e:	1a9b      	subgt	r3, r3, r2
 8002a20:	18ed      	addgt	r5, r5, r3
 8002a22:	2600      	movs	r6, #0
 8002a24:	341a      	adds	r4, #26
 8002a26:	42b5      	cmp	r5, r6
 8002a28:	d11a      	bne.n	8002a60 <_printf_common+0xc8>
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	e008      	b.n	8002a40 <_printf_common+0xa8>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	4652      	mov	r2, sl
 8002a32:	4649      	mov	r1, r9
 8002a34:	4638      	mov	r0, r7
 8002a36:	47c0      	blx	r8
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d103      	bne.n	8002a44 <_printf_common+0xac>
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a44:	3501      	adds	r5, #1
 8002a46:	e7c6      	b.n	80029d6 <_printf_common+0x3e>
 8002a48:	18e1      	adds	r1, r4, r3
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	2030      	movs	r0, #48	; 0x30
 8002a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a52:	4422      	add	r2, r4
 8002a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	e7c7      	b.n	80029f0 <_printf_common+0x58>
 8002a60:	2301      	movs	r3, #1
 8002a62:	4622      	mov	r2, r4
 8002a64:	4649      	mov	r1, r9
 8002a66:	4638      	mov	r0, r7
 8002a68:	47c0      	blx	r8
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d0e6      	beq.n	8002a3c <_printf_common+0xa4>
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7d9      	b.n	8002a26 <_printf_common+0x8e>
	...

08002a74 <_printf_i>:
 8002a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	460c      	mov	r4, r1
 8002a7a:	4691      	mov	r9, r2
 8002a7c:	7e27      	ldrb	r7, [r4, #24]
 8002a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a80:	2f78      	cmp	r7, #120	; 0x78
 8002a82:	4680      	mov	r8, r0
 8002a84:	469a      	mov	sl, r3
 8002a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a8a:	d807      	bhi.n	8002a9c <_printf_i+0x28>
 8002a8c:	2f62      	cmp	r7, #98	; 0x62
 8002a8e:	d80a      	bhi.n	8002aa6 <_printf_i+0x32>
 8002a90:	2f00      	cmp	r7, #0
 8002a92:	f000 80d8 	beq.w	8002c46 <_printf_i+0x1d2>
 8002a96:	2f58      	cmp	r7, #88	; 0x58
 8002a98:	f000 80a3 	beq.w	8002be2 <_printf_i+0x16e>
 8002a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002aa4:	e03a      	b.n	8002b1c <_printf_i+0xa8>
 8002aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aaa:	2b15      	cmp	r3, #21
 8002aac:	d8f6      	bhi.n	8002a9c <_printf_i+0x28>
 8002aae:	a001      	add	r0, pc, #4	; (adr r0, 8002ab4 <_printf_i+0x40>)
 8002ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ab4:	08002b0d 	.word	0x08002b0d
 8002ab8:	08002b21 	.word	0x08002b21
 8002abc:	08002a9d 	.word	0x08002a9d
 8002ac0:	08002a9d 	.word	0x08002a9d
 8002ac4:	08002a9d 	.word	0x08002a9d
 8002ac8:	08002a9d 	.word	0x08002a9d
 8002acc:	08002b21 	.word	0x08002b21
 8002ad0:	08002a9d 	.word	0x08002a9d
 8002ad4:	08002a9d 	.word	0x08002a9d
 8002ad8:	08002a9d 	.word	0x08002a9d
 8002adc:	08002a9d 	.word	0x08002a9d
 8002ae0:	08002c2d 	.word	0x08002c2d
 8002ae4:	08002b51 	.word	0x08002b51
 8002ae8:	08002c0f 	.word	0x08002c0f
 8002aec:	08002a9d 	.word	0x08002a9d
 8002af0:	08002a9d 	.word	0x08002a9d
 8002af4:	08002c4f 	.word	0x08002c4f
 8002af8:	08002a9d 	.word	0x08002a9d
 8002afc:	08002b51 	.word	0x08002b51
 8002b00:	08002a9d 	.word	0x08002a9d
 8002b04:	08002a9d 	.word	0x08002a9d
 8002b08:	08002c17 	.word	0x08002c17
 8002b0c:	680b      	ldr	r3, [r1, #0]
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	600a      	str	r2, [r1, #0]
 8002b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0a3      	b.n	8002c68 <_printf_i+0x1f4>
 8002b20:	6825      	ldr	r5, [r4, #0]
 8002b22:	6808      	ldr	r0, [r1, #0]
 8002b24:	062e      	lsls	r6, r5, #24
 8002b26:	f100 0304 	add.w	r3, r0, #4
 8002b2a:	d50a      	bpl.n	8002b42 <_printf_i+0xce>
 8002b2c:	6805      	ldr	r5, [r0, #0]
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	da03      	bge.n	8002b3c <_printf_i+0xc8>
 8002b34:	232d      	movs	r3, #45	; 0x2d
 8002b36:	426d      	negs	r5, r5
 8002b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b3c:	485e      	ldr	r0, [pc, #376]	; (8002cb8 <_printf_i+0x244>)
 8002b3e:	230a      	movs	r3, #10
 8002b40:	e019      	b.n	8002b76 <_printf_i+0x102>
 8002b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b46:	6805      	ldr	r5, [r0, #0]
 8002b48:	600b      	str	r3, [r1, #0]
 8002b4a:	bf18      	it	ne
 8002b4c:	b22d      	sxthne	r5, r5
 8002b4e:	e7ef      	b.n	8002b30 <_printf_i+0xbc>
 8002b50:	680b      	ldr	r3, [r1, #0]
 8002b52:	6825      	ldr	r5, [r4, #0]
 8002b54:	1d18      	adds	r0, r3, #4
 8002b56:	6008      	str	r0, [r1, #0]
 8002b58:	0628      	lsls	r0, r5, #24
 8002b5a:	d501      	bpl.n	8002b60 <_printf_i+0xec>
 8002b5c:	681d      	ldr	r5, [r3, #0]
 8002b5e:	e002      	b.n	8002b66 <_printf_i+0xf2>
 8002b60:	0669      	lsls	r1, r5, #25
 8002b62:	d5fb      	bpl.n	8002b5c <_printf_i+0xe8>
 8002b64:	881d      	ldrh	r5, [r3, #0]
 8002b66:	4854      	ldr	r0, [pc, #336]	; (8002cb8 <_printf_i+0x244>)
 8002b68:	2f6f      	cmp	r7, #111	; 0x6f
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2308      	moveq	r3, #8
 8002b6e:	230a      	movne	r3, #10
 8002b70:	2100      	movs	r1, #0
 8002b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b76:	6866      	ldr	r6, [r4, #4]
 8002b78:	60a6      	str	r6, [r4, #8]
 8002b7a:	2e00      	cmp	r6, #0
 8002b7c:	bfa2      	ittt	ge
 8002b7e:	6821      	ldrge	r1, [r4, #0]
 8002b80:	f021 0104 	bicge.w	r1, r1, #4
 8002b84:	6021      	strge	r1, [r4, #0]
 8002b86:	b90d      	cbnz	r5, 8002b8c <_printf_i+0x118>
 8002b88:	2e00      	cmp	r6, #0
 8002b8a:	d04d      	beq.n	8002c28 <_printf_i+0x1b4>
 8002b8c:	4616      	mov	r6, r2
 8002b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b92:	fb03 5711 	mls	r7, r3, r1, r5
 8002b96:	5dc7      	ldrb	r7, [r0, r7]
 8002b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b9c:	462f      	mov	r7, r5
 8002b9e:	42bb      	cmp	r3, r7
 8002ba0:	460d      	mov	r5, r1
 8002ba2:	d9f4      	bls.n	8002b8e <_printf_i+0x11a>
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d10b      	bne.n	8002bc0 <_printf_i+0x14c>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	07df      	lsls	r7, r3, #31
 8002bac:	d508      	bpl.n	8002bc0 <_printf_i+0x14c>
 8002bae:	6923      	ldr	r3, [r4, #16]
 8002bb0:	6861      	ldr	r1, [r4, #4]
 8002bb2:	4299      	cmp	r1, r3
 8002bb4:	bfde      	ittt	le
 8002bb6:	2330      	movle	r3, #48	; 0x30
 8002bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bc0:	1b92      	subs	r2, r2, r6
 8002bc2:	6122      	str	r2, [r4, #16]
 8002bc4:	f8cd a000 	str.w	sl, [sp]
 8002bc8:	464b      	mov	r3, r9
 8002bca:	aa03      	add	r2, sp, #12
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4640      	mov	r0, r8
 8002bd0:	f7ff fee2 	bl	8002998 <_printf_common>
 8002bd4:	3001      	adds	r0, #1
 8002bd6:	d14c      	bne.n	8002c72 <_printf_i+0x1fe>
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	b004      	add	sp, #16
 8002bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be2:	4835      	ldr	r0, [pc, #212]	; (8002cb8 <_printf_i+0x244>)
 8002be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	680e      	ldr	r6, [r1, #0]
 8002bec:	061f      	lsls	r7, r3, #24
 8002bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8002bf2:	600e      	str	r6, [r1, #0]
 8002bf4:	d514      	bpl.n	8002c20 <_printf_i+0x1ac>
 8002bf6:	07d9      	lsls	r1, r3, #31
 8002bf8:	bf44      	itt	mi
 8002bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8002bfe:	6023      	strmi	r3, [r4, #0]
 8002c00:	b91d      	cbnz	r5, 8002c0a <_printf_i+0x196>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f023 0320 	bic.w	r3, r3, #32
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	e7b0      	b.n	8002b70 <_printf_i+0xfc>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	2378      	movs	r3, #120	; 0x78
 8002c18:	4828      	ldr	r0, [pc, #160]	; (8002cbc <_printf_i+0x248>)
 8002c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c1e:	e7e3      	b.n	8002be8 <_printf_i+0x174>
 8002c20:	065e      	lsls	r6, r3, #25
 8002c22:	bf48      	it	mi
 8002c24:	b2ad      	uxthmi	r5, r5
 8002c26:	e7e6      	b.n	8002bf6 <_printf_i+0x182>
 8002c28:	4616      	mov	r6, r2
 8002c2a:	e7bb      	b.n	8002ba4 <_printf_i+0x130>
 8002c2c:	680b      	ldr	r3, [r1, #0]
 8002c2e:	6826      	ldr	r6, [r4, #0]
 8002c30:	6960      	ldr	r0, [r4, #20]
 8002c32:	1d1d      	adds	r5, r3, #4
 8002c34:	600d      	str	r5, [r1, #0]
 8002c36:	0635      	lsls	r5, r6, #24
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	d501      	bpl.n	8002c40 <_printf_i+0x1cc>
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	e002      	b.n	8002c46 <_printf_i+0x1d2>
 8002c40:	0671      	lsls	r1, r6, #25
 8002c42:	d5fb      	bpl.n	8002c3c <_printf_i+0x1c8>
 8002c44:	8018      	strh	r0, [r3, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	6123      	str	r3, [r4, #16]
 8002c4a:	4616      	mov	r6, r2
 8002c4c:	e7ba      	b.n	8002bc4 <_printf_i+0x150>
 8002c4e:	680b      	ldr	r3, [r1, #0]
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	600a      	str	r2, [r1, #0]
 8002c54:	681e      	ldr	r6, [r3, #0]
 8002c56:	6862      	ldr	r2, [r4, #4]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	f7fd faf0 	bl	8000240 <memchr>
 8002c60:	b108      	cbz	r0, 8002c66 <_printf_i+0x1f2>
 8002c62:	1b80      	subs	r0, r0, r6
 8002c64:	6060      	str	r0, [r4, #4]
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	6123      	str	r3, [r4, #16]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c70:	e7a8      	b.n	8002bc4 <_printf_i+0x150>
 8002c72:	6923      	ldr	r3, [r4, #16]
 8002c74:	4632      	mov	r2, r6
 8002c76:	4649      	mov	r1, r9
 8002c78:	4640      	mov	r0, r8
 8002c7a:	47d0      	blx	sl
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d0ab      	beq.n	8002bd8 <_printf_i+0x164>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	079b      	lsls	r3, r3, #30
 8002c84:	d413      	bmi.n	8002cae <_printf_i+0x23a>
 8002c86:	68e0      	ldr	r0, [r4, #12]
 8002c88:	9b03      	ldr	r3, [sp, #12]
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	bfb8      	it	lt
 8002c8e:	4618      	movlt	r0, r3
 8002c90:	e7a4      	b.n	8002bdc <_printf_i+0x168>
 8002c92:	2301      	movs	r3, #1
 8002c94:	4632      	mov	r2, r6
 8002c96:	4649      	mov	r1, r9
 8002c98:	4640      	mov	r0, r8
 8002c9a:	47d0      	blx	sl
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d09b      	beq.n	8002bd8 <_printf_i+0x164>
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	68e3      	ldr	r3, [r4, #12]
 8002ca4:	9903      	ldr	r1, [sp, #12]
 8002ca6:	1a5b      	subs	r3, r3, r1
 8002ca8:	42ab      	cmp	r3, r5
 8002caa:	dcf2      	bgt.n	8002c92 <_printf_i+0x21e>
 8002cac:	e7eb      	b.n	8002c86 <_printf_i+0x212>
 8002cae:	2500      	movs	r5, #0
 8002cb0:	f104 0619 	add.w	r6, r4, #25
 8002cb4:	e7f5      	b.n	8002ca2 <_printf_i+0x22e>
 8002cb6:	bf00      	nop
 8002cb8:	0800328d 	.word	0x0800328d
 8002cbc:	0800329e 	.word	0x0800329e

08002cc0 <_putc_r>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	460d      	mov	r5, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	b118      	cbz	r0, 8002cd2 <_putc_r+0x12>
 8002cca:	6983      	ldr	r3, [r0, #24]
 8002ccc:	b90b      	cbnz	r3, 8002cd2 <_putc_r+0x12>
 8002cce:	f7ff f93d 	bl	8001f4c <__sinit>
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <_putc_r+0x84>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	d124      	bne.n	8002d22 <_putc_r+0x62>
 8002cd8:	6874      	ldr	r4, [r6, #4]
 8002cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cdc:	07d8      	lsls	r0, r3, #31
 8002cde:	d405      	bmi.n	8002cec <_putc_r+0x2c>
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	0599      	lsls	r1, r3, #22
 8002ce4:	d402      	bmi.n	8002cec <_putc_r+0x2c>
 8002ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ce8:	f7ff fa21 	bl	800212e <__retarget_lock_acquire_recursive>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	60a3      	str	r3, [r4, #8]
 8002cf4:	da05      	bge.n	8002d02 <_putc_r+0x42>
 8002cf6:	69a2      	ldr	r2, [r4, #24]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	db1c      	blt.n	8002d36 <_putc_r+0x76>
 8002cfc:	b2eb      	uxtb	r3, r5
 8002cfe:	2b0a      	cmp	r3, #10
 8002d00:	d019      	beq.n	8002d36 <_putc_r+0x76>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	701d      	strb	r5, [r3, #0]
 8002d0a:	b2ed      	uxtb	r5, r5
 8002d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d0e:	07da      	lsls	r2, r3, #31
 8002d10:	d405      	bmi.n	8002d1e <_putc_r+0x5e>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	059b      	lsls	r3, r3, #22
 8002d16:	d402      	bmi.n	8002d1e <_putc_r+0x5e>
 8002d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d1a:	f7ff fa09 	bl	8002130 <__retarget_lock_release_recursive>
 8002d1e:	4628      	mov	r0, r5
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <_putc_r+0x88>)
 8002d24:	429c      	cmp	r4, r3
 8002d26:	d101      	bne.n	8002d2c <_putc_r+0x6c>
 8002d28:	68b4      	ldr	r4, [r6, #8]
 8002d2a:	e7d6      	b.n	8002cda <_putc_r+0x1a>
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <_putc_r+0x8c>)
 8002d2e:	429c      	cmp	r4, r3
 8002d30:	bf08      	it	eq
 8002d32:	68f4      	ldreq	r4, [r6, #12]
 8002d34:	e7d1      	b.n	8002cda <_putc_r+0x1a>
 8002d36:	4629      	mov	r1, r5
 8002d38:	4622      	mov	r2, r4
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff fb2e 	bl	800239c <__swbuf_r>
 8002d40:	4605      	mov	r5, r0
 8002d42:	e7e3      	b.n	8002d0c <_putc_r+0x4c>
 8002d44:	08003238 	.word	0x08003238
 8002d48:	08003258 	.word	0x08003258
 8002d4c:	08003218 	.word	0x08003218

08002d50 <_read_r>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4d07      	ldr	r5, [pc, #28]	; (8002d70 <_read_r+0x20>)
 8002d54:	4604      	mov	r4, r0
 8002d56:	4608      	mov	r0, r1
 8002d58:	4611      	mov	r1, r2
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	602a      	str	r2, [r5, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f7fd fe5c 	bl	8000a1c <_read>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_read_r+0x1e>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_read_r+0x1e>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	200001a8 	.word	0x200001a8

08002d74 <__srget_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	460c      	mov	r4, r1
 8002d78:	4605      	mov	r5, r0
 8002d7a:	b118      	cbz	r0, 8002d84 <__srget_r+0x10>
 8002d7c:	6983      	ldr	r3, [r0, #24]
 8002d7e:	b90b      	cbnz	r3, 8002d84 <__srget_r+0x10>
 8002d80:	f7ff f8e4 	bl	8001f4c <__sinit>
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <__srget_r+0x4c>)
 8002d86:	429c      	cmp	r4, r3
 8002d88:	d10d      	bne.n	8002da6 <__srget_r+0x32>
 8002d8a:	686c      	ldr	r4, [r5, #4]
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f000 f848 	bl	8002e24 <__srefill_r>
 8002d94:	b988      	cbnz	r0, 8002dba <__srget_r+0x46>
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	6063      	str	r3, [r4, #4]
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	6022      	str	r2, [r4, #0]
 8002da2:	7818      	ldrb	r0, [r3, #0]
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <__srget_r+0x50>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	d101      	bne.n	8002db0 <__srget_r+0x3c>
 8002dac:	68ac      	ldr	r4, [r5, #8]
 8002dae:	e7ed      	b.n	8002d8c <__srget_r+0x18>
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <__srget_r+0x54>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	bf08      	it	eq
 8002db6:	68ec      	ldreq	r4, [r5, #12]
 8002db8:	e7e8      	b.n	8002d8c <__srget_r+0x18>
 8002dba:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbe:	e7f1      	b.n	8002da4 <__srget_r+0x30>
 8002dc0:	08003238 	.word	0x08003238
 8002dc4:	08003258 	.word	0x08003258
 8002dc8:	08003218 	.word	0x08003218

08002dcc <_fstat_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4d07      	ldr	r5, [pc, #28]	; (8002dec <_fstat_r+0x20>)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	602b      	str	r3, [r5, #0]
 8002dda:	f000 f8b5 	bl	8002f48 <_fstat>
 8002dde:	1c43      	adds	r3, r0, #1
 8002de0:	d102      	bne.n	8002de8 <_fstat_r+0x1c>
 8002de2:	682b      	ldr	r3, [r5, #0]
 8002de4:	b103      	cbz	r3, 8002de8 <_fstat_r+0x1c>
 8002de6:	6023      	str	r3, [r4, #0]
 8002de8:	bd38      	pop	{r3, r4, r5, pc}
 8002dea:	bf00      	nop
 8002dec:	200001a8 	.word	0x200001a8

08002df0 <_isatty_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	4d06      	ldr	r5, [pc, #24]	; (8002e0c <_isatty_r+0x1c>)
 8002df4:	2300      	movs	r3, #0
 8002df6:	4604      	mov	r4, r0
 8002df8:	4608      	mov	r0, r1
 8002dfa:	602b      	str	r3, [r5, #0]
 8002dfc:	f000 f8ac 	bl	8002f58 <_isatty>
 8002e00:	1c43      	adds	r3, r0, #1
 8002e02:	d102      	bne.n	8002e0a <_isatty_r+0x1a>
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	b103      	cbz	r3, 8002e0a <_isatty_r+0x1a>
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	bd38      	pop	{r3, r4, r5, pc}
 8002e0c:	200001a8 	.word	0x200001a8

08002e10 <lflush>:
 8002e10:	8983      	ldrh	r3, [r0, #12]
 8002e12:	f003 0309 	and.w	r3, r3, #9
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d101      	bne.n	8002e1e <lflush+0xe>
 8002e1a:	f7ff b82d 	b.w	8001e78 <fflush>
 8002e1e:	2000      	movs	r0, #0
 8002e20:	4770      	bx	lr
	...

08002e24 <__srefill_r>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	460c      	mov	r4, r1
 8002e28:	4605      	mov	r5, r0
 8002e2a:	b118      	cbz	r0, 8002e34 <__srefill_r+0x10>
 8002e2c:	6983      	ldr	r3, [r0, #24]
 8002e2e:	b90b      	cbnz	r3, 8002e34 <__srefill_r+0x10>
 8002e30:	f7ff f88c 	bl	8001f4c <__sinit>
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <__srefill_r+0x100>)
 8002e36:	429c      	cmp	r4, r3
 8002e38:	d10a      	bne.n	8002e50 <__srefill_r+0x2c>
 8002e3a:	686c      	ldr	r4, [r5, #4]
 8002e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e40:	2300      	movs	r3, #0
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	069e      	lsls	r6, r3, #26
 8002e48:	d50c      	bpl.n	8002e64 <__srefill_r+0x40>
 8002e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4e:	e066      	b.n	8002f1e <__srefill_r+0xfa>
 8002e50:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <__srefill_r+0x104>)
 8002e52:	429c      	cmp	r4, r3
 8002e54:	d101      	bne.n	8002e5a <__srefill_r+0x36>
 8002e56:	68ac      	ldr	r4, [r5, #8]
 8002e58:	e7f0      	b.n	8002e3c <__srefill_r+0x18>
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <__srefill_r+0x108>)
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	bf08      	it	eq
 8002e60:	68ec      	ldreq	r4, [r5, #12]
 8002e62:	e7eb      	b.n	8002e3c <__srefill_r+0x18>
 8002e64:	0758      	lsls	r0, r3, #29
 8002e66:	d448      	bmi.n	8002efa <__srefill_r+0xd6>
 8002e68:	06d9      	lsls	r1, r3, #27
 8002e6a:	d405      	bmi.n	8002e78 <__srefill_r+0x54>
 8002e6c:	2309      	movs	r3, #9
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e74:	81a3      	strh	r3, [r4, #12]
 8002e76:	e7e8      	b.n	8002e4a <__srefill_r+0x26>
 8002e78:	071a      	lsls	r2, r3, #28
 8002e7a:	d50b      	bpl.n	8002e94 <__srefill_r+0x70>
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f7fe ffbe 	bl	8001e00 <_fflush_r>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d1e0      	bne.n	8002e4a <__srefill_r+0x26>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	60a0      	str	r0, [r4, #8]
 8002e8c:	f023 0308 	bic.w	r3, r3, #8
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	61a0      	str	r0, [r4, #24]
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	6923      	ldr	r3, [r4, #16]
 8002e9e:	b91b      	cbnz	r3, 8002ea8 <__srefill_r+0x84>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f7ff fbd2 	bl	800264c <__smakebuf_r>
 8002ea8:	89a6      	ldrh	r6, [r4, #12]
 8002eaa:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002eae:	07b3      	lsls	r3, r6, #30
 8002eb0:	d00f      	beq.n	8002ed2 <__srefill_r+0xae>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <__srefill_r+0x10c>)
 8002eb8:	491e      	ldr	r1, [pc, #120]	; (8002f34 <__srefill_r+0x110>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f006 0609 	and.w	r6, r6, #9
 8002ec0:	f7ff f8c2 	bl	8002048 <_fwalk>
 8002ec4:	2e09      	cmp	r6, #9
 8002ec6:	81a7      	strh	r7, [r4, #12]
 8002ec8:	d103      	bne.n	8002ed2 <__srefill_r+0xae>
 8002eca:	4621      	mov	r1, r4
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7fe ff11 	bl	8001cf4 <__sflush_r>
 8002ed2:	6922      	ldr	r2, [r4, #16]
 8002ed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ed6:	6963      	ldr	r3, [r4, #20]
 8002ed8:	6a21      	ldr	r1, [r4, #32]
 8002eda:	6022      	str	r2, [r4, #0]
 8002edc:	4628      	mov	r0, r5
 8002ede:	47b0      	blx	r6
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	6060      	str	r0, [r4, #4]
 8002ee4:	dc1c      	bgt.n	8002f20 <__srefill_r+0xfc>
 8002ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eea:	bf17      	itett	ne
 8002eec:	2200      	movne	r2, #0
 8002eee:	f043 0320 	orreq.w	r3, r3, #32
 8002ef2:	6062      	strne	r2, [r4, #4]
 8002ef4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002ef8:	e7bc      	b.n	8002e74 <__srefill_r+0x50>
 8002efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002efc:	2900      	cmp	r1, #0
 8002efe:	d0cd      	beq.n	8002e9c <__srefill_r+0x78>
 8002f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d002      	beq.n	8002f0e <__srefill_r+0xea>
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f7ff f91b 	bl	8002144 <_free_r>
 8002f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f10:	6063      	str	r3, [r4, #4]
 8002f12:	2000      	movs	r0, #0
 8002f14:	6360      	str	r0, [r4, #52]	; 0x34
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0c0      	beq.n	8002e9c <__srefill_r+0x78>
 8002f1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f20:	2000      	movs	r0, #0
 8002f22:	e7fc      	b.n	8002f1e <__srefill_r+0xfa>
 8002f24:	08003238 	.word	0x08003238
 8002f28:	08003258 	.word	0x08003258
 8002f2c:	08003218 	.word	0x08003218
 8002f30:	08003278 	.word	0x08003278
 8002f34:	08002e11 	.word	0x08002e11

08002f38 <_close>:
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <_close+0xc>)
 8002f3a:	2258      	movs	r2, #88	; 0x58
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f42:	4770      	bx	lr
 8002f44:	200001a8 	.word	0x200001a8

08002f48 <_fstat>:
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <_fstat+0xc>)
 8002f4a:	2258      	movs	r2, #88	; 0x58
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f52:	4770      	bx	lr
 8002f54:	200001a8 	.word	0x200001a8

08002f58 <_isatty>:
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <_isatty+0xc>)
 8002f5a:	2258      	movs	r2, #88	; 0x58
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	2000      	movs	r0, #0
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	200001a8 	.word	0x200001a8

08002f68 <_lseek>:
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <_lseek+0xc>)
 8002f6a:	2258      	movs	r2, #88	; 0x58
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	4770      	bx	lr
 8002f74:	200001a8 	.word	0x200001a8

08002f78 <_sbrk>:
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <_sbrk+0x14>)
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	b909      	cbnz	r1, 8002f84 <_sbrk+0xc>
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <_sbrk+0x18>)
 8002f82:	6019      	str	r1, [r3, #0]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	4402      	add	r2, r0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	4770      	bx	lr
 8002f8c:	20000094 	.word	0x20000094
 8002f90:	200001b0 	.word	0x200001b0

08002f94 <_init>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr

08002fa0 <_fini>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr
